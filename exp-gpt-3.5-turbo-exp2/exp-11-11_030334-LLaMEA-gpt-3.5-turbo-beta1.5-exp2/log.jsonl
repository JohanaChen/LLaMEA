{"id": "ede3cb2d-0943-4415-95aa-c2a511a91ded", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim),\n                                    self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            self.bandwidth *= self.pitch_adjust_rate\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "DynamicHarmonySearch", "description": "A novel metaheuristic algorithm based on the harmony search technique with adaptive pitch adjustment and dynamic bandwidth for solving black box optimization problems efficiently.", "configspace": "", "generation": 0, "fitness": 0.03709830001777232, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": null, "metadata": {"aucs": [0.07217633645453747, 0.06421970827129009, 0.09189347168570128, 0.08951585083377844, 0.061983252047273174, 0.07714850673269902, 0.07796733442257753, 0.07425001435255985, 0.06710127895309181, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014631465463479487, 9.999999999998899e-05, 0.011430455688432262, 0.0012076852909158609, 0.006679615511853587, 0.03428872308281228, 9.999999999998899e-05, 0.011315473440230428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019498327952899075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04518587944698216, 0.0335519571679328, 0.042852566024174976, 0.05336698911079507, 0.04669790720589839, 0.03759436355488377, 0.0639321063149555, 0.048721486768526834, 0.03934248733228196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003808118836557961, 9.999999999998899e-05, 9.999999999998899e-05, 0.011263305278808033, 9.999999999998899e-05, 0.0998849108824077, 0.03777600304068818, 0.0064855555677683085, 0.004559986485704992, 0.027298490065958636, 9.999999999998899e-05, 0.026266211337679812, 0.05938174543309016, 0.009882953810107398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1087562655470703, 0.11130441899157106, 0.14944523517294528, 0.0942235414960636, 0.0970087903268152, 0.09572980171813616, 0.12404451160264252, 0.09708294422376218, 0.12103409311552316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101983810538503, 9.999999999998899e-05, 0.017510629508585396, 9.999999999998899e-05, 9.999999999998899e-05, 0.026761003753819068, 0.07034745661310993, 0.06720364525194944, 0.06100874030427461, 0.10754968676730714, 0.10837290089581453, 0.05642120203669532, 0.08819627379864137, 0.06766970635844738, 0.07820795100917499, 0.09602021428108254, 0.09735737024115265, 0.1035828177864021, 0.10844034690765492, 0.0926365454148439, 0.09314140259953729, 0.11416705353757972, 0.17421550887856174, 0.07782315815569996, 0.03331686131277334, 0.03401140365936717, 0.04581195899257251, 0.044620925063920236, 0.07032474150298162, 0.0463170186516394, 0.056436496373517, 0.09393312516415975, 0.034600111787337795, 0.09193950029943732, 0.06588728872655025, 0.1334950678532668, 0.1394305669813286, 0.07970270566222704, 0.1132034472800455, 0.1483134509073588, 0.06515288692405263, 0.12618399025651839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055690767230637706, 0.07468375502970737, 0.08169917397145454, 0.06749315816832624, 0.12062580878887197, 0.06663518602283258, 0.07247652026487417, 0.09759374417712519, 0.05366464727683229, 0.038222962056154164, 0.0652666553163832, 0.02052823178861618, 0.05071071480847367, 0.03734415405364633, 0.045504767890899855, 0.046802424364615014, 0.028620979497890997, 0.041418220046157694, 0.13483182555395723, 0.12833932770071443, 0.14763130438610061, 0.12672620189952777, 0.12934738009563296, 0.12459530432444244, 0.12847059847243714, 0.11931117786187262, 0.14685504641347558, 0.0038168063185034518, 0.013444158278108298, 0.03137540984739895, 0.02700735896349049, 0.019465000879046235, 0.008624235714785766, 0.027394281807323728, 9.999999999998899e-05, 0.01743555016761733]}, "mutation_prompt": null}
{"id": "74b67717-ba03-4e33-889c-c5c3905ab9dc", "solution": "import numpy as np\n\nclass EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            self.bandwidth *= self.pitch_adjust_rate\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Enhanced DynamicHarmonySearch algorithm with improved local search mechanism for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.037274294575538575, "feedback": "The algorithm EnhancedDynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "ede3cb2d-0943-4415-95aa-c2a511a91ded", "metadata": {"aucs": [0.07207996757719415, 0.06432420219480173, 0.09177653461360591, 0.08959999350890979, 0.062103896706164785, 0.07714850527119466, 0.07794710241435154, 0.07428102161806127, 0.0670432279053974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0146150280682672, 9.999999999998899e-05, 0.010636933881183142, 0.0012348661311846199, 0.006671970510569003, 0.03428872308283881, 9.999999999998899e-05, 0.010781772544418144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019590990123363516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045185879447079746, 0.033656744567721386, 0.04278467172409417, 0.05335711550354716, 0.04683801878733351, 0.03743651671904258, 0.06391501618558937, 0.04892845185764416, 0.03921286538274649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031466998175733174, 9.999999999998899e-05, 9.999999999998899e-05, 0.011238485401752762, 9.999999999998899e-05, 0.10015880728018767, 0.04022080617026347, 0.0064855555677683085, 0.004555523375041615, 0.027298490065958636, 9.999999999998899e-05, 0.026247387848711834, 0.05932835983083895, 0.009869461986070971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02297990307349773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10876448508232206, 0.11134819198393253, 0.14828415354501945, 0.09427902376515374, 0.09731529432325992, 0.09574551713729429, 0.12403953929323974, 0.0971011586567383, 0.12232370881307397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006103571878969483, 9.999999999998899e-05, 0.01760517877394996, 9.999999999998899e-05, 9.999999999998899e-05, 0.026763943611306296, 0.0702245559926199, 0.06788737423042457, 0.06074357131065622, 0.1075496725467947, 0.11333545453234561, 0.05710737720858872, 0.09122928313924294, 0.06768628018842393, 0.07705702768803169, 0.09604735551519539, 0.09854255785418409, 0.10360197441633023, 0.10845117821265216, 0.10398957002910725, 0.09313531285834165, 0.11851855470462547, 0.17382120685953395, 0.07784063216282788, 0.033349953102213115, 0.03400882766465019, 0.04581195865914345, 0.04463336256459349, 0.07229614327033418, 0.05616383936424696, 0.06185334639465179, 0.09525668226286543, 0.0370560829952461, 0.09698539641113624, 0.07100721671856058, 0.1334662875857261, 0.11241185829761746, 0.09250301262404614, 0.11204110242544829, 0.12231536539618049, 0.06517317304254644, 0.12614324161026402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055685671677162873, 0.07464504330302879, 0.08169917397186877, 0.06723768115118345, 0.12008323913139862, 0.06662183374194597, 0.07246531594122463, 0.10234986361448051, 0.053674153224895105, 0.03818962665758441, 0.06529253724837325, 0.020823730878115954, 0.05080935505285711, 0.03886864960651515, 0.045438367195378304, 0.0468187785224381, 0.028610621044823703, 0.041421232916114215, 0.1348104836429691, 0.12838709730035702, 0.1480135020246407, 0.12289094776723164, 0.12652152382081316, 0.12458439502541674, 0.12842381221797372, 0.11491398223025284, 0.14692639714802158, 0.0049790255521664495, 0.014680491087800007, 0.03351300948775482, 0.030312926536197993, 0.02845947772594004, 0.010984143167060534, 0.011130494124519275, 9.999999999998899e-05, 0.01822402096601905]}, "mutation_prompt": null}
{"id": "168402ee-892b-48e1-a830-62ca4ebc2590", "solution": "import numpy as np\n\nclass EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            self.bandwidth *= self.pitch_adjust_rate\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Enhanced DynamicHarmonySearch algorithm with improved local search mechanism for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "74b67717-ba03-4e33-889c-c5c3905ab9dc", "metadata": {"aucs": [0.07207996757719415, 0.06432420219480173, 0.09177653461360591, 0.08959999350890979, 0.062103896706164785, 0.07714850527119466, 0.07794710241435154, 0.07428102161806127, 0.0670432279053974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0146150280682672, 9.999999999998899e-05, 0.010636933881183142, 0.0012348661311846199, 0.006671970510569003, 0.03428872308283881, 9.999999999998899e-05, 0.010781772544418144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019590990123363516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045185879447079746, 0.033656744567721386, 0.04278467172409417, 0.05335711550354716, 0.04683801878733351, 0.03743651671904258, 0.06391501618558937, 0.04892845185764416, 0.03921286538274649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031466998175733174, 9.999999999998899e-05, 9.999999999998899e-05, 0.011238485401752762, 9.999999999998899e-05, 0.10015880728018767, 0.04022080617026347, 0.0064855555677683085, 0.004555523375041615, 0.027298490065958636, 9.999999999998899e-05, 0.026247387848711834, 0.05932835983083895, 0.009869461986070971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02297990307349773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10876448508232206, 0.11134819198393253, 0.14828415354501945, 0.09427902376515374, 0.09731529432325992, 0.09574551713729429, 0.12403953929323974, 0.0971011586567383, 0.12232370881307397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006103571878969483, 9.999999999998899e-05, 0.01760517877394996, 9.999999999998899e-05, 9.999999999998899e-05, 0.026763943611306296, 0.0702245559926199, 0.06788737423042457, 0.06074357131065622, 0.1075496725467947, 0.11333545453234561, 0.05710737720858872, 0.09122928313924294, 0.06768628018842393, 0.07705702768803169, 0.09604735551519539, 0.09854255785418409, 0.10360197441633023, 0.10845117821265216, 0.10398957002910725, 0.09313531285834165, 0.11851855470462547, 0.17382120685953395, 0.07784063216282788, 0.033349953102213115, 0.03400882766465019, 0.04581195865914345, 0.04463336256459349, 0.07229614327033418, 0.05616383936424696, 0.06185334639465179, 0.09525668226286543, 0.0370560829952461, 0.09698539641113624, 0.07100721671856058, 0.1334662875857261, 0.11241185829761746, 0.09250301262404614, 0.11204110242544829, 0.12231536539618049, 0.06517317304254644, 0.12614324161026402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055685671677162873, 0.07464504330302879, 0.08169917397186877, 0.06723768115118345, 0.12008323913139862, 0.06662183374194597, 0.07246531594122463, 0.10234986361448051, 0.053674153224895105, 0.03818962665758441, 0.06529253724837325, 0.020823730878115954, 0.05080935505285711, 0.03886864960651515, 0.045438367195378304, 0.0468187785224381, 0.028610621044823703, 0.041421232916114215, 0.1348104836429691, 0.12838709730035702, 0.1480135020246407, 0.12289094776723164, 0.12652152382081316, 0.12458439502541674, 0.12842381221797372, 0.11491398223025284, 0.14692639714802158, 0.0049790255521664495, 0.014680491087800007, 0.03351300948775482, 0.030312926536197993, 0.02845947772594004, 0.010984143167060534, 0.011130494124519275, 9.999999999998899e-05, 0.01822402096601905]}, "mutation_prompt": null}
{"id": "50c59f30-ea09-4b90-a830-06ade0a1fc06", "solution": "import numpy as np\n\nclass EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            self.bandwidth *= self.pitch_adjust_rate\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Enhanced DynamicHarmonySearch algorithm with improved local search mechanism for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "74b67717-ba03-4e33-889c-c5c3905ab9dc", "metadata": {"aucs": [0.07207996757719415, 0.06432420219480173, 0.09177653461360591, 0.08959999350890979, 0.062103896706164785, 0.07714850527119466, 0.07794710241435154, 0.07428102161806127, 0.0670432279053974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0146150280682672, 9.999999999998899e-05, 0.010636933881183142, 0.0012348661311846199, 0.006671970510569003, 0.03428872308283881, 9.999999999998899e-05, 0.010781772544418144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019590990123363516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045185879447079746, 0.033656744567721386, 0.04278467172409417, 0.05335711550354716, 0.04683801878733351, 0.03743651671904258, 0.06391501618558937, 0.04892845185764416, 0.03921286538274649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031466998175733174, 9.999999999998899e-05, 9.999999999998899e-05, 0.011238485401752762, 9.999999999998899e-05, 0.10015880728018767, 0.04022080617026347, 0.0064855555677683085, 0.004555523375041615, 0.027298490065958636, 9.999999999998899e-05, 0.026247387848711834, 0.05932835983083895, 0.009869461986070971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02297990307349773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10876448508232206, 0.11134819198393253, 0.14828415354501945, 0.09427902376515374, 0.09731529432325992, 0.09574551713729429, 0.12403953929323974, 0.0971011586567383, 0.12232370881307397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006103571878969483, 9.999999999998899e-05, 0.01760517877394996, 9.999999999998899e-05, 9.999999999998899e-05, 0.026763943611306296, 0.0702245559926199, 0.06788737423042457, 0.06074357131065622, 0.1075496725467947, 0.11333545453234561, 0.05710737720858872, 0.09122928313924294, 0.06768628018842393, 0.07705702768803169, 0.09604735551519539, 0.09854255785418409, 0.10360197441633023, 0.10845117821265216, 0.10398957002910725, 0.09313531285834165, 0.11851855470462547, 0.17382120685953395, 0.07784063216282788, 0.033349953102213115, 0.03400882766465019, 0.04581195865914345, 0.04463336256459349, 0.07229614327033418, 0.05616383936424696, 0.06185334639465179, 0.09525668226286543, 0.0370560829952461, 0.09698539641113624, 0.07100721671856058, 0.1334662875857261, 0.11241185829761746, 0.09250301262404614, 0.11204110242544829, 0.12231536539618049, 0.06517317304254644, 0.12614324161026402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055685671677162873, 0.07464504330302879, 0.08169917397186877, 0.06723768115118345, 0.12008323913139862, 0.06662183374194597, 0.07246531594122463, 0.10234986361448051, 0.053674153224895105, 0.03818962665758441, 0.06529253724837325, 0.020823730878115954, 0.05080935505285711, 0.03886864960651515, 0.045438367195378304, 0.0468187785224381, 0.028610621044823703, 0.041421232916114215, 0.1348104836429691, 0.12838709730035702, 0.1480135020246407, 0.12289094776723164, 0.12652152382081316, 0.12458439502541674, 0.12842381221797372, 0.11491398223025284, 0.14692639714802158, 0.0049790255521664495, 0.014680491087800007, 0.03351300948775482, 0.030312926536197993, 0.02845947772594004, 0.010984143167060534, 0.011130494124519275, 9.999999999998899e-05, 0.01822402096601905]}, "mutation_prompt": null}
{"id": "78509a43-2ace-46fe-83f0-90dab4795234", "solution": "import numpy as np\n\nclass EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            self.bandwidth *= self.pitch_adjust_rate\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Enhanced DynamicHarmonySearch algorithm with improved local search mechanism for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "74b67717-ba03-4e33-889c-c5c3905ab9dc", "metadata": {"aucs": [0.07207996757719415, 0.06432420219480173, 0.09177653461360591, 0.08959999350890979, 0.062103896706164785, 0.07714850527119466, 0.07794710241435154, 0.07428102161806127, 0.0670432279053974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0146150280682672, 9.999999999998899e-05, 0.010636933881183142, 0.0012348661311846199, 0.006671970510569003, 0.03428872308283881, 9.999999999998899e-05, 0.010781772544418144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019590990123363516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045185879447079746, 0.033656744567721386, 0.04278467172409417, 0.05335711550354716, 0.04683801878733351, 0.03743651671904258, 0.06391501618558937, 0.04892845185764416, 0.03921286538274649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031466998175733174, 9.999999999998899e-05, 9.999999999998899e-05, 0.011238485401752762, 9.999999999998899e-05, 0.10015880728018767, 0.04022080617026347, 0.0064855555677683085, 0.004555523375041615, 0.027298490065958636, 9.999999999998899e-05, 0.026247387848711834, 0.05932835983083895, 0.009869461986070971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02297990307349773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10876448508232206, 0.11134819198393253, 0.14828415354501945, 0.09427902376515374, 0.09731529432325992, 0.09574551713729429, 0.12403953929323974, 0.0971011586567383, 0.12232370881307397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006103571878969483, 9.999999999998899e-05, 0.01760517877394996, 9.999999999998899e-05, 9.999999999998899e-05, 0.026763943611306296, 0.0702245559926199, 0.06788737423042457, 0.06074357131065622, 0.1075496725467947, 0.11333545453234561, 0.05710737720858872, 0.09122928313924294, 0.06768628018842393, 0.07705702768803169, 0.09604735551519539, 0.09854255785418409, 0.10360197441633023, 0.10845117821265216, 0.10398957002910725, 0.09313531285834165, 0.11851855470462547, 0.17382120685953395, 0.07784063216282788, 0.033349953102213115, 0.03400882766465019, 0.04581195865914345, 0.04463336256459349, 0.07229614327033418, 0.05616383936424696, 0.06185334639465179, 0.09525668226286543, 0.0370560829952461, 0.09698539641113624, 0.07100721671856058, 0.1334662875857261, 0.11241185829761746, 0.09250301262404614, 0.11204110242544829, 0.12231536539618049, 0.06517317304254644, 0.12614324161026402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055685671677162873, 0.07464504330302879, 0.08169917397186877, 0.06723768115118345, 0.12008323913139862, 0.06662183374194597, 0.07246531594122463, 0.10234986361448051, 0.053674153224895105, 0.03818962665758441, 0.06529253724837325, 0.020823730878115954, 0.05080935505285711, 0.03886864960651515, 0.045438367195378304, 0.0468187785224381, 0.028610621044823703, 0.041421232916114215, 0.1348104836429691, 0.12838709730035702, 0.1480135020246407, 0.12289094776723164, 0.12652152382081316, 0.12458439502541674, 0.12842381221797372, 0.11491398223025284, 0.14692639714802158, 0.0049790255521664495, 0.014680491087800007, 0.03351300948775482, 0.030312926536197993, 0.02845947772594004, 0.010984143167060534, 0.011130494124519275, 9.999999999998899e-05, 0.01822402096601905]}, "mutation_prompt": null}
{"id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 5, "fitness": 0.1072452306243407, "feedback": "The algorithm EnhancedDynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "74b67717-ba03-4e33-889c-c5c3905ab9dc", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "e428ffd5-0a85-4617-b114-c6395845f87a", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "077194e8-9ff3-452a-8202-76230ab015ef", "solution": "class FasterDynamicHarmonySearch(EnhancedDynamicHarmonySearch):\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        threshold = 0.1 * (1 - self.bandwidth / self.initial_bandwidth)  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = max(self.initial_bandwidth, self.bandwidth - threshold)  # Modified line\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "FasterDynamicHarmonySearch", "description": "Introducing a novel adaptive bandwidth adjustment based on a dynamic threshold for more precise control over exploration and exploitation balance, enhancing convergence speed.", "configspace": "", "generation": 7, "fitness": 0.1072452306243407, "feedback": "The algorithm FasterDynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "d90c816c-5fa4-4a18-a879-7d61477a7901", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "9ff70af5-1baa-4ccc-a0bf-d34df8ef5282", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "f038d287-8321-4702-bc9a-e7298f3378d9", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "5193b036-6346-42df-811f-8d1083c1424d", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "b67d7254-7486-49a8-9aad-cc1e2aa695b0", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "0ec0afe8-3803-4c11-b5fd-aa325e37ac12", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "958b688e-692d-42b3-899c-8147505d229f", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "7272923e-5db5-4645-959e-695ee4ffcee6", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "b8ad334e-3992-47b8-b604-327b15181b14", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "fb56287d-8c9a-4248-b89a-b2fb788ef877", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "43fee00f-663f-47eb-8554-a12e83972f2e", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "c81e69c0-6c6a-4448-bb59-5fbcd35217a6", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "75139e57-680e-4ef6-9224-70f957e37bca", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "0c102ccc-96a3-4a78-bbf2-087dd61e0d18", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "809c4e58-430f-4b18-9d36-e6dd89ecb2a4", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "2b08cfd2-871b-426b-805e-b1a2e743317e", "solution": "def dynamic_local_search_rate(fitness_history, local_search_rate, max_rate=0.5, min_rate=0.1, rate_change=0.05):\n    if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n        local_search_rate = max(min_rate, local_search_rate - rate_change)\n    else:\n        local_search_rate = min(max_rate, local_search_rate + rate_change)\n    return local_search_rate\n\nclass EnhancedDynamicHarmonySearchFasterConvergence(EnhancedDynamicHarmonySearch):\n    def __call__(self, func):\n        # Existing code remains the same\n        \n        for _ in range(self.budget):\n            # Existing code remains the same\n            \n            self.local_search_rate = dynamic_local_search_rate(fitness_history, self.local_search_rate)  # New line\n        \n        return best_solution", "name": "EnhancedDynamicHarmonySearchFasterConvergence", "description": "Introduce a mechanism to dynamically adjust the local search rate based on the fitness improvement history to enhance exploration and exploitation balance for accelerated convergence.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'fitness_history' is not defined\").", "error": "NameError(\"name 'fitness_history' is not defined\")", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {}, "mutation_prompt": null}
{"id": "159f2669-ba98-4f7a-8268-136774e00ee6", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "cdcd9c3a-4e03-44fd-85e5-e7a826207222", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1  # New line\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)  # New line\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:  # New block\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement history to dynamically adjust exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.34034784944220353, 0.3388965808718061, 0.4128202435524895, 0.39969261998273753, 0.31651339944566814, 0.40640845367658673, 0.3766947317276159, 0.3467852335764863, 0.3502271754986337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046535765178812305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010477890745813956, 0.03230839150890674, 9.999999999998899e-05, 0.0232923521823164, 0.024689558065410844, 0.034249712630478046, 0.04118905797456951, 0.003867292224602914, 0.06679920416720453, 0.014092135608881451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06117573030984891, 0.025983484509442656, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906471988730508, 9.999999999998899e-05, 0.0965966552372447, 0.05681517608607278, 0.09522202793036105, 0.07998325980983367, 0.0781314813839239, 0.07220336560845586, 0.10550448706311566, 0.08438800774169286, 0.08114975718191986, 0.07166899504233482, 0.060516030920731434, 0.1244497790975484, 0.1109650024162373, 0.16060199698722555, 0.11333770409295574, 0.1846208545050626, 0.0930124593036471, 0.044952926647488844, 0.1574718963065086, 0.12227888866363412, 0.038347405666385614, 0.04953665761143056, 0.04031867348103568, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.195647583775303, 0.12039844457464821, 0.1295199253066347, 9.999999999998899e-05, 0.030135354135246928, 0.10652221940420992, 0.008764361955418964, 0.11654359206401699, 0.07055883070382274, 0.12397625516224875, 0.16476021775679006, 9.999999999998899e-05, 0.057061895446295474, 0.14014649385998224, 0.00992954208075858, 0.116320559789019, 0.18248687076716175, 9.999999999998899e-05, 0.10334661204144469, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008767958287949629, 0.0042757582617254375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07398024715320384, 0.02545442149247068, 0.07025738493397071, 0.06603966433604114, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.0558704965354202, 0.03983405563882392, 0.004343507277568492, 0.018484040949296232, 0.014892553370004835, 0.004243770537963432, 9.999999999998899e-05, 0.0054904323686824075, 0.02268335463876936, 0.007646725891766848, 0.001452862308694458, 0.05448779803989878, 0.049806603899668844, 0.13940934491271095, 0.009297324788315797, 0.006414455502910865, 0.011343912573803405, 0.09825390032826276, 0.05838139684213417, 0.07800386747295995, 0.3543360763009603, 0.3058649215870638, 0.4100981167508997, 0.2627753221669987, 0.2894637303211026, 0.20686539641160884, 0.35623577073130164, 0.25779679369444397, 0.3454701021467589, 0.020537098338469173, 0.00990806497576413, 9.999999999998899e-05, 0.02288981513259969, 0.0284906463095016, 0.06666740573603036, 0.018732080452651956, 0.01638750837993752, 0.07301317872089652, 0.1819458790769043, 0.14312570132635716, 0.1692113115784627, 0.32820389707699116, 0.3062703474501556, 0.14199644184031568, 0.3572624649990812, 0.14325094615843048, 0.1330134617163169, 0.11450667510541512, 0.12612015513586716, 0.12088506212088301, 0.14568156550317857, 0.13084647836176067, 0.13091991812681658, 0.14394628031001833, 0.22551718438198565, 0.10332213220391695, 0.06001742126642895, 0.061998794276995284, 0.08155635324244703, 0.08284372761863756, 0.0778867518268398, 0.07337848953977844, 0.07330729279188253, 0.18321035763246807, 0.051186906211080685, 0.175268554883097, 0.11003972526443118, 0.16718898423864992, 0.17951790242689425, 0.13540246385434762, 0.16807582275999577, 0.18409520339380703, 0.11350413764651002, 0.15774363214615517, 0.10782316366764266, 0.14649668456798992, 0.166929071734645, 0.2262319686341987, 0.18790116556959724, 0.17750110146248133, 0.12146555652853763, 0.14403871596435658, 0.1263698044259911, 0.10193157656298213, 0.12519903136431954, 0.15025943411927023, 0.15923396630493403, 0.19490851358968753, 0.18776798950859008, 0.09898577833384026, 0.16641424285105588, 0.09950203348058984, 0.07897535142488454, 0.18292522620822593, 0.048434783614098476, 0.09877391258723978, 0.15281345523167433, 0.16891288410887628, 0.09938608312176689, 0.3201256614334821, 0.19504411325151794, 0.17456777908837107, 0.1932402815490889, 0.19181861675374534, 0.18059255634052684, 0.19072887874714517, 0.19737226561596755, 0.1848949400527059, 0.18959566471560407, 0.19139131469517634, 0.03729630258205485, 0.04483223803337355, 0.05779209365770799, 0.048925590503691274, 0.05897453227088356, 0.0462577057587632, 0.043554765433286624, 0.039121002585501774, 0.03993257851515486]}, "mutation_prompt": null}
{"id": "ce055053-b358-41dd-9421-91ed57e79f22", "solution": "class EnhancedDynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.dynamic_search_factor = 0.1  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if np.random.rand() < self.dynamic_search_factor:  # New block\n                self.bandwidth *= np.exp(-0.1 * len(fitness_history))\n\n        return best_solution", "name": "EnhancedDynamicHarmonySearch", "description": "Implement a novel dynamic local search strategy that adaptively adjusts the search space based on the fitness improvement history to enhance convergence speed.", "configspace": "", "generation": 26, "fitness": 0.10340042423450295, "feedback": "The algorithm EnhancedDynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.3477401692852711, 0.36645751748508804, 0.41037508496733976, 0.41228699221701903, 0.34966991151706195, 0.3405572347830922, 0.3801594498234929, 0.39041800984902886, 0.3466497791292872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012300508713211866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022648153764388557, 0.03223021109942181, 9.999999999998899e-05, 0.023687215449203713, 0.007684612144375769, 0.033891832301615965, 0.041466867350141934, 0.022550635545056097, 0.06896141032792691, 0.013054729941604282, 0.0023635866951630113, 9.999999999998899e-05, 0.06112644312197768, 0.025870902919401084, 9.999999999998899e-05, 9.999999999998899e-05, 0.002799964297463209, 9.999999999998899e-05, 0.09096633418327926, 0.05579127723178423, 0.10618690897406236, 0.08102650203816797, 0.07730922208164992, 0.07101424571777937, 0.10548978987916213, 0.08241757275236883, 0.07194398268573965, 0.08369385225369574, 0.06917823065834872, 0.10220004378112113, 0.09625248702877576, 0.1547785661914739, 0.08105392928365796, 0.13787082024130026, 0.13416207746137476, 0.03411666712771877, 0.14086413633178196, 0.059796912135815505, 0.04736498907065689, 0.014444501946723864, 0.03346883154541269, 9.999999999998899e-05, 0.10924876279277174, 0.10270197808401749, 0.037911187810952485, 0.12080959402375502, 0.12068818726143127, 9.999999999998899e-05, 0.025861921868708282, 0.1204804308584797, 9.999999999998899e-05, 0.1171125852369378, 0.06172157358330477, 0.0984435348288687, 0.1424370282970926, 9.999999999998899e-05, 0.035500296506314255, 0.08648149104247116, 0.0012605272838738246, 0.10693899565370846, 0.16218997831542747, 9.999999999998899e-05, 0.08640194246995603, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004733981310349744, 0.01484079937872973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06844961264717131, 0.04521499637422399, 0.06854496749653971, 0.06897851579339753, 9.999999999998899e-05, 9.999999999998899e-05, 0.150725898256996, 0.05897159422857112, 0.03894703137150535, 0.004117795791129142, 0.02510994913555764, 0.05479943299693446, 0.027118683167811963, 0.005227465700543998, 0.01234329176687754, 0.015129431751426226, 0.006857591689629405, 0.005113159876034112, 0.02848814237891817, 0.0409980422089693, 0.11217690685495085, 0.0359324011732266, 0.004398195881880174, 0.008612071461400417, 0.09662694304759822, 0.06393025780780537, 0.06645231685906205, 0.35388522010338597, 0.3019625086435467, 0.3751990656263814, 0.2613286485759748, 0.2565975936255187, 0.19300521216760003, 0.33109867189506226, 0.22750031178253138, 0.30582552555074904, 0.02323461407977634, 0.009966827076955398, 9.999999999998899e-05, 0.023404382809396496, 0.01881286954808925, 0.06260902526814038, 0.019017986682067334, 0.016373532942348334, 0.07337129271635279, 0.14646650660453198, 0.1923078945584744, 0.1597953713176583, 0.16289367140518185, 0.2923334864171344, 0.1319242572020265, 0.27621727431253096, 0.13985387626526657, 0.11113635114051157, 0.11664873028489786, 0.12615235045279083, 0.1171856553586682, 0.1456615075528156, 0.13358777817348877, 0.13424526846903717, 0.1424855221258131, 0.21026284339496548, 0.10119874137508855, 0.05956527627820818, 0.05959772798076246, 0.09011445530855255, 0.0827054520899132, 0.0777378922165417, 0.0715346394871611, 0.07138115517176813, 0.1946848017630055, 0.050770361441698664, 0.17095462097742642, 0.10112455551310451, 0.16522088286591674, 0.17846773224259926, 0.14026777812563962, 0.15585182955666876, 0.18466302942176238, 0.11384307905422353, 0.15182254984585375, 0.11774426956297679, 0.14052321461605422, 0.1742157728511735, 0.1960916609245713, 0.13343464606298838, 0.18127549036557822, 0.1297601726229224, 0.13825192419235643, 0.1070593575236104, 0.1007370861851834, 0.12618643176414046, 0.14929674525172953, 0.15931829004933407, 0.1948903701062188, 0.18583758088220892, 0.09888854367730271, 0.16539224450570522, 0.09874565303987637, 0.07947928551333483, 0.1741425899745973, 0.32303022899989087, 0.09782583958948998, 0.14884944503235653, 0.16413046279768095, 0.09943048968636226, 0.2613571568241849, 0.18277609531836048, 0.1693235577163147, 0.2016492962047589, 0.16873729144395588, 0.18699728685659833, 0.2161290243479037, 0.1831162011960289, 0.1854771917992818, 0.1833027753281814, 0.17450981980614355, 0.03929146005969775, 0.043781189019978406, 0.0607992761968249, 0.04613803244158676, 0.05775357399491099, 0.04447143058637071, 0.050183526717545446, 0.039361130420637935, 0.04741165366263267]}, "mutation_prompt": null}
{"id": "4446397b-67a4-4c21-98a1-a491d2002a80", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:  # New block\n                self.bandwidth *= self.memory_strength\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive bandwidth adjustment with a memory mechanism based on past fitness improvement trends to dynamically regulate exploration and exploitation balance for accelerated convergence.", "configspace": "", "generation": 27, "fitness": 0.11204417166559665, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "dc2c5b80-8c77-4cac-b1b1-133f0bee09eb", "metadata": {"aucs": [0.38298389574271596, 0.36313966105456297, 0.5204102273188549, 0.43832808579098403, 0.34741169404326144, 0.4408307893784811, 0.4014175740279148, 0.40704398849603574, 0.38982805515998376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010551638239931882, 0.040472793957168185, 9.999999999998899e-05, 0.02334072539106924, 0.01988975834727158, 0.03341926400406159, 0.03612179610405142, 0.01883450849078505, 0.0667149722092496, 0.013967504311219958, 9.999999999998899e-05, 9.999999999998899e-05, 0.06205789031443054, 0.025805741972177776, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030406034847910712, 9.999999999998899e-05, 0.08839270878914651, 0.05482636315548939, 0.0973085040975058, 0.07964537453434128, 0.078325527493457, 0.07576060276496577, 0.10396583264472703, 0.08422918934882329, 0.0847396164013755, 0.07025733981716509, 0.061788402002245, 0.09632758103833061, 0.10820306494765941, 0.14729975116403438, 0.11495483542119078, 0.16404085989533046, 0.09098544523423147, 0.037346388019561916, 0.178292856657861, 0.12253100299733855, 0.038278654185925354, 0.04272317107763335, 0.04464462449481399, 0.008190959659006736, 0.08592819496076554, 0.08581434660504361, 0.17208697437787068, 0.11846619954294768, 0.12659536664072546, 0.00014946302587182103, 0.018984347934103973, 0.11159818012812706, 0.015157886695889244, 0.13389545103308698, 0.07639636045694365, 0.13339992001999568, 0.1515649685800503, 9.999999999998899e-05, 0.05127445253516638, 0.14152001604103825, 0.0038767852381983436, 0.11877335167721881, 0.16614566774397577, 9.999999999998899e-05, 0.10150436653393657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007883666613426321, 0.002395682475647476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07312705057223634, 0.0261628353004717, 0.0705905709453728, 0.06649269978182326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1530489909992211, 0.05607030836249882, 0.039960155188264124, 0.040625479400621, 0.08152258171361504, 0.07671956644556799, 0.0656134253309767, 0.037708547043103335, 0.04127932533503731, 0.061487620785355857, 0.04339865010539068, 0.026216420152814668, 0.05208117917379018, 0.05177713303183196, 0.1299699379642365, 0.007888067588549541, 0.005857192518339827, 0.01382401004281053, 0.1291548610864096, 0.07000156487130749, 0.0757276989652359, 0.3720002232232288, 0.2861741650844849, 0.44947659547941365, 0.24576672067316974, 0.2932050169240281, 0.20413770873480075, 0.40622916334067427, 0.23245966589870393, 0.34525007392451623, 0.020534681718669012, 0.01009718684740879, 9.999999999998899e-05, 0.023016269690505742, 0.028718420207716866, 0.05577249338360235, 0.01888298237496877, 0.016299884156097177, 0.08262905137523846, 0.1518879581507928, 0.13843465685647138, 0.18780874464873742, 0.38249840790615874, 0.29062799228650915, 0.15763493717813382, 0.3448968216266741, 0.13585791685410664, 0.13392077730651597, 0.1146085240108281, 0.12612149456194732, 0.12088869042391504, 0.14562604334634266, 0.13100303865649277, 0.1310394969915194, 0.14409606914550277, 0.21558959678907919, 0.10336784491184003, 0.05988446655509927, 0.06219491309699621, 0.07777575900873412, 0.08277834693497266, 0.07776242202535555, 0.07236770141866433, 0.07383993977550596, 0.157775004916218, 0.051125860452805094, 0.17305581596587194, 0.11378498485447874, 0.16566351408051427, 0.17574195798323722, 0.127320929073381, 0.16275551232165508, 0.18536030483968802, 0.11488743833863502, 0.15661769328675257, 0.10803898456560057, 0.15533342278899376, 0.18068931179597225, 0.2287275376524921, 0.18267884346587293, 0.19051391725043754, 0.12246198748285331, 0.147576374755357, 0.12222705927961675, 0.10173703274141987, 0.12562066027197016, 0.14996986257010425, 0.1596061470823854, 0.194768423049423, 0.18723860832925454, 0.09890329740007586, 0.16654253839417799, 0.09973179920837616, 0.07890970589959723, 0.1832075671713106, 0.04832624833034793, 0.09872166981571595, 0.15214686455968107, 0.16998070746249672, 0.09944826230111925, 0.2955562589861517, 0.1946271151273361, 0.18826555228375885, 0.21367488083469965, 0.23778899057608593, 0.20640150030246984, 0.1993410261168036, 0.22882075842077887, 0.23186931910222208, 0.21385477861469404, 0.22231691077824012, 0.04076335811965315, 0.0449929456513295, 0.0639655691801958, 0.04770210526408103, 0.058979552941076485, 0.05604365399007949, 0.046059197297838694, 0.03813384614347415, 0.048033001501906814]}, "mutation_prompt": null}
{"id": "7b30df94-bf12-45c4-89e4-d9dbbee3190f", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:  # New block\n                self.bandwidth *= self.memory_strength\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive bandwidth adjustment with a memory mechanism based on past fitness improvement trends to dynamically regulate exploration and exploitation balance for accelerated convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.38298389574271596, 0.36313966105456297, 0.5204102273188549, 0.43832808579098403, 0.34741169404326144, 0.4408307893784811, 0.4014175740279148, 0.40704398849603574, 0.38982805515998376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010551638239931882, 0.040472793957168185, 9.999999999998899e-05, 0.02334072539106924, 0.01988975834727158, 0.03341926400406159, 0.03612179610405142, 0.01883450849078505, 0.0667149722092496, 0.013967504311219958, 9.999999999998899e-05, 9.999999999998899e-05, 0.06205789031443054, 0.025805741972177776, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030406034847910712, 9.999999999998899e-05, 0.08839270878914651, 0.05482636315548939, 0.0973085040975058, 0.07964537453434128, 0.078325527493457, 0.07576060276496577, 0.10396583264472703, 0.08422918934882329, 0.0847396164013755, 0.07025733981716509, 0.061788402002245, 0.09632758103833061, 0.10820306494765941, 0.14729975116403438, 0.11495483542119078, 0.16404085989533046, 0.09098544523423147, 0.037346388019561916, 0.178292856657861, 0.12253100299733855, 0.038278654185925354, 0.04272317107763335, 0.04464462449481399, 0.008190959659006736, 0.08592819496076554, 0.08581434660504361, 0.17208697437787068, 0.11846619954294768, 0.12659536664072546, 0.00014946302587182103, 0.018984347934103973, 0.11159818012812706, 0.015157886695889244, 0.13389545103308698, 0.07639636045694365, 0.13339992001999568, 0.1515649685800503, 9.999999999998899e-05, 0.05127445253516638, 0.14152001604103825, 0.0038767852381983436, 0.11877335167721881, 0.16614566774397577, 9.999999999998899e-05, 0.10150436653393657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007883666613426321, 0.002395682475647476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07312705057223634, 0.0261628353004717, 0.0705905709453728, 0.06649269978182326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1530489909992211, 0.05607030836249882, 0.039960155188264124, 0.040625479400621, 0.08152258171361504, 0.07671956644556799, 0.0656134253309767, 0.037708547043103335, 0.04127932533503731, 0.061487620785355857, 0.04339865010539068, 0.026216420152814668, 0.05208117917379018, 0.05177713303183196, 0.1299699379642365, 0.007888067588549541, 0.005857192518339827, 0.01382401004281053, 0.1291548610864096, 0.07000156487130749, 0.0757276989652359, 0.3720002232232288, 0.2861741650844849, 0.44947659547941365, 0.24576672067316974, 0.2932050169240281, 0.20413770873480075, 0.40622916334067427, 0.23245966589870393, 0.34525007392451623, 0.020534681718669012, 0.01009718684740879, 9.999999999998899e-05, 0.023016269690505742, 0.028718420207716866, 0.05577249338360235, 0.01888298237496877, 0.016299884156097177, 0.08262905137523846, 0.1518879581507928, 0.13843465685647138, 0.18780874464873742, 0.38249840790615874, 0.29062799228650915, 0.15763493717813382, 0.3448968216266741, 0.13585791685410664, 0.13392077730651597, 0.1146085240108281, 0.12612149456194732, 0.12088869042391504, 0.14562604334634266, 0.13100303865649277, 0.1310394969915194, 0.14409606914550277, 0.21558959678907919, 0.10336784491184003, 0.05988446655509927, 0.06219491309699621, 0.07777575900873412, 0.08277834693497266, 0.07776242202535555, 0.07236770141866433, 0.07383993977550596, 0.157775004916218, 0.051125860452805094, 0.17305581596587194, 0.11378498485447874, 0.16566351408051427, 0.17574195798323722, 0.127320929073381, 0.16275551232165508, 0.18536030483968802, 0.11488743833863502, 0.15661769328675257, 0.10803898456560057, 0.15533342278899376, 0.18068931179597225, 0.2287275376524921, 0.18267884346587293, 0.19051391725043754, 0.12246198748285331, 0.147576374755357, 0.12222705927961675, 0.10173703274141987, 0.12562066027197016, 0.14996986257010425, 0.1596061470823854, 0.194768423049423, 0.18723860832925454, 0.09890329740007586, 0.16654253839417799, 0.09973179920837616, 0.07890970589959723, 0.1832075671713106, 0.04832624833034793, 0.09872166981571595, 0.15214686455968107, 0.16998070746249672, 0.09944826230111925, 0.2955562589861517, 0.1946271151273361, 0.18826555228375885, 0.21367488083469965, 0.23778899057608593, 0.20640150030246984, 0.1993410261168036, 0.22882075842077887, 0.23186931910222208, 0.21385477861469404, 0.22231691077824012, 0.04076335811965315, 0.0449929456513295, 0.0639655691801958, 0.04770210526408103, 0.058979552941076485, 0.05604365399007949, 0.046059197297838694, 0.03813384614347415, 0.048033001501906814]}, "mutation_prompt": null}
{"id": "62d2e382-3c60-4113-b841-4c78e4b0e956", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength  # Updated line\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing a novel adaptive memory strength mechanism to dynamically adjust the bandwidth based on the historical fitness improvement trends for faster convergence.", "configspace": "", "generation": 29, "fitness": 0.11204417166559665, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.38298389574271596, 0.36313966105456297, 0.5204102273188549, 0.43832808579098403, 0.34741169404326144, 0.4408307893784811, 0.4014175740279148, 0.40704398849603574, 0.38982805515998376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010551638239931882, 0.040472793957168185, 9.999999999998899e-05, 0.02334072539106924, 0.01988975834727158, 0.03341926400406159, 0.03612179610405142, 0.01883450849078505, 0.0667149722092496, 0.013967504311219958, 9.999999999998899e-05, 9.999999999998899e-05, 0.06205789031443054, 0.025805741972177776, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030406034847910712, 9.999999999998899e-05, 0.08839270878914651, 0.05482636315548939, 0.0973085040975058, 0.07964537453434128, 0.078325527493457, 0.07576060276496577, 0.10396583264472703, 0.08422918934882329, 0.0847396164013755, 0.07025733981716509, 0.061788402002245, 0.09632758103833061, 0.10820306494765941, 0.14729975116403438, 0.11495483542119078, 0.16404085989533046, 0.09098544523423147, 0.037346388019561916, 0.178292856657861, 0.12253100299733855, 0.038278654185925354, 0.04272317107763335, 0.04464462449481399, 0.008190959659006736, 0.08592819496076554, 0.08581434660504361, 0.17208697437787068, 0.11846619954294768, 0.12659536664072546, 0.00014946302587182103, 0.018984347934103973, 0.11159818012812706, 0.015157886695889244, 0.13389545103308698, 0.07639636045694365, 0.13339992001999568, 0.1515649685800503, 9.999999999998899e-05, 0.05127445253516638, 0.14152001604103825, 0.0038767852381983436, 0.11877335167721881, 0.16614566774397577, 9.999999999998899e-05, 0.10150436653393657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007883666613426321, 0.002395682475647476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07312705057223634, 0.0261628353004717, 0.0705905709453728, 0.06649269978182326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1530489909992211, 0.05607030836249882, 0.039960155188264124, 0.040625479400621, 0.08152258171361504, 0.07671956644556799, 0.0656134253309767, 0.037708547043103335, 0.04127932533503731, 0.061487620785355857, 0.04339865010539068, 0.026216420152814668, 0.05208117917379018, 0.05177713303183196, 0.1299699379642365, 0.007888067588549541, 0.005857192518339827, 0.01382401004281053, 0.1291548610864096, 0.07000156487130749, 0.0757276989652359, 0.3720002232232288, 0.2861741650844849, 0.44947659547941365, 0.24576672067316974, 0.2932050169240281, 0.20413770873480075, 0.40622916334067427, 0.23245966589870393, 0.34525007392451623, 0.020534681718669012, 0.01009718684740879, 9.999999999998899e-05, 0.023016269690505742, 0.028718420207716866, 0.05577249338360235, 0.01888298237496877, 0.016299884156097177, 0.08262905137523846, 0.1518879581507928, 0.13843465685647138, 0.18780874464873742, 0.38249840790615874, 0.29062799228650915, 0.15763493717813382, 0.3448968216266741, 0.13585791685410664, 0.13392077730651597, 0.1146085240108281, 0.12612149456194732, 0.12088869042391504, 0.14562604334634266, 0.13100303865649277, 0.1310394969915194, 0.14409606914550277, 0.21558959678907919, 0.10336784491184003, 0.05988446655509927, 0.06219491309699621, 0.07777575900873412, 0.08277834693497266, 0.07776242202535555, 0.07236770141866433, 0.07383993977550596, 0.157775004916218, 0.051125860452805094, 0.17305581596587194, 0.11378498485447874, 0.16566351408051427, 0.17574195798323722, 0.127320929073381, 0.16275551232165508, 0.18536030483968802, 0.11488743833863502, 0.15661769328675257, 0.10803898456560057, 0.15533342278899376, 0.18068931179597225, 0.2287275376524921, 0.18267884346587293, 0.19051391725043754, 0.12246198748285331, 0.147576374755357, 0.12222705927961675, 0.10173703274141987, 0.12562066027197016, 0.14996986257010425, 0.1596061470823854, 0.194768423049423, 0.18723860832925454, 0.09890329740007586, 0.16654253839417799, 0.09973179920837616, 0.07890970589959723, 0.1832075671713106, 0.04832624833034793, 0.09872166981571595, 0.15214686455968107, 0.16998070746249672, 0.09944826230111925, 0.2955562589861517, 0.1946271151273361, 0.18826555228375885, 0.21367488083469965, 0.23778899057608593, 0.20640150030246984, 0.1993410261168036, 0.22882075842077887, 0.23186931910222208, 0.21385477861469404, 0.22231691077824012, 0.04076335811965315, 0.0449929456513295, 0.0639655691801958, 0.04770210526408103, 0.058979552941076485, 0.05604365399007949, 0.046059197297838694, 0.03813384614347415, 0.048033001501906814]}, "mutation_prompt": null}
{"id": "c35f9c0a-7ec0-44de-a06f-e6aebed64ebd", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:  # New block\n                self.bandwidth *= self.memory_strength\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive bandwidth adjustment with a memory mechanism based on past fitness improvement trends to dynamically regulate exploration and exploitation balance for accelerated convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.38298389574271596, 0.36313966105456297, 0.5204102273188549, 0.43832808579098403, 0.34741169404326144, 0.4408307893784811, 0.4014175740279148, 0.40704398849603574, 0.38982805515998376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010551638239931882, 0.040472793957168185, 9.999999999998899e-05, 0.02334072539106924, 0.01988975834727158, 0.03341926400406159, 0.03612179610405142, 0.01883450849078505, 0.0667149722092496, 0.013967504311219958, 9.999999999998899e-05, 9.999999999998899e-05, 0.06205789031443054, 0.025805741972177776, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030406034847910712, 9.999999999998899e-05, 0.08839270878914651, 0.05482636315548939, 0.0973085040975058, 0.07964537453434128, 0.078325527493457, 0.07576060276496577, 0.10396583264472703, 0.08422918934882329, 0.0847396164013755, 0.07025733981716509, 0.061788402002245, 0.09632758103833061, 0.10820306494765941, 0.14729975116403438, 0.11495483542119078, 0.16404085989533046, 0.09098544523423147, 0.037346388019561916, 0.178292856657861, 0.12253100299733855, 0.038278654185925354, 0.04272317107763335, 0.04464462449481399, 0.008190959659006736, 0.08592819496076554, 0.08581434660504361, 0.17208697437787068, 0.11846619954294768, 0.12659536664072546, 0.00014946302587182103, 0.018984347934103973, 0.11159818012812706, 0.015157886695889244, 0.13389545103308698, 0.07639636045694365, 0.13339992001999568, 0.1515649685800503, 9.999999999998899e-05, 0.05127445253516638, 0.14152001604103825, 0.0038767852381983436, 0.11877335167721881, 0.16614566774397577, 9.999999999998899e-05, 0.10150436653393657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007883666613426321, 0.002395682475647476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07312705057223634, 0.0261628353004717, 0.0705905709453728, 0.06649269978182326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1530489909992211, 0.05607030836249882, 0.039960155188264124, 0.040625479400621, 0.08152258171361504, 0.07671956644556799, 0.0656134253309767, 0.037708547043103335, 0.04127932533503731, 0.061487620785355857, 0.04339865010539068, 0.026216420152814668, 0.05208117917379018, 0.05177713303183196, 0.1299699379642365, 0.007888067588549541, 0.005857192518339827, 0.01382401004281053, 0.1291548610864096, 0.07000156487130749, 0.0757276989652359, 0.3720002232232288, 0.2861741650844849, 0.44947659547941365, 0.24576672067316974, 0.2932050169240281, 0.20413770873480075, 0.40622916334067427, 0.23245966589870393, 0.34525007392451623, 0.020534681718669012, 0.01009718684740879, 9.999999999998899e-05, 0.023016269690505742, 0.028718420207716866, 0.05577249338360235, 0.01888298237496877, 0.016299884156097177, 0.08262905137523846, 0.1518879581507928, 0.13843465685647138, 0.18780874464873742, 0.38249840790615874, 0.29062799228650915, 0.15763493717813382, 0.3448968216266741, 0.13585791685410664, 0.13392077730651597, 0.1146085240108281, 0.12612149456194732, 0.12088869042391504, 0.14562604334634266, 0.13100303865649277, 0.1310394969915194, 0.14409606914550277, 0.21558959678907919, 0.10336784491184003, 0.05988446655509927, 0.06219491309699621, 0.07777575900873412, 0.08277834693497266, 0.07776242202535555, 0.07236770141866433, 0.07383993977550596, 0.157775004916218, 0.051125860452805094, 0.17305581596587194, 0.11378498485447874, 0.16566351408051427, 0.17574195798323722, 0.127320929073381, 0.16275551232165508, 0.18536030483968802, 0.11488743833863502, 0.15661769328675257, 0.10803898456560057, 0.15533342278899376, 0.18068931179597225, 0.2287275376524921, 0.18267884346587293, 0.19051391725043754, 0.12246198748285331, 0.147576374755357, 0.12222705927961675, 0.10173703274141987, 0.12562066027197016, 0.14996986257010425, 0.1596061470823854, 0.194768423049423, 0.18723860832925454, 0.09890329740007586, 0.16654253839417799, 0.09973179920837616, 0.07890970589959723, 0.1832075671713106, 0.04832624833034793, 0.09872166981571595, 0.15214686455968107, 0.16998070746249672, 0.09944826230111925, 0.2955562589861517, 0.1946271151273361, 0.18826555228375885, 0.21367488083469965, 0.23778899057608593, 0.20640150030246984, 0.1993410261168036, 0.22882075842077887, 0.23186931910222208, 0.21385477861469404, 0.22231691077824012, 0.04076335811965315, 0.0449929456513295, 0.0639655691801958, 0.04770210526408103, 0.058979552941076485, 0.05604365399007949, 0.046059197297838694, 0.03813384614347415, 0.048033001501906814]}, "mutation_prompt": null}
{"id": "f84ce686-0c68-4758-ac6e-583a0b5b876b", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:  # New block\n                self.bandwidth *= self.memory_strength\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive bandwidth adjustment with a memory mechanism based on past fitness improvement trends to dynamically regulate exploration and exploitation balance for accelerated convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.38298389574271596, 0.36313966105456297, 0.5204102273188549, 0.43832808579098403, 0.34741169404326144, 0.4408307893784811, 0.4014175740279148, 0.40704398849603574, 0.38982805515998376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010551638239931882, 0.040472793957168185, 9.999999999998899e-05, 0.02334072539106924, 0.01988975834727158, 0.03341926400406159, 0.03612179610405142, 0.01883450849078505, 0.0667149722092496, 0.013967504311219958, 9.999999999998899e-05, 9.999999999998899e-05, 0.06205789031443054, 0.025805741972177776, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030406034847910712, 9.999999999998899e-05, 0.08839270878914651, 0.05482636315548939, 0.0973085040975058, 0.07964537453434128, 0.078325527493457, 0.07576060276496577, 0.10396583264472703, 0.08422918934882329, 0.0847396164013755, 0.07025733981716509, 0.061788402002245, 0.09632758103833061, 0.10820306494765941, 0.14729975116403438, 0.11495483542119078, 0.16404085989533046, 0.09098544523423147, 0.037346388019561916, 0.178292856657861, 0.12253100299733855, 0.038278654185925354, 0.04272317107763335, 0.04464462449481399, 0.008190959659006736, 0.08592819496076554, 0.08581434660504361, 0.17208697437787068, 0.11846619954294768, 0.12659536664072546, 0.00014946302587182103, 0.018984347934103973, 0.11159818012812706, 0.015157886695889244, 0.13389545103308698, 0.07639636045694365, 0.13339992001999568, 0.1515649685800503, 9.999999999998899e-05, 0.05127445253516638, 0.14152001604103825, 0.0038767852381983436, 0.11877335167721881, 0.16614566774397577, 9.999999999998899e-05, 0.10150436653393657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007883666613426321, 0.002395682475647476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07312705057223634, 0.0261628353004717, 0.0705905709453728, 0.06649269978182326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1530489909992211, 0.05607030836249882, 0.039960155188264124, 0.040625479400621, 0.08152258171361504, 0.07671956644556799, 0.0656134253309767, 0.037708547043103335, 0.04127932533503731, 0.061487620785355857, 0.04339865010539068, 0.026216420152814668, 0.05208117917379018, 0.05177713303183196, 0.1299699379642365, 0.007888067588549541, 0.005857192518339827, 0.01382401004281053, 0.1291548610864096, 0.07000156487130749, 0.0757276989652359, 0.3720002232232288, 0.2861741650844849, 0.44947659547941365, 0.24576672067316974, 0.2932050169240281, 0.20413770873480075, 0.40622916334067427, 0.23245966589870393, 0.34525007392451623, 0.020534681718669012, 0.01009718684740879, 9.999999999998899e-05, 0.023016269690505742, 0.028718420207716866, 0.05577249338360235, 0.01888298237496877, 0.016299884156097177, 0.08262905137523846, 0.1518879581507928, 0.13843465685647138, 0.18780874464873742, 0.38249840790615874, 0.29062799228650915, 0.15763493717813382, 0.3448968216266741, 0.13585791685410664, 0.13392077730651597, 0.1146085240108281, 0.12612149456194732, 0.12088869042391504, 0.14562604334634266, 0.13100303865649277, 0.1310394969915194, 0.14409606914550277, 0.21558959678907919, 0.10336784491184003, 0.05988446655509927, 0.06219491309699621, 0.07777575900873412, 0.08277834693497266, 0.07776242202535555, 0.07236770141866433, 0.07383993977550596, 0.157775004916218, 0.051125860452805094, 0.17305581596587194, 0.11378498485447874, 0.16566351408051427, 0.17574195798323722, 0.127320929073381, 0.16275551232165508, 0.18536030483968802, 0.11488743833863502, 0.15661769328675257, 0.10803898456560057, 0.15533342278899376, 0.18068931179597225, 0.2287275376524921, 0.18267884346587293, 0.19051391725043754, 0.12246198748285331, 0.147576374755357, 0.12222705927961675, 0.10173703274141987, 0.12562066027197016, 0.14996986257010425, 0.1596061470823854, 0.194768423049423, 0.18723860832925454, 0.09890329740007586, 0.16654253839417799, 0.09973179920837616, 0.07890970589959723, 0.1832075671713106, 0.04832624833034793, 0.09872166981571595, 0.15214686455968107, 0.16998070746249672, 0.09944826230111925, 0.2955562589861517, 0.1946271151273361, 0.18826555228375885, 0.21367488083469965, 0.23778899057608593, 0.20640150030246984, 0.1993410261168036, 0.22882075842077887, 0.23186931910222208, 0.21385477861469404, 0.22231691077824012, 0.04076335811965315, 0.0449929456513295, 0.0639655691801958, 0.04770210526408103, 0.058979552941076485, 0.05604365399007949, 0.046059197297838694, 0.03813384614347415, 0.048033001501906814]}, "mutation_prompt": null}
{"id": "8b9c6fad-6977-4ce1-96d6-6cbe1a31bc31", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:  # New block\n                self.bandwidth *= self.memory_strength\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive bandwidth adjustment with a memory mechanism based on past fitness improvement trends to dynamically regulate exploration and exploitation balance for accelerated convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.38298389574271596, 0.36313966105456297, 0.5204102273188549, 0.43832808579098403, 0.34741169404326144, 0.4408307893784811, 0.4014175740279148, 0.40704398849603574, 0.38982805515998376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010551638239931882, 0.040472793957168185, 9.999999999998899e-05, 0.02334072539106924, 0.01988975834727158, 0.03341926400406159, 0.03612179610405142, 0.01883450849078505, 0.0667149722092496, 0.013967504311219958, 9.999999999998899e-05, 9.999999999998899e-05, 0.06205789031443054, 0.025805741972177776, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030406034847910712, 9.999999999998899e-05, 0.08839270878914651, 0.05482636315548939, 0.0973085040975058, 0.07964537453434128, 0.078325527493457, 0.07576060276496577, 0.10396583264472703, 0.08422918934882329, 0.0847396164013755, 0.07025733981716509, 0.061788402002245, 0.09632758103833061, 0.10820306494765941, 0.14729975116403438, 0.11495483542119078, 0.16404085989533046, 0.09098544523423147, 0.037346388019561916, 0.178292856657861, 0.12253100299733855, 0.038278654185925354, 0.04272317107763335, 0.04464462449481399, 0.008190959659006736, 0.08592819496076554, 0.08581434660504361, 0.17208697437787068, 0.11846619954294768, 0.12659536664072546, 0.00014946302587182103, 0.018984347934103973, 0.11159818012812706, 0.015157886695889244, 0.13389545103308698, 0.07639636045694365, 0.13339992001999568, 0.1515649685800503, 9.999999999998899e-05, 0.05127445253516638, 0.14152001604103825, 0.0038767852381983436, 0.11877335167721881, 0.16614566774397577, 9.999999999998899e-05, 0.10150436653393657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007883666613426321, 0.002395682475647476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07312705057223634, 0.0261628353004717, 0.0705905709453728, 0.06649269978182326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1530489909992211, 0.05607030836249882, 0.039960155188264124, 0.040625479400621, 0.08152258171361504, 0.07671956644556799, 0.0656134253309767, 0.037708547043103335, 0.04127932533503731, 0.061487620785355857, 0.04339865010539068, 0.026216420152814668, 0.05208117917379018, 0.05177713303183196, 0.1299699379642365, 0.007888067588549541, 0.005857192518339827, 0.01382401004281053, 0.1291548610864096, 0.07000156487130749, 0.0757276989652359, 0.3720002232232288, 0.2861741650844849, 0.44947659547941365, 0.24576672067316974, 0.2932050169240281, 0.20413770873480075, 0.40622916334067427, 0.23245966589870393, 0.34525007392451623, 0.020534681718669012, 0.01009718684740879, 9.999999999998899e-05, 0.023016269690505742, 0.028718420207716866, 0.05577249338360235, 0.01888298237496877, 0.016299884156097177, 0.08262905137523846, 0.1518879581507928, 0.13843465685647138, 0.18780874464873742, 0.38249840790615874, 0.29062799228650915, 0.15763493717813382, 0.3448968216266741, 0.13585791685410664, 0.13392077730651597, 0.1146085240108281, 0.12612149456194732, 0.12088869042391504, 0.14562604334634266, 0.13100303865649277, 0.1310394969915194, 0.14409606914550277, 0.21558959678907919, 0.10336784491184003, 0.05988446655509927, 0.06219491309699621, 0.07777575900873412, 0.08277834693497266, 0.07776242202535555, 0.07236770141866433, 0.07383993977550596, 0.157775004916218, 0.051125860452805094, 0.17305581596587194, 0.11378498485447874, 0.16566351408051427, 0.17574195798323722, 0.127320929073381, 0.16275551232165508, 0.18536030483968802, 0.11488743833863502, 0.15661769328675257, 0.10803898456560057, 0.15533342278899376, 0.18068931179597225, 0.2287275376524921, 0.18267884346587293, 0.19051391725043754, 0.12246198748285331, 0.147576374755357, 0.12222705927961675, 0.10173703274141987, 0.12562066027197016, 0.14996986257010425, 0.1596061470823854, 0.194768423049423, 0.18723860832925454, 0.09890329740007586, 0.16654253839417799, 0.09973179920837616, 0.07890970589959723, 0.1832075671713106, 0.04832624833034793, 0.09872166981571595, 0.15214686455968107, 0.16998070746249672, 0.09944826230111925, 0.2955562589861517, 0.1946271151273361, 0.18826555228375885, 0.21367488083469965, 0.23778899057608593, 0.20640150030246984, 0.1993410261168036, 0.22882075842077887, 0.23186931910222208, 0.21385477861469404, 0.22231691077824012, 0.04076335811965315, 0.0449929456513295, 0.0639655691801958, 0.04770210526408103, 0.058979552941076485, 0.05604365399007949, 0.046059197297838694, 0.03813384614347415, 0.048033001501906814]}, "mutation_prompt": null}
{"id": "ce79fd05-657e-4434-aa06-d2850fd4c070", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.best_fitness_memory = float('inf')  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if new_fitness < self.best_fitness_memory:  # New block\n                self.bandwidth *= 0.9\n\n            self.best_fitness_memory = min(self.best_fitness_memory, new_fitness)\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearchImproved", "description": "Introducing a dynamic memory update strategy based on the best fitness value encountered during the optimization process to guide exploration towards promising regions, thus accelerating convergence.", "configspace": "", "generation": 33, "fitness": 0.10794424521217799, "feedback": "The algorithm EnhancedMemoryHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.35080188622250263, 0.3390319927186275, 0.42245181796374387, 0.39811611579776973, 0.31354464190668163, 0.40166776963653283, 0.38236362158904236, 0.3540110261167151, 0.34869294353246816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0105021271720952, 0.032343701995753094, 9.999999999998899e-05, 0.02332326535744489, 0.019926485631386104, 0.034286464215721235, 0.04118905797456951, 0.0039024785919459237, 0.06668008562783556, 0.01414769455550835, 9.999999999998899e-05, 9.999999999998899e-05, 0.06184538766942893, 0.0263272706552391, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030384198238231352, 9.999999999998899e-05, 0.09709785434626506, 0.05586408681110311, 0.09622113945166688, 0.07979773258882161, 0.07575235496126809, 0.07313540763541082, 0.10375430195417268, 0.08425092255564015, 0.08070177491771757, 0.07212492982169882, 0.05743644281123961, 0.12073490450719271, 0.11778019720076172, 0.1518234210978855, 0.11007742707942092, 0.17780731068967448, 0.08697386945272478, 0.04358653421737835, 0.1578612902655273, 0.12815775927071604, 0.038347405666385614, 0.04951952645335622, 0.05540657073523958, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.20592812957837936, 0.12145941739293009, 0.12958121800595712, 0.00010158406861304758, 0.027989202089960807, 0.11997318366731746, 0.006553728383110191, 0.12481703407154743, 0.07568362476341117, 0.11744057912382555, 0.16322781971711542, 9.999999999998899e-05, 0.05680335084009969, 0.1434557381937659, 0.02874008099916192, 0.1151741534960784, 0.18807304166865868, 9.999999999998899e-05, 0.10221284978970746, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011944557361300845, 0.0035738688401520946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07438324259878137, 0.02528207064330834, 0.06988360483537304, 0.06763051882814253, 9.999999999998899e-05, 9.999999999998899e-05, 0.15990203285586535, 0.05536268993253979, 0.03876272759669741, 0.0001939891253750492, 0.014007381246808781, 0.04254865422815923, 0.014833459736901755, 0.011353582179355892, 0.008188598573688255, 0.02868274847240282, 0.013883632953814784, 0.005986081977756519, 0.0505335343824872, 0.049309323238135194, 0.12790649751972105, 0.012669169997420848, 0.006741413832795695, 0.017183685898292222, 0.09309414468041866, 0.055737444070721676, 0.071986000685482, 0.3432962236125108, 0.29836882939015064, 0.3996786750104727, 0.24700729037382485, 0.29295956650719457, 0.20909636223012507, 0.3570574566941188, 0.22953900070619726, 0.343638771010352, 0.019869520754171255, 0.00990115743069031, 9.999999999998899e-05, 0.022914105540084884, 0.028426882147426835, 0.07139890198556553, 0.018732080452651956, 0.016359255576355092, 0.07302868854270039, 0.18194460285839642, 0.19136337294889905, 0.15485846463457398, 0.3507013518408154, 0.35736433915062504, 0.14225326298035068, 0.34332078245511777, 0.13603769982225333, 0.12659108271543096, 0.11461003526700164, 0.12645942888689388, 0.12090379620737735, 0.14567384054287646, 0.13099463399464262, 0.131032495790941, 0.14460047859454606, 0.22580290394564295, 0.1033169364714921, 0.06001545077514314, 0.06195461380303713, 0.07765482590109318, 0.0828264166612327, 0.07786768664226529, 0.0721533319149581, 0.07321505817862306, 0.19108813355731002, 0.0511863569315667, 0.1840960839931468, 0.1071050527477706, 0.16474611560451924, 0.17958143135528026, 0.1343537353437394, 0.16731089967639878, 0.19447649668147338, 0.11498785109861787, 0.15766579163509797, 0.10907932037588364, 0.14660372844240843, 0.18038320711291256, 0.2316384259567149, 0.18598138341456794, 0.17012038532535245, 0.11945156141590085, 0.13757884082298955, 0.12418357181123862, 0.10175576991378077, 0.12525146235460283, 0.15029345443479392, 0.15929539808020343, 0.19490762701311282, 0.18747532064558836, 0.09897822984346671, 0.16660325856670266, 0.09945874331657922, 0.07895027921687592, 0.18184158963914798, 0.04840837525690167, 0.09871170902392512, 0.15260905436704453, 0.1704295629140763, 0.09935073203560185, 0.3420868551114641, 0.20569489543453434, 0.1918962556570858, 0.1897132112558968, 0.1809227569749089, 0.19717783354588847, 0.17973603341123157, 0.17664704162741396, 0.17333139284388632, 0.18807791145110198, 0.19139131469517634, 0.04394647363097626, 0.043143529928895585, 0.057824421559940165, 0.04707087069709903, 0.0619673182303877, 0.04469400920957012, 0.04209774401739619, 0.03984419979551679, 0.04488048314920867]}, "mutation_prompt": null}
{"id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 34, "fitness": 0.11267099727907957, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "4446397b-67a4-4c21-98a1-a491d2002a80", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "1bed66e3-e465-415d-b1db-8e568bae1d2c", "solution": "import numpy as np\n\nclass DynamicPopulationSizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        pop_size = self.harmony_memory_size\n        harmony_memory = initialize_harmony_memory(pop_size)\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(pop_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(pop_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n            if new_fitness < np.mean(fitness_history[-100:]):\n                pop_size = min(50, pop_size + 1)\n            elif new_fitness > np.mean(fitness_history[-100:]) and len(fitness_history) > 100:\n                pop_size = max(5, pop_size - 1)\n            harmony_memory = np.concatenate((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, (pop_size - len(harmony_memory), self.dim))), axis=0)\n\n        return best_solution", "name": "DynamicPopulationSizeHarmonySearch", "description": "Accelerating convergence speed by incorporating a dynamic population size adjustment mechanism based on fitness landscape exploration.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {}, "mutation_prompt": null}
{"id": "94e5eee0-3d2d-46b5-b3b8-7360bccf0231", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "d22f67af-86f2-4755-8173-eb1a50225f1d", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n        self.mutation_rate = 0.1  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n                self.bandwidth *= 1 + np.random.uniform(-self.mutation_rate, self.mutation_rate)  # New block\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "AdaptiveMemoryHarmonySearch", "description": "Accelerating convergence by introducing adaptive mutation rates to dynamically adjust exploration and exploitation trade-off.", "configspace": "", "generation": 37, "fitness": 0.11260119872660962, "feedback": "The algorithm AdaptiveMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.3702652855767856, 0.40707660193153183, 0.45527433591618793, 0.47460318348832675, 0.3877876768722084, 0.4434893654467187, 0.445805941914182, 0.40366493546885385, 0.3522121774545801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025298683403724875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002274706424450268, 0.032010592185208964, 9.999999999998899e-05, 0.02345523974100505, 0.007707776770938146, 0.03434728109270002, 0.03640939138142418, 0.016065663434539745, 0.06831758192848869, 0.012772867993607218, 9.999999999998899e-05, 9.999999999998899e-05, 0.061245810939793754, 0.0354154471699909, 9.999999999998899e-05, 9.999999999998899e-05, 0.002767309862341416, 9.999999999998899e-05, 0.0984429741527707, 0.05966831402596251, 0.09221355580021173, 0.07981057315378437, 0.08198039527915757, 0.07339740807978723, 0.10453095064618556, 0.08582484583536165, 0.08078551572838988, 0.08366339677089873, 0.0666748376152374, 0.12079616515514413, 0.1347684015738374, 0.14076039378728478, 0.1080879107178847, 0.18140193531607396, 0.14675221962161666, 0.03725645362231467, 0.15574480674334268, 0.12381557467427629, 0.04651892634397059, 0.035044625916854644, 0.05064652492301158, 0.0074135633983895, 0.04842440407384585, 0.11981746600486654, 0.13748570762597334, 0.11799933920793138, 0.13590112443928593, 9.999999999998899e-05, 0.010552018007753738, 0.12025841452155583, 0.0019306359896021918, 0.11855488050793173, 0.05928325564236059, 0.12041351229263997, 0.13887188982902932, 9.999999999998899e-05, 0.060155232055239316, 0.12199236463714513, 0.013767154741426424, 0.10924906013493729, 0.16500104254654857, 9.999999999998899e-05, 0.09776323975646395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005512722932584424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052612299293625986, 0.026485206250799087, 0.06931310552305425, 0.0688244911968473, 9.999999999998899e-05, 9.999999999998899e-05, 0.1573414402829334, 0.05539125104363174, 0.03646974687651294, 0.03760869801218214, 0.0510663783700791, 0.06990433003116103, 0.05440903071633019, 0.05671552215707065, 0.026581322318913192, 0.07384903251588804, 0.04386173730582199, 0.030857325653458556, 0.04538265737170499, 0.05518016205496756, 0.14108690003482682, 0.00892496156603051, 0.004235165793037177, 0.01518560447238837, 0.11619720074173767, 0.1024921171986225, 0.07187714551997126, 0.3541607373197201, 0.2779420970192338, 0.3949335571929966, 0.30090349801696015, 0.2916511348293549, 0.2190799085780598, 0.3409608579280683, 0.23461170999911907, 0.3912017278828297, 0.018219562814133727, 0.001881494068715961, 9.999999999998899e-05, 0.03582100573863556, 0.028962074081296252, 0.0589727896115001, 0.0019316685543498968, 0.01670098522575847, 0.0732771838718741, 0.1522267145742986, 0.20056018056781655, 0.20732844962971475, 0.16899114844169583, 0.42282105309707885, 0.1340807420796224, 0.22334398425059343, 0.145424747235816, 0.13267045340237127, 0.11760009375013036, 0.12559157883888805, 0.1174029023615678, 0.1446617807907833, 0.1335941401592623, 0.13581115204594574, 0.14490372219488656, 0.18955035723795255, 0.10292101222891814, 0.06363690626492935, 0.04726394956535607, 0.06690090031105245, 0.08266292205230152, 0.07781312322377631, 0.07425735575704218, 0.07173145112752244, 0.18652729414492242, 0.05099646539343228, 0.17777772376633116, 0.11658239652158031, 0.15807592848688035, 0.18479540809559047, 0.12836354714070475, 0.15669716682098644, 0.18442551443534572, 0.11246680665108921, 0.16419464438658338, 0.10445557375446002, 0.1397322710133191, 0.18030114566068933, 0.23197279669536697, 0.15203955313374407, 0.17853493364851403, 0.12557590750917558, 0.17853452772196965, 0.11496507276788093, 0.10118994472720955, 0.12547818025763813, 0.14938441308500094, 0.15939190125221725, 0.19651539755712621, 0.18935564330059396, 0.09907299483308163, 0.16599081385033554, 0.10034799079796064, 0.07923434522830552, 0.18016013724288482, 0.3546249762457422, 0.09775397121131268, 0.15521080648394003, 0.16606531313330486, 0.09974946171724242, 0.28890100529172, 0.18325902817482898, 0.21436448768604488, 0.1833611373665115, 0.26378101792232456, 0.23740877800119953, 0.21761221801957276, 0.22532865793436507, 0.2244513435333031, 0.19902823699873584, 0.21632824416923613, 0.04124732399078623, 0.04503551611180723, 0.06539809860081658, 0.04782892575851383, 0.061675432245461126, 0.02623781909710321, 0.04661895322040821, 0.03959711499416607, 0.051037380708323865]}, "mutation_prompt": null}
{"id": "f5f48def-5a77-483d-be7e-9620779f845f", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n        self.memory_update_rate = 0.1  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n            if (len(fitness_history) > 1) and (fitness_history[-1] < fitness_history[-2]):\n                self.memory_strength += self.memory_update_rate * (1 - self.memory_strength)\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearchImproved", "description": "Introducing a novel adaptive memory update strategy based on fitness trends to enhance convergence speed.", "configspace": "", "generation": 38, "fitness": 0.10828079601468926, "feedback": "The algorithm EnhancedMemoryHarmonySearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.35302116706689035, 0.3509470013159467, 0.42421035891958414, 0.41247667900214013, 0.31174402566043025, 0.4081333333645518, 0.39176763940528425, 0.35630219323128576, 0.3465846849832277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019275003713430494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010341232586972504, 0.03208149843099184, 9.999999999998899e-05, 0.023344572849377854, 0.019897077234525162, 0.034232153543270916, 0.03651462639682235, 0.014673465536062413, 0.06700188165716614, 0.014610754146591742, 0.0003996943640278694, 9.999999999998899e-05, 0.0713402417080633, 0.025878126734039886, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030187734552807877, 9.999999999998899e-05, 0.09134462339728966, 0.056408157974875084, 0.0960298080043176, 0.07994089710240515, 0.07951346125372016, 0.07362847945608153, 0.10400094703206653, 0.08422140396635147, 0.08137026863213814, 0.0689326239185526, 0.06249944868759705, 0.11884542404465515, 0.11077230589093379, 0.15594764092651892, 0.11758144500487056, 0.17765557495549134, 0.09662321379704297, 0.04583701040698562, 0.1847769475129205, 0.12227817391512308, 0.038085614440915516, 0.03254769292013093, 0.03956311606562335, 0.008190959659006736, 0.0859417967022269, 0.08581434660504361, 0.1629269733838744, 0.12266329068728699, 0.12955509303135881, 9.999999999998899e-05, 0.024834236851078773, 0.10893992422092347, 0.004985457007391392, 0.12997424474326147, 0.07087972765036721, 0.1136833962152527, 0.15638824835597986, 9.999999999998899e-05, 0.05343395710070886, 0.10956332340261998, 0.02309583122987202, 0.11694081748968255, 0.17909474817561855, 9.999999999998899e-05, 0.1029094246910488, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029490291054645734, 0.005284307120861698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07464279283932229, 0.0253117857884797, 0.07045644121602868, 0.06822497981582165, 9.999999999998899e-05, 9.999999999998899e-05, 0.15132088998522342, 0.05481282560132439, 0.038873785866399, 0.006917749533551398, 0.01833414834446212, 0.0360742870893529, 0.026305379126443262, 0.0066722596967736525, 0.036512323387888124, 0.021932695905975574, 0.011055742654045964, 0.011874983350195545, 0.04634052753690976, 0.05262463176359922, 0.1440022076721309, 0.007151568515468498, 0.006076667742336728, 0.012928086970873998, 0.09764974022074935, 0.06360970883504347, 0.07420567189847205, 0.35181038310208257, 0.29456939653234593, 0.40902576056792117, 0.2521071867339888, 0.30908635543544694, 0.19922871682501375, 0.3782877620142381, 0.25690787491893774, 0.3325782315297944, 0.020585025879688468, 0.010122547216003253, 9.999999999998899e-05, 0.0228753163067017, 0.028601036308185446, 0.06628263975281645, 0.018855533532931235, 0.01632561917217734, 0.08156790568483996, 0.16843827338367645, 0.13829812185994417, 0.1797322313480343, 0.3368266231891014, 0.3520190146317964, 0.18767205620428995, 0.31297262521251734, 0.14211895852183842, 0.13167269795082925, 0.11457143410294413, 0.12593151374621192, 0.12090945076466686, 0.1456579275301061, 0.13094789979243582, 0.1309848516070098, 0.14424922598854095, 0.22693961412800645, 0.10326345483595212, 0.061784729046299613, 0.061940314756147585, 0.07640611671154096, 0.08284303263335113, 0.07778221898838078, 0.07344336186569456, 0.0742129928402061, 0.1650296384691886, 0.051190368586952584, 0.18270039413339678, 0.10651123208894264, 0.15806437429841047, 0.18707615345162176, 0.12930526983008073, 0.1656279761934133, 0.19959252576070097, 0.11235795364479995, 0.16270806457933162, 0.10913116667730172, 0.15787479620448808, 0.1670404983408782, 0.2268911370365373, 0.18698059427103475, 0.1722941832631102, 0.11874110885784717, 0.14490326779074003, 0.1231429455082994, 0.10192394534084503, 0.12526398833901353, 0.15026520791451525, 0.15956273286957168, 0.19500274857105493, 0.18777332481352105, 0.09898113788811191, 0.1664686283566934, 0.09933709061798657, 0.07897647514364836, 0.1818835328423486, 0.048385343080361576, 0.0989014916445844, 0.15278820969933116, 0.16967489536207736, 0.09943089157694307, 0.33135377140372935, 0.1978639172834048, 0.19674303899668244, 0.18239561121548908, 0.19385160061911888, 0.20045434307930954, 0.1830110065147722, 0.19553708875820153, 0.18317846570814678, 0.19258913757151486, 0.20122575939040088, 0.042840149756988466, 0.04404727785714224, 0.05833090769347127, 0.04746060868622959, 0.0593699706709212, 0.04696761103446512, 0.046481774752660576, 0.03793063173020905, 0.046692587046248235]}, "mutation_prompt": null}
{"id": "541a07a1-3794-43ab-8ce3-ebf3950b240b", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n        self.mutation_rate = 0.1  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n            if new_fitness < fitness_history[-1]:  # New block\n                self.mutation_rate *= 1.1\n            else:\n                self.mutation_rate *= 0.9\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive mutation rate adjustment based on fitness improvement trends to accelerate convergence speed.", "configspace": "", "generation": 39, "fitness": 0.11267099727907957, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "73b38891-765a-49d4-8515-4926283b19a0", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "7d997903-d65e-4924-b9db-6ba2422fa834", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength) \n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution\n\n# Inserted code difference: Introduced dynamic bandwidth adjustment based on fitness improvement trends for faster convergence.", "name": "EnhancedMemoryHarmonySearch", "description": "Accelerating convergence speed by introducing a dynamic adjustment of the bandwidth based on historical fitness improvement trends.", "configspace": "", "generation": 41, "fitness": 0.11267099727907957, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "2b06c37e-36e4-4c0d-8e9f-2289d639523f", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            mutation_rate = self.mutation_rate * np.exp(-_ / self.budget)  # Adaptive mutation rate\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-mutation_rate, mutation_rate, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-mutation_rate, mutation_rate, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n        return best_solution", "name": "AdaptiveMemoryHarmonySearch", "description": "Enhancing exploration by introducing adaptive mutation rates based on fitness trends for faster convergence.", "configspace": "", "generation": 42, "fitness": 0.10837815078752462, "feedback": "The algorithm AdaptiveMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.3500144091073092, 0.33479945550866186, 0.4183818075090896, 0.388261703670846, 0.30691656971511216, 0.3693666985048525, 0.3821583086781549, 0.3449335568151005, 0.3617841315015219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009905489365128362, 0.03306336010213928, 9.999999999998899e-05, 0.023421121192548133, 0.028209760644573034, 0.03402473410353868, 0.041218883699671416, 0.018808142506155145, 0.0679337951285317, 0.01219152996393369, 9.999999999998899e-05, 9.999999999998899e-05, 0.07199917725897254, 0.02629759482587779, 9.999999999998899e-05, 9.999999999998899e-05, 0.013007525658694119, 9.999999999998899e-05, 0.08933567409479415, 0.05780852479507159, 0.10228574544070723, 0.0805620814829221, 0.07721560795152815, 0.07478957162892819, 0.1077857826160602, 0.08619453470268856, 0.0834298661174453, 0.06769052781377849, 0.0815990275230486, 0.13019995553790342, 0.12645040196822532, 0.14194756330082636, 0.11745660067412189, 0.20033884553208448, 0.10393117242654204, 0.0488421927583067, 0.18247333042903613, 0.12853877478686315, 0.03815669411532885, 0.03826726299270011, 0.03979572547432486, 0.012773542297916718, 0.07015054368342644, 0.09909667962689495, 0.20594210932581958, 0.11741038842139462, 0.13160867995203385, 9.999999999998899e-05, 0.020854127850569615, 0.11772913876484148, 0.016227955682247774, 0.13465574685187076, 0.08766446636327441, 0.13275454029955513, 0.1562402622003689, 9.999999999998899e-05, 0.05093461363607643, 0.1484523654959754, 0.0018287215667985857, 0.12021024062895524, 0.15963729701933405, 9.999999999998899e-05, 0.10478070743931289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013454899910309348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07425029923569126, 0.02515647498685225, 0.07078425701755009, 0.06623351731074945, 9.999999999998899e-05, 9.999999999998899e-05, 0.145272715247049, 0.05903895088544653, 0.03862388765519986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005192256736429424, 9.999999999998899e-05, 0.0566196007390356, 0.04907874882965735, 0.12631534212662587, 0.01285670131527894, 0.005714656482539215, 0.017603329065955742, 0.09389932374689958, 0.07411076394926963, 0.0706658653938601, 0.36269439515054014, 0.3023862312643981, 0.37226299745888214, 0.2715137249849042, 0.3172134645062529, 0.2077052661458384, 0.36369364076123856, 0.26660450471376884, 0.38505173328398623, 0.0248413898750125, 0.009757654522417947, 9.999999999998899e-05, 0.03545810770486746, 0.02856582706429822, 0.05687879581590527, 0.018672458990771523, 0.01634732643101977, 0.08256202658084966, 0.15265657727810433, 0.1310634104862709, 0.18268987992347485, 0.3029489957768029, 0.3368451054092698, 0.13688127624972313, 0.3690990370323143, 0.13824847433544996, 0.12914951717662226, 0.11633700263476954, 0.12647684346096522, 0.12081780517690277, 0.14567224981488103, 0.1309176727172342, 0.13597415521934986, 0.14298220778489246, 0.22573543735163737, 0.1034576007634379, 0.061026663627327116, 0.061481241362396966, 0.07714436919013246, 0.08395284548238346, 0.07770538199298826, 0.07303182461825164, 0.07509496305726537, 0.21245233965847687, 0.0512039156427847, 0.18082919788169038, 0.10102976619623427, 0.16835811957351465, 0.1785349596359016, 0.13218251630472644, 0.1701942685113912, 0.18650887917917913, 0.1159974688143941, 0.1591790618486364, 0.11486483682138837, 0.15032304270232233, 0.17758093946993936, 0.19526699578189166, 0.15595638762494834, 0.17857179994545347, 0.12236481811197808, 0.14098900729592256, 0.13155019815679203, 0.10232129996534511, 0.12536539725300877, 0.1508639550160038, 0.1607148803466092, 0.1958869010240435, 0.19087785135119062, 0.09914095631003361, 0.16747475873556128, 0.100319188091194, 0.07962417045267178, 0.18695403703106017, 0.37680398511828794, 0.10008800155687636, 0.1559865816261916, 0.17515944200588807, 0.10054937255097907, 0.15408922574594586, 0.20279329006583457, 0.17155145411009454, 0.1812547226337352, 0.18382555760380725, 0.19762092168864642, 0.18116013084338956, 0.17249968942692817, 0.18864978678555122, 0.18731464526227581, 0.17441562694037582, 0.045605846503326886, 0.04370408626597033, 0.06293695819509704, 0.04569689379041997, 0.05255591733202403, 0.04404200306695005, 0.050623720146167894, 0.03674878538099069, 0.041604990182763535]}, "mutation_prompt": null}
{"id": "7e878bd0-605d-4fdc-acc2-9225fd0a7ee9", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:  # Modified part\n                self.bandwidth *= self.pitch_adjust_rate + 0.1  # Modified part\n                self.bandwidth = adjust_value_to_bounds(self.bandwidth)  # Modified part\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by introducing adaptive bandwidth adjustment based on the fitness improvement trends for faster convergence.", "configspace": "", "generation": 43, "fitness": 0.1116202226569064, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.3700451466958663, 0.3790822256094878, 0.4720519813907723, 0.44064042482805965, 0.3342885909922074, 0.4464531119624868, 0.42710795043914795, 0.3871275204147334, 0.37342511925086774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01051635846217125, 0.04074870556732202, 9.999999999998899e-05, 0.023359077945134032, 0.019898439143746005, 0.03339303521992809, 0.03620067764210855, 0.018807930472350187, 0.06691274443434192, 0.014254752491317246, 9.999999999998899e-05, 9.999999999998899e-05, 0.07129791967434629, 0.02539715384889174, 9.999999999998899e-05, 9.999999999998899e-05, 0.00310638933050722, 9.999999999998899e-05, 0.09356331516809857, 0.05582645260918706, 0.09797729881474204, 0.079656146488163, 0.07853916348289791, 0.07458564890066699, 0.1040366995992259, 0.08340585096834097, 0.0822740559144719, 0.07307803302475635, 0.06248078952141145, 0.10319333736190639, 0.11267009658369331, 0.1280457857312597, 0.12007505742591329, 0.173466612039352, 0.08924494201586819, 0.043482392257519153, 0.1980292063632667, 0.116665943915234, 0.03818332559275872, 0.037814357331617754, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.20536895973831326, 0.1181008488105284, 0.12996335829633077, 0.00012811088919861824, 0.025074941305773257, 0.10313558523956212, 0.007817763866977634, 0.12277594544802772, 0.06807986571289781, 0.1121727968107783, 0.15228911268591783, 9.999999999998899e-05, 0.052981608104261446, 0.13670444578726604, 0.0012360338661621117, 0.11448376177409159, 0.2115940150333433, 9.999999999998899e-05, 0.10204067103977177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07219918076262821, 0.02665776388871277, 0.07265111899645471, 0.0669673297775013, 9.999999999998899e-05, 9.999999999998899e-05, 0.1518374369730161, 0.05571835150424265, 0.03989127563652328, 0.02022836458019739, 0.05689493166517845, 0.06147222198210023, 0.0595722768617748, 0.031229385765821682, 0.03824886354259194, 0.07906662708753032, 0.06810874241516052, 0.02027308240237402, 0.07129884988114277, 0.04883047466157109, 0.13099924009581188, 0.009442335735167395, 0.004608282772474048, 0.011365290137161144, 0.11132784845343102, 0.067363247219416, 0.08265327592885807, 0.36831592195580143, 0.301358929196447, 0.43049898271083675, 0.24357087911051045, 0.3046338103807973, 0.2051768492724516, 0.36704694302681906, 0.23052476190946192, 0.3198251769169258, 0.020512437043973875, 0.010176915450534452, 9.999999999998899e-05, 0.022359964406502897, 0.028642557449836792, 0.0553832274336028, 0.01894032064262119, 0.016362918422369477, 0.08318801332219117, 0.15260353733550858, 0.14409984225927475, 0.16445280934131767, 0.40346060723707455, 0.33669942307745204, 0.13551100465434063, 0.35795805153018145, 0.13627193101666513, 0.13035011675267272, 0.11460914254086596, 0.12551764722426395, 0.12078545091914039, 0.14564695950711848, 0.1308990195171491, 0.13169492310128228, 0.14492339384436004, 0.22320238448058283, 0.10331528553991032, 0.05989306398309491, 0.0621748408631424, 0.07401656802704437, 0.08283699394928157, 0.07781392962927225, 0.07260014682016058, 0.07362995871204825, 0.18552067069921074, 0.051228943330409726, 0.17012566158332554, 0.11829396461631825, 0.16339885262506249, 0.17614353940167204, 0.13405452599136425, 0.159761334462575, 0.1678062101728629, 0.11244829572629766, 0.15399392223690866, 0.10744692459506655, 0.13583875960133118, 0.18048740580696754, 0.22934994371137085, 0.18230981470450847, 0.19043320434300282, 0.11784128021175233, 0.1475990359997964, 0.12232337348743527, 0.10174577755710745, 0.12559304517603664, 0.1499443350001095, 0.15927674185394392, 0.1946491992299263, 0.1869687134061686, 0.09889961612365805, 0.16653684384919343, 0.0997654481038368, 0.07889224238679216, 0.18196183344519767, 0.04834173641329509, 0.09876220453212459, 0.15210169790036776, 0.16743334256463205, 0.09935516702751024, 0.28575358135495843, 0.1955377935854412, 0.2000663690713259, 0.2122105370228483, 0.20797573930563829, 0.21118552531858692, 0.20235467266934182, 0.22682451212331578, 0.24811395315384877, 0.2283606162747699, 0.22169609256561795, 0.040738934696151086, 0.045729701410081924, 0.05955933273675218, 0.04767660550467967, 0.06559792571555412, 0.04695890906414801, 0.045649154692096405, 0.037951372092264735, 0.0473132645275528]}, "mutation_prompt": null}
{"id": "d2268dc7-4881-49c8-a6c5-74f3c910bdb5", "solution": "import numpy as np\nimport concurrent.futures\n\nclass EnhancedMemoryHarmonySearchParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def evaluate_solution(self, solution, func):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            futures = {executor.submit(self.evaluate_solution, harmony_memory[i], func): i for i in range(self.harmony_memory_size)}\n            for future in concurrent.futures.as_completed(futures):\n                fitness = future.result()\n                if fitness < best_fitness:\n                    best_solution = harmony_memory[futures[future]]\n                    best_fitness = fitness\n\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearchParallel", "description": "Implement a parallel evaluation strategy to evaluate multiple solutions concurrently, enhancing exploration in the search space and potentially accelerating convergence.", "configspace": "", "generation": 44, "fitness": 0.11242307048406702, "feedback": "The algorithm EnhancedMemoryHarmonySearchParallel got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.3669544297869761, 0.35480926662097156, 0.4794281697351548, 0.4918351891349029, 0.3394288792853928, 0.47508842476090574, 0.40403200499753245, 0.37060270250519134, 0.37418904979040235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016804926087661265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010391116767851982, 0.04054752670742745, 9.999999999998899e-05, 0.023344021006958426, 0.01985833964880035, 0.03335569590781562, 0.03630779005711915, 0.018780308100970644, 0.06637665090638856, 0.014638991372200483, 9.999999999998899e-05, 9.999999999998899e-05, 0.07121158752218903, 0.026118126957588528, 9.999999999998899e-05, 9.999999999998899e-05, 0.002960505576883543, 9.999999999998899e-05, 0.09332353271764204, 0.05619936457304486, 0.09677226449208387, 0.079670543573513, 0.07825732538640673, 0.07491237638748915, 0.10303148556829966, 0.08360549960983021, 0.08367846719379501, 0.08074748948743293, 0.0604144974138755, 0.09695897066654269, 0.10871983823287934, 0.14250305810265596, 0.11306573058832559, 0.18652364061470916, 0.0891419852162042, 0.03763582853492409, 0.1783585902717798, 0.11645063028768055, 0.03821516038026218, 0.037716180580306014, 0.03836922004686805, 0.008174386615870888, 0.0858813746408863, 0.08573527356814226, 0.16953121390285197, 0.11756914771857485, 0.1280797126839074, 0.0001349365535248115, 0.02163692981214116, 0.10432760675944541, 0.014370054589074477, 0.13283251225008497, 0.07165664702684849, 0.11304970547059712, 0.14798532701040534, 9.999999999998899e-05, 0.053319859500389755, 0.14187653650989795, 0.001085247710297832, 0.11373214846203827, 0.173463235469408, 9.999999999998899e-05, 0.10131747904549848, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005147601463626472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07096994916842181, 0.02813672972651171, 0.0716119032582947, 0.06617429056731505, 9.999999999998899e-05, 9.999999999998899e-05, 0.16430692308249195, 0.055497197676298904, 0.03946069357323945, 0.03117600554022537, 0.08887902925812108, 0.076876433017391, 0.05648767022937151, 0.028557530135559506, 0.034001343966431286, 0.07273436050988236, 0.05769124651033175, 0.025430661039389846, 0.06439030239677068, 0.04935875109942822, 0.13491830216118184, 0.01006808165991857, 0.005101814521584869, 0.01187076426431799, 0.1271019315772679, 0.07851141676531881, 0.07877338949544122, 0.35734444488611006, 0.29856424407703475, 0.4520148201055969, 0.24930817508099656, 0.3085722931104634, 0.20254993069487348, 0.3836377442706106, 0.2329813660318114, 0.34312434393028, 0.020418546044087438, 0.010161722343176915, 9.999999999998899e-05, 0.022335478713763735, 0.02861516806429698, 0.05524743590970593, 0.01890613820687015, 0.01631350310802504, 0.0826149447220843, 0.1502734590795326, 0.1351247109788939, 0.16329611420594314, 0.3461522800711162, 0.31579833918376987, 0.14573390126178254, 0.4133366199980818, 0.13497652245711156, 0.129735405953191, 0.1146029773578231, 0.12561522567528682, 0.12074883457306496, 0.14559712290022087, 0.13081685243701102, 0.1309441791716578, 0.14183493156991134, 0.22333824228536037, 0.10328623017947702, 0.05982918402280879, 0.06213469675654504, 0.07582509823429606, 0.08272882174142848, 0.07772376701763839, 0.07249758149766328, 0.0717977814906795, 0.1923484355347096, 0.051175032023223155, 0.17327794723641365, 0.1174188607017399, 0.1642147392068919, 0.18312786640635348, 0.13410900081326071, 0.16827144159455798, 0.1774068889645496, 0.11869968110369633, 0.15811597792931786, 0.11394226666924101, 0.13538457643867186, 0.18020525002524423, 0.22900164136290035, 0.18165830873972588, 0.1900303666891867, 0.11721910985672457, 0.14741891405356278, 0.12194501889831588, 0.10165823834644871, 0.1255160981628789, 0.14977785372566887, 0.1589400187597092, 0.195260254262141, 0.18672230483957342, 0.09883796235516507, 0.1663591099990872, 0.09967741047275469, 0.07885673093680756, 0.18304589007168537, 0.04827443170268475, 0.09859627181335617, 0.15183344528420584, 0.1672417207651331, 0.0993206147031882, 0.28521728215248077, 0.19120717923684194, 0.22283404532608753, 0.19657338324053575, 0.22360239189563236, 0.25573210694960946, 0.23097971609482182, 0.22511221636742007, 0.20288906028896914, 0.23568209819451813, 0.24009928384248524, 0.04038645257637441, 0.044395629154968974, 0.05788521913851641, 0.047640544431867604, 0.06163317415732328, 0.05523024659529363, 0.04672169909008572, 0.03807291787506095, 0.046867951769027805]}, "mutation_prompt": null}
{"id": "0d5e2910-b9aa-419a-859c-6f00ed8a7f17", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if np.random.rand() < 0.9:  # Introducing probabilistic update mechanism with a different rate\n                self.bandwidth *= 0.8  # Modified from self.memory_strength to a different factor\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by incorporating a probabilistic update mechanism based on fitness improvement.", "configspace": "", "generation": 45, "fitness": 0.10181319465744716, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.3270507380658476, 0.32650426257983844, 0.4104606656106802, 0.4162858644448928, 0.28983327948640836, 0.3465209901744044, 0.367401417098281, 0.3574758448545139, 0.3114185199176017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08409309278503785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023509218970840795, 0.03224485093343732, 9.999999999998899e-05, 0.02354746285676179, 0.0077126102759462745, 0.0338362234485825, 0.0365112429488923, 0.01926014342907778, 0.06618073220986675, 0.004472997236759868, 9.999999999998899e-05, 9.999999999998899e-05, 0.06208191775438132, 0.021732005886664574, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906505719895147, 9.999999999998899e-05, 0.08221745360935273, 0.05395379039941728, 0.09015262971594151, 0.07907453713662393, 0.07469593234210659, 0.06988484641899118, 0.0971853962667234, 0.0785321331848261, 0.07293908876097344, 0.05785268396758658, 0.05478395072383446, 0.056939352141474386, 0.053849965747849615, 0.10141658578208335, 0.04414027198381487, 0.15989975832488812, 0.08688540178811, 0.02805531792008109, 0.14079928976052525, 0.10554816705178816, 0.038392065678597875, 0.01621899051892539, 0.036579573679146216, 0.0028538466775491766, 0.06934813545189955, 0.0947481834197782, 0.021348803301565966, 0.11069129203260308, 0.0006706018332596209, 9.999999999998899e-05, 0.0020367013095892172, 0.11172998740943962, 9.999999999998899e-05, 0.11300275500814971, 0.058219747560163126, 0.09146019286425655, 0.1314422504381626, 9.999999999998899e-05, 0.03047212383298903, 0.08060763086939027, 9.999999999998899e-05, 0.09861380621880256, 0.15573075349559518, 9.999999999998899e-05, 0.0848425510174331, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021583523443420294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05285500047438563, 0.025698704588144605, 0.0655864144192394, 0.06734485474176033, 9.999999999998899e-05, 9.999999999998899e-05, 0.15339445609542113, 0.05559035287179759, 0.03771109818973151, 0.02378606689115237, 0.03657931062461417, 0.07624040384390007, 0.05094794020893245, 0.028643198025084526, 0.0278819699474101, 0.043200881921510725, 0.017933098560750427, 0.01906848916283832, 0.03170113087692372, 0.03724897140299377, 0.14687286896827934, 0.021529945193156208, 0.002013270305551096, 0.0052913154305739285, 0.1033216985434785, 0.051789612861208534, 0.06210507515664754, 0.34802212315395264, 0.3073830822438599, 0.37317572725449233, 0.24882303833597086, 0.22934734035028015, 0.16037499225250063, 0.3231065210013576, 0.17682420838027701, 0.3157763691381491, 0.016571429352302935, 0.00987148973137919, 9.999999999998899e-05, 0.02337566820652759, 0.02719228202837165, 0.0634404583290119, 0.019031968506290964, 0.01640849815752865, 0.07350760879836526, 0.13332089410296843, 0.24672832174363934, 0.15885060659337868, 0.38773687653711564, 0.2947764125011527, 0.14972702108024982, 0.25752032389528934, 0.13744539519649757, 0.1060364071267692, 0.11660266342364578, 0.12625556911144975, 0.11728817520360557, 0.14568836286205245, 0.12986802820306131, 0.1136580050774415, 0.14446820307377461, 0.19038175992955386, 0.10232086592502587, 0.06020687216869558, 0.05962824561625224, 0.07507399315893559, 0.08272709609970519, 0.07793325311986699, 0.050659589377671344, 0.0713375906819147, 0.17543448736152134, 0.05089638304260369, 0.17814379165866379, 0.10491101497669775, 0.16219022706296127, 0.1844136909141515, 0.12875973668026963, 0.14552945599839406, 0.19157609091067174, 0.11121316360009859, 0.15371633601349022, 0.10225343875199999, 0.12642113778412822, 0.17349015528058354, 0.17497990153498266, 0.14663265063554787, 0.15634597788997584, 0.09891357397663791, 0.14021854140423406, 0.09424145451800137, 0.1001609099462405, 0.1258207476513986, 0.14823063862537134, 0.1557422141631971, 0.19410770937651922, 0.18198638039517534, 0.098620801658305, 0.16513572671295118, 0.09757894328867023, 0.07886626333580649, 0.16880362219808742, 0.32437458103156436, 0.09642848167986562, 0.1461764480241987, 0.157462334185548, 0.0985994402117536, 0.27513697787201097, 0.1715438505523531, 0.2219591793964788, 0.21100920858454997, 0.2075496624335713, 0.21554923159257855, 0.21262412603667613, 0.20028316495682652, 0.2237954077430112, 0.22515091169092394, 0.24286171184663607, 0.0439730954935631, 0.04529866878411126, 0.060558858260295945, 0.049447534064274046, 0.06035123249631846, 0.04763282677448166, 0.0468236845779646, 0.03673471628220226, 0.04932289015018709]}, "mutation_prompt": null}
{"id": "d4f46e68-4d4a-450b-84ed-3cc5e84d1af4", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "26acabfa-880d-4d64-964c-0d49e9c88bf1", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "bd30a00c-1d24-4025-b1f1-5f6ad8ad9db3", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n                    # Adaptive local search step size adjustment\n                    step_size = np.random.uniform(0, self.bandwidth)\n                    local_search_space = np.clip(new_solution + np.random.uniform(-step_size, step_size, self.dim), self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_search_space)\n                    if local_fitness < new_fitness:\n                        new_solution = local_search_space\n                        new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Introducing adaptive local search with dynamic step size adjustment to improve convergence speed.", "configspace": "", "generation": 48, "fitness": 0.1092245762147872, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.361890167555617, 0.3605194046618716, 0.4363261335172328, 0.40964226015767047, 0.367856013373839, 0.39190328791220896, 0.3948045244153, 0.41572913787436594, 0.39915344077764436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026087544355419823, 0.03205298772928322, 9.999999999998899e-05, 0.023474270447498946, 0.012575065876376579, 0.03407490530915658, 0.03604014228909458, 0.014374144907132513, 0.06501278204831629, 0.012780910299149628, 0.0004578010058743365, 9.999999999998899e-05, 0.0705341320795243, 0.022169842647377647, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031621350835883133, 9.999999999998899e-05, 0.08994643335061869, 0.059312908132626796, 0.10191384512508772, 0.08058289326601809, 0.07699928704219694, 0.07595430582756002, 0.10408327943720419, 0.0853607367914988, 0.07844067582441405, 0.08257321609682367, 0.054953534684034966, 0.10420706728015994, 0.09221051720721496, 0.14326016714527012, 0.07778790757700949, 0.17462971448725073, 0.09485142874737817, 0.04666392178594725, 0.16079743802185054, 0.12945845220968188, 0.0384024783424366, 0.01430561831639754, 0.06624295686604886, 0.007818066188451822, 0.044692991480308586, 0.0997818323565105, 0.1420556324467318, 0.12071123622004876, 0.020793103166135918, 9.999999999998899e-05, 0.04497254874804624, 0.10676546472983905, 0.00627450786942596, 0.14068511868978018, 0.06695942563462465, 0.1131404509062035, 0.1675872493072864, 9.999999999998899e-05, 0.08705547872191022, 0.11406531415401155, 0.006068353340006438, 0.1259280541363298, 0.1790861389947982, 9.999999999998899e-05, 0.09607778585241977, 9.999999999998899e-05, 9.999999999998899e-05, 0.007096233847163735, 0.01439394958497453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0552588106481926, 0.04530629288860333, 0.06871642279480927, 0.06909710353376575, 9.999999999998899e-05, 0.00013524012497145854, 0.1449880791489111, 0.054792873921799545, 0.03794767652783304, 0.026324420678822236, 0.0691377949230908, 0.07656841606806175, 0.05198412221248305, 0.03574437276805642, 0.04336707639871784, 0.08183721585416603, 0.01909412153063239, 0.024391530005494544, 0.041798099356673446, 0.03751645748994836, 0.15230825735671283, 0.0036884154074259268, 0.004249237328942446, 0.022149544353233575, 0.12039743468216857, 0.08055400414614944, 0.06723365459638864, 0.3409349301868321, 0.3485281201482213, 0.4016178236218455, 0.2767098817002227, 0.2908202194684427, 0.22434880167387283, 0.3420748263340202, 0.24102688406670236, 0.3574554982315675, 0.018281073831588945, 0.009967373867753149, 9.999999999998899e-05, 0.02344087712350318, 0.018101824495189045, 0.058502951891393096, 0.02030823087456357, 0.016524435133453363, 0.07308163034423887, 0.1353876408151533, 0.1642821052739809, 0.15343802164862297, 0.32177945139387565, 0.2534825294124955, 0.16970851152406174, 0.23717591916056924, 0.12878734174625084, 0.13261266214216338, 0.11480095771198084, 0.1269720629178095, 0.12088018179950943, 0.14621198326824847, 0.1307605612412206, 0.13283569277350893, 0.14526348690096924, 0.20413559184856378, 0.10838948895775624, 0.060620650141164134, 0.053707876029357116, 0.13172490798713565, 0.08309763944055393, 0.07785647470532953, 0.0727313203232004, 0.0709225053385999, 0.19417021886793362, 0.05128221008590006, 0.17839068107734235, 0.11105276905054029, 0.1676753021052777, 0.17544451053434496, 0.13349117283795864, 0.17119777493976784, 0.1727444828714657, 0.11694634961709505, 0.16858017750971743, 0.13334472203307035, 0.13394795122639647, 0.17562151854155272, 0.19206128395968358, 0.17250299020997628, 0.1771203597025105, 0.11458693049452306, 0.14160483163419035, 0.1218064203961523, 0.10154169713755457, 0.12646913866875897, 0.14696152833752785, 0.1569394882598626, 0.1960806024027365, 0.18711291389900175, 0.09882947263147157, 0.1652811876759439, 0.0991585423482324, 0.07832484732939504, 0.18717576059095153, 0.048492108838092074, 0.09728406236326315, 0.14726227611849496, 0.17159214850051308, 0.09973981776509877, 0.30242055954939584, 0.18338488272293207, 0.19650012638719083, 0.1967751154391748, 0.23129180102277247, 0.22001815432508876, 0.2659431540689223, 0.19057938609160296, 0.23597732539280358, 0.23384006488293974, 0.23245211512410702, 0.0402956072013132, 0.04257218133947627, 0.0662234449447553, 0.04587567777121293, 0.060495963871526004, 0.027767490417770047, 0.05134943280141924, 0.03736025325739134, 0.030999888634995254]}, "mutation_prompt": null}
{"id": "6415a520-8018-42ff-b893-aef91216c7c9", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "0bad5610-bd87-4f41-b4e4-4292330a29c9", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "5593d049-c58c-4962-922b-9e8c1c115dd7", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "56331eb9-e955-410e-8397-b2d43fece1d7", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "bcd4c1cf-f19d-45dc-b779-db1a75001436", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "ab8e2523-9aff-4772-bd41-2f82b1b20e7e", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n                    if local_fitness < best_fitness:  # Adaptive bandwidth adjustment\n                        self.bandwidth *= self.pitch_adjust_rate\n                    else:\n                        self.bandwidth = self.initial_bandwidth\n\n            fitness_history.append(new_fitness)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by introducing adaptive bandwidth adjustment based on fitness improvement trends during local search.", "configspace": "", "generation": 54, "fitness": 0.10019655017726999, "feedback": "The algorithm EnhancedMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.28780961019949214, 0.28204340069747114, 0.46066081484217947, 0.41172085946427595, 0.2742761128602801, 0.38113178713434515, 0.3835283576080952, 0.3541310747411833, 0.3230702872467548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013788923232228578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002276013420263401, 0.032259799618973406, 9.999999999998899e-05, 0.0235080095825575, 0.007480530011589881, 0.034401596193720074, 0.03604085256968992, 9.999999999998899e-05, 0.06651034522439259, 0.012606924968737276, 0.0004150290971083326, 9.999999999998899e-05, 0.07175073175096203, 0.03160753568940977, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027253738618623347, 9.999999999998899e-05, 0.07581557787356874, 0.05197910614555035, 0.08385318355969362, 0.07786310542061348, 0.07391270915801595, 0.07386748373123186, 0.09967636982831352, 0.08015318425243334, 0.07392232915989749, 0.059772548377388324, 0.04517441390043819, 0.06935588008508475, 0.08290039350849587, 0.11537075353735149, 0.07132408366009657, 0.1477536465693149, 0.07850006110880026, 0.021881486596644795, 0.10015536990496454, 0.040220870660947705, 0.006487144987010973, 0.004555523375041615, 0.031143059333287204, 9.999999999998899e-05, 0.026247387848711834, 0.0788552727626497, 0.03198756462221097, 0.10667869239614647, 0.12077945405592727, 9.999999999998899e-05, 0.01413687503450678, 0.09049314730479052, 0.00022295164626595643, 0.1129800277449925, 0.06744469631533079, 0.09206743410381091, 0.1378361983930101, 9.999999999998899e-05, 0.046406170758050425, 0.10395417491185222, 9.999999999998899e-05, 0.10085290338904673, 0.149305839723737, 9.999999999998899e-05, 0.07484102525228553, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004477217115587129, 0.0004789584313431572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05280650049136382, 0.02545207414738815, 0.06847371210773268, 0.06705938774461007, 9.999999999998899e-05, 9.999999999998899e-05, 0.15656878446200684, 0.05771049457372868, 0.03987911180237258, 0.021357252725822895, 0.06251570695833764, 0.06589446828298173, 0.06141150359460423, 0.04235673766014225, 0.02799309940462702, 0.05904733925309735, 0.03383072730485237, 0.020086324202794437, 0.04708993624796598, 0.03508541964821599, 0.11664318599764101, 0.006540031644124089, 0.003312880397412621, 0.00750019102399202, 0.09084780496899458, 0.06102266272984658, 0.06545907987437405, 0.3349983165991033, 0.26469550294649735, 0.37032883178113796, 0.20554813358588886, 0.2305623823535652, 0.1663877271530344, 0.3417496266254293, 0.1776892070559032, 0.33460425021685736, 0.016719854238952614, 0.0018198164856797483, 9.999999999998899e-05, 0.03586772629031654, 0.028671470284087786, 0.06280253944202163, 0.019000857150246686, 0.016374535340139995, 0.07350212462418604, 0.17284598732418366, 0.14391100662051926, 0.14148258870351416, 0.39299601031359555, 0.30317766663219203, 0.14168850469423344, 0.2487279259328392, 0.14298037388121387, 0.12909586582214083, 0.11451119926457742, 0.1268122826329402, 0.1170946509498092, 0.14809290337817715, 0.13109503231560882, 0.1305933572497766, 0.14011711803025662, 0.207819360796622, 0.10244527907547396, 0.06047952808868684, 0.05931674166533174, 0.061382188466732934, 0.07999765176367968, 0.07795073945833697, 0.0728750932524681, 0.07228045427715057, 0.15025017753230607, 0.05132687873906083, 0.1753253635730262, 0.10783748871680032, 0.16717965144864133, 0.1767955387318807, 0.12905994220907746, 0.16163908305768704, 0.20113639401714567, 0.1158078504843526, 0.156325269306002, 0.09574833392543713, 0.12385762689873192, 0.16270024380734271, 0.21984522734065226, 0.11548051606615772, 0.1675455217016939, 0.10254598263814807, 0.13835834937002223, 0.11597439952509248, 0.10078473694124535, 0.12463819007364652, 0.14875270839126442, 0.15561115467498055, 0.19379612175122862, 0.18626379474142551, 0.09876630692347499, 0.16570922525788379, 0.09852921021310701, 0.07779974509506993, 0.1703285055874708, 0.04732126059565411, 0.09724874438595088, 0.1467325497849482, 0.15613196036447918, 0.09801479541699099, 0.14629613344760295, 0.18167658485026195, 0.22736029158395155, 0.21443771896192765, 0.2076789208700468, 0.19959008086323682, 0.23477766773079956, 0.25350526720827715, 0.26716332940601906, 0.21831799809331864, 0.24608133129189924, 0.04449806036222104, 0.046278308757507824, 0.062414153740797174, 0.04562235628556632, 0.06120197066393396, 0.048353871167692186, 0.047319477598272486, 0.03763659932174446, 0.048150316538041804]}, "mutation_prompt": null}
{"id": "d2864a66-a351-46a8-bf8e-8a54f906cd53", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "228990ed-0a3f-4a36-b31b-510e7e72e48a", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "66002b8c-97fb-40a4-b021-c796e9123689", "solution": "import numpy as np\n\nclass EnhancedMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        memory_strength_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n                memory_strength_history.append(self.memory_strength)  # New block\n                if len(memory_strength_history) > 1 and memory_strength_history[-1] < memory_strength_history[-2]:\n                    self.memory_strength *= 1.1\n                else:\n                    self.memory_strength /= 1.1\n\n        return best_solution", "name": "EnhancedMemoryHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the memory strength parameter based on fitness improvement trends.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.36836993346636904, 0.3561637915103407, 0.48094115290852335, 0.4935751524267896, 0.3406802451401181, 0.47680075815796086, 0.4054377622640787, 0.37193583001866304, 0.37546753309860714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017231047542354272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010413125725421968, 0.04052366642340399, 9.999999999998899e-05, 0.023364078195862392, 0.01989548926759832, 0.03341237640801442, 0.036348312879325384, 0.018820879350585296, 0.06649871832867904, 0.014670408739532514, 9.999999999998899e-05, 9.999999999998899e-05, 0.07126851897318265, 0.026173701500751823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029672443331346665, 9.999999999998899e-05, 0.09355150042992644, 0.05626807872501138, 0.09691553905633332, 0.07976573988830582, 0.07830565168667158, 0.0750824653943789, 0.10318744203508412, 0.08364134643270571, 0.0839064698464217, 0.08126476641675673, 0.060837451445187485, 0.0976329861574512, 0.10939809168982284, 0.14326720632584544, 0.11376215585469474, 0.18740695388957762, 0.08946553972251137, 0.03786877745409967, 0.17845211686053153, 0.116665943915234, 0.038278654185925354, 0.03780725704901522, 0.03843879640646242, 0.008190959659006736, 0.08598675988208038, 0.08581434660504361, 0.1698847804277973, 0.1178808510269922, 0.12843121157015724, 0.0001447351207831682, 0.021902053702777757, 0.10464784235232494, 0.014655444698642661, 0.1332842576885962, 0.07193366200187101, 0.11339077862125846, 0.14839860405577987, 9.999999999998899e-05, 0.05359229509629693, 0.14231137473732214, 0.001123280210069244, 0.11407193534889792, 0.17392837082024803, 9.999999999998899e-05, 0.1015720130328156, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005330050828864508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111900006591276, 0.028198451239269562, 0.07176226456467194, 0.0663133340909342, 9.999999999998899e-05, 9.999999999998899e-05, 0.1646747146507609, 0.05561379921580123, 0.03954820142860349, 0.03138050329551756, 0.08921820532226632, 0.07718669479393225, 0.05679960401245465, 0.028823568800685484, 0.034182674927924706, 0.07307374989009552, 0.05809651544834682, 0.025601537366777838, 0.06464455357681176, 0.049518368406059166, 0.13531859611836994, 0.01017700239736119, 0.005149956888045426, 0.011934833726128247, 0.1276968454943248, 0.07880125261166504, 0.07898652211649348, 0.3580104293330547, 0.29928742825411525, 0.4528122154886266, 0.2500802147821024, 0.3094125529494304, 0.2031310974405428, 0.3845012784853079, 0.23372295030944112, 0.34408695344573015, 0.020461907200179263, 0.010182637765633107, 9.999999999998899e-05, 0.0223715333472857, 0.028675794089038753, 0.05533181920877228, 0.018945342563132184, 0.01634744184098602, 0.08273014338512363, 0.15028144701554158, 0.13522344264804087, 0.16349371184787143, 0.34679019914467224, 0.3163712890008449, 0.14590136213043292, 0.41420048060925485, 0.13517126327007167, 0.1297571426402243, 0.11462827827818434, 0.1256514506133013, 0.12078804298895263, 0.1456433153568576, 0.13091558937425485, 0.1310380702823717, 0.14187538672746247, 0.2235457168672904, 0.10332801981270623, 0.05988110755836862, 0.06219341539518719, 0.0759279018350304, 0.0827880470172937, 0.07780938655812786, 0.07255705092893838, 0.07180275504347189, 0.19266450825189585, 0.05123536756367297, 0.17339818758188008, 0.11759925804644389, 0.1642969502317696, 0.1832835849665907, 0.13423627857838982, 0.16844305944426308, 0.17734905918919464, 0.11882123187340166, 0.15813827460958196, 0.11431291471210003, 0.1357540380493668, 0.18060297525442326, 0.22952673619309316, 0.18218336612539854, 0.19046003713267767, 0.11757598718700868, 0.14782724756982646, 0.12226854973057832, 0.10173821132950056, 0.12560164413953845, 0.1499548061677196, 0.15912061899013186, 0.19472990289147052, 0.1870017871898485, 0.09890077663429442, 0.16654457930081823, 0.09976496865474505, 0.07890022128899332, 0.18330041197953917, 0.048338687962900084, 0.09872410066881598, 0.1521145755607095, 0.1674994770226662, 0.09934995234854849, 0.2859882582512976, 0.19166219183406508, 0.2230649737288295, 0.19670519316806123, 0.22382350970289777, 0.25615160512024937, 0.23132895479986249, 0.22525759923382627, 0.20303975057647183, 0.23602956929329433, 0.24044008416769425, 0.04047138801132055, 0.044468105233413935, 0.05787573521065803, 0.04767334727333239, 0.06174067037428088, 0.05532444790404989, 0.04679769189894667, 0.03815162381184223, 0.04690073850174581]}, "mutation_prompt": null}
{"id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 58, "fitness": 0.1357548759248097, "feedback": "The algorithm EnhancedConvergenceHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "8cf0efb7-cc76-4311-aba0-f0402a114351", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "365bcd88-4b1b-4e65-88c3-0fe08d013546", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            # Adaptive bandwidth adjustment based on fitness improvement trends\n            if len(fitness_history) > 1 and np.mean(fitness_history[-5:]) < np.mean(fitness_history[-10:]):\n                self.bandwidth *= 0.9\n            elif len(fitness_history) > 1 and np.mean(fitness_history[-5:]) > np.mean(fitness_history[-10:]):\n                self.bandwidth *= 1.1\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Introducing adaptive bandwidth adjustment based on fitness improvement trends to accelerate convergence by dynamically fine-tuning the exploration-exploitation balance.", "configspace": "", "generation": 59, "fitness": 0.13449764394385846, "feedback": "The algorithm EnhancedConvergenceHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.38894752222967777, 0.37176319058647933, 0.3942184539705923, 0.3945016773483939, 0.3574492029091074, 0.3979776357624143, 0.3955733341926335, 0.37386367845939594, 0.41019091668516794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06191018986125274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02018675650274382, 0.0441032229190943, 0.0005194778594581617, 0.023663083902237814, 0.019925712703778298, 0.034100855849453326, 0.04063560862687432, 0.02025474747519218, 0.06601346271767283, 0.017714460941805954, 0.008621080218646826, 0.002019564398668572, 0.0790842389597789, 0.04176402135081514, 0.0005803118654561512, 0.008437033959090678, 0.03870916665761048, 0.0016886694946948166, 0.48717615825481686, 0.3147486417353891, 0.43945661064529273, 0.40027043174581345, 0.15525661132149549, 0.4084816934244485, 0.5078479512324048, 0.4074845705022221, 0.6015092250965215, 0.20877080300122208, 0.18384745900897315, 0.20290703039432179, 0.2065723166371073, 0.23075608640724155, 0.23265513048677655, 0.21967246373660787, 0.2014699779352883, 0.14529302332995908, 0.22073298776901862, 0.14015271822964226, 0.07834939531626184, 0.04150809388033738, 0.07665330735821374, 0.008190959659006736, 0.04379186577507166, 0.08878895845178125, 0.19786858491364612, 0.11938487656565666, 0.1348277399561182, 0.040986254753199725, 0.07606653185693901, 0.10440576246104882, 0.06961358643165894, 0.1386315503582648, 0.11438278703340565, 0.12435197170045009, 0.15727153569800445, 9.999999999998899e-05, 0.09531598670213792, 0.16032914791249075, 0.03649379166868916, 0.13257083136326653, 0.1883855704762133, 9.999999999998899e-05, 0.10680857546997125, 9.999999999998899e-05, 9.999999999998899e-05, 0.014926347663442918, 0.0009998153811491273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005691662089953864, 0.07392454837648887, 0.026732110546592747, 0.06930937852445473, 0.06528968535682578, 0.0003773599129365257, 9.999999999998899e-05, 0.1493540683979271, 0.055218779011818486, 0.03629815054617613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06791776262057447, 0.05556546585144173, 0.11574242245438782, 0.0654916163579723, 0.05330526892049092, 0.05163576223046906, 0.1102734093019504, 0.08952725300971687, 0.07510864715061016, 0.35913328502282993, 0.35408787654343055, 0.3815701249161909, 0.3301099735452625, 0.3676643169106776, 0.3270440498155841, 0.34967657911638317, 0.34036800314728066, 0.35187089899117885, 0.03592528688224195, 0.017072080746088236, 0.05293942831771414, 0.038200972887011964, 0.0379978428489236, 0.06798692876916645, 0.018621087798248448, 0.03538974883751689, 0.07216305232612119, 0.2643467410881192, 0.17287885116881785, 0.13214049899155966, 0.280029690336579, 0.30276465563674215, 0.23898363373347586, 0.2940043040499055, 0.1304872772760538, 0.1268211915116979, 0.11427453504834573, 0.17639990369726188, 0.12408829729063031, 0.15623998363881075, 0.13097814675417663, 0.13754161585706481, 0.14116719413308132, 0.24244868420912036, 0.10870622187610357, 0.06366041379729781, 0.1399489106154762, 0.12413954157819485, 0.09478731763562542, 0.07714097333788117, 0.11168722658006358, 0.09142691118450441, 0.20083767066210134, 0.0510931806880397, 0.18709635018639914, 0.1426330750525947, 0.17536603976972331, 0.1937916520912606, 0.14683009315496443, 0.1710843961160755, 0.18435016894601153, 0.13380971641909567, 0.20274901983589966, 0.1578612720811301, 0.18063305895252801, 0.17833303322854122, 0.1955674866706658, 0.19097635331526197, 0.19135409752664034, 0.16491694437517368, 0.16966507717385482, 0.13780297826912025, 0.10236245751759065, 0.12544934200239333, 0.15108626680575377, 0.16277001574099081, 0.19497912253613847, 0.19132267636816913, 0.09911017196636607, 0.16707143276392056, 0.10028330262070462, 0.07962539148065517, 0.19113436363679548, 0.04931128984656641, 0.09960051713275242, 0.1577475998716502, 0.1858869863443201, 0.1007400754381158, 0.1550944360809945, 0.19971402567332286, 0.18310097442280449, 0.19686193144411823, 0.19256743014094713, 0.17854243741503506, 0.18767273855731614, 0.1675412133420192, 0.20627297120978605, 0.180385915859807, 0.1886415877883666, 0.07627943606411614, 0.05655332741849839, 0.059261798610833694, 0.04461652637333158, 0.05527923707891658, 0.06691667746821728, 0.07428819678957221, 0.05625362268958034, 0.050875819520438514]}, "mutation_prompt": null}
{"id": "39d8e88e-86f2-4aed-8bf6-a0a4ed3ebe48", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "55692e4a-3d1f-4db1-b30b-3e1413132999", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "84796f68-d5f5-4f76-945f-2b17391c718e", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "a85866e5-ef2b-438e-a04d-4af1359bb60e", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "b37090da-8bb1-4977-a7de-fbc2c2725513", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 3 and all(fitness < fitness_history[-1] for fitness in fitness_history[-3:]):\n                self.bandwidth *= self.memory_strength\n\n            # Introduce mutation operator for faster convergence\n            new_solution = np.clip(new_solution + np.random.uniform(-0.5, 0.5, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n        return best_solution", "name": "EnhancedFastConvergenceHarmonySearch", "description": "Accelerating convergence by dynamically adjusting the bandwidth based on consecutive fitness improvements and introducing a mutation operator to explore unvisited regions efficiently.", "configspace": "", "generation": 64, "fitness": 0.0984207980511569, "feedback": "The algorithm EnhancedFastConvergenceHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.09.", "error": "", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.2589346632213867, 0.26699447382251984, 0.34023188645657143, 0.3734542090053631, 0.235679171355462, 0.3249323024524968, 0.30188997749578494, 0.30455868028090394, 0.2741871155889042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008054397686489745, 0.034760427524483384, 0.0005710013557307381, 0.023387685518589052, 0.02108671964374975, 0.0430305966067297, 0.036275218137819865, 0.024441538424604725, 0.06708736635468426, 0.008695219654249242, 0.0032115232025921037, 0.00032766952280671724, 0.08216821888539438, 0.03443046123625171, 9.999999999998899e-05, 9.999999999998899e-05, 0.003474922985462814, 9.999999999998899e-05, 0.08355430448736956, 0.05430206980587193, 0.08780207230169179, 0.0783612815469662, 0.0759917490141746, 0.06529487923518373, 0.10032797958741435, 0.07726262317319743, 0.07145148324721828, 0.06111338849943748, 0.03764462546711689, 0.06436948104733242, 0.07701646842484877, 0.087092009007114, 0.05358919590312561, 0.11579124725648815, 0.08376116183881244, 0.031195708594028426, 0.17961823104508223, 0.06727463152633428, 0.06427487436490087, 0.04825097568504211, 0.09328949040270795, 0.02576059785059881, 0.06994558645224602, 0.12565094299038215, 0.19070193955799053, 0.10229712811185132, 0.002075123207857188, 9.999999999998899e-05, 0.007417604867365535, 0.10982591932659413, 9.999999999998899e-05, 0.11147752450578241, 0.028867667305057743, 0.10450037852947314, 0.13853841359667185, 9.999999999998899e-05, 0.08014384873616942, 0.11347036444526437, 9.999999999998899e-05, 0.10600268560036807, 0.15228999686765887, 9.999999999998899e-05, 0.08673270823132384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004649448486407581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05440637915685054, 0.03755899914330707, 0.07612024377490412, 0.07322248466613057, 9.999999999998899e-05, 0.0025520812108239532, 0.15981671203063974, 0.022219646137717652, 0.04152714656186274, 0.005912922547528954, 0.0007647729030751949, 0.005540819099415062, 0.0011930147113241585, 0.0006914962968941341, 0.005170842134446185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030978730026031354, 0.04048778530967867, 0.12017269820114052, 9.999999999998899e-05, 0.00220473036349067, 0.009275887616980949, 0.06496400469159658, 0.05816460090862452, 0.06339249119965518, 0.28263550647673075, 0.2990627709994995, 0.37657807174938673, 0.19090261885583792, 0.21175375334628366, 0.15980949705588898, 0.32099342725353885, 0.1815352574969954, 0.2952333750077685, 0.02984222418901994, 0.012249007609666074, 9.999999999998899e-05, 0.030920455982904826, 0.02269011268748944, 0.06504371566417944, 0.02314182037556911, 0.02270119822074934, 0.07140245622762342, 0.13256095328788264, 0.16715688780222426, 0.15838400745294057, 0.33162961337630126, 0.1932283103786906, 0.17482872124980564, 0.2653747344606757, 0.18232972973188355, 0.12762432435449222, 0.11872920317955049, 0.13368970222640442, 0.12123441282173608, 0.15112837873331086, 0.13410676730534343, 0.1295936018462116, 0.14294109554654932, 0.21878716453606872, 0.10127885468060993, 0.06630637520212912, 0.06766359465854166, 0.09120566223026194, 0.09022202758335407, 0.07785695627550027, 0.06914753439339405, 0.07375904602454486, 0.1909203602635554, 0.050606105766660914, 0.18865490572699095, 0.09903337145349778, 0.1680231956626005, 0.19137135742084288, 0.12592277263277973, 0.16000476174081635, 0.18740117937237633, 0.12449561753481231, 0.16366073485707644, 0.09828118861004254, 0.1325599528725423, 0.1845414727522796, 0.17852607720887959, 0.167491562033371, 0.17570482937708132, 0.10249303099244111, 0.1370088703972746, 0.10634158036199237, 0.12470878916664518, 0.1251844837785353, 0.15067430483794053, 0.15439793865031337, 0.1972438247823034, 0.09994344082016271, 0.0996480671732648, 0.16514193056558746, 0.12491488455037447, 0.07955001397933759, 0.17427115740357169, 0.34348150888080675, 0.09572024081225772, 0.14851563609281948, 0.15459600200183254, 0.10079565320724648, 0.27068662962846946, 0.1797232917981313, 0.19970989307761378, 0.1862918010097504, 0.18798493705055497, 0.20057298448507999, 0.18675116630013466, 0.1894086953350158, 0.18864014751058233, 0.18844194769251887, 0.19669751159998394, 0.04316588789142739, 0.04208732715902608, 0.05880788167986606, 0.04705323813438422, 0.053586149368157754, 0.049159341267029255, 0.044634520805738376, 0.03939379827106981, 0.04671975146523133]}, "mutation_prompt": null}
{"id": "7e21f730-0cb4-43d8-ba67-bc8a7fcdfffb", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "1cd4c4a8-d1ed-4ab7-813b-5f5d765886ca", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "86873710-7cfd-4846-a60d-e313e39be9ad", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "c1e091a5-1161-4c63-8c88-37da5d7db6a9", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "0d4f88ea-f203-4dc6-8f3e-40e766f83534", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "bad8fc8f-3bcf-43fb-9d3a-f3155d19d271", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "54b9cf43-8a4e-4c1c-b23b-f10f0ce64615", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "db1477a9-e0ef-4dec-80a4-44c4196b5b0e", "solution": "import numpy as np\n\nclass AdaptiveMemorySizeHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20  # Initial harmony memory size\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce adaptive memory sizing\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                if self.harmony_memory_size < self.dim*5:\n                    self.harmony_memory_size += 1\n                harmony_memory = np.vstack((harmony_memory, np.random.uniform(self.lower_bound, self.upper_bound, (1, self.dim)))\n                adapt_memory_size_history.append(self.harmony_memory_size)  # New block\n\n        return best_solution", "name": "AdaptiveMemorySizeHarmonySearch", "description": "Introducing adaptive memory sizing by dynamically adjusting the size of the harmony memory based on fitness improvement trends.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 66, 17, '                adapt_memory_size_history.append(self.harmony_memory_size)  # New block\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 66, 17, '                adapt_memory_size_history.append(self.harmony_memory_size)  # New block\\n'))", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {}, "mutation_prompt": null}
{"id": "1d01b7a3-655c-4d85-9bd1-07ecc9489781", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5  # Modified\n        self.memory_adjust_rate = 0.05  # New line\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += self.memory_adjust_rate  # Modified\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Enhancing exploration by introducing a dynamic adjustment of the memory strength based on fitness improvement trends.", "configspace": "", "generation": 73, "fitness": 0.1357548759248097, "feedback": "The algorithm EnhancedConvergenceHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "1979564e-9851-47d7-9468-5d0e714893d8", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "f857e9b2-d8da-49c7-b3e3-03b61626a1e8", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "bb76c6bd-06f4-4575-8e4f-906736fccb90", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  \n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            if np.random.rand() < 0.1:  # Introduce probability-based local search\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n                    fitness_history.append(new_fitness)\n                    if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                        self.bandwidth *= self.pitch_adjust_rate\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Enhancing convergence speed by dynamically adjusting the bandwidth based on fitness improvement trends while incorporating a probability-based local search.", "configspace": "", "generation": 76, "fitness": 0.10872574780884932, "feedback": "The algorithm EnhancedConvergenceHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.4363157010578671, 0.3336555020019385, 0.4509521941136315, 0.42900528013155137, 0.3532458296963037, 0.4175570710816331, 0.38155023664597143, 0.46601879880328034, 0.37094594163715255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025285984992764354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007199272228265219, 0.03232375648249819, 9.999999999998899e-05, 0.02726779079674746, 0.024923320949241656, 0.034217525647699754, 0.03802382993918729, 0.02228312677295885, 0.06725679888546232, 0.010743236136420475, 0.0005754386973009229, 9.999999999998899e-05, 0.0621244765175214, 0.027801214043903344, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029560795402481244, 9.999999999998899e-05, 0.08188135119239726, 0.05688018025315922, 0.09949067254652766, 0.07988716762698223, 0.07632801020472124, 0.07295500236083152, 0.09677777517782671, 0.08598001573193792, 0.07452558976698309, 0.08092543644866512, 0.07590861979207308, 0.09753833330127182, 0.09472209785415997, 0.1328292355815418, 0.08179657240382754, 0.16716183866090706, 0.0966307739897917, 0.055833701419200965, 0.15715848321559567, 0.061545891424701016, 0.038893119919541475, 0.056642426381527056, 0.038191368795198244, 0.02196568494499551, 0.0706552323638352, 0.11764173949005485, 0.1471834590108143, 0.11691774915442332, 0.012019366104177198, 9.999999999998899e-05, 0.034842115976082444, 0.11455548865090437, 9.999999999998899e-05, 0.12189286899714735, 0.07426760196897353, 0.11830700404861505, 0.14968005354863068, 9.999999999998899e-05, 0.07169970890342614, 0.13329197601254195, 0.028843602424259318, 0.10157013766830769, 0.16911128721762447, 9.999999999998899e-05, 0.07805966721512958, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025900986254367986, 0.01280289442675786, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053797524147752296, 0.025825240432345353, 0.06730199673504833, 0.06726832488667622, 9.999999999998899e-05, 9.999999999998899e-05, 0.15419918286505707, 0.054638728464695085, 0.039516361329667626, 0.007131041425713969, 0.04672133390765287, 0.0833779615431024, 0.025383117557769452, 0.02007333713420356, 0.04269171463442545, 0.07878601279889885, 0.023601595064676073, 0.02646844678118143, 0.04339413695049765, 0.039156268731868504, 0.20416481723601299, 0.0029156892799745426, 0.003880102895574389, 0.009787334899222344, 0.11846557255786772, 0.07039464091344294, 0.07363818215263707, 0.3614735845381726, 0.278497191122936, 0.38732172808134735, 0.2596923173558593, 0.30192642248626156, 0.21374008421907154, 0.3374693026749849, 0.1997450766801524, 0.34705102276997446, 0.016125806862422376, 0.0018944415009436444, 9.999999999998899e-05, 0.02346799622306117, 0.018765707005416132, 0.05411580321689946, 0.02078720882262297, 0.01688637919829139, 0.07287726798260408, 0.15324244885591176, 0.18167195718007023, 0.1373333314903291, 0.1707596225330239, 0.24932683976233416, 0.13866599651407163, 0.25392065279389253, 0.13777603562913554, 0.1355326983815729, 0.11665833449763197, 0.12540176593799346, 0.11725406341346478, 0.14594052338373809, 0.1351415920019886, 0.13085042986570783, 0.14453509413799892, 0.18811071087875508, 0.10349489596031203, 0.052216520101080466, 0.05934205093070544, 0.08532165079586151, 0.08262866635636801, 0.07774595940388063, 0.07018741868417078, 0.0714896609270923, 0.19269426873127815, 0.050778791581015725, 0.181474397184459, 0.10568562842883511, 0.1660815044821431, 0.17990487362189356, 0.1347932449027287, 0.13724940498059846, 0.1795156538788757, 0.11397665739494511, 0.16725693018227794, 0.12047702680780148, 0.13578042479311736, 0.17125342745789873, 0.19175151647747435, 0.14214931464122205, 0.1678000425195707, 0.12528716686287167, 0.12803760173071255, 0.12122515508370302, 0.10202921105180085, 0.12580787939759575, 0.14936296939918536, 0.15817012570197753, 0.19633767589023632, 0.1882758599292882, 0.09832432261112356, 0.1654914887768657, 0.10004174624197837, 0.07894113661661417, 0.18078303639108706, 0.3445323193182319, 0.09728221246701474, 0.14705885457627932, 0.16655065901077648, 0.0998407219304499, 0.2810042430685997, 0.18188313648675036, 0.21486352502017703, 0.23625416325095294, 0.22578807078099394, 0.21056543835176922, 0.232451921297953, 0.20808099793767998, 0.22030568450143917, 0.25683542391801695, 0.22347735620180786, 0.03922698039646055, 0.04516824200814429, 0.06258126606467618, 0.051039353236819074, 0.05910966455749056, 0.05627516429424906, 0.04771733502353326, 0.04196160086084566, 0.03822506307692963]}, "mutation_prompt": null}
{"id": "da7eedd7-7c93-411c-a4e6-1ff3d5090303", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "560f714c-9980-4d5d-a655-3cbe4bb29eea", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "ea18451f-21c2-42f0-b021-515c35c5ea66", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "4a43ed1e-7124-466f-9065-1bfa8cac9c73", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "405a4f93-32b9-49cb-a6c7-331cdf9f23b8", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearchSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                self.pitch_adjust_rate = max(0.5, min(0.9, self.pitch_adjust_rate + 0.05))  # Adjust pitch rate dynamically based on fitness improvement\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearchSpeed", "description": "Enhancing the convergence speed by dynamically adjusting pitch adjustment rate based on fitness improvement trends and population diversity.", "configspace": "", "generation": 81, "fitness": 0.10665302026777355, "feedback": "The algorithm EnhancedConvergenceHarmonySearchSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.3432652868320617, 0.3115962882125035, 0.38595617531477233, 0.3898374725987619, 0.29488870255839417, 0.3531641518329792, 0.3470234864081876, 0.3492619676442925, 0.3197304708021914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013716942022009015, 0.03327424390747513, 0.0006989618576918044, 0.023098674067337344, 0.024529495950742608, 0.03429169591411141, 0.03946600592277205, 0.018066878678804077, 0.06566437404140901, 0.011569519792612115, 9.999999999998899e-05, 9.999999999998899e-05, 0.07098717302864188, 0.025772118796362653, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032554102454076528, 9.999999999998899e-05, 0.09477777597736892, 0.05690660014346571, 0.10639802535701659, 0.0823131691985538, 0.0796803843497611, 0.0804447132613304, 0.11012643998763305, 0.08752102478079649, 0.0928203475772299, 0.08508658760101495, 0.09308025781551621, 0.12324168210974662, 0.12928375749989973, 0.14965989615181896, 0.13424888343693453, 0.1720326207473174, 0.10421792871159619, 0.056897320223692205, 0.1963970579444464, 0.1622494112592494, 0.044484823826694275, 0.05442543757720886, 0.051876498234757484, 0.008618527798013753, 0.06932738798611193, 0.09371573035569147, 0.19196415725975513, 0.11438123925775545, 0.1281543209165995, 0.0004305505714493618, 0.0383196513495806, 0.10416689445114768, 0.020340533928831395, 0.12518626698981083, 0.07766966698986122, 0.12317206088751531, 0.1535363530582894, 9.999999999998899e-05, 0.06151595103561236, 0.13266797094369887, 0.010428746046331816, 0.11349952464522717, 0.17176167800442632, 9.999999999998899e-05, 0.1036319199602822, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007853372640697076, 0.00267092420726478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05462193256297576, 0.02830703133979462, 0.06851601933897111, 0.06590291284421523, 9.999999999998899e-05, 9.999999999998899e-05, 0.14364781869685572, 0.056303729214535636, 0.038782902102543426, 9.999999999998899e-05, 9.999999999998899e-05, 0.013265972133733706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005958200748345521, 0.007189292441665773, 9.999999999998899e-05, 0.06522169883878481, 0.045677697779652915, 0.144772064993266, 0.021357364031541648, 0.008802470507460414, 0.019584774821357676, 0.08808574785388068, 0.06986629012766721, 0.07823001683653186, 0.36353114543258036, 0.2867621795521592, 0.3883327844567468, 0.26789034042108273, 0.3036611183604435, 0.22977995413503183, 0.34833868222563225, 0.23969246875968586, 0.3193645715428328, 0.02512854926820529, 0.01622793323495575, 0.0004166076505309757, 0.035776803239523036, 0.028299027805434918, 0.06033365766735299, 0.018898043447356017, 0.02283257034573216, 0.08110906355073677, 0.16428954025353837, 0.2339014074425546, 0.13430811274973076, 0.3183899472538988, 0.32371663942783246, 0.13648257928296992, 0.3021383217390724, 0.13582373851648044, 0.1280269378924186, 0.11436938485627257, 0.1247635692473068, 0.12275940532307505, 0.146954509217878, 0.13098333843408416, 0.137482290933583, 0.14323895671582598, 0.22367581953791282, 0.10520286494517805, 0.061483657424412974, 0.06655961213527717, 0.10844016096791242, 0.08672000690870318, 0.07770784397393005, 0.09610127833868642, 0.076583364262511, 0.19373856251849952, 0.05114310373884834, 0.16972783182447115, 0.11607818224533317, 0.1673108982312006, 0.18435269682551914, 0.14262247464182343, 0.16848359980692662, 0.19235135783683643, 0.11250764215570375, 0.17548663543261644, 0.11480440536825576, 0.14400631996097668, 0.18078462325448397, 0.22703585082854782, 0.18146351320997123, 0.17826474570255346, 0.12629980168980515, 0.14250414209621465, 0.1274755110237873, 0.10207919306593027, 0.1253619327014689, 0.1505207458934299, 0.16026971076102126, 0.19486716733905673, 0.18942204842601662, 0.09907773871474479, 0.16681498954564122, 0.10020391425709274, 0.07923701418917806, 0.1841273619996705, 0.048800038308276505, 0.09920041683091696, 0.1547239269675731, 0.17382303754278616, 0.09941907085879942, 0.1531440083216843, 0.20629260039029773, 0.17402157830064757, 0.17053425708560588, 0.17660973244275446, 0.16979179413279777, 0.1754960366221867, 0.1780749130723709, 0.1829947109435971, 0.1891817016342301, 0.18065791177587887, 0.04497791171321042, 0.040830586373165945, 0.061120501576778064, 0.04739504212450252, 0.058155835101868614, 0.054173755872635065, 0.0462476893685716, 0.03893204876801282, 0.04712529622357087]}, "mutation_prompt": null}
{"id": "496a0af8-e9ad-457c-ae2c-3fc1a1988b3b", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "820a6b79-727f-4671-88d2-6523cfce2d88", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "fe051ecc-c993-4fd0-838e-8f2c6308f6d5", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "7747568b-a07f-4f35-81be-8a957e14b0f2", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "32a3100d-2217-44bf-909c-ff65e2d09e9e", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "c29b8805-175a-470b-9875-8af729691daa", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n        bandwidth_history = []  # Modified line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce bandwidth memory-based update\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.bandwidth = np.mean(fitness_history[-3:])  # Adjust bandwidth based on recent fitness trends\n                bandwidth_history.append(self.bandwidth)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Enhancing convergence by dynamically adjusting bandwidth based on fitness improvement trends and incorporating a memory-based bandwidth update mechanism.", "configspace": "", "generation": 87, "fitness": 0.1334379189188258, "feedback": "The algorithm EnhancedConvergenceHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.365705940840761, 0.3326902648154859, 0.4027671287032526, 0.38361022203534134, 0.32084857747324025, 0.36232038583215465, 0.35278555576490334, 0.337343800409835, 0.3333866889767725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010441537162851233, 0.03194433707313038, 9.999999999998899e-05, 0.02335301593459771, 0.019864562366076477, 0.03431202383265064, 0.036432822741635174, 0.018706179939280476, 0.06538512641025407, 0.012281518145703552, 9.999999999998899e-05, 9.999999999998899e-05, 0.07149591540555289, 0.027522993257770967, 9.999999999998899e-05, 9.999999999998899e-05, 0.005124177120008011, 9.999999999998899e-05, 0.1844762350432133, 0.17352290854167873, 0.9705219686969239, 0.8396322677176872, 0.922571965075809, 0.7874543935846036, 0.972984993440311, 0.9761676395174821, 0.9296982614441361, 0.0694089312137317, 0.056747334530175664, 0.11495777761953652, 0.10302479570125977, 0.14395148692813253, 0.08895065582858819, 0.18948764676984053, 0.08497497101189588, 0.0497510651846782, 0.20557615059106626, 0.12253100299733855, 0.04155649734103539, 0.042318309300146906, 0.07072941280536393, 0.008190959659006736, 0.08640092675779965, 0.08581434660504361, 0.16568601950712059, 0.11996565634312828, 0.12767659697824107, 9.999999999998899e-05, 0.011437473824408184, 0.10690831823809677, 0.006132265756801147, 0.11947356378848539, 0.07283881922531055, 0.11546331210065741, 0.16385429664108941, 9.999999999998899e-05, 0.05263967623011745, 0.13956568840396522, 0.0009772554976960057, 0.11528886590590992, 0.16695736927035254, 9.999999999998899e-05, 0.09289162698867148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004736346759393162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06393324381054977, 0.025859253513641267, 0.06978065482542717, 0.06628313691716758, 9.999999999998899e-05, 9.999999999998899e-05, 0.14403016357159049, 0.058478666463075535, 0.038610857519941755, 0.008603820777299931, 0.003964114331546087, 0.037304508299149886, 0.005042122138198657, 0.0038796314268151333, 0.017588275936654796, 0.008114729491105921, 0.016481220057455226, 0.0014889455069915236, 0.051672168585487954, 0.040852437887823334, 0.1382639458643241, 0.010792587836446876, 0.0033382409460691598, 0.012521100509203964, 0.10029700242114759, 0.06234683457987722, 0.07435905798975584, 0.3406811395098732, 0.2885758772378503, 0.40650300423885144, 0.24407423640551884, 0.27709408346967335, 0.19643934753302228, 0.3502670898367386, 0.22193618768166712, 0.35413580026038094, 0.020567957579122553, 0.0019037664290404432, 9.999999999998899e-05, 0.022758023803143956, 0.028779660392458717, 0.054551521880344844, 0.019095469096707562, 0.01627909194734345, 0.08294078414943051, 0.14907717535241172, 0.17385144597959934, 0.15100516456624224, 0.3294299214340145, 0.31932335038291626, 0.17127700155126024, 0.3622285975254007, 0.13406172054725363, 0.13373612132098278, 0.13406102743562986, 0.1375595161419606, 0.12024376736706222, 0.1456663529975547, 0.13087183263726543, 0.13089056570089197, 0.13864070109994664, 0.22913248425609378, 0.10327633903073563, 0.06466724614519714, 0.06186354824769369, 0.09894621869021991, 0.08281466457140141, 0.0776923605785309, 0.07225555293597297, 0.07153356002585465, 0.1731724277990233, 0.05114852883833032, 0.17066271842570202, 0.11258245833953573, 0.16715544109840086, 0.18035575966731543, 0.13192996247863797, 0.16395505176489844, 0.18227762023224459, 0.11731642702048628, 0.16358023852988568, 0.10775267441047598, 0.14213912660257555, 0.1793865323400773, 0.2251700589224177, 0.15807938781864683, 0.18080698641585846, 0.11178496734658294, 0.13923085094466936, 0.12452431738255831, 0.1019922820648882, 0.1255491376790604, 0.14840786709047293, 0.15938867738246842, 0.19474302890541328, 0.18817475245768966, 0.09893236107137493, 0.16681649592393932, 0.09956221375433072, 0.07860372373999658, 0.18321818845049953, 0.048342791657634554, 0.09846946714770821, 0.1516820075511498, 0.1683814877838673, 0.11015643040880896, 0.15455887436187854, 0.21072971489662928, 0.1799950310698032, 0.18683809623215408, 0.18887760089108419, 0.19396194798442445, 0.2077248766404819, 0.20782956745019987, 0.18430437452808457, 0.18698324351529938, 0.20614936354911073, 0.04091639249406198, 0.044668448176064524, 0.0645305085654776, 0.049383103585732946, 0.05905017366519694, 0.04603764694643109, 0.0489224387834849, 0.03845293042005993, 0.0475488744758934]}, "mutation_prompt": null}
{"id": "c720359a-f349-48e0-b126-ae0b0b11c36f", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "681ac790-5e6e-4fdd-9347-82ec8bc0f1ee", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "3b252d55-50dc-4f71-9a4a-e34c2daa20ff", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "805b7c27-5f42-4528-8cc3-ca78102fa3c5", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "f1e6804f-8669-4a47-9a24-95183030aa6d", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "d8b5d69f-9ce3-4398-ba0e-4405468d3d56", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "f1db433f-e554-4630-98eb-06df494b338d", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "a0b355cb-d4ce-41b5-a018-61714e06d8a6", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "17aacf1e-74a9-44b4-b5a1-c656b43571ad", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "8926351c-cef2-41ab-88f9-80ed7cee274a", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "bd3a8ddf-1119-4635-8651-948606db6e93", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
{"id": "ec5301c9-4dc9-4ad4-bd13-375a44278368", "solution": "import numpy as np\n\nclass EnhancedConvergenceHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.bandwidth = 0.1\n        self.initial_bandwidth = 0.1\n        self.harmony_memory_size = 20\n        self.hm_accept_rate = 0.95\n        self.pitch_adjust_rate = 0.7\n        self.local_search_rate = 0.3\n        self.memory_strength = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def adjust_value_to_bounds(value):\n            return max(self.lower_bound, min(self.upper_bound, value))\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = float('inf')\n        fitness_history = []\n        pitch_history = []  # New line\n\n        for _ in range(self.budget):\n            new_solution = np.clip(harmony_memory[np.random.randint(self.harmony_memory_size)] + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n\n            if np.random.rand() < self.hm_accept_rate:\n                replace_index = np.random.randint(self.harmony_memory_size)\n                if new_fitness < func(harmony_memory[replace_index]):\n                    harmony_memory[replace_index] = new_solution\n\n            if np.random.rand() < self.local_search_rate:\n                local_search_space = np.clip(new_solution + np.random.uniform(-self.bandwidth, self.bandwidth, self.dim), self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search_space)\n                if local_fitness < new_fitness:\n                    new_solution = local_search_space\n                    new_fitness = local_fitness\n\n            fitness_history.append(new_fitness)\n            if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n                self.bandwidth *= self.pitch_adjust_rate\n            else:\n                self.bandwidth = self.initial_bandwidth\n\n            self.bandwidth = adjust_value_to_bounds(self.bandwidth)\n\n            if len(fitness_history) > 2 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3]:\n                self.bandwidth *= self.memory_strength\n\n            # Introduce pitch adjustment rate dynamics\n            if len(fitness_history) > 3 and fitness_history[-1] < fitness_history[-2] and fitness_history[-2] < fitness_history[-3] and fitness_history[-3] < fitness_history[-4]:\n                self.pitch_adjust_rate += 0.05\n                pitch_history.append(self.pitch_adjust_rate)  # New block\n\n        return best_solution", "name": "EnhancedConvergenceHarmonySearch", "description": "Improving convergence by introducing a dynamic adaptation of the pitch adjustment rate based on fitness improvement trends.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1607a00d-0e6c-4990-917c-cfc758168fc5", "metadata": {"aucs": [0.40070784534307635, 0.3830441890135251, 0.4112265758270729, 0.4105286738488305, 0.37791493445907076, 0.39214108489119204, 0.35806159028587403, 0.36975752588438204, 0.4061228743185801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06156364684064575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185820151566104, 0.03305061570586243, 9.999999999998899e-05, 0.02285914161087932, 0.01985694352848877, 0.03383383187839628, 0.0365615226152981, 0.020196230316637087, 0.06574008211463189, 0.01308167653065373, 0.009672124383732217, 9.999999999998899e-05, 0.06855319669198978, 0.04169448451793556, 9.999999999998899e-05, 0.00015392100936006958, 0.012218896711438498, 9.999999999998899e-05, 0.5500554789064769, 0.38788855968427893, 0.4787259872483084, 0.18107922532329057, 0.11859393991928069, 0.38240338762411075, 0.45255882531936076, 0.47812243910204344, 0.4735029195077731, 0.246327424305957, 0.21376896095330933, 0.20367472233090644, 0.20472141215513529, 0.21984024836246063, 0.23218454510437125, 0.20418072309883428, 0.17759294788037183, 0.18496918105226012, 0.2052103799235766, 0.1037376748158525, 0.054575183655795056, 0.14009143130926405, 0.08359247587458118, 0.008190959659006736, 0.08783043057635642, 0.08581434660504361, 0.20610921938221316, 0.11905193197577102, 0.13045974645427483, 0.040520703569342786, 0.10880494917307515, 0.13319602544453213, 0.09751984037211892, 0.14442111430855165, 0.10670430744559767, 0.1250751807371806, 0.13962571271531865, 9.999999999998899e-05, 0.09756606811103463, 0.17080201410819096, 0.05216414551922244, 0.11999308307370771, 0.1884242478222009, 9.999999999998899e-05, 0.10660975996631838, 9.999999999998899e-05, 9.999999999998899e-05, 0.007186430663548293, 0.006823985154271739, 0.005527643493606016, 0.00031673852135116753, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010965993033968946, 0.06952835830910753, 0.028080336443135123, 0.07520400138035599, 0.06571157826218299, 0.0004351380503856417, 9.999999999998899e-05, 0.1547223742434104, 0.05799733787867567, 0.03894828614878321, 0.004211684447992581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07310831204705592, 0.06510581819122985, 0.1121154057088366, 0.0320243949556005, 0.014858847008701326, 0.05064442110616241, 0.09480016299386385, 0.10224850787419837, 0.08289102973598406, 0.37403011615912396, 0.36828925096998666, 0.3871766158713186, 0.3362493872472905, 0.3512202025659885, 0.3169409526064354, 0.37149493274211354, 0.3627999139023589, 0.3875089608168266, 0.03231139906788594, 0.01995227506550712, 0.031583751418233774, 0.04676919998830875, 0.028638944193874027, 0.07475958128763904, 0.018602168902158933, 0.02534174495083008, 0.07975882103058918, 0.26973236765684017, 0.22566101771807223, 0.17932519277642367, 0.3363867413967624, 0.27627766785381414, 0.24489214444446528, 0.2971457744973258, 0.13229815480163265, 0.128259158883969, 0.11412121884009485, 0.15694920408018131, 0.12118923833852457, 0.14556533952532502, 0.13083195107983703, 0.14487187100427723, 0.1428441295508186, 0.29570488156034413, 0.11490634046028314, 0.061622307840121016, 0.1597462890006145, 0.13283249060958546, 0.09546958120569793, 0.07758717181095454, 0.11942068685103457, 0.07718716396160141, 0.20411539430032521, 0.05116033793053232, 0.17970973093130727, 0.16309581757691372, 0.17280347033075105, 0.1741715520537599, 0.14409307280885408, 0.17384925496683612, 0.17929235650387, 0.1598388546634707, 0.1681364971325262, 0.15693009966118365, 0.16818558276305196, 0.17994030971184782, 0.22614301752932753, 0.16312191758143435, 0.1904079025534111, 0.15791926651117305, 0.1637151372234824, 0.1434534256547627, 0.10253029822740956, 0.12542241561413736, 0.15113193242156742, 0.16298482864201724, 0.19512984397800803, 0.1909434458320276, 0.09909809404744396, 0.16707968057178824, 0.1000451395431593, 0.07964562648114737, 0.19342437261137357, 0.049430903868691534, 0.10073387472628459, 0.15791779956678564, 0.18380296306745636, 0.10078460119808474, 0.3018876110967672, 0.23352896815841473, 0.1716145685403364, 0.16588674475029053, 0.18595612545533957, 0.19568834598003426, 0.17443291891649493, 0.18898432756955907, 0.18586884307205387, 0.1872963289208024, 0.17900554421226467, 0.05274811881175956, 0.05456105087614027, 0.058239696595020374, 0.04519482801535668, 0.06587253592628217, 0.07697029689081447, 0.06038486024627454, 0.04835216948184862, 0.05644131703911115]}, "mutation_prompt": null}
