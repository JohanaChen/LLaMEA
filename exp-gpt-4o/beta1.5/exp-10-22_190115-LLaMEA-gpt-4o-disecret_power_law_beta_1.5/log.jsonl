{"id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage global and local search capabilities.", "configspace": "", "generation": 0, "fitness": 0.21827409367592032, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5723187403795946, 0.6941281364715532, 0.6388685575746691, 0.6065437583586863, 0.6412736233517914, 0.595192247874199, 0.5685298501259786, 0.1405805576786754, 0.5750150230342297, 0.17948887167906558, 0.03886951700438768, 0.04081932048862258, 0.2598435066505972, 0.40262690886454233, 0.17396661937312963, 9.999999999998899e-05, 0.28741908468027666, 0.042935198326242596, 0.0748741433441159, 0.09109057237581042, 0.09111999879933286, 0.13541459607106643, 0.1103020215254672, 0.06604198738654321, 0.1049783191803052, 0.12335613615635799, 0.12093003803974334, 0.04619281528740593, 0.05812748450000749, 0.0949666771075115, 0.09441239656314415, 0.12534404069233063, 0.04599464355126892, 0.12569381527218826, 0.07820580089474383, 0.07263099936724682, 0.9689954505655185, 0.917666946661042, 0.9705285789600786, 0.8326218319532142, 0.9324926150382911, 0.9422247747096917, 0.9567034173754716, 0.9450770855613843, 0.9336869798671819, 0.22826841591890257, 0.1606324301513128, 0.037086426839490594, 0.1821761785717778, 0.16890873426318453, 0.24644375030490173, 0.19440645166267656, 0.17018425391827974, 0.2615436165861552, 0.1603889217797727, 0.5331794229788516, 0.3652192999757158, 0.2959358014459691, 0.20421078925550706, 0.19169550703164973, 0.24055950356599332, 0.6458887152763246, 0.20769320733819008, 0.1542435753360203, 0.07116707348044915, 0.11166967328603927, 0.09773400925022246, 0.17275531893923513, 0.1541048989130699, 0.14224261800560833, 0.11920814929926749, 0.1650452009420369, 0.1592880216390633, 0.12740544504900464, 0.12011913889101411, 0.11286472406486969, 0.15391366691036568, 0.15397474267060918, 0.23084061395691013, 0.14600603903155518, 0.11369543572304919, 9.999999999998899e-05, 0.0001250907495519149, 9.999999999998899e-05, 0.03095963542168756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003302555462256773, 9.999999999998899e-05, 0.045894081811174714, 0.04246813863294241, 0.06927679457820213, 0.055225231847849, 0.0346738898897454, 0.025604213222578998, 0.021003681264423868, 0.053473411463358045, 0.017522379967559565, 0.02446917997954201, 0.03562476068499376, 0.12587203231619803, 0.0854942162856196, 0.1093783962400583, 0.05692380329788849, 0.07146685755057602, 0.06793453440826702, 0.06175079255398197, 0.09842356384763284, 0.14328751126393346, 0.09380954555483878, 0.09076467046497705, 0.13086972977609534, 0.059371184221390316, 0.13680011784906887, 0.052261393018778524, 0.08120009863374689, 0.4348185824668137, 0.452869134192352, 0.43720419822193, 0.46249545694379757, 0.48070344258207864, 0.20456713928243442, 0.4076479717363167, 0.43199591348343125, 0.40839614283313463, 0.072262640413151, 0.07411556302799671, 0.07178624997637395, 0.11574804919154591, 0.07724921867639734, 0.12703204736483564, 0.08649763612163719, 0.12605937083586982, 0.08807038339129525, 0.14652459387049022, 0.22443599962550498, 0.15696018185590088, 0.21269959098924796, 0.13628569575386085, 0.16081436135127858, 0.17767499058307057, 0.18308938976373634, 0.16328978130553662, 0.2738107714017012, 0.2205248090919224, 0.24102299335251842, 0.29345774203357566, 0.2086319882497638, 0.23124829766989474, 0.363425699445847, 0.3478678187971779, 0.3441091231458153, 0.18990556292554062, 0.2228894438001605, 0.17902948815513609, 0.16484064627461825, 0.16734159420757244, 0.20642279268215336, 0.24654469331495132, 0.2048707051995028, 0.21708951502381113, 0.21278497754157522, 0.19599590520591048, 0.1772141409271728, 0.18432748446114533, 0.1902219917979323, 0.16085249908771604, 0.1713206935111895, 0.1694936153472918, 0.1847812693418116, 0.18195313503093202, 0.1950492558561403, 0.15658684202420792, 0.18784883577540457, 0.1978134610179666, 0.1700436793408855, 0.1711619799954146, 0.20212592596829648, 0.18377986566719817, 0.7277808194946073, 0.5356228514281605, 0.1514741680057503, 0.7311794442448213, 0.19797687053956858, 0.1950641727445016, 0.5110546131066493, 0.15722315217204907, 0.7011994633823744, 0.37367009262912876, 0.20890988611243688, 0.16419512352151922, 0.20144768172064476, 0.16171863201504189, 0.14968696813358207, 0.1011169115251983, 0.1993099023152034, 0.19914200037985286, 0.17740860465772823, 0.1739529780721616, 0.18124796160240897, 0.19898513728245693, 0.1912192590368953, 0.17597514420971183, 0.18068452713955718, 0.17187476016621117, 0.1805735508206473, 0.08320743972165257, 0.058865889926001946, 0.07032820700608522, 0.07487706646737935, 0.07820933018018428, 0.06640377427532407, 0.09075530081892424, 0.08325095809565264, 0.06217596922020707]}, "mutation_prompt": null}
{"id": "85463d3a-d21c-4ad4-8139-9696d10e6b54", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.5723187403795946, 0.6941281364715532, 0.6388685575746691, 0.6065437583586863, 0.6412736233517914, 0.595192247874199, 0.5685298501259786, 0.1405805576786754, 0.5750150230342297, 0.17948887167906558, 0.03886951700438768, 0.04081932048862258, 0.2598435066505972, 0.40262690886454233, 0.17396661937312963, 9.999999999998899e-05, 0.28741908468027666, 0.042935198326242596, 0.0748741433441159, 0.09109057237581042, 0.09111999879933286, 0.13541459607106643, 0.1103020215254672, 0.06604198738654321, 0.1049783191803052, 0.12335613615635799, 0.12093003803974334, 0.04619281528740593, 0.05812748450000749, 0.0949666771075115, 0.09441239656314415, 0.12534404069233063, 0.04599464355126892, 0.12569381527218826, 0.07820580089474383, 0.07263099936724682, 0.9689954505655185, 0.917666946661042, 0.9705285789600786, 0.8326218319532142, 0.9324926150382911, 0.9422247747096917, 0.9567034173754716, 0.9450770855613843, 0.9336869798671819, 0.22826841591890257, 0.1606324301513128, 0.037086426839490594, 0.1821761785717778, 0.16890873426318453, 0.24644375030490173, 0.19440645166267656, 0.17018425391827974, 0.2615436165861552, 0.1603889217797727, 0.5331794229788516, 0.3652192999757158, 0.2959358014459691, 0.20421078925550706, 0.19169550703164973, 0.24055950356599332, 0.6458887152763246, 0.20769320733819008, 0.1542435753360203, 0.07116707348044915, 0.11166967328603927, 0.09773400925022246, 0.17275531893923513, 0.1541048989130699, 0.14224261800560833, 0.11920814929926749, 0.1650452009420369, 0.1592880216390633, 0.12740544504900464, 0.12011913889101411, 0.11286472406486969, 0.15391366691036568, 0.15397474267060918, 0.23084061395691013, 0.14600603903155518, 0.11369543572304919, 9.999999999998899e-05, 0.0001250907495519149, 9.999999999998899e-05, 0.03095963542168756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003302555462256773, 9.999999999998899e-05, 0.045894081811174714, 0.04246813863294241, 0.06927679457820213, 0.055225231847849, 0.0346738898897454, 0.025604213222578998, 0.021003681264423868, 0.053473411463358045, 0.017522379967559565, 0.02446917997954201, 0.03562476068499376, 0.12587203231619803, 0.0854942162856196, 0.1093783962400583, 0.05692380329788849, 0.07146685755057602, 0.06793453440826702, 0.06175079255398197, 0.09842356384763284, 0.14328751126393346, 0.09380954555483878, 0.09076467046497705, 0.13086972977609534, 0.059371184221390316, 0.13680011784906887, 0.052261393018778524, 0.08120009863374689, 0.4348185824668137, 0.452869134192352, 0.43720419822193, 0.46249545694379757, 0.48070344258207864, 0.20456713928243442, 0.4076479717363167, 0.43199591348343125, 0.40839614283313463, 0.072262640413151, 0.07411556302799671, 0.07178624997637395, 0.11574804919154591, 0.07724921867639734, 0.12703204736483564, 0.08649763612163719, 0.12605937083586982, 0.08807038339129525, 0.14652459387049022, 0.22443599962550498, 0.15696018185590088, 0.21269959098924796, 0.13628569575386085, 0.16081436135127858, 0.17767499058307057, 0.18308938976373634, 0.16328978130553662, 0.2738107714017012, 0.2205248090919224, 0.24102299335251842, 0.29345774203357566, 0.2086319882497638, 0.23124829766989474, 0.363425699445847, 0.3478678187971779, 0.3441091231458153, 0.18990556292554062, 0.2228894438001605, 0.17902948815513609, 0.16484064627461825, 0.16734159420757244, 0.20642279268215336, 0.24654469331495132, 0.2048707051995028, 0.21708951502381113, 0.21278497754157522, 0.19599590520591048, 0.1772141409271728, 0.18432748446114533, 0.1902219917979323, 0.16085249908771604, 0.1713206935111895, 0.1694936153472918, 0.1847812693418116, 0.18195313503093202, 0.1950492558561403, 0.15658684202420792, 0.18784883577540457, 0.1978134610179666, 0.1700436793408855, 0.1711619799954146, 0.20212592596829648, 0.18377986566719817, 0.7277808194946073, 0.5356228514281605, 0.1514741680057503, 0.7311794442448213, 0.19797687053956858, 0.1950641727445016, 0.5110546131066493, 0.15722315217204907, 0.7011994633823744, 0.37367009262912876, 0.20890988611243688, 0.16419512352151922, 0.20144768172064476, 0.16171863201504189, 0.14968696813358207, 0.1011169115251983, 0.1993099023152034, 0.19914200037985286, 0.17740860465772823, 0.1739529780721616, 0.18124796160240897, 0.19898513728245693, 0.1912192590368953, 0.17597514420971183, 0.18068452713955718, 0.17187476016621117, 0.1805735508206473, 0.08320743972165257, 0.058865889926001946, 0.07032820700608522, 0.07487706646737935, 0.07820933018018428, 0.06640377427532407, 0.09075530081892424, 0.08325095809565264, 0.06217596922020707]}, "mutation_prompt": null}
{"id": "4632d978-344d-4d34-b82f-d5b5aaca7cc6", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.5723187403795946, 0.6941281364715532, 0.6388685575746691, 0.6065437583586863, 0.6412736233517914, 0.595192247874199, 0.5685298501259786, 0.1405805576786754, 0.5750150230342297, 0.17948887167906558, 0.03886951700438768, 0.04081932048862258, 0.2598435066505972, 0.40262690886454233, 0.17396661937312963, 9.999999999998899e-05, 0.28741908468027666, 0.042935198326242596, 0.0748741433441159, 0.09109057237581042, 0.09111999879933286, 0.13541459607106643, 0.1103020215254672, 0.06604198738654321, 0.1049783191803052, 0.12335613615635799, 0.12093003803974334, 0.04619281528740593, 0.05812748450000749, 0.0949666771075115, 0.09441239656314415, 0.12534404069233063, 0.04599464355126892, 0.12569381527218826, 0.07820580089474383, 0.07263099936724682, 0.9689954505655185, 0.917666946661042, 0.9705285789600786, 0.8326218319532142, 0.9324926150382911, 0.9422247747096917, 0.9567034173754716, 0.9450770855613843, 0.9336869798671819, 0.22826841591890257, 0.1606324301513128, 0.037086426839490594, 0.1821761785717778, 0.16890873426318453, 0.24644375030490173, 0.19440645166267656, 0.17018425391827974, 0.2615436165861552, 0.1603889217797727, 0.5331794229788516, 0.3652192999757158, 0.2959358014459691, 0.20421078925550706, 0.19169550703164973, 0.24055950356599332, 0.6458887152763246, 0.20769320733819008, 0.1542435753360203, 0.07116707348044915, 0.11166967328603927, 0.09773400925022246, 0.17275531893923513, 0.1541048989130699, 0.14224261800560833, 0.11920814929926749, 0.1650452009420369, 0.1592880216390633, 0.12740544504900464, 0.12011913889101411, 0.11286472406486969, 0.15391366691036568, 0.15397474267060918, 0.23084061395691013, 0.14600603903155518, 0.11369543572304919, 9.999999999998899e-05, 0.0001250907495519149, 9.999999999998899e-05, 0.03095963542168756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003302555462256773, 9.999999999998899e-05, 0.045894081811174714, 0.04246813863294241, 0.06927679457820213, 0.055225231847849, 0.0346738898897454, 0.025604213222578998, 0.021003681264423868, 0.053473411463358045, 0.017522379967559565, 0.02446917997954201, 0.03562476068499376, 0.12587203231619803, 0.0854942162856196, 0.1093783962400583, 0.05692380329788849, 0.07146685755057602, 0.06793453440826702, 0.06175079255398197, 0.09842356384763284, 0.14328751126393346, 0.09380954555483878, 0.09076467046497705, 0.13086972977609534, 0.059371184221390316, 0.13680011784906887, 0.052261393018778524, 0.08120009863374689, 0.4348185824668137, 0.452869134192352, 0.43720419822193, 0.46249545694379757, 0.48070344258207864, 0.20456713928243442, 0.4076479717363167, 0.43199591348343125, 0.40839614283313463, 0.072262640413151, 0.07411556302799671, 0.07178624997637395, 0.11574804919154591, 0.07724921867639734, 0.12703204736483564, 0.08649763612163719, 0.12605937083586982, 0.08807038339129525, 0.14652459387049022, 0.22443599962550498, 0.15696018185590088, 0.21269959098924796, 0.13628569575386085, 0.16081436135127858, 0.17767499058307057, 0.18308938976373634, 0.16328978130553662, 0.2738107714017012, 0.2205248090919224, 0.24102299335251842, 0.29345774203357566, 0.2086319882497638, 0.23124829766989474, 0.363425699445847, 0.3478678187971779, 0.3441091231458153, 0.18990556292554062, 0.2228894438001605, 0.17902948815513609, 0.16484064627461825, 0.16734159420757244, 0.20642279268215336, 0.24654469331495132, 0.2048707051995028, 0.21708951502381113, 0.21278497754157522, 0.19599590520591048, 0.1772141409271728, 0.18432748446114533, 0.1902219917979323, 0.16085249908771604, 0.1713206935111895, 0.1694936153472918, 0.1847812693418116, 0.18195313503093202, 0.1950492558561403, 0.15658684202420792, 0.18784883577540457, 0.1978134610179666, 0.1700436793408855, 0.1711619799954146, 0.20212592596829648, 0.18377986566719817, 0.7277808194946073, 0.5356228514281605, 0.1514741680057503, 0.7311794442448213, 0.19797687053956858, 0.1950641727445016, 0.5110546131066493, 0.15722315217204907, 0.7011994633823744, 0.37367009262912876, 0.20890988611243688, 0.16419512352151922, 0.20144768172064476, 0.16171863201504189, 0.14968696813358207, 0.1011169115251983, 0.1993099023152034, 0.19914200037985286, 0.17740860465772823, 0.1739529780721616, 0.18124796160240897, 0.19898513728245693, 0.1912192590368953, 0.17597514420971183, 0.18068452713955718, 0.17187476016621117, 0.1805735508206473, 0.08320743972165257, 0.058865889926001946, 0.07032820700608522, 0.07487706646737935, 0.07820933018018428, 0.06640377427532407, 0.09075530081892424, 0.08325095809565264, 0.06217596922020707]}, "mutation_prompt": null}
{"id": "18e2ce0a-baea-445b-bafe-d56f1478e2c0", "solution": "import numpy as np\n\nclass PSO_DE_Learn_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n        self.learning_rate = 0.1  # New learning rate for adaptive PSO parameters\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # Adaptively adjust inertia weight and cognitive/social coefficients\n            self.w = max(0.4, self.w - self.learning_rate * (evaluations / self.budget))\n            self.c1 += self.learning_rate * (scores.mean() - scores.std())\n            self.c2 -= self.learning_rate * (scores.mean() - scores.std())\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (personal_best_positions - particles)\n            social_component = self.c2 * r2 * (global_best_position - particles)\n            velocities = self.w * velocities + cognitive_component + social_component\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Learn_Optimizer", "description": "A novel optimization algorithm merging Particle Swarm Optimization (PSO) with Differential Evolution (DE) and a learning strategy to balance exploration and exploitation dynamically.", "configspace": "", "generation": 3, "fitness": 0.0916661629696721, "feedback": "The algorithm PSO_DE_Learn_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.1602326428988028, 0.08108763387163931, 0.09354911332390003, 0.14692841856391514, 0.15110487046756194, 0.11134549672804628, 0.11168398693332215, 0.1203054233314349, 0.1063501313368026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002457014793599721, 0.01467079663371329, 0.00966212894021623, 0.014816297537751377, 0.013045471926137697, 0.006669962766643223, 0.018248263482334326, 0.024756014341243082, 0.012459447555281278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.007052826050689132, 9.999999999998899e-05, 0.014763392921912755, 9.999999999998899e-05, 9.999999999998899e-05, 0.9620770059485418, 0.9326899391281873, 0.8922695213249461, 0.8930982600929095, 0.9398512750054306, 0.8580745227945528, 0.9403929938269042, 0.9314307073695809, 0.845940209332803, 0.06274794416174423, 0.00015559897270600587, 0.02127141173196001, 9.999999999998899e-05, 0.00031549654350837564, 0.008928020725363028, 0.02611308695363912, 0.01571351648077035, 0.009400569884444487, 0.10027683525177622, 0.09342920136583455, 0.059824388882108726, 0.15754115047792017, 0.07285119553694963, 0.046776022310809684, 0.07820380316601017, 0.09139805697743064, 0.06170761980781225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003506629727094923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009094651829908429, 9.999999999998899e-05, 0.016263299242739282, 9.999999999998899e-05, 0.050638403094566686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008432667167896812, 0.12160238032492543, 0.15756555760738078, 0.14838054695461433, 0.11685238840901802, 0.13893906314993032, 0.13991083924222258, 0.20687022786898035, 0.12869823320471663, 0.15747524519856926, 0.046953948131626344, 0.028999931222771336, 0.02198412468535549, 0.03266886175302153, 0.01207566391486492, 0.01759993274736349, 0.0023266941595895263, 0.00032345829759528044, 0.0267656688986897, 0.11990335107316241, 0.10806258910358191, 0.11842175776965747, 0.10086246153298395, 0.11461448981145861, 0.12857100341912797, 0.13223036849580494, 0.1234649111193381, 0.12136134508204233, 0.12095448619219151, 0.1317345681921679, 0.1632844024450476, 0.13800672315110074, 0.12653710234119497, 0.12564798020096646, 0.14074807791700072, 0.17377774300845283, 0.1148637125302222, 0.09071512831731798, 0.04529313402549562, 0.0934037865164592, 0.0867457169775454, 0.08294730123741245, 0.07402376660046561, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.10899316140352244, 0.13360188806195672, 0.1103568689991713, 0.12232133351094321, 0.12673254650223664, 0.12245976138762271, 0.10891533507877516, 0.12983172588234015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11386316097397398, 0.11179497784464998, 0.09983046942167106, 0.12086959998968472, 0.16836222241113352, 0.08589947214127747, 0.11284388289980996, 0.10511484148144368, 0.09942064131663941, 0.11040265245322212, 0.10267165755511809, 0.06932034027342138, 0.057363226936496536, 0.07460975305937534, 0.05956056252618813, 0.19078618795002844, 0.16881966511129975, 0.105385692810686, 0.16927341702933263, 0.17794180291271366, 0.1733739797746553, 0.17373687594481657, 0.18482997682073588, 0.1895913602895516, 0.15039178534700748, 0.17315013181764916, 0.15107385073595558, 0.021871492975771067, 0.021969947737269457, 0.039340170049576906, 0.027015293023570086, 0.03425093938292756, 0.02383971926431583, 0.02340868928871276, 0.03803354422653826, 0.02701823318769625]}, "mutation_prompt": null}
{"id": "b8fcfdff-bd3e-4383-9927-1708a03b5f72", "solution": "import numpy as np\n\nclass AdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.49445  # Adjusted cognitive coefficient\n        self.c2 = 1.49445  # Adjusted social coefficient\n        self.w = 0.729  # Adjusted inertia weight using constriction factor\n        self.de_F = 0.9  # Slightly increased DE scaling factor\n        self.de_CR = 0.8  # Reduced DE crossover probability for more exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (personal_best_positions - particles)\n            social_component = self.c2 * r2 * (global_best_position - particles)\n            velocities = self.w * velocities + cognitive_component + social_component\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODEOptimizer", "description": "A refined hybrid optimizer merging PSO and DE techniques, emphasizing adaptive parameter control to enhance search efficiency.", "configspace": "", "generation": 4, "fitness": 0.20001567492076122, "feedback": "The algorithm AdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.5254335768598419, 0.5153376823616, 0.5607767451503307, 0.5203750807802529, 0.5209088558439243, 0.5020543347058699, 0.572009199700996, 0.5311132211017064, 0.5090562066109257, 0.10253756833361272, 0.1634269388361861, 0.169284125875781, 0.06947209355445116, 0.09527562818716073, 0.031397562176253446, 0.038182872722092864, 0.07514909300233774, 0.11696159134622919, 0.11901441306056604, 0.09280916242727033, 0.10114645609336947, 0.08019762348380188, 0.07590569405138958, 0.06712322505813795, 0.08309921952619392, 0.09652375595075646, 0.08225859575145766, 0.1068079681352283, 0.08261028149146621, 0.09255943956219859, 0.08671230742977554, 0.08192575419761072, 0.09880825402787119, 0.08054530110256541, 0.12649698386453778, 0.10088204836115144, 0.9692734140905062, 0.9575622320970107, 0.9702534062124238, 0.9558620241371518, 0.9694629537366308, 0.9510649700726994, 0.9684519099144798, 0.9666557564821876, 0.9697820356343868, 0.19616993851915643, 0.1902071779159633, 0.1345591295575912, 0.13303688870899077, 0.13601214672142503, 0.12570499761394527, 0.11760515285488349, 0.08663646947492021, 0.10304317418562603, 0.16671574959520907, 0.47595427263553713, 0.28759756493703637, 0.19706181669554335, 0.19937880507496875, 0.19440719778415594, 0.22169927527499367, 0.13079665602604928, 0.3041562872936934, 0.10403747587186574, 0.08748092145332975, 0.08023327008621639, 0.13266123347006742, 0.1248438477413607, 0.12437493917460218, 0.12892520806432517, 0.15045591201750008, 0.10697578353994652, 0.20920615488861394, 0.1726464732232973, 0.14509706899619268, 0.15101126645391072, 0.13543299712670975, 0.14543089987419477, 0.12031587719184755, 0.13359601170540458, 0.1779365150355925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006233666523871806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04109091641560658, 0.015297897482937528, 0.04501844513274522, 0.06566018079752434, 0.020746404580622713, 0.014769912173796196, 0.0980153515092701, 0.05869390100671934, 0.023895800874624507, 9.999999999998899e-05, 9.999999999998899e-05, 0.03273901386022737, 0.03963487818799971, 0.09466151052145466, 0.041534349330483056, 0.04632451042883112, 0.0363725546686513, 0.05280742243574299, 0.09889461527383214, 0.031662385337989485, 0.07056565152814998, 0.09113718473880239, 0.04441218538660485, 0.004550839414731889, 0.05005210219116474, 0.050466738914314746, 0.09019943026214805, 0.40843556203653175, 0.411039892165439, 0.4189319213560482, 0.42346449149513843, 0.4214799278549405, 0.380666235016312, 0.3851060068659975, 0.38546521433138436, 0.414073116244541, 0.08673983319738798, 0.08546989073798827, 0.08162320873648898, 0.08853806358897287, 0.07430052278843591, 0.07937349714589403, 0.07878619028300105, 0.0947249603922522, 0.07413696430073213, 0.18365229639533487, 0.1303118932028774, 0.13480347605089937, 0.13725148017053712, 0.18718548173695204, 0.13475957971312091, 0.16690757484052066, 0.12618935690523503, 0.1357437003604035, 0.25074322375061986, 0.21951798493590435, 0.24447704522727387, 0.2803858752824713, 0.25995185916758146, 0.17606330028372563, 0.2617083277579886, 0.3076311655184254, 0.2879006154697459, 0.20962204877403778, 0.18693132423201364, 0.1780927906694143, 0.16153532263889625, 0.20771550168364583, 0.17633098331970765, 0.21512688797724377, 0.20171833689402752, 0.2521680020010565, 0.16716847184038575, 0.17754248313265397, 0.1783080014233075, 0.17700500311940048, 0.19521475143339484, 0.1579691716629248, 0.19662451990297836, 0.1771482656406781, 0.1773855924547839, 0.21212876341930909, 0.17522300599426877, 0.1999119952378675, 0.1838821832536205, 0.1895049313765922, 0.17291320417297007, 0.1868972988701345, 0.16607175929483564, 0.18053862175059476, 0.1637969450353428, 0.165007226030096, 0.15208386923516903, 0.6847626794615669, 0.19504768103382608, 0.17914972963815268, 0.18217551905400053, 0.15533938174707418, 0.5843937499297809, 0.5401609053005103, 0.20942227110818235, 0.2652033936327546, 0.3151069936393608, 0.16389577901983154, 0.1857611825736878, 0.18185135846505263, 0.20025613025780087, 0.346689219757634, 0.1827754390388805, 0.16804044495328474, 0.1812600637309355, 0.18714212182059986, 0.17096486620096385, 0.1803887384503996, 0.17169543635530082, 0.19242214518940115, 0.1698616593164456, 0.060339692757368946, 0.07528210867088525, 0.06809512726854228, 0.05886317226065352, 0.058634314977485724, 0.07080662648538161, 0.07072668727148246, 0.07654559528568805, 0.060828601587157416]}, "mutation_prompt": null}
{"id": "835bc532-1a0b-4c33-ada3-b5cdb75d9fbf", "solution": "import numpy as np\n\nclass AdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w_max = 0.9  # Max inertia weight\n        self.w_min = 0.4  # Min inertia weight\n        self.de_F = 0.5 + np.random.rand() * 0.5  # DE scaling factor (adaptive)\n        self.de_CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            # Update inertia weight\n            w = self.w_max - ((self.w_max - self.w_min) * (evaluations / self.budget))\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODEOptimizer", "description": "An adaptive and dynamic hybrid algorithm that combines Particle Swarm Optimization with Differential Evolution, incorporating adaptive weights and mutation strategies to enhance exploration and exploitation.", "configspace": "", "generation": 5, "fitness": 0.1377116520824875, "feedback": "The algorithm AdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.28756125503562824, 0.22168850448049549, 0.228745483731011, 0.28674648930575697, 0.273715336232091, 0.24908924028898338, 0.19977019561814424, 0.275844521265478, 0.31246696103282534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002450805782502341, 0.0013968589610434679, 9.999999999998899e-05, 0.00045219749639768825, 0.0010090496860184484, 0.0020945743927061056, 0.09605032768250854, 0.056758579952549404, 0.09798150275138362, 0.04319596120754554, 0.044924629314590514, 0.04716590769847184, 0.070862602722639, 0.05576309611460761, 0.04432974280376456, 0.02691277296469341, 0.052620179897128194, 0.055598348025248434, 0.02349571472265266, 0.03780364845911155, 0.04066799382556674, 0.03575973449971248, 0.03739267059598772, 0.033964119335908594, 0.8780404989166776, 0.919677010917214, 0.9528128601414028, 0.9206301744115721, 0.9096128909624311, 0.9812542869767422, 0.9641914510360825, 0.9805715447243842, 0.9667395490456364, 0.09112979401399901, 0.08919616724027657, 0.04327222946821563, 0.09697134582547029, 0.1328617000705532, 0.06722029425221021, 0.09117591473887154, 0.08521121643641605, 0.0951096641308542, 0.12421874112584541, 0.12809618010104662, 0.13897152864126416, 0.18260528704178192, 0.15098965674062748, 0.1637626908742179, 0.27760714467965075, 0.1472305943999589, 0.17070846289610653, 0.03915338002266344, 0.04367374961076387, 0.031799586016004966, 0.022544557426908418, 0.09542504034004973, 0.025034028770840044, 0.05288780764944134, 0.05886468831432701, 0.0064812518989765255, 0.03183137392413371, 0.03745329015696752, 0.08833057824617063, 0.004622061364805474, 0.023684398341522916, 0.028377794154871072, 0.0020807270247888976, 0.025075374093276204, 0.03448010375794197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054205709179113715, 0.05008812637954929, 0.038627488208965444, 0.0754177788057232, 0.0427072579322787, 0.01559988013100333, 0.01148960224302431, 0.03206861012856044, 0.023835518539153222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027987020442273414, 0.007472787169920614, 0.02140628635536801, 0.013131487390035002, 0.03747093521116818, 0.015201792596971075, 0.027817626066907186, 0.04497909809073497, 0.03433497084307824, 0.2510384851590628, 0.19686876572581735, 0.2153057660349088, 0.23649169846318896, 0.2571394139549874, 0.26057403812601065, 0.20634041187539465, 0.2390789329994909, 0.26132593967480566, 0.05567195633855149, 0.06303342198886308, 0.06660534350743141, 0.06063137080244174, 0.09156577945597688, 0.06955112075844339, 0.06145023577344744, 0.04588078612015356, 0.05515302295345226, 0.13809517930687565, 0.12671997048975847, 0.15751388373745356, 0.12486215446880977, 0.11720923103728986, 0.14040783710507587, 0.13320647870285396, 0.12006328312752268, 0.15162410147612426, 0.1565634931762323, 0.18104349552450627, 0.17794408490878322, 0.17992824562729892, 0.15597283700811881, 0.15665683946910391, 0.207804386853215, 0.19666247677462967, 0.20202516598786802, 0.10228191419703636, 0.16807355925533463, 0.1157169055935674, 0.11081323212083827, 0.12868027642659619, 0.11846681171848361, 0.12213978858495034, 0.10510947025903317, 0.12984426234933777, 0.1634284660745654, 0.15050495760406835, 0.1707535037164769, 0.16172486571333633, 0.17779535500365795, 0.171583862542932, 0.1425804853521908, 0.1414852752541318, 0.17967344453320366, 0.148343469730833, 0.16895926363793556, 0.1494270467912835, 0.15276600478232882, 0.15998758829676152, 0.1716776078919129, 0.1655657402474855, 0.14871301632205014, 0.10098722671420512, 0.14331327442146524, 0.2869837897192523, 0.16433134631188417, 0.16611219654782783, 0.14333475782205807, 0.15830949276207362, 0.1378207128720429, 0.14543289112795632, 0.1665154478302978, 0.10730208783412087, 0.1551361563841661, 0.14248726699878933, 0.1081322061524308, 0.20654070900306554, 0.16275968364608928, 0.179083922713685, 0.20276773442662366, 0.1889965513388303, 0.18210608258348926, 0.17810983774362632, 0.17947839732482174, 0.17579710100211432, 0.18991390988311618, 0.18065221907419615, 0.18639229108996702, 0.16772236269945728, 0.19374888406057877, 0.04675780758591486, 0.05921049163847891, 0.05957000731015838, 0.05264230821085458, 0.05094847061071628, 0.04271907019905974, 0.05817334262840157, 0.054630614597195426, 0.05470073593306801]}, "mutation_prompt": null}
{"id": "5a3d9fca-8e92-45b9-8b95-7c73f8dd479c", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_w_min = 0.4\n        self.adaptive_w_max = 0.9\n        self.adaptive_de_F_min = 0.5\n        self.adaptive_de_F_max = 1.0\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        iteration = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            w = self.adaptive_w_max - ((self.adaptive_w_max - self.adaptive_w_min) * (evaluations / self.budget))\n            de_F = self.adaptive_de_F_max - ((self.adaptive_de_F_max - self.adaptive_de_F_min) * (evaluations / self.budget))\n            \n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (personal_best_positions - particles)\n            social_component = self.c2 * r2 * (global_best_position - particles)\n            velocities = w * velocities + cognitive_component + social_component\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n            \n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n            iteration += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "An enhanced PSODEOptimizer utilizing adaptive parameters and informed velocity updates for improved convergence.", "configspace": "", "generation": 6, "fitness": 0.16957359642178696, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.3877372605748849, 0.3841299896433479, 0.38600649044557467, 0.41939553392615203, 0.42247201333861917, 0.4480328527282289, 0.4214302994161937, 0.4058851739297237, 0.31828174645347695, 0.020535562057382384, 9.999999999998899e-05, 9.999999999998899e-05, 0.01609840757338532, 0.025824334446801545, 0.027362024712738076, 0.02543685034988996, 0.0018183014309898216, 0.09475565479535475, 0.057183077966017515, 0.09689747635191959, 0.09306297138969588, 0.08841637650819556, 0.055627986645894856, 0.07044155689175224, 0.0927264905063857, 0.08569708808043575, 0.07755480272901749, 0.06590232713548794, 0.04126704571059381, 0.07800242369840193, 0.10399554403864875, 0.0555637001989806, 0.07786028973440318, 0.06332222835284051, 0.05738930466879433, 0.08099216843853285, 0.9771690582725826, 0.9556944444485852, 0.9793516302918229, 0.9635623477536801, 0.9698252739463005, 0.9666502813713539, 0.9808194754960922, 0.9708586707578246, 0.9695946027747678, 0.16074285452010117, 0.08701452073676375, 0.09270992820473589, 0.12999419524314149, 0.11149611532620529, 0.12597234705316973, 0.07941681198062911, 0.15296664104352187, 0.1745634189377513, 0.16460093347579408, 0.1622902754316592, 0.1632578320974366, 0.18859506344394306, 0.1788329248145668, 0.18146683539343167, 0.18098886993227004, 0.18107825867142024, 0.15580330426600741, 0.13927596762471894, 0.11461218106920301, 0.11841195797958826, 0.05318565957989596, 0.0684281658934015, 0.09551803171567841, 0.054886905658208196, 0.1622554544544893, 0.0807854489038744, 0.09262213026133448, 0.00864007420197832, 0.11348617864594923, 0.12352513362414197, 0.10517420311852088, 0.10934782220927264, 0.08836661979647975, 0.03259056280580985, 0.08354603077656697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03731702396092473, 0.017379359703663444, 0.056348046890178694, 0.07550172101840458, 0.026764047851675743, 0.033502304109042425, 0.022093667498149783, 0.05452025962408513, 0.012217815708389423, 0.009657999140333828, 0.02979844050344438, 0.012016091284700825, 0.01413993373072897, 0.01969361343043874, 0.008604601235623899, 0.016901122969145033, 0.0235763119589536, 0.005191483684263254, 0.06993077449588436, 0.025146835260322575, 0.00607570344681696, 0.08345289505682663, 0.08019381738682352, 0.02615426862482728, 0.03833883049932352, 0.04781045335997447, 0.0494693267539702, 0.33289126217727816, 0.34192141649342445, 0.3383244018964381, 0.3663778003371666, 0.32295508028927455, 0.36370561963499726, 0.34687239782493895, 0.2989660946754179, 0.3279188443089216, 0.06461923885752108, 0.06739604787744191, 0.06316654292398194, 0.07453218939863915, 0.05997616815858198, 0.0719990628584597, 0.0845911478047332, 0.06129186224630234, 0.06596017655897157, 0.18730066855805472, 0.1420359952390582, 0.1311930940854994, 0.13557369847414724, 0.12624848339247474, 0.13447532519674876, 0.18253874922742275, 0.1578261129763232, 0.14914846497427514, 0.19562630775681755, 0.24379457572564656, 0.26518031734580705, 0.24102249233380912, 0.26232643587982296, 0.22604677542747942, 0.23813718246361792, 0.27955046930011185, 0.25284658747540056, 0.15416362640388415, 0.16233388728569076, 0.18827235837259082, 0.12762123923268842, 0.14018802261740926, 0.10963343537155668, 0.1649297371778311, 0.21899809608796073, 0.1496463488207984, 0.1787275237504411, 0.1524386761691391, 0.15150353831531194, 0.1977132804850249, 0.16685521314412777, 0.18451163119360559, 0.17698657877981694, 0.1751139848501212, 0.18979976827888823, 0.16427585824521285, 0.17417217056428302, 0.17969606266233729, 0.16649256761272702, 0.1632817649976238, 0.18489827209033483, 0.18336697173285632, 0.17471084577322293, 0.1726951761586708, 0.15774736772884757, 0.1481067464468604, 0.12264740756556203, 0.1839622015526614, 0.3760075710379871, 0.14158087967756905, 0.29503469697799034, 0.17965910839626176, 0.18170664550560045, 0.3541717717160038, 0.19680100825148827, 0.16879054785286718, 0.19495504713584755, 0.17155874497090773, 0.11665348205398818, 0.19700704289367932, 0.20458237391611034, 0.1880225293896377, 0.18083574281969073, 0.17086409199540664, 0.179847191241156, 0.17424849012162957, 0.1606592693365586, 0.17357666209786804, 0.17830326627383142, 0.19408517169367823, 0.1936166134803894, 0.06806027036502127, 0.06996920079080504, 0.06787821593904608, 0.07490944911079855, 0.06655441436334497, 0.05671914506517528, 0.055318894943171326, 0.06657163272726174, 0.05954265728179675]}, "mutation_prompt": null}
{"id": "f21ce1c3-481e-4e5c-b850-2d010a579d42", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.5723187403795946, 0.6941281364715532, 0.6388685575746691, 0.6065437583586863, 0.6412736233517914, 0.595192247874199, 0.5685298501259786, 0.1405805576786754, 0.5750150230342297, 0.17948887167906558, 0.03886951700438768, 0.04081932048862258, 0.2598435066505972, 0.40262690886454233, 0.17396661937312963, 9.999999999998899e-05, 0.28741908468027666, 0.042935198326242596, 0.0748741433441159, 0.09109057237581042, 0.09111999879933286, 0.13541459607106643, 0.1103020215254672, 0.06604198738654321, 0.1049783191803052, 0.12335613615635799, 0.12093003803974334, 0.04619281528740593, 0.05812748450000749, 0.0949666771075115, 0.09441239656314415, 0.12534404069233063, 0.04599464355126892, 0.12569381527218826, 0.07820580089474383, 0.07263099936724682, 0.9689954505655185, 0.917666946661042, 0.9705285789600786, 0.8326218319532142, 0.9324926150382911, 0.9422247747096917, 0.9567034173754716, 0.9450770855613843, 0.9336869798671819, 0.22826841591890257, 0.1606324301513128, 0.037086426839490594, 0.1821761785717778, 0.16890873426318453, 0.24644375030490173, 0.19440645166267656, 0.17018425391827974, 0.2615436165861552, 0.1603889217797727, 0.5331794229788516, 0.3652192999757158, 0.2959358014459691, 0.20421078925550706, 0.19169550703164973, 0.24055950356599332, 0.6458887152763246, 0.20769320733819008, 0.1542435753360203, 0.07116707348044915, 0.11166967328603927, 0.09773400925022246, 0.17275531893923513, 0.1541048989130699, 0.14224261800560833, 0.11920814929926749, 0.1650452009420369, 0.1592880216390633, 0.12740544504900464, 0.12011913889101411, 0.11286472406486969, 0.15391366691036568, 0.15397474267060918, 0.23084061395691013, 0.14600603903155518, 0.11369543572304919, 9.999999999998899e-05, 0.0001250907495519149, 9.999999999998899e-05, 0.03095963542168756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003302555462256773, 9.999999999998899e-05, 0.045894081811174714, 0.04246813863294241, 0.06927679457820213, 0.055225231847849, 0.0346738898897454, 0.025604213222578998, 0.021003681264423868, 0.053473411463358045, 0.017522379967559565, 0.02446917997954201, 0.03562476068499376, 0.12587203231619803, 0.0854942162856196, 0.1093783962400583, 0.05692380329788849, 0.07146685755057602, 0.06793453440826702, 0.06175079255398197, 0.09842356384763284, 0.14328751126393346, 0.09380954555483878, 0.09076467046497705, 0.13086972977609534, 0.059371184221390316, 0.13680011784906887, 0.052261393018778524, 0.08120009863374689, 0.4348185824668137, 0.452869134192352, 0.43720419822193, 0.46249545694379757, 0.48070344258207864, 0.20456713928243442, 0.4076479717363167, 0.43199591348343125, 0.40839614283313463, 0.072262640413151, 0.07411556302799671, 0.07178624997637395, 0.11574804919154591, 0.07724921867639734, 0.12703204736483564, 0.08649763612163719, 0.12605937083586982, 0.08807038339129525, 0.14652459387049022, 0.22443599962550498, 0.15696018185590088, 0.21269959098924796, 0.13628569575386085, 0.16081436135127858, 0.17767499058307057, 0.18308938976373634, 0.16328978130553662, 0.2738107714017012, 0.2205248090919224, 0.24102299335251842, 0.29345774203357566, 0.2086319882497638, 0.23124829766989474, 0.363425699445847, 0.3478678187971779, 0.3441091231458153, 0.18990556292554062, 0.2228894438001605, 0.17902948815513609, 0.16484064627461825, 0.16734159420757244, 0.20642279268215336, 0.24654469331495132, 0.2048707051995028, 0.21708951502381113, 0.21278497754157522, 0.19599590520591048, 0.1772141409271728, 0.18432748446114533, 0.1902219917979323, 0.16085249908771604, 0.1713206935111895, 0.1694936153472918, 0.1847812693418116, 0.18195313503093202, 0.1950492558561403, 0.15658684202420792, 0.18784883577540457, 0.1978134610179666, 0.1700436793408855, 0.1711619799954146, 0.20212592596829648, 0.18377986566719817, 0.7277808194946073, 0.5356228514281605, 0.1514741680057503, 0.7311794442448213, 0.19797687053956858, 0.1950641727445016, 0.5110546131066493, 0.15722315217204907, 0.7011994633823744, 0.37367009262912876, 0.20890988611243688, 0.16419512352151922, 0.20144768172064476, 0.16171863201504189, 0.14968696813358207, 0.1011169115251983, 0.1993099023152034, 0.19914200037985286, 0.17740860465772823, 0.1739529780721616, 0.18124796160240897, 0.19898513728245693, 0.1912192590368953, 0.17597514420971183, 0.18068452713955718, 0.17187476016621117, 0.1805735508206473, 0.08320743972165257, 0.058865889926001946, 0.07032820700608522, 0.07487706646737935, 0.07820933018018428, 0.06640377427532407, 0.09075530081892424, 0.08325095809565264, 0.06217596922020707]}, "mutation_prompt": null}
{"id": "1ed6248d-d766-42d3-9fcf-d1410ff8948f", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n        self.adaptive_rate = 0.1  # Adaptive parameter rate\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # Adaptive adjustment of coefficients\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                if evaluations < self.budget and func(trial) < scores[i]:\n                    particles[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) enhanced with adaptive parameters for various search phases.", "configspace": "", "generation": 8, "fitness": 0.24368601084699276, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "eb32fc28-eb1e-438a-a72a-5f264d4a7ea9", "metadata": {"aucs": [0.8222333136826679, 0.7991935598698766, 0.7458523291393726, 0.7982134022979611, 0.822972284330777, 0.1898711217445298, 0.6221939370621431, 0.713508297945477, 0.8004716350014169, 0.6258044024053968, 0.14515748097816616, 0.09202558700907648, 0.6420786401022907, 0.16364723641483248, 0.039130330895914445, 0.34186093181105937, 0.5493687245633991, 0.22737433557007958, 0.1207992052059158, 0.10401592590055098, 0.06873357302220962, 0.10313634201282551, 0.07354691667688618, 0.0683737912869854, 0.13039684518338346, 0.10551918832399043, 0.055869805820366825, 0.1100138750181846, 0.06808263839386686, 0.0625790017471034, 0.1104427615947281, 0.05052211841394605, 0.08413067623744341, 0.10891539753804313, 0.10563788350032588, 0.10161868914436178, 0.9444707307082099, 0.967838606192635, 0.9736135957085733, 0.9568091612551838, 0.9661364739257365, 0.9451047380095619, 0.9624950735381066, 0.9567284340434292, 0.9436686435504513, 0.47108285940996153, 0.18544941198726272, 0.05600134164270443, 0.3181673651262641, 0.1475714109859695, 0.2096703662993118, 0.5113836804183396, 0.1499845703417928, 0.12302721581782172, 0.35620208831798295, 0.23003633513732258, 0.16701493365194653, 0.27579898945098, 0.11678848648951301, 0.18525681364547952, 0.1229366307094546, 0.1704984200638231, 0.20654586095333305, 0.14707765160834463, 0.12053043221713611, 0.15450763284478908, 0.11529700413903499, 0.125948689787032, 0.00016614025782890618, 0.12388800333117511, 0.16186176925833062, 0.15924340175792095, 0.15395200374804485, 0.11839350574125329, 0.12016975240649952, 0.13207838253582982, 9.999999999998899e-05, 0.16342413738906092, 0.2165798499486199, 9.999999999998899e-05, 0.16066398923594372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00307660282027733, 0.08774665232111278, 0.014734256951282831, 9.999999999998899e-05, 9.999999999998899e-05, 0.13082093624091395, 0.10044600582015051, 0.0499950290035307, 0.08063537446277025, 0.13041953672990636, 0.0035566825471708974, 0.010613170469876976, 0.07195500086211726, 0.06016165957290864, 0.08036241389473964, 9.999999999998899e-05, 9.999999999998899e-05, 0.07274236215617491, 0.09025396961465959, 0.08192342437027056, 0.1461638455801787, 0.08992292065554697, 0.17103257469484656, 0.06220064848621221, 0.15380215543594677, 0.04084957076135598, 0.039721983998542654, 0.20467450805736775, 0.0377638503448845, 0.19193881365698917, 0.07961963531236016, 0.12834416019611383, 0.08078251520425961, 0.43758217270286104, 0.4987894176132438, 0.6511730274283956, 0.2203210913647946, 0.5243065253723056, 0.5261120074457404, 0.5053801999337557, 0.4423104534658714, 0.5349700068523274, 0.08387203166582713, 0.07961990465629243, 0.09401036516085393, 0.08326323941414138, 0.09691248864909285, 0.09558194973599221, 0.08105053943397067, 0.06578417761358779, 0.07482486339120387, 0.3172197848407494, 0.4028383416062018, 0.31941828084325097, 0.183206224557806, 0.2586871490563015, 0.1699903478068443, 0.3501131904830037, 0.2262745369817497, 0.20368350862286566, 0.32335467834714315, 0.2795774391432859, 0.4528936023188982, 0.21019229378082682, 0.22797978019701604, 0.2609174166537621, 0.3341625657513363, 0.3164295963431899, 0.43017706477282125, 0.21872581917750367, 0.13151798747843135, 0.18642849472742506, 0.18201748750112012, 0.2072288605195901, 0.18986990019917616, 0.2672961866133141, 0.26359578702379416, 0.12082743519581851, 0.22200703850910064, 0.24242445815546476, 0.1853921494694225, 0.22139097851892964, 0.22665154910358165, 0.19272562497160062, 0.22810632615260096, 0.19347442334447218, 0.20355818255209457, 0.20588877584743615, 0.20883258335064014, 0.16916713218073587, 0.21153809860119543, 0.23580038759328115, 0.20524927234992074, 0.21948791845915816, 0.2190557590003651, 0.1774162113569191, 0.8223904135325499, 0.1940158221492726, 0.15265980566377346, 0.8636891315347404, 0.19985241357050698, 0.16693498430061282, 0.1421487216373749, 0.16331435638309488, 0.8592724431160015, 0.8441439106099532, 0.2048016087696205, 0.07211101263329378, 0.2068271731219723, 0.8117680816040735, 0.15318088282578357, 0.10255211372368156, 0.15204157762036652, 0.20635897235305156, 0.1790195464638109, 0.17715090222873187, 0.1830320577049087, 0.17920928685738657, 0.18732104891237555, 0.17920612389654056, 0.19550944208286902, 0.190168711947454, 0.18464919235017707, 0.07691096353047433, 0.0766464220730464, 0.08342468920371704, 0.08384745016152684, 0.08065234865832027, 0.04953216357595469, 0.10490549277018912, 0.07229361832424797, 0.07146333544256245]}, "mutation_prompt": null}
{"id": "d89a95f3-faff-4ccf-836b-8b281507a845", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n        self.adaptive_rate = 0.1  # Adaptive parameter rate\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # Adaptive adjustment of coefficients\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rate * np.random.rand())\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) using adaptive parameters and mutation adaptation for diverse search strategies.", "configspace": "", "generation": 9, "fitness": 0.2580071506477108, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "1ed6248d-d766-42d3-9fcf-d1410ff8948f", "metadata": {"aucs": [0.8096154086747803, 0.7912907303941665, 0.8133341843185515, 0.8162626749936643, 0.8337486926090362, 0.8698597680378191, 0.7644637027501541, 0.8290914122770233, 0.751283568509273, 0.03413231366625136, 0.601622278641715, 0.5647844868523328, 0.5229886736727762, 0.6704820614216611, 0.6255538545837747, 9.999999999998899e-05, 0.6939978054946996, 9.999999999998899e-05, 0.11328287789113678, 0.12214265491954446, 0.12624760502003973, 0.14062722686212814, 0.11922179441272107, 0.11372999929385785, 0.10652053638348169, 0.12356691119392904, 0.12241572373235343, 0.10744184961106018, 0.10497186190231733, 0.10405842317425917, 0.11010453632871542, 0.11421814004799913, 0.10388245311399646, 0.128616057903287, 0.09302400360995633, 0.1048200613040633, 0.966575780563957, 0.9575385431271991, 0.9770503517152254, 0.9601445793745311, 0.959857525644358, 0.9763759621413864, 0.9774668700560146, 0.9675684099486421, 0.967377901344604, 0.549440537240744, 0.4264029139460773, 0.20919067802073865, 0.5073711830477616, 0.2997534198697688, 0.5516706335186606, 0.1227851091922304, 0.08741996862092238, 0.3076715445184154, 0.223599376161433, 0.38718198969225026, 0.37856412831681385, 0.2116528810898448, 0.18998186785069293, 0.199495264879192, 0.06922394381263586, 0.3129489120257093, 0.11128877877577159, 0.1734343460186012, 0.29490183284493443, 0.13332013576407076, 0.1048519277744252, 0.13179979749403214, 0.09574345996215283, 0.1879773010095186, 0.19018949539822183, 0.18059652808675652, 0.19454057164808458, 0.18704894331169064, 0.24423532351881339, 0.17628874735174227, 0.19123087094344204, 0.21253311012049703, 0.1569802937120821, 9.999999999998899e-05, 0.09168000984343272, 0.0006623809349288745, 0.014755210598386803, 9.999999999998899e-05, 0.0012765741378077955, 0.13505191055062082, 9.999999999998899e-05, 0.002865991865999007, 9.999999999998899e-05, 9.999999999998899e-05, 0.06792566946255907, 0.07462868248744237, 0.08905284144671499, 0.08271804737844157, 0.03069172668644915, 0.01022207666840913, 0.04731938113218859, 0.14146898634716998, 0.06768947489249566, 0.14473153654786164, 0.03356785738426549, 0.1949325772141316, 0.1052378327120983, 0.0982038752094484, 0.07182863351513658, 0.0862198838401469, 9.999999999998899e-05, 0.09384642927901388, 0.08173867795846523, 0.0712269081115221, 0.08217014317319793, 0.18745702531199326, 0.06854041849839065, 0.075255276182154, 0.05343820286910772, 9.999999999998899e-05, 0.07374260063836158, 0.4852461462340688, 0.5654551519221213, 0.5678074830301381, 0.5038632129653606, 0.545645954017486, 0.4984312421447994, 0.587411585557519, 0.5739129663696582, 0.5788630675926509, 0.12509047336436474, 0.08747746616524854, 0.07707530261310658, 0.10295332597804918, 0.10837957162687584, 0.07456354774772556, 0.07575364611466207, 0.09803771717240028, 0.06521281372686738, 0.1923399590167887, 0.33523068197601147, 0.16776509579042032, 0.21737764023085904, 0.23980138540202212, 0.2772553422732944, 0.18506497751887252, 0.2202525975317169, 0.21035494388817755, 0.20479237146275964, 0.25056885867604506, 0.3156853231025183, 0.21644304350109855, 0.4309355951755086, 0.31099272799455935, 0.3796199980361685, 0.40740146269067634, 0.41263720246804503, 0.12699112324955952, 0.24078542185295781, 0.16848003196308547, 0.15698251964492027, 0.20277586915296464, 0.20066457642021251, 0.34077696199685126, 0.27277899226363966, 0.2603370159889784, 0.21945506673669735, 0.13941414401390406, 0.18999272007161994, 0.19196636863241323, 0.18613951686869568, 0.20539259471518634, 0.22845914394920686, 0.21645221955835614, 0.19135035830850267, 0.19538013235710316, 0.24537756890741935, 0.1819939276317064, 0.19190596721311926, 0.18570243906372585, 0.2152046346338865, 0.19972235840113395, 0.19816425021871387, 0.20507573963400394, 0.16389405776349852, 0.17602420376147476, 0.15072904173507518, 0.8651960744741132, 0.19931409884040863, 0.16749057169764747, 0.1422769949554309, 0.16360729946331853, 0.20722748564794202, 0.5589391548402305, 0.20959536298339432, 0.11813878960578206, 0.2091755330275914, 0.16877887059174135, 0.14660683172553834, 0.2075986853137951, 0.7667906794019809, 0.21039101721515585, 0.18896533233074841, 0.1708179122164465, 0.18446425081027817, 0.18165129891304832, 0.2020798128844079, 0.19944670767685058, 0.1884651433935176, 0.18533261955282998, 0.20004125786722537, 0.08819075704952772, 0.07932940471392136, 0.07355016571638862, 0.08670661769602006, 0.07893881383265566, 0.0856355926737068, 0.13809971152915002, 0.08226576208514125, 0.08664416545682418]}, "mutation_prompt": null}
{"id": "4664722c-824d-4875-b44b-bf5819166ebc", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n        self.adaptive_rate = 0.1  # Adaptive parameter rate\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # Adaptive adjustment of coefficients\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rate * np.random.rand())\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                inertia_component = self.w * velocities[i]\n                velocities[i] = inertia_component + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization with Differential Evolution and adaptive exploration-exploitation balance for enhanced optimization performance.", "configspace": "", "generation": 10, "fitness": 0.2580071506477108, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "d89a95f3-faff-4ccf-836b-8b281507a845", "metadata": {"aucs": [0.8096154086747803, 0.7912907303941665, 0.8133341843185515, 0.8162626749936643, 0.8337486926090362, 0.8698597680378191, 0.7644637027501541, 0.8290914122770233, 0.751283568509273, 0.03413231366625136, 0.601622278641715, 0.5647844868523328, 0.5229886736727762, 0.6704820614216611, 0.6255538545837747, 9.999999999998899e-05, 0.6939978054946996, 9.999999999998899e-05, 0.11328287789113678, 0.12214265491954446, 0.12624760502003973, 0.14062722686212814, 0.11922179441272107, 0.11372999929385785, 0.10652053638348169, 0.12356691119392904, 0.12241572373235343, 0.10744184961106018, 0.10497186190231733, 0.10405842317425917, 0.11010453632871542, 0.11421814004799913, 0.10388245311399646, 0.128616057903287, 0.09302400360995633, 0.1048200613040633, 0.966575780563957, 0.9575385431271991, 0.9770503517152254, 0.9601445793745311, 0.959857525644358, 0.9763759621413864, 0.9774668700560146, 0.9675684099486421, 0.967377901344604, 0.549440537240744, 0.4264029139460773, 0.20919067802073865, 0.5073711830477616, 0.2997534198697688, 0.5516706335186606, 0.1227851091922304, 0.08741996862092238, 0.3076715445184154, 0.223599376161433, 0.38718198969225026, 0.37856412831681385, 0.2116528810898448, 0.18998186785069293, 0.199495264879192, 0.06922394381263586, 0.3129489120257093, 0.11128877877577159, 0.1734343460186012, 0.29490183284493443, 0.13332013576407076, 0.1048519277744252, 0.13179979749403214, 0.09574345996215283, 0.1879773010095186, 0.19018949539822183, 0.18059652808675652, 0.19454057164808458, 0.18704894331169064, 0.24423532351881339, 0.17628874735174227, 0.19123087094344204, 0.21253311012049703, 0.1569802937120821, 9.999999999998899e-05, 0.09168000984343272, 0.0006623809349288745, 0.014755210598386803, 9.999999999998899e-05, 0.0012765741378077955, 0.13505191055062082, 9.999999999998899e-05, 0.002865991865999007, 9.999999999998899e-05, 9.999999999998899e-05, 0.06792566946255907, 0.07462868248744237, 0.08905284144671499, 0.08271804737844157, 0.03069172668644915, 0.01022207666840913, 0.04731938113218859, 0.14146898634716998, 0.06768947489249566, 0.14473153654786164, 0.03356785738426549, 0.1949325772141316, 0.1052378327120983, 0.0982038752094484, 0.07182863351513658, 0.0862198838401469, 9.999999999998899e-05, 0.09384642927901388, 0.08173867795846523, 0.0712269081115221, 0.08217014317319793, 0.18745702531199326, 0.06854041849839065, 0.075255276182154, 0.05343820286910772, 9.999999999998899e-05, 0.07374260063836158, 0.4852461462340688, 0.5654551519221213, 0.5678074830301381, 0.5038632129653606, 0.545645954017486, 0.4984312421447994, 0.587411585557519, 0.5739129663696582, 0.5788630675926509, 0.12509047336436474, 0.08747746616524854, 0.07707530261310658, 0.10295332597804918, 0.10837957162687584, 0.07456354774772556, 0.07575364611466207, 0.09803771717240028, 0.06521281372686738, 0.1923399590167887, 0.33523068197601147, 0.16776509579042032, 0.21737764023085904, 0.23980138540202212, 0.2772553422732944, 0.18506497751887252, 0.2202525975317169, 0.21035494388817755, 0.20479237146275964, 0.25056885867604506, 0.3156853231025183, 0.21644304350109855, 0.4309355951755086, 0.31099272799455935, 0.3796199980361685, 0.40740146269067634, 0.41263720246804503, 0.12699112324955952, 0.24078542185295781, 0.16848003196308547, 0.15698251964492027, 0.20277586915296464, 0.20066457642021251, 0.34077696199685126, 0.27277899226363966, 0.2603370159889784, 0.21945506673669735, 0.13941414401390406, 0.18999272007161994, 0.19196636863241323, 0.18613951686869568, 0.20539259471518634, 0.22845914394920686, 0.21645221955835614, 0.19135035830850267, 0.19538013235710316, 0.24537756890741935, 0.1819939276317064, 0.19190596721311926, 0.18570243906372585, 0.2152046346338865, 0.19972235840113395, 0.19816425021871387, 0.20507573963400394, 0.16389405776349852, 0.17602420376147476, 0.15072904173507518, 0.8651960744741132, 0.19931409884040863, 0.16749057169764747, 0.1422769949554309, 0.16360729946331853, 0.20722748564794202, 0.5589391548402305, 0.20959536298339432, 0.11813878960578206, 0.2091755330275914, 0.16877887059174135, 0.14660683172553834, 0.2075986853137951, 0.7667906794019809, 0.21039101721515585, 0.18896533233074841, 0.1708179122164465, 0.18446425081027817, 0.18165129891304832, 0.2020798128844079, 0.19944670767685058, 0.1884651433935176, 0.18533261955282998, 0.20004125786722537, 0.08819075704952772, 0.07932940471392136, 0.07355016571638862, 0.08670661769602006, 0.07893881383265566, 0.0856355926737068, 0.13809971152915002, 0.08226576208514125, 0.08664416545682418]}, "mutation_prompt": null}
{"id": "3a857117-fe43-457a-bdad-733fc788fb0b", "solution": "import numpy as np\n\nclass DynamicHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n        self.adaptive_rate = 0.1  # Adaptive parameter rate\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # Adaptive adjustment of coefficients\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rate * np.random.rand())\n\n            # PSO Update\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "DynamicHybridOptimizer", "description": "A novel optimization algorithm that dynamically balances global and local search using adaptive parameters and strategic hybridization of Particle Swarm Optimization (PSO) and Differential Evolution (DE).", "configspace": "", "generation": 11, "fitness": 0.2580071506477108, "feedback": "The algorithm DynamicHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "d89a95f3-faff-4ccf-836b-8b281507a845", "metadata": {"aucs": [0.8096154086747803, 0.7912907303941665, 0.8133341843185515, 0.8162626749936643, 0.8337486926090362, 0.8698597680378191, 0.7644637027501541, 0.8290914122770233, 0.751283568509273, 0.03413231366625136, 0.601622278641715, 0.5647844868523328, 0.5229886736727762, 0.6704820614216611, 0.6255538545837747, 9.999999999998899e-05, 0.6939978054946996, 9.999999999998899e-05, 0.11328287789113678, 0.12214265491954446, 0.12624760502003973, 0.14062722686212814, 0.11922179441272107, 0.11372999929385785, 0.10652053638348169, 0.12356691119392904, 0.12241572373235343, 0.10744184961106018, 0.10497186190231733, 0.10405842317425917, 0.11010453632871542, 0.11421814004799913, 0.10388245311399646, 0.128616057903287, 0.09302400360995633, 0.1048200613040633, 0.966575780563957, 0.9575385431271991, 0.9770503517152254, 0.9601445793745311, 0.959857525644358, 0.9763759621413864, 0.9774668700560146, 0.9675684099486421, 0.967377901344604, 0.549440537240744, 0.4264029139460773, 0.20919067802073865, 0.5073711830477616, 0.2997534198697688, 0.5516706335186606, 0.1227851091922304, 0.08741996862092238, 0.3076715445184154, 0.223599376161433, 0.38718198969225026, 0.37856412831681385, 0.2116528810898448, 0.18998186785069293, 0.199495264879192, 0.06922394381263586, 0.3129489120257093, 0.11128877877577159, 0.1734343460186012, 0.29490183284493443, 0.13332013576407076, 0.1048519277744252, 0.13179979749403214, 0.09574345996215283, 0.1879773010095186, 0.19018949539822183, 0.18059652808675652, 0.19454057164808458, 0.18704894331169064, 0.24423532351881339, 0.17628874735174227, 0.19123087094344204, 0.21253311012049703, 0.1569802937120821, 9.999999999998899e-05, 0.09168000984343272, 0.0006623809349288745, 0.014755210598386803, 9.999999999998899e-05, 0.0012765741378077955, 0.13505191055062082, 9.999999999998899e-05, 0.002865991865999007, 9.999999999998899e-05, 9.999999999998899e-05, 0.06792566946255907, 0.07462868248744237, 0.08905284144671499, 0.08271804737844157, 0.03069172668644915, 0.01022207666840913, 0.04731938113218859, 0.14146898634716998, 0.06768947489249566, 0.14473153654786164, 0.03356785738426549, 0.1949325772141316, 0.1052378327120983, 0.0982038752094484, 0.07182863351513658, 0.0862198838401469, 9.999999999998899e-05, 0.09384642927901388, 0.08173867795846523, 0.0712269081115221, 0.08217014317319793, 0.18745702531199326, 0.06854041849839065, 0.075255276182154, 0.05343820286910772, 9.999999999998899e-05, 0.07374260063836158, 0.4852461462340688, 0.5654551519221213, 0.5678074830301381, 0.5038632129653606, 0.545645954017486, 0.4984312421447994, 0.587411585557519, 0.5739129663696582, 0.5788630675926509, 0.12509047336436474, 0.08747746616524854, 0.07707530261310658, 0.10295332597804918, 0.10837957162687584, 0.07456354774772556, 0.07575364611466207, 0.09803771717240028, 0.06521281372686738, 0.1923399590167887, 0.33523068197601147, 0.16776509579042032, 0.21737764023085904, 0.23980138540202212, 0.2772553422732944, 0.18506497751887252, 0.2202525975317169, 0.21035494388817755, 0.20479237146275964, 0.25056885867604506, 0.3156853231025183, 0.21644304350109855, 0.4309355951755086, 0.31099272799455935, 0.3796199980361685, 0.40740146269067634, 0.41263720246804503, 0.12699112324955952, 0.24078542185295781, 0.16848003196308547, 0.15698251964492027, 0.20277586915296464, 0.20066457642021251, 0.34077696199685126, 0.27277899226363966, 0.2603370159889784, 0.21945506673669735, 0.13941414401390406, 0.18999272007161994, 0.19196636863241323, 0.18613951686869568, 0.20539259471518634, 0.22845914394920686, 0.21645221955835614, 0.19135035830850267, 0.19538013235710316, 0.24537756890741935, 0.1819939276317064, 0.19190596721311926, 0.18570243906372585, 0.2152046346338865, 0.19972235840113395, 0.19816425021871387, 0.20507573963400394, 0.16389405776349852, 0.17602420376147476, 0.15072904173507518, 0.8651960744741132, 0.19931409884040863, 0.16749057169764747, 0.1422769949554309, 0.16360729946331853, 0.20722748564794202, 0.5589391548402305, 0.20959536298339432, 0.11813878960578206, 0.2091755330275914, 0.16877887059174135, 0.14660683172553834, 0.2075986853137951, 0.7667906794019809, 0.21039101721515585, 0.18896533233074841, 0.1708179122164465, 0.18446425081027817, 0.18165129891304832, 0.2020798128844079, 0.19944670767685058, 0.1884651433935176, 0.18533261955282998, 0.20004125786722537, 0.08819075704952772, 0.07932940471392136, 0.07355016571638862, 0.08670661769602006, 0.07893881383265566, 0.0856355926737068, 0.13809971152915002, 0.08226576208514125, 0.08664416545682418]}, "mutation_prompt": null}
{"id": "1c7f37f4-3ffa-4a44-9c48-3479e9687f1b", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_rate = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            self.c1 = max(0.4, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.2, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.1, self.w - self.adaptive_rate * np.random.rand())\n\n            r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.pop_size):\n                cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.c2 * r2 * (global_best_position - particles[i])\n                velocity_decay = self.w * velocities[i] * r3\n                velocities[i] = velocity_decay + cognitive_component + social_component\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced hybrid PSO-DE algorithm incorporating adaptive inertia and mutation strategies with a novel crossover scheme for improved convergence.", "configspace": "", "generation": 12, "fitness": 0.21958048753427997, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "d89a95f3-faff-4ccf-836b-8b281507a845", "metadata": {"aucs": [0.8363663772421439, 0.5758761101963846, 0.3704908309746605, 0.8631367078470462, 0.7845993619554632, 0.8113119955396245, 0.17698109918524574, 0.42932541530505797, 0.5025324295466737, 0.41603867187550647, 0.003710239128547621, 9.999999999998899e-05, 0.0967737591250909, 9.999999999998899e-05, 9.999999999998899e-05, 0.45080060709162595, 9.999999999998899e-05, 9.999999999998899e-05, 0.09420444689189278, 0.07953072584863563, 0.10637932254750992, 0.10741257425776041, 0.07207082546538346, 0.048659594810911755, 0.07940155556000683, 0.15632256471243455, 0.15075519509241952, 0.09638571243424232, 0.10289161303558136, 0.09522853901545403, 0.11416524174771803, 0.049573958652066374, 0.09702176909322058, 0.1187283500066536, 0.07973657784595056, 0.07959794492403671, 0.9523778846219869, 0.9359578842455406, 0.979211410742893, 0.9509530673168057, 0.9277177456995734, 0.9588620803402909, 0.952285432726875, 0.9348043420094796, 0.947679510182139, 0.6480803424682147, 0.29611317084074373, 0.05875580757258014, 0.4731910649691585, 0.18805136009012235, 0.2899843789973183, 0.3302013945700766, 0.1701797113469351, 0.4246665227305926, 0.16722562690952036, 0.18204544394306876, 0.2584708409651435, 0.2137617969793829, 0.11344539715223678, 0.2046577038830555, 0.1303667530148448, 0.11841012655441041, 0.18161172294942163, 0.23092247106535924, 0.24921368889557305, 0.16775719702021907, 0.1324931381511255, 0.10190150424462263, 9.999999999998899e-05, 0.14441128808719117, 0.13129917477191833, 0.15389732477069795, 0.13968625745951335, 0.15864025257791003, 0.1159708765965366, 0.12848493911715797, 9.999999999998899e-05, 0.1937442363247146, 0.12885402340424912, 0.13747703159916513, 0.00831202342871018, 9.999999999998899e-05, 0.011550386342308094, 9.999999999998899e-05, 0.033226244921490844, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037276376340754647, 9.999999999998899e-05, 0.07521560933368332, 0.034966456985031424, 0.0721090418252861, 0.07187401923498948, 0.08154922157440014, 0.020149519576727504, 0.03724858920780039, 0.06774133410555316, 0.12052211117569134, 0.051433937151975306, 0.03587718120817085, 0.04739447407182962, 0.4189302738363444, 0.07660552401905629, 0.08077712819302574, 0.07597660238755266, 0.21551731763252668, 0.21637624945461242, 0.07178376679357079, 0.23494925718671822, 0.04187316415009246, 0.19771993595808401, 0.07812932361894342, 0.03841656531250626, 0.11238853740781651, 0.23235001393296228, 0.10638633511179618, 0.08105082913201145, 0.44538699792922787, 0.40063581041586316, 0.5290408821371948, 0.20973572600221047, 0.20823478802842232, 0.43462142146637284, 0.45656036355564666, 0.4379850910098373, 0.396278977166055, 0.06411900265003534, 0.05949628900170212, 0.07075384673759622, 0.08000812026894655, 0.06382373018788912, 0.10784692242968086, 0.1147172365158261, 0.078855836999558, 0.13254044929993603, 0.1570658940194427, 0.2512913414263609, 0.2092330383724268, 0.240057287323718, 0.22929672735662432, 0.15725077602088, 0.2515609439391997, 0.15184084856959779, 0.24105295813791294, 0.258595031931221, 0.2296747192931129, 0.27581376224917065, 0.19097225838805343, 0.17782029974393754, 0.3643750567224352, 0.4617248390922759, 0.30282254393083974, 0.2642681860647972, 0.14602772852651924, 0.10483055541011399, 0.25432846172817547, 0.19519701666550116, 0.1339666350456662, 0.14577539388453564, 0.2017814966693512, 0.2257208821411265, 0.2277542076641026, 0.208130125688041, 0.1631584081421492, 0.21459389279760466, 0.20599227259097852, 0.2044516707684686, 0.18230534445343372, 0.2216055943111338, 0.1920547548307905, 0.22052286947897348, 0.17172712967307946, 0.18759249984584025, 0.2195764806762912, 0.21001293051463632, 0.1702098486970477, 0.1907860181608082, 0.19787794313455698, 0.22685701250320722, 0.20082301585825313, 0.6211359619413217, 0.12626924761406721, 0.15352982442855612, 0.8982006858035243, 0.2009539580607952, 0.19859583991908447, 0.14223015831383568, 0.15289260371285673, 0.17035736119886968, 0.49609842374631963, 0.21273867081331777, 0.07351483910491718, 0.20988946958264276, 0.4736155163538882, 0.15345079001076578, 0.1042467103688075, 0.10318061269739631, 0.2159936768480697, 0.17762337205786682, 0.2079162491712534, 0.17799724230952874, 0.1853176396722681, 0.17856950996990162, 0.19748233474179988, 0.17044879002007052, 0.19527695304325055, 0.1838034857775892, 0.06704700717189749, 0.08363630133406974, 0.0842599760302497, 0.06755854115928817, 0.08181882555625375, 0.05987306970201789, 0.10548105096259874, 0.07880642285585149, 0.08739533433663127]}, "mutation_prompt": null}
{"id": "b7aef078-06ff-4de7-ab11-b9e9b3f84786", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50  # Size of the population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5  # Inertia weight\n        self.de_F = 0.8  # DE scaling factor\n        self.de_CR = 0.9  # DE crossover probability\n        self.adaptive_rate = 0.1  # Adaptive parameter rate\n        self.num_swarms = 2  # Number of swarms for diversity\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)  # Assign particles to swarms\n\n        # Main loop\n        while evaluations < self.budget:\n            # Evaluate current particles\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n            \n            # Adaptive adjustment of coefficients\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rate * np.random.rand())\n\n            # PSO Update within swarms\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                for i in swarm_indices:\n                    cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                    social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                    velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                    particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A PSO-DE hybrid optimization with adaptive inertia and novel multi-swarm strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 13, "fitness": 0.264484724288502, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "d89a95f3-faff-4ccf-836b-8b281507a845", "metadata": {"aucs": [0.8550215353237084, 0.8389338850648167, 0.8345989980433952, 0.8429922309074744, 0.8040784663537947, 0.7877477966718051, 0.8396999064606137, 0.6980193260922138, 0.7815703183996029, 0.0410274992226447, 0.643389791302571, 0.03979447236107769, 0.6963319418904601, 0.6115714272019211, 0.06443378116866605, 0.017371280973686898, 0.6436326017419101, 0.055122761631603345, 0.11086106474013646, 0.14648710659886566, 0.10156492118117677, 0.12050573249126462, 0.11713815006698713, 0.11134208916159527, 0.05444604143379106, 0.10738587562093649, 0.17987181475677894, 0.12171361312327356, 0.09819704676875485, 0.13427538572647713, 0.0855668438208943, 0.07551865013756798, 0.11251058864492136, 0.09812349965786504, 0.13370361516619633, 0.1391439609232593, 0.9735940718827678, 0.970078530117635, 0.9770547283458604, 0.9581727239502472, 0.9682277314960861, 0.9667358817672937, 0.9842880491132839, 0.9662356139781167, 0.9668508939552138, 0.4069924420953558, 0.492178287269908, 0.057933495911638766, 0.45941174814451435, 0.3841206411791842, 0.456146369513901, 0.5607545235112483, 0.3487331791221252, 0.43993525396607636, 0.6834648826644252, 0.37999028436811877, 0.2207606745543027, 0.3632247830423573, 0.18663682264357773, 0.2017161951384, 0.06809400635517882, 0.16282284628269883, 0.3424253623290596, 0.3435824506157744, 0.20803078388545992, 0.17375324960538996, 0.20362019758101269, 0.12324268617235268, 0.11393520993625239, 0.21090552141566077, 0.3209639515963202, 0.1815589066343436, 0.19122793647291803, 0.1686691293856587, 0.20052947662970677, 0.18030143485900718, 0.19254749333882082, 0.1743070736881246, 0.20884597188737675, 0.20301802292400084, 0.12584786030531248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04561314121518212, 0.011412922724305608, 9.999999999998899e-05, 0.00019275144327934868, 0.014781359659866933, 0.011555276332040565, 0.04935902108157442, 0.033202231349443334, 0.03596502563430182, 0.043969780036876904, 0.06682962538075676, 0.013686187329980615, 0.10375485069391466, 0.08543660462877178, 0.03970886491449488, 9.999999999998899e-05, 0.05573794487222172, 0.10645959288225293, 0.07088130250080449, 0.08235067296599241, 0.0712140034231985, 0.09342888196750099, 0.07295300257547244, 0.06774940166870946, 0.1769272734586913, 0.040364905109564475, 0.04090399109647791, 0.14149147737833068, 0.1713390405389852, 0.2078070808576925, 0.07858829967273229, 0.0924697153073295, 0.09123197523259674, 0.5112724563627069, 0.4950447573000276, 0.5340919147556198, 0.5489143303461563, 0.47871215662897015, 0.5097568605289676, 0.5499694118554603, 0.538814343983562, 0.5439160655008184, 0.14087234768719759, 0.1287860119575629, 0.07945456233562531, 0.08166839291085237, 0.08877062629836852, 0.09218783354229654, 0.09564611054306138, 0.10250910749433828, 0.09731879537586896, 0.18138855982633006, 0.15908542676827386, 0.23976583302210286, 0.20652089526106265, 0.216088172982413, 0.21903735930952928, 0.2504050019862387, 0.1684060116699977, 0.17440822066173167, 0.21975722022303246, 0.32340128320768313, 0.4116744497370646, 0.29224747232058845, 0.298045577115465, 0.2328480357035646, 0.38792688560355315, 0.3808853428390677, 0.3037170894635829, 0.1800509685145506, 0.22298472747069242, 0.2752621481250047, 0.17872110478445868, 0.14641504228290392, 0.2658195736826977, 0.25618586908435304, 0.2793311661623801, 0.17183983218973442, 0.2201955152153645, 0.1949006334281389, 0.2097877667412107, 0.20705867662443322, 0.2240119133451256, 0.26046498054882183, 0.2120723377181678, 0.19385019211866505, 0.18254237320218214, 0.1821572639608775, 0.19018395424434342, 0.19694062108158028, 0.19828095392094247, 0.19644537383432903, 0.20312474934619607, 0.21310408049153862, 0.1767350081400353, 0.24486132579846875, 0.1718270840258519, 0.17196565220619464, 0.8740968794897898, 0.9165366353188273, 0.19676671256602307, 0.16425476111931858, 0.1417635295342774, 0.15067429359501716, 0.20548157276514967, 0.44022735347638053, 0.20847872336911044, 0.5931506805317279, 0.10387734326896969, 0.5642194804654017, 0.16618078809379389, 0.1036739486514856, 0.15449244768658532, 0.5601924275539346, 0.18410426872068386, 0.1840943374926679, 0.1841236956206026, 0.18131930413673802, 0.19185623562977194, 0.18480086001502027, 0.1868512337679512, 0.20064925607599882, 0.1808877195120706, 0.08479020355946465, 0.08485456687760307, 0.09882091765424483, 0.08633248589733189, 0.08695564794757416, 0.07964011373721169, 0.09488697690579606, 0.06411438016474769, 0.08208724931905365]}, "mutation_prompt": null}
{"id": "e3479c61-dbb8-4dd7-a3dd-9f7af97b9a85", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_rate = 0.1\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "An advanced hybrid PSO-DE algorithm with enhanced adaptive parameters and dynamic swarm adjustments for robust exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.2865898344543614, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "b7aef078-06ff-4de7-ab11-b9e9b3f84786", "metadata": {"aucs": [0.8244179323912366, 0.8045000170013122, 0.7850642111060269, 0.8046749734594578, 0.8125968819144113, 0.8079049358040076, 0.8056436151445444, 0.8157700658264286, 0.8084912639716098, 0.692242801740053, 0.03994490488259839, 0.5823442878033065, 0.6216958930759608, 0.6254588204603053, 0.6149925685385415, 0.6810939848203978, 0.6005677127871221, 0.5843762936728799, 0.10723914922038746, 0.10265153776671232, 0.12579129162621816, 0.1424083828112911, 0.13103617999770845, 0.15405769846340356, 0.1132882556421797, 0.12472785950532583, 0.11031514491899175, 0.09288523294983664, 0.10408413892309287, 0.07682380716115311, 0.13368909535248963, 0.10813901160581807, 0.10618713090787057, 0.08827330808624978, 0.10999339862198942, 0.14280252154803819, 0.9658265515047801, 0.968594102951227, 0.9825950961332166, 0.9571072682518367, 0.9665468332828566, 0.9710196168710675, 0.9688356805354409, 0.9749981066653856, 0.9715041088427632, 0.45382567724081047, 0.4117688523256213, 0.05828592429573509, 0.4169375006856506, 0.38152352743382867, 0.40419014453589075, 0.08777809152419669, 0.3619693027615193, 0.4090305030790169, 0.1712546320606927, 0.3525055781608538, 0.3216238035130782, 0.27605267830032665, 0.1991299659225333, 0.18724064240415528, 0.12584776303019152, 0.5251681372956035, 0.35586455222970925, 0.19791743206069856, 0.23262411422022156, 0.138019897652924, 0.2101018373001512, 0.15924072012420587, 9.999999999998899e-05, 0.17081609070818216, 0.17108029217778098, 0.18548824278758214, 0.20998117392410753, 0.2676948552487932, 0.1712274016589287, 0.18860170304060053, 0.1920936167268441, 0.18159015783091603, 0.13028058312875068, 0.21378389447689528, 0.22725604473783456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00876289060794444, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011758287010861235, 9.999999999998899e-05, 0.0005572835587690506, 0.08025948743933209, 0.047719403539810634, 0.07132446631521494, 0.08643800349344999, 0.07357194208118012, 0.05521453022198752, 0.05682873601207106, 0.07102902078510998, 0.04795713324433504, 0.03270831724973955, 0.03602120247546259, 0.04503343907431645, 0.11394138074794424, 0.06679661851656116, 0.06457432097026516, 0.19790217859511738, 0.08606626888611735, 0.06721551579022689, 0.13237049389922684, 0.13015511702973181, 0.11988414831123251, 0.10188082577962909, 0.11237186228784557, 0.16543741667585588, 0.22273058116084765, 0.13007209070768244, 0.22620996540475835, 0.4841157604517463, 0.5421305732823463, 0.5138044584849835, 0.5857128766929622, 0.5750041918640698, 0.5397301664238556, 0.5187687242757832, 0.49589714298660426, 0.5034942935259548, 0.12626110920863232, 0.1327305647730569, 0.13652373286924235, 0.13625076648603607, 0.09228322034999514, 0.13510687029552304, 0.14024934346239315, 0.10778334607189355, 0.11259119751169311, 0.20852800863076704, 0.16526111024746393, 0.15189219427286282, 0.21550205984662063, 0.18124466295689634, 0.1794065902805858, 0.18985396072223215, 0.16823155046058058, 0.19623543983593617, 0.2661465525832273, 0.36719365152969796, 0.39616192421420104, 0.25946289478882467, 0.3298193200444761, 0.4686738784554265, 0.32879251220379413, 0.38792030857898074, 0.39568084179683105, 0.2674336427162275, 0.21929469186611117, 0.23028794205851222, 0.26480093209523226, 0.18536872500220103, 0.334790274339839, 0.23389683313082088, 0.23178780158541545, 0.2535465399964897, 0.2481720167183471, 0.21709288073247135, 0.19951396100286445, 0.237114837788711, 0.19951526030341316, 0.20020602697357526, 0.2282994466918371, 0.18925313756704287, 0.24506757078137353, 0.19787809141576362, 0.1922541836235685, 0.20734957180652613, 0.1838473360974311, 0.48183196063255895, 0.22871387744638783, 0.18434587583051287, 0.2245877221265402, 0.18697538615130604, 0.7106745314844651, 0.6717527935598523, 0.767562137813322, 0.1977672751902776, 0.19676915266522177, 0.7852936870448353, 0.14090170704855298, 0.707128993777547, 0.856640406688977, 0.4654900548110733, 0.2096505710530311, 0.6026621520062403, 0.5147900408905159, 0.2579263576259271, 0.20346005785984456, 0.2081193613295026, 0.20908144694428987, 0.1605846736241101, 0.1982698581108019, 0.23070119832856184, 0.18505363386012663, 0.18083637875038983, 0.17148005385167475, 0.19657400052603502, 0.19113621946570514, 0.17932262301588475, 0.20041186583531023, 0.08550430405562781, 0.09287942962380913, 0.08011272983699236, 0.08526510454121139, 0.08676632556297814, 0.08302448344290692, 0.08906643955090554, 0.0694112242376923, 0.10975316246539824]}, "mutation_prompt": null}
{"id": "3f51d33b-daa3-4882-a870-d22a1864ae1e", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.7\n        self.c2 = 1.7\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_rate = 0.1\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = self.w * velocities[i] + cognitive_component + social_component\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A refined hybrid PSO-DE algorithm with adaptive parameter tuning, dynamic swarm clustering, and enhanced mutation strategies for improved convergence.", "configspace": "", "generation": 15, "fitness": 0.28410441642859674, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "e3479c61-dbb8-4dd7-a3dd-9f7af97b9a85", "metadata": {"aucs": [0.799349679716969, 0.7587671044828128, 0.8216977920015217, 0.8098573865094536, 0.8268502741277319, 0.8129694101187352, 0.788027730534991, 0.7801069466250785, 0.8218110232212099, 0.6166087714784039, 0.03922511293328479, 0.5404295891865285, 0.5738217905178915, 0.6312300761952389, 0.06350573325896092, 0.5177829217009193, 0.6245567755335157, 0.5978434719284162, 0.12265281264614336, 0.15630795762984273, 0.17545517612054518, 0.15590877105970125, 0.1672221207550556, 0.13458903471898664, 0.15301631471102373, 0.10044820473699634, 0.16060037840667463, 0.11874169698211556, 0.10027285148614395, 0.0878763351101699, 0.12920734813339185, 0.10343637732557931, 0.12274688549000767, 0.10160294058575947, 0.14971686299513387, 0.10387162493851632, 0.9371453582377123, 0.9670927376760071, 0.9855817523576093, 0.9576103048949598, 0.9763768066321877, 0.9705194700159077, 0.9606951660180417, 0.9775023311275246, 0.9711263465912727, 0.3651374632289984, 0.33577218354969296, 0.05645789576752591, 0.1451348908976039, 0.4115493357269888, 0.331918286074227, 0.21865263391848033, 0.323291212260452, 0.4875462275579986, 0.6762021661464122, 0.22159465278450474, 0.676453321490042, 0.3597597386019664, 0.240194898831399, 0.4841547820217559, 0.22495439659291416, 0.6156409073180567, 0.6508057561784999, 0.248755348052904, 0.15571898274093343, 0.22986977939955755, 0.23458754637148493, 0.2607074009503464, 0.19792807198169127, 0.18830760936743185, 0.19310898211332483, 0.18012694173518318, 0.3310074726317087, 0.20378026274261263, 0.11992088477263119, 0.13577925120519252, 0.1588418713504598, 0.11906900650989716, 0.17794031100258034, 0.1833126997452288, 0.20459796354796966, 0.0012836472536617016, 9.999999999998899e-05, 0.005299649991576727, 0.00018324722412221828, 0.08944307029149878, 0.040967304960256135, 0.0001324539717623141, 0.00027525298883079863, 0.005459314071494359, 0.07944978013910386, 0.04672642788537629, 0.05568389012757491, 0.10575663651676548, 0.08982037280471444, 0.06938184072419973, 0.039329230020573425, 0.04331989928161639, 0.06182870149300457, 0.043801225436168156, 0.14828044494686965, 0.041904729673966745, 0.17467940355674805, 0.07462600698847732, 0.06937308914478202, 0.1820546466093228, 0.08781950895043134, 0.0813310151888168, 0.1278970610158252, 0.06650448360855588, 0.04047692470329489, 0.06958449150081147, 0.10633495203746246, 0.11391829559443356, 0.2161090474699776, 0.11591403466442385, 0.1489663190888737, 0.49006801169937975, 0.5172965459676757, 0.493098496955357, 0.5692518628497854, 0.48716396352638525, 0.4823177319807569, 0.5068699971572135, 0.49323133958402254, 0.5020236143048733, 0.10565807082280132, 0.14175596919713318, 0.157331087497111, 0.10136372726821896, 0.10329721850719276, 0.13298285964044843, 0.06999858192377173, 0.12994152231951484, 0.15970367033100807, 0.2542427037837368, 0.1650546875098986, 0.1745553498987209, 0.17661982116633046, 0.20237949275568434, 0.19509261672312495, 0.15621787300857526, 0.153040655879621, 0.17366857197158547, 0.3380674019090324, 0.23045011471908372, 0.44515952042870566, 0.4157048464439752, 0.23818066501381363, 0.3491768411427115, 0.3797481135572168, 0.28547337031054687, 0.3688365247807155, 0.2255543269218997, 0.21012743352002594, 0.2470091716312809, 0.28061130024530767, 0.20608433852956087, 0.27343410611033925, 0.28529988935997397, 0.3148841750636694, 0.2461341686150489, 0.1895922389114968, 0.19893300922295476, 0.19464218708698477, 0.21409345977073446, 0.17496700744767768, 0.22315820003447684, 0.2247800306423564, 0.21859906150980102, 0.21776396078054727, 0.21022537215381587, 0.215817843047434, 0.19556581474438006, 0.17574713463390634, 0.18754139649252421, 0.19679953394587335, 0.18219439557639616, 0.20754188165383514, 0.1862635609469131, 0.806195286456405, 0.1968104753218478, 0.1807924999819459, 0.8712259385816126, 0.7770744010702518, 0.7347731351221184, 0.14156927006990916, 0.17016641736025995, 0.7861863948180865, 0.48242469154499035, 0.20650816801567284, 0.32972685932429036, 0.3258331506727691, 0.39132787671052316, 0.19717735617502596, 0.2081012830784268, 0.20754502027447275, 0.15356969140196453, 0.1844837080836691, 0.18079888359576124, 0.18570533111636023, 0.18716475104634733, 0.19198476274682386, 0.20709247533759034, 0.188692976773283, 0.18042745280369887, 0.19129761338993578, 0.11894097073289156, 0.08195870253459947, 0.06909162904003607, 0.08684962262693552, 0.07769248897148828, 0.08737854216983454, 0.08625096282518718, 0.08586512694032333, 0.09511849817790519]}, "mutation_prompt": null}
{"id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive updates and cooperative swarms for enhanced global search and local refinement.", "configspace": "", "generation": 16, "fitness": 0.3256157265655954, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "e3479c61-dbb8-4dd7-a3dd-9f7af97b9a85", "metadata": {"aucs": [0.8333169245429748, 0.790495928298737, 0.81475261564802, 0.8049769036778989, 0.7914312105468492, 0.8184473686448629, 0.8140208073677198, 0.8207801888135051, 0.8178347284090995, 0.6652443918845535, 0.676197887864247, 0.6334728710899952, 0.676276999141326, 0.6201353425541036, 0.6211880752339876, 0.6557760631872671, 0.6528253715453776, 0.6701037812633088, 0.16487253275699076, 0.1461579071920791, 0.17631330144413138, 0.12427250240141674, 0.14500012522388983, 0.15468103198156968, 0.14987867954890333, 0.16945351512917606, 0.15082042835851006, 0.11251856173339425, 0.12476214867832391, 0.10605420533074883, 0.11654228885594908, 0.11074537131839168, 0.1427452452282436, 0.1271367367261662, 0.11459169740903685, 0.11596444793740923, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055134718055421, 0.43373342127912906, 0.45067894734627667, 0.4626569369201631, 0.5317773560866716, 0.43686250862006504, 0.5285050488260987, 0.48745956795382295, 0.48873332282615434, 0.45004318083795947, 0.3770792792863875, 0.7850125092337845, 0.22272627301031767, 0.6568132609368229, 0.26827014482951417, 0.6458047020396992, 0.22862505530803545, 0.8013966894468995, 0.7110135211524691, 0.3015112201966089, 0.1272234527507521, 0.20942336479116186, 0.2235186702672045, 0.24357983035755126, 0.18965847743611752, 0.23456122886442887, 0.1943987812671063, 0.22031057704700385, 0.19320958119981435, 0.1860994380124935, 0.19282819782563532, 0.22226175135433224, 0.24614548601376085, 0.23944166004978784, 0.24474062100732186, 0.21580876371604996, 0.2175500900660683, 0.04355903547276263, 0.051504983353215184, 0.019043968555067514, 0.06233157499185893, 0.04190383840206846, 0.009961406131040684, 0.014962777335761568, 0.006130967795052511, 0.049456831195005546, 0.1644791018240308, 0.17921190946047483, 0.13377187191037754, 0.057016333118319884, 0.07672286019264052, 0.07248416767530397, 0.15233019514331414, 0.10476994452356414, 0.13498650631886522, 0.19443340345809612, 0.06393725847553666, 0.13951396035174535, 0.07289100983926178, 0.15836768687875757, 0.10651044671917131, 0.11177275521887364, 0.14615126502225628, 0.10654670891872242, 0.26825311509915106, 0.1733485784387323, 0.2101455512278414, 0.08932773863447274, 0.17540705435602755, 0.19181360172419504, 0.13828129153606317, 0.12628716969263565, 0.216802340075676, 0.576695773269535, 0.5178112864813735, 0.5007533951460434, 0.501082090490062, 0.5227971288538382, 0.5545956178175571, 0.5799548941692583, 0.5020186764316803, 0.5373697661985639, 0.13205464118010535, 0.13190229618404536, 0.10362868257696534, 0.14722167073779924, 0.14724366474843942, 0.1568288222999623, 0.12607369332602125, 0.14077770544858936, 0.12110893472740358, 0.1712251808443287, 0.20509752797752723, 0.1775605589782039, 0.2264145181725834, 0.19300431191557688, 0.19286444977209172, 0.16909851280353927, 0.14694372387351018, 0.3373353810405474, 0.342837962861402, 0.36390493475935326, 0.40571745573285023, 0.38205560110850334, 0.3738217169125788, 0.4880198048366984, 0.4096113718006553, 0.4323464627314967, 0.35174309369837786, 0.34431049969681604, 0.27599867204940476, 0.34039189658528535, 0.2623121669457025, 0.2408362077153684, 0.27118609429142426, 0.3172414021335678, 0.35412402350865324, 0.3174023396028479, 0.2259852969123337, 0.23954730203315366, 0.3156466201072331, 0.22174283248847282, 0.22676218794354897, 0.22434745739563833, 0.22606464422843642, 0.20869039084087937, 0.2133338441201199, 0.19389406737310733, 0.19940175186478726, 0.20178375748271749, 0.20614738608625216, 0.21055014757137347, 0.2089794427451217, 0.21375452352880964, 0.246923908679051, 0.2036297296140449, 0.18474371992299998, 0.1848006424079197, 0.7984593833539525, 0.8619351735775357, 0.19846782563180376, 0.19669436938599627, 0.8139970974058656, 0.7844860987125462, 0.8177654780719267, 0.6047367327469444, 0.2106437035143519, 0.5217262437935557, 0.6255098996569493, 0.4954684900475872, 0.6817102177944807, 0.596090879104607, 0.15298174998105474, 0.1541992984748214, 0.18632868546237547, 0.18373714608907366, 0.18700971795863852, 0.1814125610675279, 0.1724348682525031, 0.18077202739926868, 0.20155302201758019, 0.17602067322488746, 0.17266159209607013, 0.09866930159434961, 0.07935256510972444, 0.090724039123667, 0.09275572302085622, 0.09525452981125215, 0.09320015589874386, 0.08666902398997645, 0.08069808423655611, 0.08256035831508945]}, "mutation_prompt": null}
{"id": "3a6d2d73-d61c-4786-9175-cbdeae6a6ca2", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 60  # Adjusted population size for more diverse exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.3  # Adjusted cognitive coefficient\n        self.c2 = 1.7  # Adjusted social coefficient\n        self.w = 0.4   # Adjusted inertia weight\n        self.de_F = 0.7  # Adjusted DE scaling factor\n        self.de_CR = 0.8  # Adjusted DE crossover rate\n        self.adaptive_c1_rate = 0.04  # Adjusted adaptation rate\n        self.adaptive_c2_rate = 0.04  # Adjusted adaptation rate\n        self.adaptive_w_rate = 0.02   # Adjusted adaptation rate\n        self.adaptive_de_F_rate = 0.015  # Adjusted adaptation rate\n        self.num_swarms = 4  # Increased number of cooperative swarms\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "An improved hybrid PSO-DE algorithm with dynamic parameter updates and cooperative multi-swarm strategy for robust global and local optimization.", "configspace": "", "generation": 17, "fitness": 0.3195661454479325, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.7793458820958746, 0.8049144143481322, 0.7736354631389929, 0.7990412200225541, 0.7803428159399554, 0.8198689604420838, 0.7892949743426758, 0.7783871713572794, 0.7953917695525544, 0.5943693306079917, 0.5871546920364289, 0.5803175263213618, 0.5963509570067855, 0.577487468958857, 0.5836451553603829, 0.5767787233958033, 0.5612042703741231, 0.5931402797193774, 0.1441447974481196, 0.16072282600999388, 0.16383760088314936, 0.1653072925464154, 0.14292393282136506, 0.15162230581307357, 0.156600204856834, 0.16854824370309185, 0.14996928977437618, 0.1364163428067674, 0.10935239366601124, 0.1108029453403847, 0.1163326267396706, 0.13136929306194112, 0.12547728384203016, 0.13787987032757898, 0.13309764002749436, 0.14128965586407272, 0.8978705746437752, 0.9150971375479973, 0.9195869849932501, 0.9351638964920456, 0.9095913584944961, 0.931780832663112, 0.9391002664673258, 0.9243834122844159, 0.9242669812789635, 0.5178829610723223, 0.4383098801717863, 0.40584414420995796, 0.4149506628772188, 0.4430928547325079, 0.4373953166364628, 0.4132658567923865, 0.40835768037185005, 0.4427192198433425, 0.3660647687246563, 0.7018357619697013, 0.43115951470021396, 0.6196236704050325, 0.7533675790656702, 0.6587331055859356, 0.674118151150769, 0.5410876761076535, 0.6464600189061611, 0.2178385852432141, 0.31127707370749336, 0.20140212694001214, 0.18380792615456643, 0.21106276257091872, 0.2695011569823612, 0.23271583465498924, 0.21383832840001538, 0.1822797212156162, 0.20995604093391473, 0.2107562921029208, 0.20828064858813056, 0.2677372217845223, 0.1942059795298079, 0.18663950284182051, 0.22212931845402117, 0.24503184281491575, 0.2277197975105013, 0.052190101220863094, 0.015208792202669241, 0.14098995775100354, 0.10345983729691544, 0.04183057335513929, 0.007308198186520509, 0.05665052829561812, 0.005046698389945203, 0.08519448028898713, 0.11196911738145754, 0.1439436748688102, 0.10331528127196288, 0.09615580526616574, 0.1001599426322255, 0.06241956531273063, 0.10829167494713987, 0.06331802053508695, 0.11042941230433734, 0.16741154739777353, 0.12364885082114452, 0.1330303253236711, 0.13140180081364305, 0.23222837763947912, 0.10538062480784394, 0.24652202250270272, 0.19587412191528097, 0.11556879067035519, 0.17258114686561676, 0.1939078181278393, 0.18782108073066905, 0.23304836892452974, 0.21188611535779933, 0.26297160042321743, 0.1528525926751525, 0.18369371528784129, 0.19082026895067572, 0.5138485688895338, 0.5327409744916448, 0.49244747883077045, 0.5151691049203946, 0.5542653808446538, 0.52433380023354, 0.539652305040496, 0.5969001171171426, 0.5306749989899959, 0.14290885985699608, 0.14569395177132138, 0.1485146202955997, 0.13503465147290294, 0.1221083134273454, 0.1325458653352074, 0.13094221559895358, 0.1301475679250147, 0.135774771790667, 0.1642733974123185, 0.23296186606762193, 0.17373475998054677, 0.19083674922630134, 0.1963249090080611, 0.18494406646839878, 0.16385226745662496, 0.24661461875051272, 0.2012138033155153, 0.3916583764527256, 0.41389666182829765, 0.3487640110703665, 0.40198292963148774, 0.41883736681139694, 0.4244594177748705, 0.3974016552204165, 0.4478605834570347, 0.4103411957454731, 0.28769959755256547, 0.2650972151610649, 0.2481748488628519, 0.3322636552612178, 0.32445965511639974, 0.30439658076527853, 0.3028262584831758, 0.2860350062716175, 0.2972016176635296, 0.21444495805824304, 0.2113046492792292, 0.20627163833168993, 0.2216529407226452, 0.19558929974684225, 0.20832323744472625, 0.22556037738560342, 0.2003054897577935, 0.20997082623192287, 0.19681332483713154, 0.20630377069818195, 0.23836210821936388, 0.2243225593784779, 0.2332338300252068, 0.1972395982305708, 0.23650947388316135, 0.18602216393058568, 0.18797891523802113, 0.7360531832315989, 0.7794607530007703, 0.1854349815377565, 0.8324290958504648, 0.19696837858525462, 0.1957286282236368, 0.1636995494233111, 0.7891343635652601, 0.8294070900629582, 0.5791417168125784, 0.2068349737832147, 0.20577436283276807, 0.20553125915703996, 0.20618330456417366, 0.20178282486001742, 0.20434417476890965, 0.4068405567168607, 0.5360765108088072, 0.19416411078621, 0.18802037442796016, 0.18391209570391676, 0.1923057126787343, 0.2037970888826307, 0.19737649963923876, 0.18701378186882278, 0.17913248477502164, 0.20014932097370064, 0.09946180723625964, 0.0827630965012992, 0.08439326407737813, 0.08028402229749843, 0.08013779025672596, 0.08064382158630978, 0.09555122484121603, 0.08709680792278518, 0.09504574554993672]}, "mutation_prompt": null}
{"id": "0145ae3b-ba66-4bfa-9694-5e3480a47a6d", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 5  # Increased number of swarms for diverse exploration\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.normal())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.normal())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.normal())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.normal())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE algorithm with adaptive parameters and swarm competition for improved exploration and convergence.", "configspace": "", "generation": 18, "fitness": 0.27179934858771027, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.6132245764029782, 0.768557565356258, 0.7001718917779509, 0.5778244448037492, 0.7636237571339578, 0.700392384358975, 0.5668570356816905, 0.770487153928611, 0.6829725229010579, 0.2842378988659474, 0.5535169690139463, 0.353843220346471, 0.25954190075737793, 0.508426141210327, 0.28739321095516057, 0.24224886935100154, 0.5268678604904884, 0.3266338273272167, 0.148108405736756, 0.1388615847654624, 0.1338081113340147, 0.14191390742762122, 0.1404638507123569, 0.11645873128872808, 0.130910400810214, 0.12504800033081864, 0.13824525142785993, 0.11225354159754097, 0.09344262320433938, 0.11273018159076942, 0.12419842761527311, 0.10614713117710595, 0.09906433320785468, 0.11827617269029012, 0.13298643530867227, 0.11392845014307074, 0.9665730293358802, 0.9479858244209165, 0.9400948539609084, 0.934547548071868, 0.9500124112811283, 0.930050367220964, 0.9223583306409575, 0.9066738391703512, 0.9183756257325489, 0.2992458449019245, 0.3366477863004468, 0.27546695605560023, 0.27415393797786003, 0.354356944263862, 0.24559255253555579, 0.2643563943827407, 0.3264260372060298, 0.2810962838653064, 0.28239988260491755, 0.3929477295997912, 0.3306930385285547, 0.23996898408473644, 0.6054673954906588, 0.34888141975564924, 0.3292512238176347, 0.6019412600017406, 0.3233869780884212, 0.14302580555985445, 0.16508147859172917, 0.16745356093157238, 0.14823571155621307, 0.18457215907937152, 0.16214309019357043, 0.15529388031655866, 0.17013048575134182, 0.15816378106242523, 0.171164263989242, 0.1822743241494812, 0.2183162804796438, 0.14371124972155158, 0.1915193967499338, 0.15637757789443385, 0.17505349666994263, 0.20631098373427859, 0.21535831969863528, 9.999999999998899e-05, 0.01416610628335968, 0.00010316391530140745, 0.04373905512374188, 0.0008300604036468595, 0.0003598655574736931, 0.02523280553185636, 0.020496644936930153, 0.04790769874789835, 0.09440325120793436, 0.05839342318646812, 0.10604637466205635, 0.04629949235453712, 0.0884857527851407, 0.049590595293042994, 0.10326337797578433, 0.09326533133134274, 0.07739842682224629, 0.10091011736844502, 0.11774706986031391, 0.08121107540102568, 0.07109045572062134, 0.10391012796707544, 0.13020574720795797, 0.07571632754838042, 0.15099501880380628, 0.11507544108466172, 0.19829975658367915, 0.16690715290833502, 0.17558044074413737, 0.14844313723318991, 0.12742581388824514, 0.2218559140482903, 0.15538064611545266, 0.14025205486354153, 0.10106415121710466, 0.4573896362957274, 0.532676941961647, 0.46468772949054304, 0.4355647563085996, 0.47490784168154154, 0.45638969498221627, 0.46500003451844363, 0.5119143840973158, 0.4882721171190717, 0.10170536111370443, 0.12812799809958542, 0.1308444530729468, 0.12765304627268415, 0.10295963667062302, 0.11518843449241356, 0.10728098741613612, 0.17230314160232751, 0.12585307806389323, 0.13598380031284163, 0.1521802949018023, 0.16413428202026825, 0.2417593778282534, 0.14550791305522837, 0.17070431865696523, 0.1460787348583381, 0.14251617778304504, 0.1674026714715665, 0.3279305468953828, 0.36298584323137995, 0.33630847958668375, 0.3366698227420504, 0.38986886439367674, 0.3570972339094427, 0.3128382909133618, 0.35925346278399706, 0.3216086411259491, 0.22343026337107552, 0.26111175387814245, 0.26966425001196503, 0.27520492055012913, 0.2371472433212467, 0.2780374940469599, 0.2480505507336005, 0.27665273058847284, 0.28613601292567314, 0.20681624067905036, 0.1934010990534636, 0.2025433608141206, 0.2163766463835083, 0.21505167544237325, 0.18397387103629836, 0.19757830169586055, 0.2043593353234715, 0.2272499653525839, 0.202401108126529, 0.22981198864951347, 0.21399013478246065, 0.18242269165056912, 0.19285636999512212, 0.1943847825637216, 0.19638280585786172, 0.20355080449783358, 0.1814980237420798, 0.17998132010484713, 0.8183834747524557, 0.6183041607181458, 0.5347563675488769, 0.19575942462412754, 0.6795690559014329, 0.3313640702626952, 0.6744039431193655, 0.7571745219663137, 0.40824275618923467, 0.20328373906747388, 0.38539298497888175, 0.3425952469861987, 0.20369270290085462, 0.20350351171292902, 0.3795728699035307, 0.2033135099503124, 0.513338292138383, 0.1770617932452908, 0.18697015325515165, 0.19985904458742143, 0.1739914962015724, 0.18958717955932625, 0.20552134258186383, 0.19439409743954184, 0.19575019225214652, 0.20200207717890273, 0.08148269992868229, 0.09150208034827079, 0.08383469243365615, 0.08833619035649065, 0.08862997078439516, 0.0783733955711976, 0.08912523543892881, 0.08621430168741606, 0.08480197332408912]}, "mutation_prompt": null}
{"id": "4b8d438f-01e0-4371-bc52-e7e115afd19b", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive updates and cooperative swarms for enhanced global search and local refinement.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.8333169245429748, 0.790495928298737, 0.81475261564802, 0.8049769036778989, 0.7914312105468492, 0.8184473686448629, 0.8140208073677198, 0.8207801888135051, 0.8178347284090995, 0.6652443918845535, 0.676197887864247, 0.6334728710899952, 0.676276999141326, 0.6201353425541036, 0.6211880752339876, 0.6557760631872671, 0.6528253715453776, 0.6701037812633088, 0.16487253275699076, 0.1461579071920791, 0.17631330144413138, 0.12427250240141674, 0.14500012522388983, 0.15468103198156968, 0.14987867954890333, 0.16945351512917606, 0.15082042835851006, 0.11251856173339425, 0.12476214867832391, 0.10605420533074883, 0.11654228885594908, 0.11074537131839168, 0.1427452452282436, 0.1271367367261662, 0.11459169740903685, 0.11596444793740923, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055134718055421, 0.43373342127912906, 0.45067894734627667, 0.4626569369201631, 0.5317773560866716, 0.43686250862006504, 0.5285050488260987, 0.48745956795382295, 0.48873332282615434, 0.45004318083795947, 0.3770792792863875, 0.7850125092337845, 0.22272627301031767, 0.6568132609368229, 0.26827014482951417, 0.6458047020396992, 0.22862505530803545, 0.8013966894468995, 0.7110135211524691, 0.3015112201966089, 0.1272234527507521, 0.20942336479116186, 0.2235186702672045, 0.24357983035755126, 0.18965847743611752, 0.23456122886442887, 0.1943987812671063, 0.22031057704700385, 0.19320958119981435, 0.1860994380124935, 0.19282819782563532, 0.22226175135433224, 0.24614548601376085, 0.23944166004978784, 0.24474062100732186, 0.21580876371604996, 0.2175500900660683, 0.04355903547276263, 0.051504983353215184, 0.019043968555067514, 0.06233157499185893, 0.04190383840206846, 0.009961406131040684, 0.014962777335761568, 0.006130967795052511, 0.049456831195005546, 0.1644791018240308, 0.17921190946047483, 0.13377187191037754, 0.057016333118319884, 0.07672286019264052, 0.07248416767530397, 0.15233019514331414, 0.10476994452356414, 0.13498650631886522, 0.19443340345809612, 0.06393725847553666, 0.13951396035174535, 0.07289100983926178, 0.15836768687875757, 0.10651044671917131, 0.11177275521887364, 0.14615126502225628, 0.10654670891872242, 0.26825311509915106, 0.1733485784387323, 0.2101455512278414, 0.08932773863447274, 0.17540705435602755, 0.19181360172419504, 0.13828129153606317, 0.12628716969263565, 0.216802340075676, 0.576695773269535, 0.5178112864813735, 0.5007533951460434, 0.501082090490062, 0.5227971288538382, 0.5545956178175571, 0.5799548941692583, 0.5020186764316803, 0.5373697661985639, 0.13205464118010535, 0.13190229618404536, 0.10362868257696534, 0.14722167073779924, 0.14724366474843942, 0.1568288222999623, 0.12607369332602125, 0.14077770544858936, 0.12110893472740358, 0.1712251808443287, 0.20509752797752723, 0.1775605589782039, 0.2264145181725834, 0.19300431191557688, 0.19286444977209172, 0.16909851280353927, 0.14694372387351018, 0.3373353810405474, 0.342837962861402, 0.36390493475935326, 0.40571745573285023, 0.38205560110850334, 0.3738217169125788, 0.4880198048366984, 0.4096113718006553, 0.4323464627314967, 0.35174309369837786, 0.34431049969681604, 0.27599867204940476, 0.34039189658528535, 0.2623121669457025, 0.2408362077153684, 0.27118609429142426, 0.3172414021335678, 0.35412402350865324, 0.3174023396028479, 0.2259852969123337, 0.23954730203315366, 0.3156466201072331, 0.22174283248847282, 0.22676218794354897, 0.22434745739563833, 0.22606464422843642, 0.20869039084087937, 0.2133338441201199, 0.19389406737310733, 0.19940175186478726, 0.20178375748271749, 0.20614738608625216, 0.21055014757137347, 0.2089794427451217, 0.21375452352880964, 0.246923908679051, 0.2036297296140449, 0.18474371992299998, 0.1848006424079197, 0.7984593833539525, 0.8619351735775357, 0.19846782563180376, 0.19669436938599627, 0.8139970974058656, 0.7844860987125462, 0.8177654780719267, 0.6047367327469444, 0.2106437035143519, 0.5217262437935557, 0.6255098996569493, 0.4954684900475872, 0.6817102177944807, 0.596090879104607, 0.15298174998105474, 0.1541992984748214, 0.18632868546237547, 0.18373714608907366, 0.18700971795863852, 0.1814125610675279, 0.1724348682525031, 0.18077202739926868, 0.20155302201758019, 0.17602067322488746, 0.17266159209607013, 0.09866930159434961, 0.07935256510972444, 0.090724039123667, 0.09275572302085622, 0.09525452981125215, 0.09320015589874386, 0.08666902398997645, 0.08069808423655611, 0.08256035831508945]}, "mutation_prompt": null}
{"id": "b5b8bbf7-74ba-4988-9b5b-8a3dc5f4bcc2", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive updates and cooperative swarms for enhanced global search and local refinement.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.8333169245429748, 0.790495928298737, 0.81475261564802, 0.8049769036778989, 0.7914312105468492, 0.8184473686448629, 0.8140208073677198, 0.8207801888135051, 0.8178347284090995, 0.6652443918845535, 0.676197887864247, 0.6334728710899952, 0.676276999141326, 0.6201353425541036, 0.6211880752339876, 0.6557760631872671, 0.6528253715453776, 0.6701037812633088, 0.16487253275699076, 0.1461579071920791, 0.17631330144413138, 0.12427250240141674, 0.14500012522388983, 0.15468103198156968, 0.14987867954890333, 0.16945351512917606, 0.15082042835851006, 0.11251856173339425, 0.12476214867832391, 0.10605420533074883, 0.11654228885594908, 0.11074537131839168, 0.1427452452282436, 0.1271367367261662, 0.11459169740903685, 0.11596444793740923, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055134718055421, 0.43373342127912906, 0.45067894734627667, 0.4626569369201631, 0.5317773560866716, 0.43686250862006504, 0.5285050488260987, 0.48745956795382295, 0.48873332282615434, 0.45004318083795947, 0.3770792792863875, 0.7850125092337845, 0.22272627301031767, 0.6568132609368229, 0.26827014482951417, 0.6458047020396992, 0.22862505530803545, 0.8013966894468995, 0.7110135211524691, 0.3015112201966089, 0.1272234527507521, 0.20942336479116186, 0.2235186702672045, 0.24357983035755126, 0.18965847743611752, 0.23456122886442887, 0.1943987812671063, 0.22031057704700385, 0.19320958119981435, 0.1860994380124935, 0.19282819782563532, 0.22226175135433224, 0.24614548601376085, 0.23944166004978784, 0.24474062100732186, 0.21580876371604996, 0.2175500900660683, 0.04355903547276263, 0.051504983353215184, 0.019043968555067514, 0.06233157499185893, 0.04190383840206846, 0.009961406131040684, 0.014962777335761568, 0.006130967795052511, 0.049456831195005546, 0.1644791018240308, 0.17921190946047483, 0.13377187191037754, 0.057016333118319884, 0.07672286019264052, 0.07248416767530397, 0.15233019514331414, 0.10476994452356414, 0.13498650631886522, 0.19443340345809612, 0.06393725847553666, 0.13951396035174535, 0.07289100983926178, 0.15836768687875757, 0.10651044671917131, 0.11177275521887364, 0.14615126502225628, 0.10654670891872242, 0.26825311509915106, 0.1733485784387323, 0.2101455512278414, 0.08932773863447274, 0.17540705435602755, 0.19181360172419504, 0.13828129153606317, 0.12628716969263565, 0.216802340075676, 0.576695773269535, 0.5178112864813735, 0.5007533951460434, 0.501082090490062, 0.5227971288538382, 0.5545956178175571, 0.5799548941692583, 0.5020186764316803, 0.5373697661985639, 0.13205464118010535, 0.13190229618404536, 0.10362868257696534, 0.14722167073779924, 0.14724366474843942, 0.1568288222999623, 0.12607369332602125, 0.14077770544858936, 0.12110893472740358, 0.1712251808443287, 0.20509752797752723, 0.1775605589782039, 0.2264145181725834, 0.19300431191557688, 0.19286444977209172, 0.16909851280353927, 0.14694372387351018, 0.3373353810405474, 0.342837962861402, 0.36390493475935326, 0.40571745573285023, 0.38205560110850334, 0.3738217169125788, 0.4880198048366984, 0.4096113718006553, 0.4323464627314967, 0.35174309369837786, 0.34431049969681604, 0.27599867204940476, 0.34039189658528535, 0.2623121669457025, 0.2408362077153684, 0.27118609429142426, 0.3172414021335678, 0.35412402350865324, 0.3174023396028479, 0.2259852969123337, 0.23954730203315366, 0.3156466201072331, 0.22174283248847282, 0.22676218794354897, 0.22434745739563833, 0.22606464422843642, 0.20869039084087937, 0.2133338441201199, 0.19389406737310733, 0.19940175186478726, 0.20178375748271749, 0.20614738608625216, 0.21055014757137347, 0.2089794427451217, 0.21375452352880964, 0.246923908679051, 0.2036297296140449, 0.18474371992299998, 0.1848006424079197, 0.7984593833539525, 0.8619351735775357, 0.19846782563180376, 0.19669436938599627, 0.8139970974058656, 0.7844860987125462, 0.8177654780719267, 0.6047367327469444, 0.2106437035143519, 0.5217262437935557, 0.6255098996569493, 0.4954684900475872, 0.6817102177944807, 0.596090879104607, 0.15298174998105474, 0.1541992984748214, 0.18632868546237547, 0.18373714608907366, 0.18700971795863852, 0.1814125610675279, 0.1724348682525031, 0.18077202739926868, 0.20155302201758019, 0.17602067322488746, 0.17266159209607013, 0.09866930159434961, 0.07935256510972444, 0.090724039123667, 0.09275572302085622, 0.09525452981125215, 0.09320015589874386, 0.08666902398997645, 0.08069808423655611, 0.08256035831508945]}, "mutation_prompt": null}
{"id": "544eb093-577d-422a-aa67-121aa9e36410", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive updates and cooperative swarms for enhanced global search and local refinement.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.8333169245429748, 0.790495928298737, 0.81475261564802, 0.8049769036778989, 0.7914312105468492, 0.8184473686448629, 0.8140208073677198, 0.8207801888135051, 0.8178347284090995, 0.6652443918845535, 0.676197887864247, 0.6334728710899952, 0.676276999141326, 0.6201353425541036, 0.6211880752339876, 0.6557760631872671, 0.6528253715453776, 0.6701037812633088, 0.16487253275699076, 0.1461579071920791, 0.17631330144413138, 0.12427250240141674, 0.14500012522388983, 0.15468103198156968, 0.14987867954890333, 0.16945351512917606, 0.15082042835851006, 0.11251856173339425, 0.12476214867832391, 0.10605420533074883, 0.11654228885594908, 0.11074537131839168, 0.1427452452282436, 0.1271367367261662, 0.11459169740903685, 0.11596444793740923, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055134718055421, 0.43373342127912906, 0.45067894734627667, 0.4626569369201631, 0.5317773560866716, 0.43686250862006504, 0.5285050488260987, 0.48745956795382295, 0.48873332282615434, 0.45004318083795947, 0.3770792792863875, 0.7850125092337845, 0.22272627301031767, 0.6568132609368229, 0.26827014482951417, 0.6458047020396992, 0.22862505530803545, 0.8013966894468995, 0.7110135211524691, 0.3015112201966089, 0.1272234527507521, 0.20942336479116186, 0.2235186702672045, 0.24357983035755126, 0.18965847743611752, 0.23456122886442887, 0.1943987812671063, 0.22031057704700385, 0.19320958119981435, 0.1860994380124935, 0.19282819782563532, 0.22226175135433224, 0.24614548601376085, 0.23944166004978784, 0.24474062100732186, 0.21580876371604996, 0.2175500900660683, 0.04355903547276263, 0.051504983353215184, 0.019043968555067514, 0.06233157499185893, 0.04190383840206846, 0.009961406131040684, 0.014962777335761568, 0.006130967795052511, 0.049456831195005546, 0.1644791018240308, 0.17921190946047483, 0.13377187191037754, 0.057016333118319884, 0.07672286019264052, 0.07248416767530397, 0.15233019514331414, 0.10476994452356414, 0.13498650631886522, 0.19443340345809612, 0.06393725847553666, 0.13951396035174535, 0.07289100983926178, 0.15836768687875757, 0.10651044671917131, 0.11177275521887364, 0.14615126502225628, 0.10654670891872242, 0.26825311509915106, 0.1733485784387323, 0.2101455512278414, 0.08932773863447274, 0.17540705435602755, 0.19181360172419504, 0.13828129153606317, 0.12628716969263565, 0.216802340075676, 0.576695773269535, 0.5178112864813735, 0.5007533951460434, 0.501082090490062, 0.5227971288538382, 0.5545956178175571, 0.5799548941692583, 0.5020186764316803, 0.5373697661985639, 0.13205464118010535, 0.13190229618404536, 0.10362868257696534, 0.14722167073779924, 0.14724366474843942, 0.1568288222999623, 0.12607369332602125, 0.14077770544858936, 0.12110893472740358, 0.1712251808443287, 0.20509752797752723, 0.1775605589782039, 0.2264145181725834, 0.19300431191557688, 0.19286444977209172, 0.16909851280353927, 0.14694372387351018, 0.3373353810405474, 0.342837962861402, 0.36390493475935326, 0.40571745573285023, 0.38205560110850334, 0.3738217169125788, 0.4880198048366984, 0.4096113718006553, 0.4323464627314967, 0.35174309369837786, 0.34431049969681604, 0.27599867204940476, 0.34039189658528535, 0.2623121669457025, 0.2408362077153684, 0.27118609429142426, 0.3172414021335678, 0.35412402350865324, 0.3174023396028479, 0.2259852969123337, 0.23954730203315366, 0.3156466201072331, 0.22174283248847282, 0.22676218794354897, 0.22434745739563833, 0.22606464422843642, 0.20869039084087937, 0.2133338441201199, 0.19389406737310733, 0.19940175186478726, 0.20178375748271749, 0.20614738608625216, 0.21055014757137347, 0.2089794427451217, 0.21375452352880964, 0.246923908679051, 0.2036297296140449, 0.18474371992299998, 0.1848006424079197, 0.7984593833539525, 0.8619351735775357, 0.19846782563180376, 0.19669436938599627, 0.8139970974058656, 0.7844860987125462, 0.8177654780719267, 0.6047367327469444, 0.2106437035143519, 0.5217262437935557, 0.6255098996569493, 0.4954684900475872, 0.6817102177944807, 0.596090879104607, 0.15298174998105474, 0.1541992984748214, 0.18632868546237547, 0.18373714608907366, 0.18700971795863852, 0.1814125610675279, 0.1724348682525031, 0.18077202739926868, 0.20155302201758019, 0.17602067322488746, 0.17266159209607013, 0.09866930159434961, 0.07935256510972444, 0.090724039123667, 0.09275572302085622, 0.09525452981125215, 0.09320015589874386, 0.08666902398997645, 0.08069808423655611, 0.08256035831508945]}, "mutation_prompt": null}
{"id": "cf35d354-07b5-4c75-a5b5-28768ceb1e85", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n        self.reset_velocity_interval = 10  # Reset interval for velocities\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n        iteration = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        if iteration % self.reset_velocity_interval == 0:\n                            velocities[i] = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], self.dim)\n                        else:\n                            velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                    self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n            iteration += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "An adaptive PSO-DE hybrid with periodic velocity reset for improved exploration and convergence.", "configspace": "", "generation": 22, "fitness": 0.2547920079034242, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.5484394923573455, 0.5068222149586721, 0.5080486035312302, 0.5430998328115607, 0.5146016103987929, 0.5613695466447208, 0.5505561577901871, 0.5039935973032177, 0.5331967227363954, 0.12639608014796722, 0.14749687592187744, 0.14299211331385464, 0.18601275425232378, 0.10513626808856247, 0.13485029899089573, 0.17159322719931702, 0.09832485503317434, 0.12220403462135987, 0.1945540475404518, 0.14730658764407634, 0.1308343202639819, 0.12694984832097866, 0.11033095941214144, 0.1453324297638714, 0.10999582662493301, 0.12986054558560978, 0.14316278877599675, 0.11446144409077097, 0.11557219418841447, 0.1262045807951705, 0.11112552604391024, 0.09529160891156174, 0.11001681647709616, 0.09810644339285557, 0.10956868455359259, 0.09087094656748707, 0.9441607134442518, 0.9335608395577532, 0.9103025595873836, 0.9309482516247083, 0.933408958720912, 0.9327114436077115, 0.9317630941571622, 0.9168425062159844, 0.9419749899266137, 0.3284959290200712, 0.2934204109386269, 0.30427205970459603, 0.3154154745053853, 0.28037623785075105, 0.28485481215976627, 0.29934882689978715, 0.27590938624336536, 0.301203528635167, 0.724605813909402, 0.5972845673808311, 0.5786567290335138, 0.5739993361829805, 0.6079755056342868, 0.26757961123697305, 0.21846663011752732, 0.6571336929339414, 0.34201969325135084, 0.32930535205098166, 0.14736087220103966, 0.15657808940889628, 0.12669980215654064, 0.1504960931278918, 0.15804638086709766, 0.15690484275764915, 0.19134008735109687, 0.15780280015388526, 0.12634907307058896, 0.16446298643035118, 0.17679161552245948, 0.14232617906521083, 0.1661982630401908, 0.22974829508027506, 0.18415673802924937, 0.17607480894926264, 0.17844277674141307, 0.0018978677414437373, 0.0029070866837149767, 0.09201387615392487, 0.08564269842896843, 0.03663146658768268, 9.999999999998899e-05, 9.999999999998899e-05, 0.06297923668320382, 9.999999999998899e-05, 0.09617310527316292, 0.07392789025994084, 0.10458170122844934, 0.08191841899937757, 0.09099182395099892, 0.09065607555423427, 0.11454857990527323, 0.06410676175047192, 0.10281244339866302, 0.022173583005876907, 0.04173169036956692, 0.02679821831514906, 0.02883048729731197, 0.0021240959827085737, 0.04027013432759863, 0.030477531337272934, 0.009366157659360774, 0.04391895457053541, 0.06947732349491653, 0.12746658847633718, 0.15959416090645717, 0.11150661488586688, 0.13175360549693615, 0.13354304173672427, 0.1537355626805309, 0.14746732271052332, 0.1415280922931117, 0.4512778565878166, 0.45076764367104694, 0.444071816699109, 0.44521409144092605, 0.44582634812241473, 0.44922818799356345, 0.4476034489638735, 0.439951658351068, 0.44197011809177233, 0.13046202820100994, 0.14672370510564636, 0.10355987309758552, 0.11230016326395487, 0.11950591184708681, 0.13436574293222203, 0.12370094261911979, 0.1309230934809268, 0.10277243792515833, 0.15229693113453668, 0.1710664170439835, 0.15918170726222358, 0.21858290068991448, 0.14211844061163303, 0.13536653158693357, 0.15915525253368945, 0.17242009271910663, 0.20936290039551542, 0.2889965292219848, 0.28965392224381836, 0.30976487262704855, 0.3159886669971377, 0.3086812636476337, 0.29953161338096557, 0.342742857372592, 0.3316931321080058, 0.3310706720486424, 0.24283096183491293, 0.2382134427421616, 0.27183371429073777, 0.26101660966710993, 0.250664676370969, 0.23167644359753847, 0.24062208761750647, 0.23408658567786134, 0.26723001689089765, 0.25294107319284653, 0.21199278817318767, 0.19930124319950382, 0.20892892829989174, 0.19850100314868147, 0.22503607438051365, 0.20781567412176427, 0.21190539288953458, 0.2117581087000101, 0.18921762904897832, 0.21630676905484658, 0.20732245868391141, 0.2201281942156318, 0.19285199893664906, 0.347896432431384, 0.20132115166295084, 0.19185070788856962, 0.17306402314169922, 0.7493289674123143, 0.18380798866490644, 0.7298883517776137, 0.1625351332696262, 0.19785294634432748, 0.6604722427382547, 0.19116781622806867, 0.6422950502736762, 0.6652917300388871, 0.6491839365153651, 0.20460690093281642, 0.5852266448402663, 0.5132642529069715, 0.1656047975310443, 0.24254587021635876, 0.5162033527071562, 0.2059952260796537, 0.20889675210027858, 0.1932497612272317, 0.18383620864512695, 0.18181581375986422, 0.20676012115964326, 0.1945681779864209, 0.17839912876826458, 0.19980916976899998, 0.17775675983364814, 0.19593747068301381, 0.09371444380718907, 0.08053536064788591, 0.08296094433808432, 0.08556204767470332, 0.11151566434750115, 0.08807676632754824, 0.08677196979716206, 0.08868772609055608, 0.0824255081337435]}, "mutation_prompt": null}
{"id": "c0d6d13e-0986-4063-b093-bcad4e1fb72e", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n        self.neighborhood_size = 5  # New parameter for dynamic neighborhood exploration\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    # Use neighborhood dynamic best instead of swarm global best\n                    indices = np.random.choice(swarm_indices, self.neighborhood_size, replace=True)\n                    neighborhood_best_position = personal_best_positions[indices[np.argmin(personal_best_scores[indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (neighborhood_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced hybrid PSO-DE algorithm using adaptive parameter tuning and dynamic neighborhood exploration for improved convergence.", "configspace": "", "generation": 23, "fitness": 0.28241397261844764, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.7748841407437873, 0.7161200839494126, 0.738282592696451, 0.7369991256675056, 0.7316067043213585, 0.7154349420966102, 0.7063973204284498, 0.7051232188463981, 0.7332301954224867, 0.5545059420816136, 0.5035548435328081, 0.3586577399650177, 0.4263970715883232, 0.5242839429938646, 0.4436866227177938, 0.4653189548534018, 0.4949817348287894, 0.4338931242210833, 0.12356025124463099, 0.1405626143018227, 0.12357582357745289, 0.14077059626333321, 0.11209514178102054, 0.13974355274364902, 0.13728711512172886, 0.10845596547211078, 0.1077638288445687, 0.10978411649529696, 0.10600360977863332, 0.09871896635211486, 0.10799640468910143, 0.09573215439980154, 0.10187940200094958, 0.11533844949954819, 0.14999542882137806, 0.09727797642048575, 0.9494524101081471, 0.9224104442888433, 0.9129979676762573, 0.9258166184889594, 0.8865806755294657, 0.933608331140556, 0.9047331078045832, 0.8777987251661349, 0.9243805980738916, 0.3478301989885869, 0.3368310904829195, 0.29747255857146837, 0.3567566792999436, 0.2725538017525059, 0.3141888149757164, 0.3047792928615568, 0.29344703371816094, 0.35530707578354537, 0.29566457065174523, 0.6902550760249336, 0.3784095290785048, 0.6209525333583431, 0.5426219585104995, 0.6651026217453018, 0.4873542099490743, 0.37969512525876703, 0.8021659718610976, 0.16937751722000016, 0.13728926080099246, 0.18302378559831545, 0.16746638497296173, 0.18923719224129565, 0.1722722110195467, 0.1638673944639284, 0.17962841511544614, 0.2962120570381144, 0.19175237082356167, 0.1723155815485643, 0.18252513398939563, 0.16378884048106612, 0.18862430220379112, 0.17580076819154833, 0.16410841341932414, 0.20515965384779988, 0.199280487012791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05286541548541568, 0.006179876925775929, 0.02254941475132144, 9.999999999998899e-05, 0.010777412335925884, 0.010801135126003447, 0.09665269515879105, 0.08523249657235377, 0.1132433385145194, 0.058149165378796885, 0.10969743729171444, 0.09931061954702325, 0.12912820013779513, 0.0784083822115208, 0.12437845263875136, 0.12299733591453677, 0.129104886697889, 0.05530967542143406, 0.07887542214595522, 0.10158413200271899, 0.1153080684351695, 0.08386851800199235, 0.10211438101231274, 0.030625350295121145, 0.13329101291465717, 0.11032727975331835, 0.10367408386971655, 0.16405277808950414, 0.0926085518788754, 0.1923604689012789, 0.07080881233656311, 0.12373133525049274, 0.07672504140614633, 0.49142752228813336, 0.5162827713936516, 0.46658398854982397, 0.47428047840790855, 0.4786964261861407, 0.4551871404430329, 0.5081415944105506, 0.5127822682402811, 0.5241054496703033, 0.10051875564500246, 0.09411697419291576, 0.1020093958815036, 0.1049686499491489, 0.10965057909722131, 0.09294587895167183, 0.10519918036570508, 0.11706396935869001, 0.10517533714809091, 0.14982043264691258, 0.13270429628719194, 0.13029487116724814, 0.12762408223672317, 0.129703940143287, 0.12770571152497778, 0.12053849969379449, 0.15975934755793153, 0.15916208222560113, 0.32231552397345153, 0.31650754219765365, 0.3479701141869348, 0.3060060986081077, 0.3087383256216839, 0.42749747070536637, 0.3444852283900003, 0.38150913158972644, 0.3348826584153498, 0.22829074675536665, 0.22788760756530524, 0.2538597890056472, 0.2723576245910325, 0.24888776491632436, 0.2530226849600943, 0.2968100174978775, 0.29097131549705935, 0.19324742779527282, 0.23688055911130546, 0.22706058667540274, 0.21712607418185625, 0.20049319788865316, 0.21313620475286976, 0.22230705292250053, 0.24944644461281373, 0.21252423439427925, 0.20242003749989657, 0.1730358388747656, 0.2029621591230596, 0.2073714431803787, 0.23603494241695266, 0.2330499588383994, 0.1940804126241774, 0.18500404345691568, 0.19305982205853467, 0.27719894552670055, 0.17035774137479787, 0.7927186772677213, 0.6741703193811543, 0.8054718920323363, 0.28568404823501425, 0.19518321575085296, 0.7192284814827725, 0.7455938407383723, 0.7485095780904591, 0.5510422085420592, 0.2064904580016469, 0.20470958890134028, 0.20235881783739973, 0.16507659660412688, 0.20580796990999295, 0.20072374874463117, 0.3272955536972306, 0.4709892508737268, 0.18111528764375107, 0.19498204355796944, 0.18948897746237614, 0.20868160861780194, 0.1835647024752417, 0.17999929454656216, 0.17957600856093892, 0.1879580611697117, 0.1808257680844274, 0.0850304818423896, 0.08665494831154952, 0.07897668949922931, 0.08838472251342389, 0.09022668596119443, 0.07645471406978466, 0.08326355029597943, 0.08916508940654533, 0.08483114372088185]}, "mutation_prompt": null}
{"id": "c9218014-ffe6-41e6-a6de-9092aa6d9f43", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive updates and cooperative swarms for enhanced global search and local refinement.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.8333169245429748, 0.790495928298737, 0.81475261564802, 0.8049769036778989, 0.7914312105468492, 0.8184473686448629, 0.8140208073677198, 0.8207801888135051, 0.8178347284090995, 0.6652443918845535, 0.676197887864247, 0.6334728710899952, 0.676276999141326, 0.6201353425541036, 0.6211880752339876, 0.6557760631872671, 0.6528253715453776, 0.6701037812633088, 0.16487253275699076, 0.1461579071920791, 0.17631330144413138, 0.12427250240141674, 0.14500012522388983, 0.15468103198156968, 0.14987867954890333, 0.16945351512917606, 0.15082042835851006, 0.11251856173339425, 0.12476214867832391, 0.10605420533074883, 0.11654228885594908, 0.11074537131839168, 0.1427452452282436, 0.1271367367261662, 0.11459169740903685, 0.11596444793740923, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055134718055421, 0.43373342127912906, 0.45067894734627667, 0.4626569369201631, 0.5317773560866716, 0.43686250862006504, 0.5285050488260987, 0.48745956795382295, 0.48873332282615434, 0.45004318083795947, 0.3770792792863875, 0.7850125092337845, 0.22272627301031767, 0.6568132609368229, 0.26827014482951417, 0.6458047020396992, 0.22862505530803545, 0.8013966894468995, 0.7110135211524691, 0.3015112201966089, 0.1272234527507521, 0.20942336479116186, 0.2235186702672045, 0.24357983035755126, 0.18965847743611752, 0.23456122886442887, 0.1943987812671063, 0.22031057704700385, 0.19320958119981435, 0.1860994380124935, 0.19282819782563532, 0.22226175135433224, 0.24614548601376085, 0.23944166004978784, 0.24474062100732186, 0.21580876371604996, 0.2175500900660683, 0.04355903547276263, 0.051504983353215184, 0.019043968555067514, 0.06233157499185893, 0.04190383840206846, 0.009961406131040684, 0.014962777335761568, 0.006130967795052511, 0.049456831195005546, 0.1644791018240308, 0.17921190946047483, 0.13377187191037754, 0.057016333118319884, 0.07672286019264052, 0.07248416767530397, 0.15233019514331414, 0.10476994452356414, 0.13498650631886522, 0.19443340345809612, 0.06393725847553666, 0.13951396035174535, 0.07289100983926178, 0.15836768687875757, 0.10651044671917131, 0.11177275521887364, 0.14615126502225628, 0.10654670891872242, 0.26825311509915106, 0.1733485784387323, 0.2101455512278414, 0.08932773863447274, 0.17540705435602755, 0.19181360172419504, 0.13828129153606317, 0.12628716969263565, 0.216802340075676, 0.576695773269535, 0.5178112864813735, 0.5007533951460434, 0.501082090490062, 0.5227971288538382, 0.5545956178175571, 0.5799548941692583, 0.5020186764316803, 0.5373697661985639, 0.13205464118010535, 0.13190229618404536, 0.10362868257696534, 0.14722167073779924, 0.14724366474843942, 0.1568288222999623, 0.12607369332602125, 0.14077770544858936, 0.12110893472740358, 0.1712251808443287, 0.20509752797752723, 0.1775605589782039, 0.2264145181725834, 0.19300431191557688, 0.19286444977209172, 0.16909851280353927, 0.14694372387351018, 0.3373353810405474, 0.342837962861402, 0.36390493475935326, 0.40571745573285023, 0.38205560110850334, 0.3738217169125788, 0.4880198048366984, 0.4096113718006553, 0.4323464627314967, 0.35174309369837786, 0.34431049969681604, 0.27599867204940476, 0.34039189658528535, 0.2623121669457025, 0.2408362077153684, 0.27118609429142426, 0.3172414021335678, 0.35412402350865324, 0.3174023396028479, 0.2259852969123337, 0.23954730203315366, 0.3156466201072331, 0.22174283248847282, 0.22676218794354897, 0.22434745739563833, 0.22606464422843642, 0.20869039084087937, 0.2133338441201199, 0.19389406737310733, 0.19940175186478726, 0.20178375748271749, 0.20614738608625216, 0.21055014757137347, 0.2089794427451217, 0.21375452352880964, 0.246923908679051, 0.2036297296140449, 0.18474371992299998, 0.1848006424079197, 0.7984593833539525, 0.8619351735775357, 0.19846782563180376, 0.19669436938599627, 0.8139970974058656, 0.7844860987125462, 0.8177654780719267, 0.6047367327469444, 0.2106437035143519, 0.5217262437935557, 0.6255098996569493, 0.4954684900475872, 0.6817102177944807, 0.596090879104607, 0.15298174998105474, 0.1541992984748214, 0.18632868546237547, 0.18373714608907366, 0.18700971795863852, 0.1814125610675279, 0.1724348682525031, 0.18077202739926868, 0.20155302201758019, 0.17602067322488746, 0.17266159209607013, 0.09866930159434961, 0.07935256510972444, 0.090724039123667, 0.09275572302085622, 0.09525452981125215, 0.09320015589874386, 0.08666902398997645, 0.08069808423655611, 0.08256035831508945]}, "mutation_prompt": null}
{"id": "6b822555-0309-4b6e-95bc-0c16a9a0935d", "solution": "import numpy as np\n\nclass PSODEPlusOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03  # Modified rate\n        self.adaptive_c2_rate = 0.07  # Modified rate\n        self.adaptive_w_rate = 0.05  # Modified rate\n        self.adaptive_de_F_rate = 0.04  # Modified rate\n        self.num_swarms = 4  # Increased number of swarms\n        self.hierarchical_factor = 0.1  # New parameter for hierarchical learning\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.1, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n                        # Hierarchical learning\n                        particles[i] += self.hierarchical_factor * np.random.randn(self.dim)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEPlusOptimizer", "description": "An evolved PSO-DE algorithm with adaptive parameter tuning and hierarchical swarms to improve convergence speed.", "configspace": "", "generation": 25, "fitness": 0.22201084866314064, "feedback": "The algorithm PSODEPlusOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.41436031685359587, 0.4023150941548713, 0.4288571540967544, 0.41325619505621347, 0.3968518816864909, 0.4373281945985763, 0.41994089543669233, 0.40941903000196245, 0.421296700280128, 0.021959351095811153, 0.0169590646060922, 0.017942669124607846, 0.033557278251880596, 0.04196202728906251, 0.037336213104724236, 0.017853284039056616, 0.0349512900784803, 0.012800214413517086, 0.1290724930643311, 0.11508451364042516, 0.1099089697425848, 0.09729065091266365, 0.09631086677181944, 0.1042349971338965, 0.0949280876466364, 0.11419144867933995, 0.1159325290701183, 0.10040464526603687, 0.08880447583512285, 0.1013981631030596, 0.09591148245921344, 0.08649700521243997, 0.09729661326235928, 0.09473877241253215, 0.10289113666494798, 0.09229578168069597, 0.9335658832835312, 0.9063870526267508, 0.9072652104372028, 0.9336378756487309, 0.954005278172074, 0.9176524703486773, 0.9266631387951948, 0.9351107051273944, 0.891227370834365, 0.26146526947519877, 0.24159429968281798, 0.25891812176228957, 0.2506748121414297, 0.32370816966331084, 0.24881071025176926, 0.26704343362450467, 0.24883217448096973, 0.2660714333526428, 0.33262361981201716, 0.3348374822942668, 0.29891749459200445, 0.21204933825082484, 0.28812701492054926, 0.28408212143125655, 0.23186369572376275, 0.27292886453584375, 0.363939161410368, 0.14081999952950142, 0.1537590477327725, 0.14712659206481804, 0.14187026156565574, 0.1526395181385044, 0.17475325399761188, 0.14791697879899635, 0.15511363514880994, 0.14818456179201855, 0.15394824954069886, 0.14894809503799245, 0.14253598549720103, 0.17548574086875235, 0.1441259491157998, 0.15937605665369425, 0.15530145897174175, 0.15956132021518044, 0.16192433313814325, 0.0003818197796346956, 9.999999999998899e-05, 0.008008827033971433, 0.0038649431583146487, 9.999999999998899e-05, 9.999999999998899e-05, 0.028133363151729096, 0.03635831856391103, 0.002127646640028069, 0.09884096828513955, 0.05922183286312244, 0.08716069342618826, 0.06752978988386527, 0.04788186890374169, 0.04673170608560828, 0.09538294073075171, 0.07210211107997744, 0.09237022590185806, 0.000573782586866245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09048149258089377, 0.0784215731468324, 0.10574343609004466, 0.07800253045288974, 0.0965160254052615, 0.09998769021262965, 0.08968234490330651, 0.07777051875776908, 0.07544348792860656, 0.3897385090814165, 0.3957117641836245, 0.3836621677010522, 0.3969820559536644, 0.3987043121330749, 0.3954599026062261, 0.3955439648524405, 0.3890684650457884, 0.41621898551317593, 0.10560736596170406, 0.11397539969092851, 0.10759709995868305, 0.1003072550867593, 0.10591123917868261, 0.10504788632057238, 0.10124095012189771, 0.10061820633236018, 0.11241743406704285, 0.16252456633841827, 0.14969939762169848, 0.16300562412459807, 0.18966699479015037, 0.1809739119274434, 0.1583769024007341, 0.19450057273856014, 0.1493599186559793, 0.15198336972141935, 0.2692340589343175, 0.2777666813637888, 0.28536515613931557, 0.27842370596027544, 0.29171490348122475, 0.2789139068608263, 0.28625749702381875, 0.29592411008470665, 0.26279087693545267, 0.21264606002430742, 0.22005893754779282, 0.2175922627880803, 0.21401189324725134, 0.2163610408890113, 0.22682981634247834, 0.20428366669010833, 0.21499659093509083, 0.22093737571355077, 0.21577920504149495, 0.19373691928807835, 0.19296653746154868, 0.20942600298405256, 0.2410266569285997, 0.21514197637090327, 0.2210570062900955, 0.21318106550622262, 0.2417669711019811, 0.1991114467426809, 0.20230240537791855, 0.20320957488206104, 0.21281027570797173, 0.18717336361062875, 0.19929356083148653, 0.18334244661230892, 0.20708847673134312, 0.18943094906148994, 0.5576392302001698, 0.5864397540030025, 0.18353888048852962, 0.646758105235018, 0.576600344413355, 0.6168797393421959, 0.6198449695984565, 0.16470564062648518, 0.54955636176039, 0.5262498454098262, 0.3371476218463758, 0.41696235764168244, 0.32801652066019793, 0.20640868954181746, 0.3526735486647936, 0.23668192576636482, 0.4779581896500007, 0.5050354374884009, 0.18186051767361588, 0.171383254081925, 0.18330786823403378, 0.18995014802828714, 0.18180950052585576, 0.17508259475197974, 0.19490747709830725, 0.19188614227833334, 0.1773622832081515, 0.08771216943066773, 0.10787175875176558, 0.08349687735513034, 0.07593681303451072, 0.07831614340806625, 0.07872992255078859, 0.09511739052657908, 0.09504359368842674, 0.08826142590720643]}, "mutation_prompt": null}
{"id": "7cb11b07-5ee5-4600-9045-453e9f4d01bf", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.35, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.2, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.25, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.55, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration and dynamic parameter tuning for efficient exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.32891677362316607, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "b8bd3772-67b9-4bcb-8f71-923dc3990cd8", "metadata": {"aucs": [0.8406529424030956, 0.8232835059765213, 0.8293336428701279, 0.8104508476960526, 0.8076462041158802, 0.8469130637235459, 0.8401358859581489, 0.8241032507650086, 0.834302298084712, 0.6549257598386039, 0.6193621652341501, 0.6581924512832258, 0.688379172221677, 0.67640946790645, 0.6751164593594867, 0.6541831115402261, 0.6514849873130864, 0.6578182645392476, 0.13831290668726182, 0.1296477069257862, 0.15030886913799746, 0.1700427858325525, 0.14966025473975475, 0.175834681366266, 0.14621680277123794, 0.5782182122201394, 0.17730042740597107, 0.10640433373428326, 0.11641750824523733, 0.12424274788330036, 0.12286534592926524, 0.11258962194797206, 0.12075546290390815, 0.10690290724432416, 0.13819911967504417, 0.10642236689171225, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055182010202717, 0.5512257121464473, 0.5304210834549572, 0.5202857291820013, 0.5495922153824607, 0.49337308184361905, 0.6016236601302756, 0.526994662057074, 0.49013028082226084, 0.5259353783755025, 0.799731512360543, 0.808816755283632, 0.2222622955551179, 0.35218487967067535, 0.27279121135948947, 0.7238431943248136, 0.3548879393646951, 0.3858609619874235, 0.7864466650353403, 0.20677888869735261, 0.12815523700459985, 0.19042230567950957, 0.1950039212752509, 0.22879646527469755, 0.1920259885979717, 0.20403343633323912, 0.19255374487822563, 0.24006411382578385, 0.18616496560146145, 0.2159346755139263, 0.19798565713115945, 0.25794205652260693, 0.21531617945501402, 0.18591264223839865, 0.21898388354321818, 0.1272172992956112, 0.2635147975054366, 0.04597587940874315, 0.012238436146908005, 0.01595879751541418, 0.03096014896255128, 0.022236241765894227, 0.017908575729039145, 0.006460890226626326, 0.027399091403225273, 0.018545559710639425, 0.065638200995634, 0.1472428627235105, 0.13821543509708267, 0.08215724181210426, 0.06555216315285273, 0.06405101103392119, 0.16687747076680315, 0.10202890813067045, 0.10299255616892, 0.21131461889888847, 0.05930393775117482, 0.11610853831729107, 0.07127146354367009, 0.1368332819025, 0.14385632289712935, 0.08745182404005714, 0.13515470797651108, 0.12727339340401778, 0.09671827675963196, 0.19590008656579516, 0.22813066587487407, 0.18919369892904714, 0.16994871062721473, 0.1538536622799198, 0.1536650001351878, 0.14137822703093517, 0.18343605545707797, 0.5233490553625927, 0.5489484110374874, 0.49337836092159615, 0.5894755456627445, 0.5314737195072878, 0.5294173246825226, 0.5245546333761434, 0.5558246992210729, 0.5144415904982149, 0.13350056834944457, 0.1357013346812459, 0.10379609950109592, 0.10633639357551705, 0.145315751772365, 0.11466707747508775, 0.14931651265145807, 0.135082473148186, 0.14989766168589125, 0.1446800405006512, 0.2748460382182787, 0.22858957530107937, 0.2839462402131955, 0.18520887415421106, 0.18293695081621308, 0.18415659730659395, 0.22403272137341979, 0.1792624360338605, 0.2545959643257061, 0.32263521269156314, 0.42276135086648026, 0.38106051751056547, 0.35857976938335867, 0.395505494599797, 0.43138161786941653, 0.4392956155084752, 0.3962263608499429, 0.2867003931239489, 0.262973573419201, 0.2581495791334145, 0.2832310316330737, 0.21775131163919348, 0.25959442410923006, 0.33578779530113656, 0.2927552665970563, 0.26870218135861734, 0.2098589315055276, 0.20316622270541795, 0.2890199087347326, 0.2065908771092302, 0.24878124534446, 0.2105292441078468, 0.24725343996317928, 0.22015670492588058, 0.2069971671132279, 0.17848121354719992, 0.18602589010255588, 0.18876773049173723, 0.191313848039816, 0.195274868887801, 0.24760121101681964, 0.18256765779283468, 0.24712467776939762, 0.2434387756601495, 0.17543763530511058, 0.1846801297725471, 0.8723283822570268, 0.8641163136540069, 0.8509838377816354, 0.19620022378989077, 0.14225918136084403, 0.8376163552637996, 0.8256152519692382, 0.7105426039848769, 0.2109118169782117, 0.6111360462475666, 0.7712698877912304, 0.5302513119427338, 0.7796429261686041, 0.543348787607856, 0.15314926553992758, 0.15353571414436995, 0.18102658185326537, 0.18869291871918226, 0.19506647650056852, 0.18674250113397517, 0.1994436132520382, 0.17535958313005884, 0.1784781939987985, 0.19571522961196464, 0.17881953215439794, 0.08917982973617566, 0.08642027862251656, 0.09224676117504493, 0.09419988392824075, 0.09151160426231342, 0.09177140987994281, 0.08791461740972206, 0.08806000129748515, 0.08750331890921592]}, "mutation_prompt": null}
{"id": "d8876d10-11c9-4441-9b59-be9855580c10", "solution": "import numpy as np\n\nclass ImprovedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.35, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.2, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.25, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.55, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "ImprovedPSODEOptimizer", "description": "Improved hybrid PSO-DE algorithm with stochastic adaptation and inter-swarm learning for enhanced convergence.", "configspace": "", "generation": 27, "fitness": 0.32891677362316607, "feedback": "The algorithm ImprovedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "7cb11b07-5ee5-4600-9045-453e9f4d01bf", "metadata": {"aucs": [0.8406529424030956, 0.8232835059765213, 0.8293336428701279, 0.8104508476960526, 0.8076462041158802, 0.8469130637235459, 0.8401358859581489, 0.8241032507650086, 0.834302298084712, 0.6549257598386039, 0.6193621652341501, 0.6581924512832258, 0.688379172221677, 0.67640946790645, 0.6751164593594867, 0.6541831115402261, 0.6514849873130864, 0.6578182645392476, 0.13831290668726182, 0.1296477069257862, 0.15030886913799746, 0.1700427858325525, 0.14966025473975475, 0.175834681366266, 0.14621680277123794, 0.5782182122201394, 0.17730042740597107, 0.10640433373428326, 0.11641750824523733, 0.12424274788330036, 0.12286534592926524, 0.11258962194797206, 0.12075546290390815, 0.10690290724432416, 0.13819911967504417, 0.10642236689171225, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055182010202717, 0.5512257121464473, 0.5304210834549572, 0.5202857291820013, 0.5495922153824607, 0.49337308184361905, 0.6016236601302756, 0.526994662057074, 0.49013028082226084, 0.5259353783755025, 0.799731512360543, 0.808816755283632, 0.2222622955551179, 0.35218487967067535, 0.27279121135948947, 0.7238431943248136, 0.3548879393646951, 0.3858609619874235, 0.7864466650353403, 0.20677888869735261, 0.12815523700459985, 0.19042230567950957, 0.1950039212752509, 0.22879646527469755, 0.1920259885979717, 0.20403343633323912, 0.19255374487822563, 0.24006411382578385, 0.18616496560146145, 0.2159346755139263, 0.19798565713115945, 0.25794205652260693, 0.21531617945501402, 0.18591264223839865, 0.21898388354321818, 0.1272172992956112, 0.2635147975054366, 0.04597587940874315, 0.012238436146908005, 0.01595879751541418, 0.03096014896255128, 0.022236241765894227, 0.017908575729039145, 0.006460890226626326, 0.027399091403225273, 0.018545559710639425, 0.065638200995634, 0.1472428627235105, 0.13821543509708267, 0.08215724181210426, 0.06555216315285273, 0.06405101103392119, 0.16687747076680315, 0.10202890813067045, 0.10299255616892, 0.21131461889888847, 0.05930393775117482, 0.11610853831729107, 0.07127146354367009, 0.1368332819025, 0.14385632289712935, 0.08745182404005714, 0.13515470797651108, 0.12727339340401778, 0.09671827675963196, 0.19590008656579516, 0.22813066587487407, 0.18919369892904714, 0.16994871062721473, 0.1538536622799198, 0.1536650001351878, 0.14137822703093517, 0.18343605545707797, 0.5233490553625927, 0.5489484110374874, 0.49337836092159615, 0.5894755456627445, 0.5314737195072878, 0.5294173246825226, 0.5245546333761434, 0.5558246992210729, 0.5144415904982149, 0.13350056834944457, 0.1357013346812459, 0.10379609950109592, 0.10633639357551705, 0.145315751772365, 0.11466707747508775, 0.14931651265145807, 0.135082473148186, 0.14989766168589125, 0.1446800405006512, 0.2748460382182787, 0.22858957530107937, 0.2839462402131955, 0.18520887415421106, 0.18293695081621308, 0.18415659730659395, 0.22403272137341979, 0.1792624360338605, 0.2545959643257061, 0.32263521269156314, 0.42276135086648026, 0.38106051751056547, 0.35857976938335867, 0.395505494599797, 0.43138161786941653, 0.4392956155084752, 0.3962263608499429, 0.2867003931239489, 0.262973573419201, 0.2581495791334145, 0.2832310316330737, 0.21775131163919348, 0.25959442410923006, 0.33578779530113656, 0.2927552665970563, 0.26870218135861734, 0.2098589315055276, 0.20316622270541795, 0.2890199087347326, 0.2065908771092302, 0.24878124534446, 0.2105292441078468, 0.24725343996317928, 0.22015670492588058, 0.2069971671132279, 0.17848121354719992, 0.18602589010255588, 0.18876773049173723, 0.191313848039816, 0.195274868887801, 0.24760121101681964, 0.18256765779283468, 0.24712467776939762, 0.2434387756601495, 0.17543763530511058, 0.1846801297725471, 0.8723283822570268, 0.8641163136540069, 0.8509838377816354, 0.19620022378989077, 0.14225918136084403, 0.8376163552637996, 0.8256152519692382, 0.7105426039848769, 0.2109118169782117, 0.6111360462475666, 0.7712698877912304, 0.5302513119427338, 0.7796429261686041, 0.543348787607856, 0.15314926553992758, 0.15353571414436995, 0.18102658185326537, 0.18869291871918226, 0.19506647650056852, 0.18674250113397517, 0.1994436132520382, 0.17535958313005884, 0.1784781939987985, 0.19571522961196464, 0.17881953215439794, 0.08917982973617566, 0.08642027862251656, 0.09224676117504493, 0.09419988392824075, 0.09151160426231342, 0.09177140987994281, 0.08791461740972206, 0.08806000129748515, 0.08750331890921592]}, "mutation_prompt": null}
{"id": "fb9fa2bc-6baa-41f6-a8bb-9fa6dbe90e34", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.0, 1.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n        self.niche_radius = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.35, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.2, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.25, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.55, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    distances = np.linalg.norm(particles[swarm_indices][:, np.newaxis] - particles[swarm_indices], axis=2)\n                    niche_assignments = distances < self.niche_radius\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE algorithm incorporating niche sharing and self-adaptive parameter control for robust optimization.", "configspace": "", "generation": 28, "fitness": 0.32891677362316607, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "7cb11b07-5ee5-4600-9045-453e9f4d01bf", "metadata": {"aucs": [0.8406529424030956, 0.8232835059765213, 0.8293336428701279, 0.8104508476960526, 0.8076462041158802, 0.8469130637235459, 0.8401358859581489, 0.8241032507650086, 0.834302298084712, 0.6549257598386039, 0.6193621652341501, 0.6581924512832258, 0.688379172221677, 0.67640946790645, 0.6751164593594867, 0.6541831115402261, 0.6514849873130864, 0.6578182645392476, 0.13831290668726182, 0.1296477069257862, 0.15030886913799746, 0.1700427858325525, 0.14966025473975475, 0.175834681366266, 0.14621680277123794, 0.5782182122201394, 0.17730042740597107, 0.10640433373428326, 0.11641750824523733, 0.12424274788330036, 0.12286534592926524, 0.11258962194797206, 0.12075546290390815, 0.10690290724432416, 0.13819911967504417, 0.10642236689171225, 0.9613998840899063, 0.9246138245195167, 0.919157939988613, 0.9341855226031116, 0.9415661074377519, 0.9131478539158551, 0.9320007782137789, 0.9310002596927025, 0.9055182010202717, 0.5512257121464473, 0.5304210834549572, 0.5202857291820013, 0.5495922153824607, 0.49337308184361905, 0.6016236601302756, 0.526994662057074, 0.49013028082226084, 0.5259353783755025, 0.799731512360543, 0.808816755283632, 0.2222622955551179, 0.35218487967067535, 0.27279121135948947, 0.7238431943248136, 0.3548879393646951, 0.3858609619874235, 0.7864466650353403, 0.20677888869735261, 0.12815523700459985, 0.19042230567950957, 0.1950039212752509, 0.22879646527469755, 0.1920259885979717, 0.20403343633323912, 0.19255374487822563, 0.24006411382578385, 0.18616496560146145, 0.2159346755139263, 0.19798565713115945, 0.25794205652260693, 0.21531617945501402, 0.18591264223839865, 0.21898388354321818, 0.1272172992956112, 0.2635147975054366, 0.04597587940874315, 0.012238436146908005, 0.01595879751541418, 0.03096014896255128, 0.022236241765894227, 0.017908575729039145, 0.006460890226626326, 0.027399091403225273, 0.018545559710639425, 0.065638200995634, 0.1472428627235105, 0.13821543509708267, 0.08215724181210426, 0.06555216315285273, 0.06405101103392119, 0.16687747076680315, 0.10202890813067045, 0.10299255616892, 0.21131461889888847, 0.05930393775117482, 0.11610853831729107, 0.07127146354367009, 0.1368332819025, 0.14385632289712935, 0.08745182404005714, 0.13515470797651108, 0.12727339340401778, 0.09671827675963196, 0.19590008656579516, 0.22813066587487407, 0.18919369892904714, 0.16994871062721473, 0.1538536622799198, 0.1536650001351878, 0.14137822703093517, 0.18343605545707797, 0.5233490553625927, 0.5489484110374874, 0.49337836092159615, 0.5894755456627445, 0.5314737195072878, 0.5294173246825226, 0.5245546333761434, 0.5558246992210729, 0.5144415904982149, 0.13350056834944457, 0.1357013346812459, 0.10379609950109592, 0.10633639357551705, 0.145315751772365, 0.11466707747508775, 0.14931651265145807, 0.135082473148186, 0.14989766168589125, 0.1446800405006512, 0.2748460382182787, 0.22858957530107937, 0.2839462402131955, 0.18520887415421106, 0.18293695081621308, 0.18415659730659395, 0.22403272137341979, 0.1792624360338605, 0.2545959643257061, 0.32263521269156314, 0.42276135086648026, 0.38106051751056547, 0.35857976938335867, 0.395505494599797, 0.43138161786941653, 0.4392956155084752, 0.3962263608499429, 0.2867003931239489, 0.262973573419201, 0.2581495791334145, 0.2832310316330737, 0.21775131163919348, 0.25959442410923006, 0.33578779530113656, 0.2927552665970563, 0.26870218135861734, 0.2098589315055276, 0.20316622270541795, 0.2890199087347326, 0.2065908771092302, 0.24878124534446, 0.2105292441078468, 0.24725343996317928, 0.22015670492588058, 0.2069971671132279, 0.17848121354719992, 0.18602589010255588, 0.18876773049173723, 0.191313848039816, 0.195274868887801, 0.24760121101681964, 0.18256765779283468, 0.24712467776939762, 0.2434387756601495, 0.17543763530511058, 0.1846801297725471, 0.8723283822570268, 0.8641163136540069, 0.8509838377816354, 0.19620022378989077, 0.14225918136084403, 0.8376163552637996, 0.8256152519692382, 0.7105426039848769, 0.2109118169782117, 0.6111360462475666, 0.7712698877912304, 0.5302513119427338, 0.7796429261686041, 0.543348787607856, 0.15314926553992758, 0.15353571414436995, 0.18102658185326537, 0.18869291871918226, 0.19506647650056852, 0.18674250113397517, 0.1994436132520382, 0.17535958313005884, 0.1784781939987985, 0.19571522961196464, 0.17881953215439794, 0.08917982973617566, 0.08642027862251656, 0.09224676117504493, 0.09419988392824075, 0.09151160426231342, 0.09177140987994281, 0.08791461740972206, 0.08806000129748515, 0.08750331890921592]}, "mutation_prompt": null}
{"id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration, dynamic parameter tuning, and enhanced exploration through randomized velocity and mutation strategies.", "configspace": "", "generation": 29, "fitness": 0.34116882023764067, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "7cb11b07-5ee5-4600-9045-453e9f4d01bf", "metadata": {"aucs": [0.810170933353271, 0.817608680489373, 0.8229813147074075, 0.8175174746459195, 0.8120341263421713, 0.8060400906548193, 0.8208386554634539, 0.8134156613248733, 0.8100103570699376, 0.6307235557721512, 0.5984639426809715, 0.6535987071001161, 0.6466751199174143, 0.6393550506979018, 0.5783788613760854, 0.6455061415308092, 0.6260076179432597, 0.6300135613780267, 0.15206173310338833, 0.14575545547931978, 0.15890100579439892, 0.151438447546004, 0.14753650786701544, 0.4187640770911013, 0.14756760330755347, 0.14393957768459453, 0.15101246305076688, 0.11958225516630083, 0.10867425289513544, 0.1306240052435993, 0.1463889081030333, 0.1094031264406593, 0.14824930953583737, 0.14607884197764087, 0.13404404689737404, 0.14015307191062853, 0.959825014429609, 0.9485869146518302, 0.9114117129508668, 0.9559632377673404, 0.9450491649685774, 0.9651242369463799, 0.9598103871966824, 0.9360776081871376, 0.9748093432422449, 0.5296610026612905, 0.47674231904106057, 0.3707977117003185, 0.4615324763468618, 0.39986240779608917, 0.4889578258716145, 0.4100444225252159, 0.4462353665610115, 0.47642638870849363, 0.7138930737395353, 0.6872455869740415, 0.6034686756031817, 0.31039830250456657, 0.36763071164213035, 0.20679024032866533, 0.6661592406070156, 0.793504569620196, 0.754586996811285, 0.264369170706797, 0.19503533693978603, 0.22097349819027645, 0.2358610975310631, 0.19253714197216654, 0.21687962833510444, 0.22969311274308513, 0.3172571126630107, 0.25327922811005066, 0.21439473830615563, 0.197179270225741, 0.21248703920727852, 0.24181336258601938, 0.2340583858725973, 0.19438643966892322, 0.2568809184786168, 0.22744757935374305, 0.24071178701168106, 0.05640145046960754, 0.06780622225704358, 0.047538296457292795, 0.04315980783481177, 0.018711040327705097, 0.048163569628452585, 0.027097526661724824, 0.06338387980591031, 9.999999999998899e-05, 0.11440364735538655, 0.07425534014236668, 0.10623511216315806, 0.07887531561175276, 0.0400845133202089, 0.025383215958031502, 0.1267983709593311, 0.08756268913655418, 0.14566575687429484, 0.13843194136233417, 0.14347143892627878, 0.20485345265631494, 0.1436653469126915, 0.06967185889189731, 0.13832668395112147, 0.18026754224267516, 0.1150330009678977, 0.08375927892444357, 0.19954501849532524, 0.1564208384954121, 0.2730071983663491, 0.20586678736045605, 0.19278383171952562, 0.2404948867396528, 0.06684576117349861, 0.11774525128816404, 0.23746570885095208, 0.5200059319190699, 0.49750425905667883, 0.4926279235762626, 0.5413286778415359, 0.5457174030004284, 0.5206330513613447, 0.5602975835560402, 0.6160075359346471, 0.5206855276128676, 0.13244637744190135, 0.16009974051314058, 0.13744721540483473, 0.14201275872350694, 0.12090233047113574, 0.10789966919376981, 0.16724022787474646, 0.14250187070949016, 0.1398303176551543, 0.22949291566033558, 0.17731489144910462, 0.19245757295924726, 0.2728444336188056, 0.27926899130148986, 0.30360048515711857, 0.2636502640462668, 0.27170765220821935, 0.17548722787976878, 0.3974167620678457, 0.3685705382258888, 0.3891928210702126, 0.4085491724843717, 0.34395184931999156, 0.33336666488332434, 0.478882561298661, 0.44255205104675244, 0.42751539023745777, 0.2715591725804205, 0.24861943474641301, 0.2542332121490337, 0.31328179660381283, 0.24361662669465345, 0.3386742883074647, 0.2082165857490762, 0.3075000758312212, 0.33849642717328343, 0.23318641228415826, 0.20484966011788697, 0.1973607277082, 0.22405297998937068, 0.20837703020683207, 0.2757629881343746, 0.21902585318248935, 0.19359360326550756, 0.20907197997670202, 0.4999713888338164, 0.5973649448634938, 0.21505921328863353, 0.19784860553741523, 0.19959356574776332, 0.21475960113245596, 0.20210979729816458, 0.23266857981629097, 0.19194583099042006, 0.8415794144019224, 0.8054944523529094, 0.8426281701349143, 0.9028859963194054, 0.19681268516511508, 0.1963412041117314, 0.8007403430239397, 0.8011104433472707, 0.852981018374637, 0.6622172702066234, 0.20855643674845947, 0.630644042767169, 0.4967220265124912, 0.6855816828463227, 0.5781723269108296, 0.21134570903109395, 0.2071039672938173, 0.6818517628535188, 0.19063285418441933, 0.17513082127270152, 0.19217121140800086, 0.18351264001748224, 0.19170175925917987, 0.19931011430312318, 0.19544576509749856, 0.17720832089667893, 0.19304917464719729, 0.08855458549186301, 0.08786907807120936, 0.09437825389447918, 0.09121694156608207, 0.08189687626848285, 0.07803128030279893, 0.09139695450120122, 0.09857568946921258, 0.09316695818954213]}, "mutation_prompt": null}
{"id": "c65f86d1-e2dc-49ce-878a-8247e8e9cfe9", "solution": "import numpy as np\n\nclass PSODEOptimizerV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.5, 1.5)\n        self.c1 = 1.8\n        self.c2 = 1.2\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.1, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizerV2", "description": "A fine-tuned multi-swarm PSO-DE optimizer with adaptive parameter adjustments for efficient exploration and exploitation.", "configspace": "", "generation": 30, "fitness": 0.3243137229216985, "feedback": "The algorithm PSODEOptimizerV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8025791436355947, 0.7959406797050395, 0.7981212282893635, 0.8053320291353531, 0.7846193326596995, 0.8026775376710807, 0.8028343990107543, 0.7970532020813501, 0.7833059566169704, 0.6180088627633817, 0.5799102319679244, 0.5391471445121461, 0.5903183198344149, 0.5971619694973684, 0.5747009095853375, 0.576179856680153, 0.548472143190169, 0.6199018244981243, 0.11790294622643793, 0.11730772049917437, 0.32003959245047153, 0.11840798046330692, 0.1729731816412663, 0.15325849959765925, 0.3559485840239145, 0.15617710424448183, 0.15255466113280614, 0.12596385056360782, 0.1092508834690098, 0.118383416552993, 0.11796656481104584, 0.14383378622939258, 0.12065815950345005, 0.13240836040146475, 0.1325849442012137, 0.12216081222206743, 0.9673886887465001, 0.9381476925553484, 0.9422269331527707, 0.9388437433528223, 0.9496338999885579, 0.925928130495525, 0.9572987257962412, 0.9462804503664708, 0.9603063919750267, 0.44781460211741797, 0.4236861316100812, 0.40012792433046884, 0.36602952733574035, 0.3956374449471137, 0.4099331137016877, 0.42183205136656987, 0.3558144698511193, 0.4193646774839065, 0.22249789535222297, 0.6048726198790337, 0.6659672344035097, 0.5764638577557114, 0.6869165188771054, 0.7864096740458644, 0.2525762407957731, 0.5284187152908666, 0.5733890225182263, 0.16683058005390372, 0.17706622827220453, 0.18803700234122045, 0.16299391255699325, 0.17477519666313068, 0.20095339072230722, 0.18256486546443496, 0.21872459984908488, 0.21272658685157975, 0.20612653134382697, 0.1913772750116549, 0.2607104487739713, 0.19667318276735646, 0.22553756457672325, 0.193901958547408, 0.2043821250235226, 0.230119559767486, 0.39319968864396937, 0.005034864732555655, 0.039305661238026146, 0.04263495294003783, 0.04844679253282358, 0.022083660514577108, 0.0214961285889278, 0.03819072837762072, 0.07454550030228635, 0.14589097023175235, 0.10565635126300998, 0.1051537808487677, 0.09628275973415201, 0.02869181933795606, 0.06306845825392648, 0.07179850072353833, 0.044110745517239924, 0.10235962872234472, 0.08499100871893084, 0.11985640859064495, 0.03771551597837919, 0.12969564525288313, 0.10494559252008162, 0.1156885534490264, 0.1245876879188268, 0.2154779579289341, 0.1733154162894629, 0.10958413805401179, 0.14864353434358923, 0.20369829601751488, 0.19697238148827068, 0.20311144523061964, 0.1551822284675718, 0.17833932732661995, 0.20361795686597783, 0.20841009088682927, 0.12063999768384204, 0.5297715444902603, 0.5705044175646368, 0.494473843057046, 0.5205043236391611, 0.5051417697557447, 0.5243156411024132, 0.4950530799616145, 0.5195957705562342, 0.5376966546262605, 0.11678921348784987, 0.13724571951668063, 0.10956218704122478, 0.1280065701179952, 0.13729155401742033, 0.16265519154008234, 0.13539578517169226, 0.35311408812643374, 0.13130097638995608, 0.30075603441359644, 0.20410215364117634, 0.1700103595255954, 0.1739620816609715, 0.19472829335156916, 0.17371213295171095, 0.19199730109452362, 0.20990476699236582, 0.22060573383111293, 0.36225453942428143, 0.350091103414911, 0.3565774150144837, 0.3391837906565198, 0.4061201972980475, 0.42212872330061135, 0.4112138154221868, 0.4319272355729178, 0.47496947308784354, 0.2805472582988331, 0.32956310420290025, 0.2698523038278322, 0.29953782532550666, 0.2750140313208015, 0.2288071216303671, 0.2965301568431119, 0.29861311560713233, 0.28952189056925526, 0.2029116253080323, 0.21374798820136898, 0.1994035901384723, 0.18330347383449452, 0.1898258783703246, 0.21499224511340187, 0.20273644532917534, 0.20534306329993102, 0.19593745712575406, 0.21748794356374013, 0.19652016208643186, 0.23090879063902192, 0.19817572492562774, 0.5314226515201363, 0.2345316252784151, 0.24182407348761725, 0.22057359262755805, 0.20003048402504486, 0.804281423929909, 0.8116820307758084, 0.19806550786912436, 0.843401880799965, 0.7727438409331933, 0.19462892660697084, 0.7767008473189392, 0.7929649726114775, 0.7872239909136814, 0.6267571622122485, 0.2086597196031883, 0.7097516203886967, 0.20506947915570928, 0.1666336203099298, 0.6854703540325768, 0.1269644442820721, 0.15319703141496344, 0.5860163974208241, 0.19426140510334733, 0.1901850726621298, 0.19251181188609567, 0.18142201599192742, 0.1809736329375412, 0.1991532034941531, 0.1926209746698, 0.18284908640569408, 0.18329073161074938, 0.09330945808793345, 0.08438455032633407, 0.0896872937290687, 0.08806570563074678, 0.10402496179517529, 0.08068521477681456, 0.08970491611294351, 0.08877611129458929, 0.09154026891313771]}, "mutation_prompt": null}
{"id": "c8e391dc-231c-432a-a9b9-16a519bd1671", "solution": "import numpy as np\n\nclass StochasticPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.6\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.04\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.05\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.2, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "StochasticPSODEOptimizer", "description": "A stochastic hybrid PSO-DE optimizer with adaptive mechanisms and random perturbations for enhanced diversity and convergence.", "configspace": "", "generation": 31, "fitness": 0.30002680291294115, "feedback": "The algorithm StochasticPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8113243753361377, 0.7906087257071148, 0.7945826453982574, 0.802485947108214, 0.7692905430241138, 0.7995893523808576, 0.8015428813019903, 0.7534226829836072, 0.7900601350894734, 0.6001836422534947, 0.5484426468035145, 0.5830767162205869, 0.5759833833251928, 0.5437141014214846, 0.551691034347259, 0.5555885390811844, 0.5372581737559659, 0.5872140713178322, 0.10809908186779538, 0.13220459406742757, 0.12898494486142098, 0.1378439012570758, 0.15541021888748785, 0.12630538463891194, 0.1223196249121431, 0.13128773241826985, 0.11440782192150067, 0.12432839837850662, 0.13502913976557152, 0.12022797487425652, 0.1417730740354326, 0.11701967978231209, 0.11592453541778236, 0.1310973281342327, 0.12146451420833493, 0.11830121053134512, 0.967277323697922, 0.9652395001846641, 0.9401206246271553, 0.9410264851760909, 0.9367358390667774, 0.939031178755656, 0.955594328047026, 0.9411570439984688, 0.9298215167255685, 0.4268379999044667, 0.3329087958939352, 0.4299187652184988, 0.34419503422382247, 0.37923023217696017, 0.3768284174894606, 0.3856515532282634, 0.3299323167212259, 0.36756281007408054, 0.7927343581871777, 0.5451247041300614, 0.6591503131297463, 0.35852353902773115, 0.7638801289540473, 0.6520185187995515, 0.6852320121536233, 0.2753555073063638, 0.3386459019059288, 0.21027816248314568, 0.178950141920173, 0.1909770481032852, 0.36007994763808915, 0.16208380893416996, 0.170607230671186, 0.22554023881772256, 0.28540029093504515, 0.19283520364608087, 0.1959380375153904, 0.21516435495148767, 0.24097328114483163, 0.1796774973699068, 0.17112101017279802, 0.2652907868648302, 0.24334988613915298, 0.24395931845630658, 0.23492625894058594, 9.999999999998899e-05, 0.01617646786005933, 0.03185308090874295, 0.009240341958118403, 0.03700729671809, 0.042277282082201384, 0.020933046358159624, 0.0008255791830482639, 0.08440182650159245, 0.08414047587183338, 0.07187216342334324, 0.10350385674658424, 0.08413606708153132, 0.043259423039435196, 0.09180562997368813, 0.06757704090695993, 0.07250298877152617, 0.12026947735289473, 0.06541097204399338, 0.13259759690360917, 0.07685859374028137, 0.10163851810931357, 0.13445458708691171, 0.19040536138873443, 0.14921570588118882, 0.07561573333353044, 0.09174342283824044, 0.1214820614924711, 0.16786277380479986, 0.20198536471582906, 0.30340992154418756, 0.16611914481080003, 0.11367810542776025, 0.19789579461119944, 0.10972478314163547, 0.07774691958796198, 0.5043729638131584, 0.48861873532069167, 0.5296321562111557, 0.5149934844176934, 0.4914545383012856, 0.5604254274259486, 0.5349733969694934, 0.4840537818064967, 0.5160541690362681, 0.11279954294113703, 0.13052833926582075, 0.12941178391548425, 0.12131350744002434, 0.10425572228052316, 0.16381059444872204, 0.11839440447282612, 0.1043156537355504, 0.13383007665338043, 0.17350607906716342, 0.21287919502932118, 0.17766075914927038, 0.22464145711571992, 0.20348473918782528, 0.18055828560156573, 0.2760239128825539, 0.3161851027566518, 0.175497884114155, 0.3842043346287968, 0.2503867465802547, 0.29283802013108295, 0.3485262318885556, 0.32581153143650976, 0.3783843826600334, 0.41302252610598067, 0.45440050967949597, 0.45346861839461783, 0.2861533533515641, 0.3165045542559217, 0.24850176074202335, 0.30467304730707423, 0.23327142693144243, 0.28398971303287357, 0.2762554847003521, 0.25961352061408594, 0.275864154834204, 0.2145362865250946, 0.2263979539868637, 0.21169383702900435, 0.21833923976657166, 0.22652834569858948, 0.2028566249392928, 0.20604335521777084, 0.22656076525524316, 0.21248453459512762, 0.20429878482854746, 0.1971519348041183, 0.4734259682160544, 0.19457798439387275, 0.2303551539550578, 0.20478724276871463, 0.20450788078079007, 0.1944331452089274, 0.19183024435596685, 0.8084889379136703, 0.17112045422539213, 0.18535730501951841, 0.19890993124613343, 0.1992167219414105, 0.19288661520248962, 0.16595354412557717, 0.7914070387130709, 0.8339061307800779, 0.4513766082470112, 0.20927293103132538, 0.654688262763994, 0.2040987415427269, 0.1673579763694084, 0.16599689353883573, 0.21092608526583156, 0.20382198119156947, 0.15459995556005013, 0.2057510492349064, 0.18132431806205773, 0.1801328413952713, 0.18585031405767427, 0.18583656433728257, 0.19815845888823214, 0.1904789639827884, 0.1748381406597368, 0.1809452784898271, 0.09144378549119225, 0.08050516603447755, 0.0913103257907214, 0.08678783297233872, 0.08882845203478007, 0.0799871005370012, 0.08222584878056427, 0.08664737984768578, 0.0902931854354907]}, "mutation_prompt": null}
{"id": "7d941fe8-8690-4694-9483-146abf19c1b1", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        def local_search(position):\n            # Simple local search: tweak each dimension slightly and accept if improves\n            for i in range(self.dim):\n                trial_position = np.copy(position)\n                trial_position[i] += np.random.uniform(-0.1, 0.1)\n                trial_position = np.clip(trial_position, self.lower_bound, self.upper_bound)\n                trial_score = func(trial_position)\n                nonlocal evaluations\n                if evaluations < self.budget and trial_score < func(position):\n                    position = trial_position\n                evaluations += 1\n            return position\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n            # Integrate local search to enhance exploitation\n            particles = [local_search(p) for p in particles]\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration, dynamic parameter tuning, enhanced exploration through randomized velocity, mutation strategies, and integrated local search.", "configspace": "", "generation": 32, "fitness": 0.182516789194753, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.4103776681275638, 0.3826183282694563, 0.37120304294124307, 0.4225192771539569, 0.4060865984321538, 0.3335501128979438, 0.3835758190654922, 0.4354930891351061, 0.36273012818689987, 0.07389190330753936, 0.04056120819691733, 0.03750150027655108, 0.07403688847204848, 0.06868486101086202, 0.046409487221348855, 0.06631607873572043, 0.05094731344526915, 0.04293415836401704, 0.10094338462542252, 0.10447017194105956, 0.08186747866971367, 0.10824576233048844, 0.08462234898402454, 0.09413130863531738, 0.09709366182326629, 0.11183162434823102, 0.0922059563428691, 0.06236831964014222, 0.08651083699191453, 0.09564905847185068, 0.08583835820416041, 0.07839192262796646, 0.0867808245462407, 0.07289110303674284, 0.07735046209815477, 0.06991342214836316, 0.7673133154071895, 0.6894385526227371, 0.8290238950090356, 0.7275494546894531, 0.7458528948070604, 0.6792866030680453, 0.7329669823748921, 0.7822390524414997, 0.7380159659134837, 0.16325648504028212, 0.14045675430531757, 0.13780389326133846, 0.1889699697854198, 0.20436614147221388, 0.2119719805821253, 0.16701793205664417, 0.15170172663199988, 0.13957543301062136, 0.2024058196984383, 0.19622097093664015, 0.18970131230770537, 0.3349314640231582, 0.2048151154362029, 0.14624837798243007, 0.15689479417521957, 0.18458006419385287, 0.21429117269227638, 0.12541341931108785, 0.12164148624779669, 0.11479429699311128, 0.10095974285895226, 0.13321863985607285, 0.11231162879726597, 0.09431256704281477, 0.0907005917531365, 0.12660232746148326, 0.11452180948793356, 0.09097288652260849, 0.10120937504588234, 0.1399850616852929, 0.1051309462712614, 0.12120613737219266, 0.12910618019472242, 0.07794492263969421, 0.1134962837623198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02003417706066135, 0.0036207563841771373, 0.009250446717372296, 0.007752483468803639, 0.022886535316413048, 0.009236764488619653, 0.11204231442245949, 0.07806976744924488, 0.13014338482243637, 0.13137022452599634, 0.030693745742381706, 0.029523329938650922, 0.10488977643522868, 0.13508649431739428, 0.0917818923873327, 0.0064996725359324214, 0.004311402600860159, 0.0006754123689534097, 0.009438240419692545, 0.01573026291255286, 0.008543159976654224, 0.01672639093705308, 0.02976597897111155, 0.012651697344104984, 0.07652004732680029, 0.0612903592093178, 0.057462953022334506, 0.0771572266711531, 0.051348262217503216, 0.09184334907807079, 0.05383967128325462, 0.07166912623279098, 0.076911435666423, 0.34989970944349047, 0.36425946526032504, 0.31864958898813034, 0.3548449908725476, 0.32888327910284476, 0.33540924086123236, 0.3682900151706948, 0.3317185046999378, 0.3614447837790594, 0.08103100658634688, 0.09233311681207412, 0.07359245523481472, 0.09084193216116165, 0.09197574772574879, 0.09156760617509752, 0.09806587485268647, 0.09920068759082257, 0.09664895681494179, 0.15074712304436255, 0.1422909015035302, 0.1530941964161855, 0.14340514958486705, 0.17131741302000048, 0.17098787765866585, 0.1662419288062349, 0.14516130545899564, 0.12562887100592457, 0.259207796033488, 0.23144403233140243, 0.24885897403730128, 0.25255612892821666, 0.24576776913209775, 0.26562160926459355, 0.24601400994402867, 0.23864996847470432, 0.24299705874433142, 0.18564269606504336, 0.17228138943889004, 0.1979211808708745, 0.1816702979016558, 0.15332143079128013, 0.18176715894406303, 0.18905363396194785, 0.1892503222340025, 0.17189865800199955, 0.20323446166897308, 0.18024766454270025, 0.19480832087381417, 0.19887143612653502, 0.21459333711193418, 0.20524429178824832, 0.2304969060324512, 0.20635097802674696, 0.1992488876879741, 0.18546155745777293, 0.18945543681649746, 0.19112894634918598, 0.17072700837396482, 0.1720301264496662, 0.15505909996571354, 0.17818091137695335, 0.193682003512891, 0.17192828147234418, 0.2690088191647726, 0.16010502083078026, 0.4323421195394439, 0.5308175104128598, 0.3253212610070856, 0.18084741966105322, 0.2826741943241562, 0.23902409092032373, 0.44142010777355867, 0.27149770221115377, 0.1790666746183932, 0.24872869133792896, 0.2609677531708311, 0.22120411464513878, 0.43054792042743906, 0.20370326249308424, 0.18364791710646533, 0.2894065723976037, 0.1837616609057373, 0.1700513986898704, 0.18645556312893974, 0.1733840930940681, 0.1928501253460686, 0.19466010241206233, 0.19258617138380574, 0.19426620361062774, 0.1848998845781199, 0.07614344976987375, 0.08879673291121926, 0.07900690047561054, 0.0743261497325528, 0.07983714827902166, 0.08557778120250292, 0.08323923013764722, 0.081002841762981, 0.0802097390521922]}, "mutation_prompt": null}
{"id": "58899caf-1f9a-4e45-870c-0edbcb6ec4aa", "solution": "import numpy as np\n\nclass PSOGAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.ga_crossover_prob = 0.9\n        self.ga_mutation_prob = 0.1\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.07\n        self.adaptive_w_rate = 0.02\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.ga_crossover_prob:\n                    mates = np.random.choice(self.pop_size, 2, replace=False)\n                    beta = np.random.rand()\n                    child = beta * particles[mates[0]] + (1 - beta) * particles[mates[1]]\n                    if np.random.rand() < self.ga_mutation_prob:\n                        mutation_vector = np.random.uniform(-0.5, 0.5, self.dim)\n                        child = np.clip(child + mutation_vector, self.lower_bound, self.upper_bound)\n                    child_score = func(child)\n                    if evaluations < self.budget and child_score < scores[i]:\n                        particles[i] = child\n                        scores[i] = child_score\n                        personal_best_positions[i] = child\n                        personal_best_scores[i] = child_score\n                        evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSOGAOptimizer", "description": "A multi-swarm adaptive hybrid PSO-GA optimizer with dynamic parameter tuning, leveraging enhanced exploration and exploitation mechanisms through crossover and mutation strategies.", "configspace": "", "generation": 33, "fitness": 0.24881164503984735, "feedback": "The algorithm PSOGAOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.9011909217670603, 0.8967610645352894, 0.8923566407367154, 0.34109956128347074, 0.5386546163459038, 0.6094811208646063, 0.8693508010020826, 0.9005444725968709, 0.6799331404655129, 0.029817175960601516, 0.24606502055461632, 0.01303164883188579, 0.010802324054684287, 0.303378508265996, 9.999999999998899e-05, 9.999999999998899e-05, 0.10258090399563857, 9.999999999998899e-05, 0.09150658186133875, 0.15132081231736572, 0.08224339543341086, 0.13320830860406518, 0.11580056792078663, 0.11673222873302092, 0.06582374248380096, 0.11810625636422678, 0.11676233296486038, 0.12269550059849421, 0.08494599847583051, 0.08518405034453702, 0.09162167602701288, 0.1097201293055523, 0.05647306032627131, 0.0713635732536343, 0.1564669934242625, 0.0630273781667966, 0.7047787071072151, 0.8372500231871721, 0.7630502652616455, 0.6636259618802882, 0.6779937498972559, 0.8464755971396241, 0.8023131196113108, 0.7075731133300227, 0.7359805856272, 0.26875680413769865, 0.2759217136422252, 0.2309539361783568, 0.20094423515770155, 0.21654703548646848, 0.3867079891599692, 0.2738733084372341, 0.21199115544749025, 0.4120156578389227, 0.1717419564396998, 0.2293953569916105, 0.21050263452999762, 0.28154306552535935, 0.35370075287859903, 0.24113562264027733, 0.1667807536268563, 0.19531410846622432, 0.2256153960425824, 0.17302826180004505, 9.999999999998899e-05, 0.13649431371846799, 0.14887673260081669, 0.14907506288257177, 0.34148350253233095, 0.16004634040191523, 0.12752538688479775, 0.12257605635354973, 0.12831182069473346, 0.1540838548815887, 0.13293636829041955, 0.1715255273525934, 0.1574726299058924, 0.13626991510448383, 0.18463461391402192, 0.1704814594524936, 0.1330967040001011, 9.999999999998899e-05, 0.015687712815556587, 0.014671186119756596, 0.13426610717463594, 0.03343570844135102, 0.034524759688173035, 0.011250701498556337, 9.999999999998899e-05, 0.022849597878610295, 0.14187082241843696, 0.06232465848704383, 0.12941918210131131, 0.06877450117812223, 0.02805361446576604, 0.05181303669411097, 0.121098194031385, 0.05686163904207131, 0.0558482990535325, 0.13289612357073644, 0.08135627528912448, 0.38141397101915453, 0.14574578819349826, 0.07697835453503399, 0.15173397144742207, 0.22336683909584198, 0.30852779503193184, 0.15422492981780522, 0.14809542967499323, 0.16952253032590758, 0.11648250813250494, 0.06062260830026356, 0.08254843653123622, 0.1437093407498372, 0.11151570635496721, 0.08277113019126625, 0.08536834832597173, 0.5460309090172688, 0.5522682329627426, 0.5514579995949886, 0.39245412874212593, 0.3333134102719396, 0.5148001368257284, 0.49290379990451716, 0.45589187956472244, 0.5368278078972218, 0.10382096059179313, 0.09215340054885834, 0.07838938402392448, 0.09694359888287707, 0.08844935866204628, 0.11872820963836006, 0.10388446264969153, 0.14126191659744414, 0.12295488217848083, 0.2706946479477135, 0.265843248741777, 0.3544706383666526, 0.30611318105019547, 0.3451931872408617, 0.22386381300340608, 0.3679805107581292, 0.3311353915974069, 0.3941502507387413, 0.24622350598938547, 0.282555940442344, 0.2095739234725531, 0.41482128452969447, 0.2896896625018667, 0.3499046562859478, 0.26956705041734075, 0.43206288426485306, 0.18639931130904241, 0.21650715375064322, 0.2788803946217018, 0.17060742715098276, 0.2402623102429059, 0.1501825502262849, 0.3658419642059193, 0.16982751564724474, 0.2797330944885912, 0.1558702618214025, 0.22049343411517397, 0.24206244189217807, 0.26979908007091324, 0.23563517915333831, 0.2568092695878538, 0.28980581610294776, 0.26491962825502835, 0.29401411709339986, 0.21120366717791317, 0.20942152051721563, 0.18465419731420718, 0.17394805394262225, 0.19841863538898785, 0.20251593792617628, 0.18199008562205432, 0.1761230154209601, 0.19241201252210938, 0.1821315897590684, 0.18755653732273636, 0.178011828175222, 0.8300030618271909, 0.9293774816525852, 0.20071089127682207, 0.1980276931587852, 0.9189981236735515, 0.8966702938615069, 0.61448047823561, 0.4704547614386947, 0.21095481055345688, 0.3302592154968076, 0.16708213854346055, 0.1688218277496185, 0.1676744375287491, 0.09428084419962657, 0.2841466618629236, 0.2894913782541554, 0.21188462320445345, 0.22619726110188765, 0.21449021631355758, 0.1944091475617462, 0.17909277814334823, 0.2224834962865916, 0.23383073082837758, 0.2353710393671613, 0.21852917893945067, 0.1060193228384233, 0.10249556617863731, 0.16324921966693473, 0.10831539730937279, 0.09061780190699831, 0.10201644557312117, 0.0856356962353253, 0.10855569373071172, 0.09758985539700626]}, "mutation_prompt": null}
{"id": "3013a050-7d69-488b-9d14-09859e806118", "solution": "import numpy as np\n\nclass StochasticAdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "StochasticAdaptivePSODEOptimizer", "description": "A stochastic adaptive PSO-DE optimizer with randomized differential mutation, adaptive inertia, and multi-swarm learning for enhanced convergence performance.", "configspace": "", "generation": 34, "fitness": 0.3291213621159845, "feedback": "The algorithm StochasticAdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8400479068262008, 0.8098483450264119, 0.828410764182869, 0.7960205465545481, 0.8398711093525573, 0.8170532507562908, 0.8026193108009794, 0.8367646035070629, 0.8051503448142349, 0.5875903256473919, 0.6718664091544568, 0.5961622463322132, 0.6639297123879966, 0.669679068666982, 0.6387496139258195, 0.6704444989967039, 0.6705088694605854, 0.6156083113257447, 0.13480876990446378, 0.15356983843317396, 0.14025967059714095, 0.17923743336999864, 0.1269307695280809, 0.14857012489220633, 0.16665431704662548, 0.13160146779920834, 0.1724618256411049, 0.16152880148839144, 0.12948056516739148, 0.15201628770191122, 0.13830089806594892, 0.14320353152030052, 0.138352150073781, 0.1309096489654077, 0.14197896765658302, 0.13910154724814217, 0.9584499330714594, 0.9569057736909253, 0.9341366181805305, 0.9386365337179332, 0.9674474970123129, 0.933787464651423, 0.9361610189778482, 0.9380661957506943, 0.9492401978878211, 0.5102653203838543, 0.48225667067431477, 0.37139157722925453, 0.40622956446642944, 0.47601335962720726, 0.345123001389273, 0.4102132342723971, 0.3852488688194756, 0.4201340293690905, 0.6941365875343701, 0.75021045691466, 0.4328556096645704, 0.21918310819509312, 0.6336067015600054, 0.42354327296841, 0.22846539666653165, 0.7470654632420874, 0.7690251290385156, 0.2613598545281187, 0.20454884633407455, 0.18748789265970556, 0.18142652782437552, 0.19861074740340756, 0.27207805080309677, 0.18857036128868343, 0.29008788206194336, 0.26320400871042715, 0.2058281649460426, 0.2085068359586879, 0.1986841979496493, 0.21210832606668328, 0.2338746385389202, 0.19547733951408386, 0.22012737383638026, 0.288535967363744, 0.21931726268441198, 0.0080947720118143, 0.06488359479197081, 0.014201531968559666, 0.024290676212847417, 0.06484360227972952, 0.022738177920600955, 0.0010870151607721423, 0.006271577371746884, 0.06268058417016131, 0.1293941910446914, 0.07592826317644508, 0.14184154232581636, 0.0471276069690717, 0.10522776365688802, 0.0871680597555905, 0.04891421943529406, 0.11029298330526183, 0.059802149919344294, 0.14695368526954722, 0.10606798007425167, 0.07683410648843747, 0.10479835014006389, 0.2158406532377698, 0.12122835706643142, 0.3313913885339711, 0.15534328796542596, 0.06454841317966531, 0.2499791670903474, 0.11987349702183658, 0.19038940622758704, 0.18528596129254948, 0.24035121356211409, 0.22196596594327755, 0.1807690904063154, 0.16362143171112453, 0.08123758446877671, 0.4681597287495137, 0.5220728745158609, 0.4983290433182911, 0.5271046450963845, 0.5603824134911068, 0.5416512646807894, 0.5079266102116726, 0.546885194151083, 0.5549455290484269, 0.09986496388563249, 0.14919001812192434, 0.11532572266278895, 0.1481354802628011, 0.13115112020476094, 0.13640705036248113, 0.12974669946282702, 0.1399849777481189, 0.12174673115194978, 0.22836446352373607, 0.17044024957196524, 0.21253329557566392, 0.1718706949113108, 0.2233925201803323, 0.2915480104600314, 0.3204076239021685, 0.19699148894148133, 0.17533493744611583, 0.3992436921364211, 0.3416729167338146, 0.3483241660287938, 0.4169384308199032, 0.3902855332241717, 0.3998190928628568, 0.3507231231990271, 0.3361986379033546, 0.40902334657790684, 0.27583531092502966, 0.275394874083585, 0.2822959541551945, 0.24148507850260026, 0.30027729056347374, 0.260694053913605, 0.2184475912020507, 0.2597369118280457, 0.21049300335026733, 0.23980105106596483, 0.22294327758148702, 0.20301830185169512, 0.2466595084978459, 0.20665072050561628, 0.20433258247402397, 0.2844666747753336, 0.20961841293317562, 0.20673403994591444, 0.5619048773108071, 0.4433542824108945, 0.2040231863193641, 0.5631159842596962, 0.2139107252583462, 0.18640282119482887, 0.5310876280085375, 0.22097523280373144, 0.21882038889127653, 0.19460748589110044, 0.18496215768752766, 0.8627405717529324, 0.8664937728024239, 0.1969444102197131, 0.1959702893284928, 0.8048180592852249, 0.7757631295845737, 0.17655975324491646, 0.6144715630088486, 0.49056014145051763, 0.5112410740743092, 0.16772993304107842, 0.2075599220749731, 0.6397351526828017, 0.542779115726816, 0.6617386232448723, 0.5534569334173283, 0.19429852680769255, 0.1832057522806415, 0.18089594401465525, 0.18992688379556744, 0.19957245748112706, 0.22042623617153134, 0.1953661425219415, 0.187975278341609, 0.18622122453402057, 0.09016420145722315, 0.09923613584364999, 0.08628281494804124, 0.0938595638453602, 0.09457551701391509, 0.12003619632167373, 0.09913586074752179, 0.08868902197205064, 0.08941974729419111]}, "mutation_prompt": null}
{"id": "e89535c9-4b4c-4737-9769-cf971ea5e7ba", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 55\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.5, 2.5)\n        self.c1 = 1.6\n        self.c2 = 1.4\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.045\n        self.adaptive_c2_rate = 0.055\n        self.adaptive_w_rate = 0.025\n        self.adaptive_de_F_rate = 0.035\n        self.num_swarms = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced adaptive hybrid PSO-DE algorithm integrating stochastic population adaptation and dynamic exploration-exploitation balancing.", "configspace": "", "generation": 35, "fitness": 0.2966985521071242, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.7859453644784767, 0.759360011087771, 0.7645889082965897, 0.7223455872141504, 0.7674660140511596, 0.7767114360762467, 0.7663075878793113, 0.7791784975942733, 0.7745057991531512, 0.5119485288570879, 0.5182927817864897, 0.5135921662466972, 0.5009600775468455, 0.5045440366276708, 0.5184957127247993, 0.5198954959900284, 0.48937323115255904, 0.5273326765418485, 0.25347746985995667, 0.16328326023448592, 0.14684814271562063, 0.14927284426225473, 0.19719729376732942, 0.13683238705015033, 0.14894060994303548, 0.12803586394044797, 0.15129062685685113, 0.12871638666544527, 0.12266271766021986, 0.11359151934004208, 0.14655441753677334, 0.1260175924017798, 0.11365030440235746, 0.13044877517248665, 0.11951459647428542, 0.13680888359917187, 0.9384968778643341, 0.966983494866317, 0.9427260307736245, 0.9454869350298588, 0.9536326906690279, 0.9256153408395961, 0.9562663890979385, 0.9487338511258703, 0.9626773664982287, 0.3409538587273824, 0.3726699540839532, 0.30211525309475695, 0.34399213340491763, 0.2865423085904434, 0.34955416081112756, 0.3392223866838322, 0.37316563146451986, 0.34227687535606843, 0.5693684311247199, 0.6699800927288996, 0.6761129292992372, 0.4704770890238471, 0.4576390103773741, 0.5304087141271869, 0.5233353947160709, 0.6680910741604642, 0.42412830180035455, 0.19219567152516015, 0.16965948132781228, 0.19552640238333574, 0.20460251721235267, 0.34669494134821444, 0.12296756728346003, 0.19463113043017288, 0.1721829436928909, 0.2038849783511455, 0.23895664099438252, 0.20362912534085698, 0.27190618485080964, 0.18358912744806377, 0.20437186659620865, 0.20864946421092567, 0.27165303291099496, 0.19517278801448323, 0.21638893629602762, 0.00529876307781274, 0.006071082428072305, 0.008311197587039909, 0.026391198741683164, 0.011189860934148976, 0.029875340586158372, 0.04950157797870669, 0.10130750730911664, 0.018072700185067347, 0.0813026310626217, 0.049456365323072515, 0.07006687787387766, 0.03921390184757034, 0.052078307812044256, 0.0327272302410242, 0.08054112943564651, 0.06683964139550203, 0.11818721631452278, 0.14667003172412552, 0.0594996690415488, 0.06536097637638072, 0.18358596765479807, 0.06545888089527907, 0.08200540757057628, 0.11960548049030095, 0.143381543201057, 0.18691934891038453, 0.18990280457331077, 0.17606748185557608, 0.1784210036119488, 0.12911536108658817, 0.15992737887448238, 0.2047991542220735, 0.16006148182378876, 0.15166695301397903, 0.1648925047246872, 0.5176720630098688, 0.523296189260129, 0.48390335368117077, 0.4896334015314592, 0.5159212298389998, 0.5318980648314892, 0.5238193637607251, 0.5197544970932486, 0.48973419725767975, 0.10872452501392815, 0.1271375663670733, 0.1269584351951999, 0.09451473661697307, 0.1310060630291422, 0.12618807562965795, 0.1432616022662765, 0.21095306648278622, 0.13477193127443565, 0.17543565612685563, 0.15021414280847423, 0.206043111280514, 0.2602884115292694, 0.16958032619038987, 0.17056638222258225, 0.18104868416950703, 0.20808098605280734, 0.20318866067110442, 0.3569109096933962, 0.3097027772726456, 0.3344884532088216, 0.293365998444161, 0.3942382804853981, 0.32762662856932523, 0.36568291088799065, 0.3891783275190881, 0.3308425149019697, 0.26350745723502367, 0.29214042661646067, 0.26996425056350926, 0.23365489368640335, 0.28804388651411816, 0.2458715096835239, 0.24128221497667757, 0.27530224379813817, 0.3069466413827415, 0.2222840740359424, 0.21100652953178256, 0.2177112757076528, 0.22628953297750176, 0.20325502475597546, 0.2020253030271445, 0.2202834160122088, 0.20546903949913775, 0.20171975352743143, 0.21757075348887356, 0.3515824644442008, 0.21103188188942923, 0.20546215960665326, 0.19529419507838952, 0.20667660879864325, 0.19224129689675395, 0.21357906784092295, 0.2167512314528568, 0.18267561238766206, 0.18504125521368087, 0.1818492311142288, 0.8065692875971585, 0.19749311611282305, 0.19544970613343993, 0.7689280961843771, 0.17452880021161432, 0.8208902493380066, 0.5545009668652225, 0.20855781718826172, 0.20637759550890666, 0.20486281044971033, 0.2807514600543223, 0.42164775138463106, 0.16595432091379625, 0.5054584372982333, 0.6045205125845087, 0.23251401834095764, 0.17841748183378692, 0.20013014626253878, 0.17616305463830084, 0.17993883219936668, 0.18542127249973273, 0.1780086093044312, 0.18468342074162014, 0.18171234586004614, 0.0900773052906847, 0.14100363184556097, 0.09385502990489536, 0.0922968533811872, 0.08564078625303406, 0.09598121005986215, 0.08985818372120735, 0.07959708742730676, 0.08787536030140963]}, "mutation_prompt": null}
{"id": "42f48fb0-3b6b-4b19-beb6-2e011bde0f93", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration, dynamic parameter tuning, and enhanced exploration through randomized velocity and mutation strategies.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.810170933353271, 0.817608680489373, 0.8229813147074075, 0.8175174746459195, 0.8120341263421713, 0.8060400906548193, 0.8208386554634539, 0.8134156613248733, 0.8100103570699376, 0.6307235557721512, 0.5984639426809715, 0.6535987071001161, 0.6466751199174143, 0.6393550506979018, 0.5783788613760854, 0.6455061415308092, 0.6260076179432597, 0.6300135613780267, 0.15206173310338833, 0.14575545547931978, 0.15890100579439892, 0.151438447546004, 0.14753650786701544, 0.4187640770911013, 0.14756760330755347, 0.14393957768459453, 0.15101246305076688, 0.11958225516630083, 0.10867425289513544, 0.1306240052435993, 0.1463889081030333, 0.1094031264406593, 0.14824930953583737, 0.14607884197764087, 0.13404404689737404, 0.14015307191062853, 0.959825014429609, 0.9485869146518302, 0.9114117129508668, 0.9559632377673404, 0.9450491649685774, 0.9651242369463799, 0.9598103871966824, 0.9360776081871376, 0.9748093432422449, 0.5296610026612905, 0.47674231904106057, 0.3707977117003185, 0.4615324763468618, 0.39986240779608917, 0.4889578258716145, 0.4100444225252159, 0.4462353665610115, 0.47642638870849363, 0.7138930737395353, 0.6872455869740415, 0.6034686756031817, 0.31039830250456657, 0.36763071164213035, 0.20679024032866533, 0.6661592406070156, 0.793504569620196, 0.754586996811285, 0.264369170706797, 0.19503533693978603, 0.22097349819027645, 0.2358610975310631, 0.19253714197216654, 0.21687962833510444, 0.22969311274308513, 0.3172571126630107, 0.25327922811005066, 0.21439473830615563, 0.197179270225741, 0.21248703920727852, 0.24181336258601938, 0.2340583858725973, 0.19438643966892322, 0.2568809184786168, 0.22744757935374305, 0.24071178701168106, 0.05640145046960754, 0.06780622225704358, 0.047538296457292795, 0.04315980783481177, 0.018711040327705097, 0.048163569628452585, 0.027097526661724824, 0.06338387980591031, 9.999999999998899e-05, 0.11440364735538655, 0.07425534014236668, 0.10623511216315806, 0.07887531561175276, 0.0400845133202089, 0.025383215958031502, 0.1267983709593311, 0.08756268913655418, 0.14566575687429484, 0.13843194136233417, 0.14347143892627878, 0.20485345265631494, 0.1436653469126915, 0.06967185889189731, 0.13832668395112147, 0.18026754224267516, 0.1150330009678977, 0.08375927892444357, 0.19954501849532524, 0.1564208384954121, 0.2730071983663491, 0.20586678736045605, 0.19278383171952562, 0.2404948867396528, 0.06684576117349861, 0.11774525128816404, 0.23746570885095208, 0.5200059319190699, 0.49750425905667883, 0.4926279235762626, 0.5413286778415359, 0.5457174030004284, 0.5206330513613447, 0.5602975835560402, 0.6160075359346471, 0.5206855276128676, 0.13244637744190135, 0.16009974051314058, 0.13744721540483473, 0.14201275872350694, 0.12090233047113574, 0.10789966919376981, 0.16724022787474646, 0.14250187070949016, 0.1398303176551543, 0.22949291566033558, 0.17731489144910462, 0.19245757295924726, 0.2728444336188056, 0.27926899130148986, 0.30360048515711857, 0.2636502640462668, 0.27170765220821935, 0.17548722787976878, 0.3974167620678457, 0.3685705382258888, 0.3891928210702126, 0.4085491724843717, 0.34395184931999156, 0.33336666488332434, 0.478882561298661, 0.44255205104675244, 0.42751539023745777, 0.2715591725804205, 0.24861943474641301, 0.2542332121490337, 0.31328179660381283, 0.24361662669465345, 0.3386742883074647, 0.2082165857490762, 0.3075000758312212, 0.33849642717328343, 0.23318641228415826, 0.20484966011788697, 0.1973607277082, 0.22405297998937068, 0.20837703020683207, 0.2757629881343746, 0.21902585318248935, 0.19359360326550756, 0.20907197997670202, 0.4999713888338164, 0.5973649448634938, 0.21505921328863353, 0.19784860553741523, 0.19959356574776332, 0.21475960113245596, 0.20210979729816458, 0.23266857981629097, 0.19194583099042006, 0.8415794144019224, 0.8054944523529094, 0.8426281701349143, 0.9028859963194054, 0.19681268516511508, 0.1963412041117314, 0.8007403430239397, 0.8011104433472707, 0.852981018374637, 0.6622172702066234, 0.20855643674845947, 0.630644042767169, 0.4967220265124912, 0.6855816828463227, 0.5781723269108296, 0.21134570903109395, 0.2071039672938173, 0.6818517628535188, 0.19063285418441933, 0.17513082127270152, 0.19217121140800086, 0.18351264001748224, 0.19170175925917987, 0.19931011430312318, 0.19544576509749856, 0.17720832089667893, 0.19304917464719729, 0.08855458549186301, 0.08786907807120936, 0.09437825389447918, 0.09121694156608207, 0.08189687626848285, 0.07803128030279893, 0.09139695450120122, 0.09857568946921258, 0.09316695818954213]}, "mutation_prompt": null}
{"id": "c177f6e9-6fad-49c6-a23b-03b75404ac89", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration, dynamic parameter tuning, and enhanced exploration through randomized velocity and mutation strategies.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.810170933353271, 0.817608680489373, 0.8229813147074075, 0.8175174746459195, 0.8120341263421713, 0.8060400906548193, 0.8208386554634539, 0.8134156613248733, 0.8100103570699376, 0.6307235557721512, 0.5984639426809715, 0.6535987071001161, 0.6466751199174143, 0.6393550506979018, 0.5783788613760854, 0.6455061415308092, 0.6260076179432597, 0.6300135613780267, 0.15206173310338833, 0.14575545547931978, 0.15890100579439892, 0.151438447546004, 0.14753650786701544, 0.4187640770911013, 0.14756760330755347, 0.14393957768459453, 0.15101246305076688, 0.11958225516630083, 0.10867425289513544, 0.1306240052435993, 0.1463889081030333, 0.1094031264406593, 0.14824930953583737, 0.14607884197764087, 0.13404404689737404, 0.14015307191062853, 0.959825014429609, 0.9485869146518302, 0.9114117129508668, 0.9559632377673404, 0.9450491649685774, 0.9651242369463799, 0.9598103871966824, 0.9360776081871376, 0.9748093432422449, 0.5296610026612905, 0.47674231904106057, 0.3707977117003185, 0.4615324763468618, 0.39986240779608917, 0.4889578258716145, 0.4100444225252159, 0.4462353665610115, 0.47642638870849363, 0.7138930737395353, 0.6872455869740415, 0.6034686756031817, 0.31039830250456657, 0.36763071164213035, 0.20679024032866533, 0.6661592406070156, 0.793504569620196, 0.754586996811285, 0.264369170706797, 0.19503533693978603, 0.22097349819027645, 0.2358610975310631, 0.19253714197216654, 0.21687962833510444, 0.22969311274308513, 0.3172571126630107, 0.25327922811005066, 0.21439473830615563, 0.197179270225741, 0.21248703920727852, 0.24181336258601938, 0.2340583858725973, 0.19438643966892322, 0.2568809184786168, 0.22744757935374305, 0.24071178701168106, 0.05640145046960754, 0.06780622225704358, 0.047538296457292795, 0.04315980783481177, 0.018711040327705097, 0.048163569628452585, 0.027097526661724824, 0.06338387980591031, 9.999999999998899e-05, 0.11440364735538655, 0.07425534014236668, 0.10623511216315806, 0.07887531561175276, 0.0400845133202089, 0.025383215958031502, 0.1267983709593311, 0.08756268913655418, 0.14566575687429484, 0.13843194136233417, 0.14347143892627878, 0.20485345265631494, 0.1436653469126915, 0.06967185889189731, 0.13832668395112147, 0.18026754224267516, 0.1150330009678977, 0.08375927892444357, 0.19954501849532524, 0.1564208384954121, 0.2730071983663491, 0.20586678736045605, 0.19278383171952562, 0.2404948867396528, 0.06684576117349861, 0.11774525128816404, 0.23746570885095208, 0.5200059319190699, 0.49750425905667883, 0.4926279235762626, 0.5413286778415359, 0.5457174030004284, 0.5206330513613447, 0.5602975835560402, 0.6160075359346471, 0.5206855276128676, 0.13244637744190135, 0.16009974051314058, 0.13744721540483473, 0.14201275872350694, 0.12090233047113574, 0.10789966919376981, 0.16724022787474646, 0.14250187070949016, 0.1398303176551543, 0.22949291566033558, 0.17731489144910462, 0.19245757295924726, 0.2728444336188056, 0.27926899130148986, 0.30360048515711857, 0.2636502640462668, 0.27170765220821935, 0.17548722787976878, 0.3974167620678457, 0.3685705382258888, 0.3891928210702126, 0.4085491724843717, 0.34395184931999156, 0.33336666488332434, 0.478882561298661, 0.44255205104675244, 0.42751539023745777, 0.2715591725804205, 0.24861943474641301, 0.2542332121490337, 0.31328179660381283, 0.24361662669465345, 0.3386742883074647, 0.2082165857490762, 0.3075000758312212, 0.33849642717328343, 0.23318641228415826, 0.20484966011788697, 0.1973607277082, 0.22405297998937068, 0.20837703020683207, 0.2757629881343746, 0.21902585318248935, 0.19359360326550756, 0.20907197997670202, 0.4999713888338164, 0.5973649448634938, 0.21505921328863353, 0.19784860553741523, 0.19959356574776332, 0.21475960113245596, 0.20210979729816458, 0.23266857981629097, 0.19194583099042006, 0.8415794144019224, 0.8054944523529094, 0.8426281701349143, 0.9028859963194054, 0.19681268516511508, 0.1963412041117314, 0.8007403430239397, 0.8011104433472707, 0.852981018374637, 0.6622172702066234, 0.20855643674845947, 0.630644042767169, 0.4967220265124912, 0.6855816828463227, 0.5781723269108296, 0.21134570903109395, 0.2071039672938173, 0.6818517628535188, 0.19063285418441933, 0.17513082127270152, 0.19217121140800086, 0.18351264001748224, 0.19170175925917987, 0.19931011430312318, 0.19544576509749856, 0.17720832089667893, 0.19304917464719729, 0.08855458549186301, 0.08786907807120936, 0.09437825389447918, 0.09121694156608207, 0.08189687626848285, 0.07803128030279893, 0.09139695450120122, 0.09857568946921258, 0.09316695818954213]}, "mutation_prompt": null}
{"id": "fdb1a4db-804b-43bf-8cfd-4ac5c239ebde", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration, dynamic parameter tuning, and enhanced exploration through randomized velocity and mutation strategies.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.810170933353271, 0.817608680489373, 0.8229813147074075, 0.8175174746459195, 0.8120341263421713, 0.8060400906548193, 0.8208386554634539, 0.8134156613248733, 0.8100103570699376, 0.6307235557721512, 0.5984639426809715, 0.6535987071001161, 0.6466751199174143, 0.6393550506979018, 0.5783788613760854, 0.6455061415308092, 0.6260076179432597, 0.6300135613780267, 0.15206173310338833, 0.14575545547931978, 0.15890100579439892, 0.151438447546004, 0.14753650786701544, 0.4187640770911013, 0.14756760330755347, 0.14393957768459453, 0.15101246305076688, 0.11958225516630083, 0.10867425289513544, 0.1306240052435993, 0.1463889081030333, 0.1094031264406593, 0.14824930953583737, 0.14607884197764087, 0.13404404689737404, 0.14015307191062853, 0.959825014429609, 0.9485869146518302, 0.9114117129508668, 0.9559632377673404, 0.9450491649685774, 0.9651242369463799, 0.9598103871966824, 0.9360776081871376, 0.9748093432422449, 0.5296610026612905, 0.47674231904106057, 0.3707977117003185, 0.4615324763468618, 0.39986240779608917, 0.4889578258716145, 0.4100444225252159, 0.4462353665610115, 0.47642638870849363, 0.7138930737395353, 0.6872455869740415, 0.6034686756031817, 0.31039830250456657, 0.36763071164213035, 0.20679024032866533, 0.6661592406070156, 0.793504569620196, 0.754586996811285, 0.264369170706797, 0.19503533693978603, 0.22097349819027645, 0.2358610975310631, 0.19253714197216654, 0.21687962833510444, 0.22969311274308513, 0.3172571126630107, 0.25327922811005066, 0.21439473830615563, 0.197179270225741, 0.21248703920727852, 0.24181336258601938, 0.2340583858725973, 0.19438643966892322, 0.2568809184786168, 0.22744757935374305, 0.24071178701168106, 0.05640145046960754, 0.06780622225704358, 0.047538296457292795, 0.04315980783481177, 0.018711040327705097, 0.048163569628452585, 0.027097526661724824, 0.06338387980591031, 9.999999999998899e-05, 0.11440364735538655, 0.07425534014236668, 0.10623511216315806, 0.07887531561175276, 0.0400845133202089, 0.025383215958031502, 0.1267983709593311, 0.08756268913655418, 0.14566575687429484, 0.13843194136233417, 0.14347143892627878, 0.20485345265631494, 0.1436653469126915, 0.06967185889189731, 0.13832668395112147, 0.18026754224267516, 0.1150330009678977, 0.08375927892444357, 0.19954501849532524, 0.1564208384954121, 0.2730071983663491, 0.20586678736045605, 0.19278383171952562, 0.2404948867396528, 0.06684576117349861, 0.11774525128816404, 0.23746570885095208, 0.5200059319190699, 0.49750425905667883, 0.4926279235762626, 0.5413286778415359, 0.5457174030004284, 0.5206330513613447, 0.5602975835560402, 0.6160075359346471, 0.5206855276128676, 0.13244637744190135, 0.16009974051314058, 0.13744721540483473, 0.14201275872350694, 0.12090233047113574, 0.10789966919376981, 0.16724022787474646, 0.14250187070949016, 0.1398303176551543, 0.22949291566033558, 0.17731489144910462, 0.19245757295924726, 0.2728444336188056, 0.27926899130148986, 0.30360048515711857, 0.2636502640462668, 0.27170765220821935, 0.17548722787976878, 0.3974167620678457, 0.3685705382258888, 0.3891928210702126, 0.4085491724843717, 0.34395184931999156, 0.33336666488332434, 0.478882561298661, 0.44255205104675244, 0.42751539023745777, 0.2715591725804205, 0.24861943474641301, 0.2542332121490337, 0.31328179660381283, 0.24361662669465345, 0.3386742883074647, 0.2082165857490762, 0.3075000758312212, 0.33849642717328343, 0.23318641228415826, 0.20484966011788697, 0.1973607277082, 0.22405297998937068, 0.20837703020683207, 0.2757629881343746, 0.21902585318248935, 0.19359360326550756, 0.20907197997670202, 0.4999713888338164, 0.5973649448634938, 0.21505921328863353, 0.19784860553741523, 0.19959356574776332, 0.21475960113245596, 0.20210979729816458, 0.23266857981629097, 0.19194583099042006, 0.8415794144019224, 0.8054944523529094, 0.8426281701349143, 0.9028859963194054, 0.19681268516511508, 0.1963412041117314, 0.8007403430239397, 0.8011104433472707, 0.852981018374637, 0.6622172702066234, 0.20855643674845947, 0.630644042767169, 0.4967220265124912, 0.6855816828463227, 0.5781723269108296, 0.21134570903109395, 0.2071039672938173, 0.6818517628535188, 0.19063285418441933, 0.17513082127270152, 0.19217121140800086, 0.18351264001748224, 0.19170175925917987, 0.19931011430312318, 0.19544576509749856, 0.17720832089667893, 0.19304917464719729, 0.08855458549186301, 0.08786907807120936, 0.09437825389447918, 0.09121694156608207, 0.08189687626848285, 0.07803128030279893, 0.09139695450120122, 0.09857568946921258, 0.09316695818954213]}, "mutation_prompt": null}
{"id": "36c48da7-2758-46bc-8cfe-c200b9f442fd", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.8\n        self.c2 = 1.4\n        self.w = 0.5\n        self.de_F = 0.75\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.035\n        self.adaptive_c2_rate = 0.065\n        self.adaptive_w_rate = 0.025\n        self.adaptive_de_F_rate = 0.025\n        self.num_swarms = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "An enhanced adaptive PSO-DE algorithm with multi-swarm collaboration, tuned parameter dynamics, and improved exploration through random velocity and mutation adjustments.", "configspace": "", "generation": 39, "fitness": 0.2948429661176376, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.7917193496860855, 0.7831582659486596, 0.7734790440726058, 0.792470274800209, 0.7845639979042935, 0.7210759683231849, 0.7910242750393286, 0.7865808821910943, 0.7479979853091717, 0.577247371684217, 0.5537012218353308, 0.49779208585970336, 0.537246628837641, 0.5871662896138836, 0.5258078440253349, 0.5565579869805553, 0.5352720521844689, 0.574148779040182, 0.1277710504350913, 0.13834169266644036, 0.31341419056501585, 0.15913028043840716, 0.1770902435642382, 0.14832026811084686, 0.12700066442522806, 0.11957058719669766, 0.14289352075903639, 0.1340560521017634, 0.0942655050981337, 0.1366851288865717, 0.12500799272555774, 0.14444981926814104, 0.1346330026695769, 0.13228034009381084, 0.12603654661542418, 0.08738630295571548, 0.9731357352877953, 0.9672143573223767, 0.9570869315310191, 0.946333240506894, 0.959332139282753, 0.9253239771390706, 0.9534365342302392, 0.9395776386612018, 0.9546440673354926, 0.331228226828159, 0.350503976723197, 0.35809620131278574, 0.38471914028848797, 0.3528890119669773, 0.3477420113188634, 0.3442289211109636, 0.3440895564069013, 0.3395649150551059, 0.6285973445282952, 0.24043457601590956, 0.5020964501182071, 0.4944519703030902, 0.3418261779110563, 0.2850070497176488, 0.7130496432204603, 0.5519192972903529, 0.45892006572570576, 0.18470020207569982, 0.12689003490144424, 0.1752776791151327, 0.18087362335732482, 0.17238618343479117, 0.1795909424296951, 0.18111730421096928, 0.20305129163682456, 0.2055355080335335, 0.18978463442794669, 0.25675485529574504, 0.20791788844647807, 0.21242704576593385, 0.1941713218994744, 0.184464946939897, 0.23073321574896744, 0.2170760696887658, 0.22010257845569225, 0.004516768904023083, 0.0003373452186747894, 0.04569224329370081, 0.054971915001095994, 0.011711738267870309, 0.00035671616201327083, 0.029773359056195492, 0.024225928293022503, 0.0024296000521584205, 0.07703385351122327, 0.11478165763908765, 0.04754393929046252, 0.06762170752713614, 0.05553923816552564, 0.10478384642386351, 0.06174483858218738, 0.12206633386252175, 0.06641949131026181, 0.13710734714803763, 0.043473456391495136, 0.12859255714505125, 0.10642889412492806, 0.11179574233327916, 0.15959055982218906, 0.10613134009575842, 0.081285426174458, 0.1507569465483377, 0.18294866386841702, 0.2543790898756605, 0.26241251676034094, 0.16663608773172878, 0.18973341105250807, 0.1985128331190753, 0.26459481928210693, 0.14308932108778571, 0.08486426244379652, 0.5463559053677505, 0.4830051799768379, 0.49892550850492046, 0.4894149439222397, 0.4888868602817744, 0.4922551538714044, 0.49335282763237753, 0.5074748682435393, 0.497653712945615, 0.12172860251380113, 0.1468426973636846, 0.13493767805101364, 0.13722579507771548, 0.10490289027984401, 0.10522990530229948, 0.11589454615056916, 0.12836757217233985, 0.13843117761745294, 0.2065948818842539, 0.24995641912088873, 0.294477146254029, 0.18660591924361514, 0.19043960352249534, 0.15979267624131277, 0.2631031201359484, 0.19066940468319304, 0.18593291274829837, 0.40709060435467115, 0.3552864186511203, 0.31333535131006773, 0.38822447621201017, 0.3549205209568901, 0.34111417450346837, 0.3546740766038924, 0.3586953702883676, 0.3703125674771822, 0.2831651618664184, 0.23683211913300217, 0.29561882823001073, 0.2890679835841191, 0.2514388118351969, 0.22147786014627502, 0.2856499260806511, 0.2828436870804846, 0.2349001776475922, 0.20480341683972048, 0.19084255340973344, 0.20441455627348437, 0.20566339444816117, 0.19759744687964842, 0.22061543786344961, 0.21061646237854426, 0.2059120752494913, 0.22830475356676094, 0.19231191907768475, 0.24473049001342384, 0.19608010855930336, 0.20895550368737326, 0.2019480881460508, 0.21126889512333047, 0.21007591750469756, 0.349152625859649, 0.2064315647573418, 0.19352228575656094, 0.18410362165082628, 0.15176979478988228, 0.17148310939330424, 0.807041829035351, 0.19655360069542183, 0.15668654294790196, 0.6986024488285825, 0.43951458107434815, 0.4761332745754123, 0.5105741918927434, 0.5061792278973806, 0.205732757080064, 0.20028323017377303, 0.2052781617077467, 0.4852088290735245, 0.4000738422422869, 0.5535926783458404, 0.21129127350442545, 0.182474214114844, 0.19671345970625542, 0.17867701230176336, 0.1853188256856958, 0.1847920067390839, 0.17675387990552283, 0.18333387509835575, 0.17091496108966697, 0.08879011400427339, 0.08457303656970139, 0.09102847450576501, 0.08752244183333058, 0.08550622023603738, 0.09200047636218078, 0.09349491327617565, 0.08066221423662523, 0.0795362698896317]}, "mutation_prompt": null}
{"id": "9c0d5c6e-7f3e-488e-ab16-bd49193197ef", "solution": "import numpy as np\n\nclass AdvancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdvancedPSODEOptimizer", "description": "An advanced adaptive PSO-DE algorithm integrating stochastic gradient approximation and competitive evolutionary dynamics for robust optimization.", "configspace": "", "generation": 40, "fitness": 0.2940642351276511, "feedback": "The algorithm AdvancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.7306010131104939, 0.7630987640554191, 0.7976738867616225, 0.7827599679610684, 0.7861532253160198, 0.7638401662291427, 0.7648593288000806, 0.7729081340852054, 0.767314904260852, 0.5823569243433773, 0.5408258696822942, 0.5271134736785357, 0.5354395784310622, 0.5506519943864957, 0.4966988394445311, 0.4497449334580257, 0.5197739115289028, 0.5267314652900201, 0.13661464611581686, 0.11294028711566295, 0.1562347140889948, 0.13091998345714329, 0.11883348854425946, 0.26131977751288904, 0.1317592296500436, 0.14152157257861342, 0.13710928326393113, 0.11611428006276947, 0.13548441222352126, 0.09545373354212716, 0.1461963003351704, 0.1411266530789741, 0.11766375499736659, 0.12073486128111222, 0.1408258133806075, 0.11685158181963995, 0.9605609126632466, 0.9644567396977264, 0.961286081008571, 0.9477369763215847, 0.9507920375419536, 0.9434277512220793, 0.9587767042882639, 0.941741497346974, 0.9499847924247551, 0.3768936338462082, 0.3951092027908103, 0.3509223260927997, 0.2689345788433293, 0.40628464011075793, 0.33944842409110043, 0.3165730647333769, 0.3902461924792401, 0.33988279459179505, 0.3445360072771928, 0.3927214564934648, 0.22955985512311272, 0.5443988019495228, 0.78804783805199, 0.3097907609392767, 0.3382909007180672, 0.5528407183697575, 0.6986985038463844, 0.3424010265422681, 0.17797985039026332, 0.1820850175138532, 0.1801644872375373, 0.2546845476810964, 0.16910189012428856, 0.12459129210608522, 0.22508203119352166, 0.22006088846113137, 0.22004450995399583, 0.21704666396323624, 0.20577290238501234, 0.21646803822073246, 0.1872160475368132, 0.20151611771972622, 0.19117142184017444, 0.20190145645409097, 0.20711971370290883, 0.058723437840161985, 9.999999999998899e-05, 0.01306409333122649, 9.999999999998899e-05, 0.036701600079674934, 0.023002883994408863, 0.035234987487175795, 0.035670305249445144, 0.03809378147512288, 0.11760644985865942, 0.1142951429208311, 0.09903006075161525, 0.0407625567030615, 0.04962259475825104, 0.04819852556668758, 0.0928729260238772, 0.053455056332233686, 0.07661128628516767, 0.028476852674859443, 0.10405177177533187, 0.13796789307717627, 0.13109739636002016, 0.1196251933960566, 0.21042357725450078, 0.16762896008116002, 0.06234218471736275, 0.06975633674655779, 0.1454239393271206, 0.2221438383207044, 0.14947198939326212, 0.21279994300606775, 0.21415359526876865, 0.2119807648701929, 0.17665985935389394, 0.20285593845215166, 0.07741525006838479, 0.5208655315939655, 0.5449174950999991, 0.510074632089292, 0.4953195381722819, 0.521543910183978, 0.4722793531315913, 0.48504691763368635, 0.5345551947352498, 0.5116185054301113, 0.12499555191833756, 0.33881174870519737, 0.11446457175992131, 0.14277044487012247, 0.10481374875088734, 0.12071974048441247, 0.13114745808573647, 0.14841676859153252, 0.13066693813208763, 0.2129991116151455, 0.19615301533836293, 0.17977127425639516, 0.2371014644345718, 0.1898405552482082, 0.18568240365812017, 0.20411492424559474, 0.15524442401455474, 0.18858207902234103, 0.3569183404947669, 0.2799936326680278, 0.35043468641002185, 0.3229851762043795, 0.3802502530038794, 0.320693474107422, 0.3399186766519252, 0.3909984387220945, 0.3951534828009544, 0.1967834729856328, 0.25655456224442164, 0.22949801118231616, 0.2719739023772567, 0.2861211140266252, 0.25989989964585025, 0.26971972747647055, 0.305115294656517, 0.2613154436324684, 0.24473507949891504, 0.2418533471889046, 0.22607343674199565, 0.20823030779097151, 0.19091153076289202, 0.22171913358573925, 0.20015714962301046, 0.2307666517027499, 0.20305864424457565, 0.21542982683219336, 0.5123375542470197, 0.19867504046715934, 0.20216744110483387, 0.21998502310753387, 0.2058788491641782, 0.2231051716771545, 0.18267522983986806, 0.2192022455577699, 0.1828038537001495, 0.18544174690554283, 0.19450712534125758, 0.7450331804180954, 0.7648264180344896, 0.19353320027897603, 0.15928542771582832, 0.8041023710208351, 0.1652728683374326, 0.5026638374429221, 0.4291256067934782, 0.624019368923006, 0.2051696126942989, 0.20504251377310923, 0.14773031425418448, 0.20565345540657953, 0.20840979421994776, 0.41327621018697247, 0.17428207454263434, 0.18234165435443517, 0.21169942503308325, 0.18636016550071155, 0.20617282800488135, 0.1850803175813448, 0.1830337825112337, 0.1781805660062613, 0.18763487526255807, 0.08141165002547368, 0.08950906296042827, 0.09198709693410578, 0.09204038516743818, 0.10039278692142728, 0.08247172230730015, 0.07741134694832585, 0.08482484725021966, 0.08331391862044857]}, "mutation_prompt": null}
{"id": "09a9a6d5-ca52-422f-89e3-8acdd3c2b3ab", "solution": "import numpy as np\n\nclass ImprovedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.6  # Adjusted to enhance local exploration\n        self.c2 = 1.4  # Slightly increased for better social interaction\n        self.w = 0.5  # Increased inertia weight to maintain diversity\n        self.de_F = 0.6  # Adjusted differential weight\n        self.de_CR = 0.9  # Increased crossover rate for diversification\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 5  # Increased number of swarms for diversity\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            if evaluations % (self.pop_size * 2) == 0:  # Periodic recombination\n                for i in range(self.pop_size):\n                    indices = list(range(self.pop_size))\n                    indices.remove(i)\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                    trial = np.copy(particles[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_CR or j == j_rand:\n                            trial[j] = mutant[j]\n                    trial_score = func(trial)\n                    if evaluations < self.budget and trial_score < scores[i]:\n                        particles[i] = trial\n                        scores[i] = trial_score\n                        personal_best_positions[i] = trial\n                        personal_best_scores[i] = trial_score\n                        evaluations += 1\n\n        return global_best_position, global_best_score", "name": "ImprovedPSODEOptimizer", "description": "An improved adaptive PSO-DE optimizer with enhanced swarm diversity and periodic recombination to boost global exploration and convergence.", "configspace": "", "generation": 41, "fitness": 0.23307088124308054, "feedback": "The algorithm ImprovedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.7389314596448415, 0.8685174937577684, 0.8353804593576519, 0.9038636832822141, 0.34780528747239514, 0.746169930731198, 0.8325695728780494, 0.6732173314608515, 0.5760376031567009, 0.1096801440418359, 0.001180389888312261, 0.003943059565886142, 9.999999999998899e-05, 0.059736973070704136, 0.01915795089280692, 0.018504709157693644, 0.20208847325972468, 0.15681495776566845, 0.1267524069449728, 0.13753727491617251, 0.0935170454928057, 0.12241279435356611, 0.1331888189319489, 0.11518521194364839, 0.12300374395083458, 0.14370323969955168, 0.10860680352711038, 0.12285142599595622, 0.09791475638213976, 0.07184462290618121, 0.11683820769945308, 0.0694998116246277, 0.08982078745522937, 0.12903726871561616, 0.15418333867696488, 0.1095733649174293, 0.9641111160706652, 0.954570900249643, 0.17221868311237687, 0.1785856001552042, 0.9409895477464455, 0.9256281627372096, 0.12646161013229917, 0.1480382166627573, 0.1727436635010503, 0.3341722018391008, 0.2299044111346752, 0.28106985907809967, 0.2046905681069674, 0.1888054871777245, 0.15145704347768474, 0.3579844992053457, 0.13112494570614364, 0.2548146805915704, 0.18537058128048112, 0.22610389347458526, 0.22897997082937105, 0.19477763306498486, 0.27937165184188484, 0.21486441330925832, 0.23366178615632305, 0.2345940053942337, 0.17386502132713755, 0.14430114663329718, 0.30020436298972886, 0.3573621785450416, 0.125976799302013, 0.17839604741314674, 0.13153201026992922, 0.136191869455201, 0.46244968395594666, 0.19252817291504742, 0.24431283345945187, 0.2126807543441892, 0.13627733337646264, 0.16393769291881144, 0.27928119205334634, 0.28704998841432805, 0.20283943097037238, 0.23930204966365165, 0.13917054632781578, 0.07028565657486707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014159561673017351, 9.999999999998899e-05, 0.03700058168194864, 0.017790966818284515, 0.11346841609312175, 0.07034027932125997, 0.0807487660192392, 0.050100144914152045, 0.028592500453256564, 0.06116406535692709, 0.09692223115531884, 0.08858516432207708, 0.08651440344362582, 0.1504364876567601, 0.16580415054868958, 0.10655514587262294, 0.09827943224415181, 0.13057313591833375, 0.18556115781976423, 0.2124875270580785, 0.14551920030764887, 0.2056980667569296, 0.1654706998413289, 0.1604815600445787, 0.19978191751262353, 0.2031459777079676, 0.19823086965485504, 0.12978316958557023, 0.21086958030572955, 0.1538916228763686, 0.12143617756945291, 0.4397840716253486, 0.44469445292603604, 0.45913801775531016, 0.4804751239336903, 0.4823140330880791, 0.5002081334534818, 0.43864367475633304, 0.4938330605112192, 0.4517777285591801, 0.0822410826185489, 0.11480018537407288, 0.12949419391289207, 0.12006695918901644, 0.11142639882893857, 0.10586984029419877, 0.09918755588669959, 0.1317935680830069, 0.1432327873450424, 0.24214239606392762, 0.25457562651197363, 0.21790960589230368, 0.23460320089883002, 0.19715160087813166, 0.269875310458199, 0.18386258211490425, 0.18570173777585774, 0.2335727830855059, 0.3546596899732224, 0.2153297177181691, 0.2417156296098265, 0.3279620270257153, 0.27098650901633603, 0.4360736993162023, 0.24252531927284426, 0.26504324749565433, 0.20727102278306397, 0.18608883518480912, 0.17920699992011924, 0.18204894269691307, 0.2177599656939373, 0.2474228433544997, 0.29339187451966786, 0.19730635628673587, 0.2516696585817413, 0.2542742551289364, 0.22177618788554698, 0.29748346803473646, 0.2231853734097058, 0.2690231550860064, 0.2302987650490934, 0.22358079736646386, 0.2483138284817742, 0.2635668834928593, 0.2556068183706609, 0.19078033182092013, 0.20106709149891944, 0.2069592514848798, 0.20043768714876709, 0.1952003731565788, 0.20835924800183048, 0.22545166939597105, 0.2101248380573355, 0.1937960235480518, 0.5869861583195867, 0.16841812518404564, 0.9024786325255457, 0.18550239128087698, 0.19913554797187094, 0.1600043021055475, 0.17256952365349332, 0.5332156743503726, 0.4245909781668995, 0.4046117242075258, 0.32285269230181113, 0.41377413685027986, 0.25172426187541663, 0.21101552352695951, 0.2556337202101714, 0.10454822594235125, 0.5231312217003157, 0.22021697853128108, 0.2131979677794832, 0.19773311069929378, 0.22814319063342214, 0.2338910048568149, 0.21275381244402913, 0.23085241331855855, 0.23017236353299797, 0.2381380132720443, 0.25258387715177033, 0.08091399349419603, 0.10526661587385355, 0.0985746457814839, 0.09081471146188147, 0.0884291244311346, 0.09473266629859611, 0.07530938967555634, 0.09921965764234975, 0.10594660776629294]}, "mutation_prompt": null}
{"id": "a5b60fa2-a959-4bd7-8505-83a4125bb95e", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.chaotic_factor = 0.5  # New chaotic element for exploration\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            # Introduce chaos in swarm global best search\n            self.chaotic_factor += 0.01 * (0.5 - np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        chaotic_component = self.chaotic_factor * (global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component + chaotic_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A hybrid PSO-DE algorithm enhanced with multi-swarm collaboration, adaptive parameters, and chaotic exploration for diverse search dynamics.", "configspace": "", "generation": 42, "fitness": 0.31676377926797616, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8411124348438825, 0.8536615405127523, 0.8526248078612171, 0.8411194508193064, 0.8267073719152561, 0.8466641444645276, 0.8707499239357219, 0.8547337549116555, 0.8358989693374577, 0.6593946177502188, 0.6715039816412034, 0.6313554396896429, 0.6095405009190693, 0.6181137445761264, 0.641506092154654, 0.673913099568534, 0.7165069776171066, 0.6734927888036603, 0.1350972824565594, 0.1714807438061391, 0.11482734145536322, 0.0967769148291161, 0.15590170320001417, 0.11332668869072349, 0.13424473756118094, 0.13875150001407166, 0.1532489060972715, 0.09920638218718958, 0.12759094754900902, 0.1446542912284614, 0.13590505558962684, 0.12136959854513985, 0.16821149859950457, 0.13519752345642333, 0.11714004824839064, 0.12289153214698545, 0.9639437460792144, 0.9487060636607691, 0.9422825536545076, 0.9598362650754155, 0.9573019136705998, 0.950987647597203, 0.9611903330616929, 0.9605237103362851, 0.9393333995811204, 0.45794268729719356, 0.45351690669260314, 0.5112265253032201, 0.43084517841676706, 0.45455937475950736, 0.4442365182230168, 0.4555754795579243, 0.4728279254404891, 0.4124209958895476, 0.3224300244369048, 0.8363779081415191, 0.6349633332552894, 0.19371551654562602, 0.27735880125113344, 0.21012107294456628, 0.17381085209336178, 0.24234817064531977, 0.7807579495441919, 0.27504635557049717, 0.12806085633126563, 0.20114780932488152, 0.18702210653675388, 0.1254717184040648, 0.1721477343629092, 0.19754236143460735, 0.18836810176302343, 0.3415925496643548, 0.21588353793102832, 0.21831060748439002, 0.21126940680600415, 0.22314693154553156, 0.2022402717735866, 0.12930830845852215, 0.21965372019741503, 0.2055423535504497, 0.128519567430734, 0.023960389102789303, 0.13440626374656262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00437794972924388, 0.049452889551366064, 9.999999999998899e-05, 0.11214518999841216, 0.06896434112178684, 0.09158889096099665, 0.12729656594307837, 0.09883906892250638, 0.06266287258517511, 0.07280969901979939, 0.10787833046705986, 0.08881521546963556, 0.1082125801760041, 0.2654452465920183, 0.17295842756807434, 0.12547960603238795, 0.07515994251222258, 0.08301196281433365, 0.08777340435088632, 0.18725800546345084, 0.13407641712702278, 0.1617257096303294, 0.13287228566667342, 0.28681569125811324, 0.2252201067770131, 0.12644279495771238, 0.432626595681048, 0.05627945617543717, 0.056018523964513234, 0.11041565505420037, 0.5215613684293259, 0.5341026263847752, 0.5723490064708151, 0.5308377587424166, 0.6096008250396829, 0.5213420467809737, 0.5473048205267441, 0.5313418255568807, 0.5217373748048586, 0.10223148142008653, 0.0937047652840085, 0.10938230041583297, 0.1667758941005355, 0.11694865851783198, 0.11711656996501718, 0.12139070994359158, 0.15129945206809625, 0.12522745881585762, 0.15611534962719964, 0.5799273534755394, 0.23948155392253068, 0.350302320011436, 0.25987567314737803, 0.3324508078143039, 0.1679317664860599, 0.2957626667172819, 0.25482813678660776, 0.48031746006478593, 0.40873160631296246, 0.3736318291828129, 0.3244370795989153, 0.3231700246524263, 0.4968313616221258, 0.41394370536512715, 0.49195976697992894, 0.40405054405293106, 0.34485425927080704, 0.2748362620141639, 0.2831549636848074, 0.2473255445308068, 0.2572322778387168, 0.2915001472401916, 0.2627722993375481, 0.29270572019894425, 0.31114923075503875, 0.21400657605866735, 0.2034006910230588, 0.20543517601487227, 0.20931038644778055, 0.19275170489434668, 0.23037601701628074, 0.20499380848912785, 0.20347906074511868, 0.21887822130345902, 0.21337323771108485, 0.20965554952264753, 0.21508201586493592, 0.2178159233872079, 0.22143725023920702, 0.5759870635055573, 0.526299389502831, 0.5270140730373924, 0.19290836209480045, 0.16470310029335267, 0.8494496534610307, 0.1671660763455276, 0.17227981030113915, 0.1999165379808795, 0.1677760258737706, 0.14177605145815964, 0.16623398204242235, 0.8832667460456073, 0.5544484052493529, 0.2107181339754236, 0.11102649467786485, 0.38595613163776443, 0.7798483543554946, 0.15301415917429573, 0.21142931174199187, 0.6111867934618558, 0.7358631646443778, 0.17538736171894065, 0.17008084914076493, 0.18565162578493866, 0.1862285193145925, 0.1802864836244613, 0.1810809692050167, 0.17287729119493145, 0.18320831574440344, 0.1759127978352879, 0.07743941891497197, 0.093650030728064, 0.08146773366883686, 0.09037602254140875, 0.08325609057834049, 0.07667795960038493, 0.0809904725426186, 0.08342880444096423, 0.08584991463848946]}, "mutation_prompt": null}
{"id": "5f3ab507-35a4-4d20-903c-4daca19a80f1", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 4\n\n    def chaotic_initialization(self, size, dim):\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * np.abs(np.sin(np.pi * np.random.rand(size, dim)))\n\n    def __call__(self, func):\n        particles = self.chaotic_initialization(self.pop_size, self.dim)\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "An enhanced hybrid PSO-DE optimizer using adaptive parameter control, multi-swarm interaction, and chaotic initialization to boost exploration and convergence.", "configspace": "", "generation": 43, "fitness": 0.3182178513564238, "feedback": "The algorithm PSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8038502882110304, 0.8041497566376982, 0.8182308186249178, 0.790032913978775, 0.7900294877775385, 0.7807877876575017, 0.8128181165266863, 0.8051632402314318, 0.8041817580445406, 0.5453582509866192, 0.6342433420648861, 0.5923036173456822, 0.5703479450271962, 0.660053951068829, 0.62419967652784, 0.5925356345289914, 0.6039094910422442, 0.6001386441152181, 0.17113885919660365, 0.13694516363633813, 0.14461676058737705, 0.17164663433782879, 0.146102258297526, 0.12424915876685227, 0.16521908025004972, 0.16813479420939093, 0.16941389362064185, 0.1087798393682109, 0.13580611996546232, 0.12247447538400702, 0.11872112125548107, 0.1284505305431909, 0.11919227299585833, 0.13315102680180158, 0.13985152189347716, 0.13857019890658195, 0.9819444193556156, 0.951690635017964, 0.9744201888311366, 0.9441796258722595, 0.9818134712773854, 0.9412609384238938, 0.9561254522879855, 0.9506166223759713, 0.946930708976816, 0.4044570289422822, 0.38308555024330593, 0.46105754476914707, 0.39919119225726385, 0.456130280771766, 0.4573200349465719, 0.44120869770194127, 0.37654927897223966, 0.41963639833820887, 0.8614715945856317, 0.6423290059708966, 0.7711686746675563, 0.36550361306896306, 0.706556833847795, 0.4752183522277854, 0.5865292600943591, 0.3652143008042885, 0.21531843600733402, 0.20333428833100753, 0.21130226696574161, 0.3333921636267767, 0.16747371724419258, 0.1857374726487131, 0.18758827300715708, 0.2560507022376781, 0.29020129732165556, 0.1847785184085189, 0.19504069920376077, 0.21746485783397285, 0.221352534188895, 0.23480659364124068, 0.2303108334326911, 0.19199375936715846, 0.1311452486717466, 0.19178800487094239, 0.20069379402716592, 0.15359154390381213, 0.010172091052808585, 0.052408851410419954, 0.01505727485077657, 0.049634123130252505, 9.999999999998899e-05, 0.0022145438596417044, 0.004609087374310539, 9.999999999998899e-05, 0.0766001312848793, 0.09879026615145392, 0.034538403269695706, 0.09834678637480643, 0.17199391865575964, 0.07017104385664585, 0.07427947841391636, 0.09136634411187117, 0.0925309503553744, 0.16275314965376908, 0.10340324996302808, 0.20834052496447997, 0.11470474228225014, 0.09258754123686541, 0.11706012291228074, 0.17122859160216797, 0.15022143156411039, 0.06744174336676245, 0.10416978945414501, 0.1593956955083955, 0.1574175183110308, 0.3240388865180911, 0.11864985996319555, 0.09559547869997842, 0.23192839386956543, 0.14970874579105276, 0.18203576367794239, 0.48820645439110455, 0.5201415903241855, 0.5370724859760669, 0.5125458479952281, 0.4889496426458364, 0.5231184782266665, 0.5009924964772703, 0.4788660847667845, 0.4983613889871422, 0.12077456548700738, 0.11654470268294648, 0.10742606284443135, 0.0989097083503997, 0.1355980265194443, 0.09851192559041955, 0.15039711003857248, 0.13535400124366515, 0.1316552557205214, 0.2037068087731947, 0.19602366580706587, 0.2349333886573538, 0.24890408112235574, 0.2088984640068826, 0.4187414815221546, 0.19267794255639714, 0.17428588036260995, 0.21982286361720293, 0.3494410463656994, 0.33566372232592756, 0.39305581037657744, 0.37684043160925207, 0.3581385406883494, 0.3232756695724094, 0.35675903488076477, 0.4014234354964896, 0.4072261157060473, 0.27309281260903406, 0.2228303081340367, 0.23725772584004567, 0.32708311534078205, 0.26248367847884224, 0.31402632428156063, 0.17463047595772418, 0.2476682216340521, 0.29401235382722046, 0.21394386395411324, 0.21479732046341482, 0.24391213013301438, 0.2318878280371286, 0.21656493516979347, 0.19925858935359442, 0.2251520275482476, 0.23121613323422086, 0.1957044010948945, 0.2378162974088499, 0.21670657127674098, 0.19515888443959006, 0.188288360548045, 0.22095130263313267, 0.19761669199100007, 0.24337863958780914, 0.22109844529241096, 0.23191016105171125, 0.19155081834988297, 0.15155775022742857, 0.17471729635308053, 0.18468485949367242, 0.8560787921675039, 0.8064235054873371, 0.1701361607571623, 0.8008105272257044, 0.7958478811719683, 0.7281326802332255, 0.5372578443932667, 0.5021241406617833, 0.6270394069351365, 0.73620216824314, 0.30636314063764547, 0.1272432453195459, 0.2106117227328701, 0.754864490295282, 0.18567951476604527, 0.19343438969781723, 0.18626724255602867, 0.19015074859779557, 0.18471705464246468, 0.1856375066115079, 0.1818295324219099, 0.17983741108777063, 0.2052926235549256, 0.09627283669992048, 0.09042961077191736, 0.09945089784906014, 0.08600060396688636, 0.09149236884745604, 0.08325955879973446, 0.08646090531073891, 0.0979785861543152, 0.09415859545495076]}, "mutation_prompt": null}
{"id": "45ef6873-7336-486a-aaec-81d8c343be57", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                        if np.random.rand() < self.local_search_prob:\n                            perturbation = np.random.normal(0, 0.1, self.dim)\n                            local_trial = np.clip(particles[i] + perturbation, self.lower_bound, self.upper_bound)\n                            local_trial_score = func(local_trial)\n                            if evaluations < self.budget and local_trial_score < scores[i]:\n                                particles[i] = local_trial\n                                scores[i] = local_trial_score\n                                personal_best_positions[i] = local_trial\n                                personal_best_scores[i] = local_trial_score\n                                evaluations += 1\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "Enhanced adaptive multi-swarm PSO-DE with opportunistic local search and perturbation strategies for broader exploration.", "configspace": "", "generation": 44, "fitness": 0.3274611164321537, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8232042621327311, 0.8164994162902814, 0.7917866849933823, 0.8191765978961708, 0.8233246757731754, 0.8061645718755615, 0.83186324518645, 0.8449282785791064, 0.818189838389463, 0.6647832245993448, 0.6460411832795773, 0.614423880831952, 0.6359150147094155, 0.6362104893694502, 0.6084456401380702, 0.6308969270479687, 0.6687738156138467, 0.6055797144700984, 0.13657559209049142, 0.13396667530824946, 0.4435936140759361, 0.14933164529220744, 0.15351828240385623, 0.1776263060730453, 0.4178064916800881, 0.17496498726919985, 0.15030063625684675, 0.11382404657290468, 0.11601947511114863, 0.13739219842497497, 0.10527941207343317, 0.12161031198043215, 0.14787317126800936, 0.13650702948857374, 0.13781768904336456, 0.11235497255460869, 0.9629869373023873, 0.9579929291660676, 0.9355587625582408, 0.9635870179737824, 0.9357754252889454, 0.9109048280273114, 0.9020474349513989, 0.9196679181661961, 0.9294556781360296, 0.5279526597933039, 0.4375727085254957, 0.4563590142253874, 0.36070732299724584, 0.4345881846282482, 0.4122097169428144, 0.3918590024774441, 0.4874440512327882, 0.43488619909998594, 0.8118669742021056, 0.8116958165149358, 0.5316208120572431, 0.8484066803199892, 0.2694831804091786, 0.21509708285148332, 0.7160172763185575, 0.23745204110444806, 0.7440350575676318, 0.20348252521714394, 0.23842668901364084, 0.33142213520600894, 0.20062630440194829, 0.5220215626504636, 0.21785462134401534, 0.19337740893672495, 0.23360334259199012, 0.24474171884365592, 0.2032821706860808, 0.23856567614267488, 0.2023452372629475, 0.21306640586216152, 0.19341307080268877, 0.2243784933551185, 0.21895541978816602, 0.22443714913142598, 0.23203232250850414, 0.0829661501976443, 0.06573709876950729, 0.014611859568045671, 0.02541005221247883, 9.999999999998899e-05, 0.060962103104445164, 0.04341835770040603, 0.0023868927949397545, 0.06099205911450922, 0.12004005325438716, 0.10458443317737087, 0.06601070134015463, 0.08740999659004245, 0.06809595760313025, 0.0636062779707599, 0.10175946330102104, 0.10487116124705587, 0.08232114781061683, 0.11005943506832117, 0.04386371191590388, 0.16896668134435966, 0.14346970382231228, 0.15340827146811375, 0.07448774017123283, 0.26408936597675825, 0.12640719906518683, 0.13969051442544078, 0.25123638107610813, 0.25951102032508544, 0.230104937846494, 0.13489169642668852, 0.34726414225544955, 0.18589607760717952, 0.18490616935928716, 0.18060597844618442, 0.1650007262390143, 0.6011930300357929, 0.5225407163928463, 0.4933742692007058, 0.5467354330422172, 0.5203816141546427, 0.5159316534241108, 0.5612021305552353, 0.561655561945528, 0.530541195916184, 0.1298804397577915, 0.1371880184215537, 0.14590109469095347, 0.13338978544003, 0.10679757121711975, 0.1670549269793049, 0.1680810759766056, 0.115793365934449, 0.1414414880551853, 0.32026259814831715, 0.253472393997743, 0.2650123916740269, 0.24067221253308613, 0.22508651154202564, 0.27130339271846937, 0.21736907708152708, 0.18636733270555772, 0.4009602857880211, 0.34789440153191964, 0.39156419327286984, 0.41487979817421405, 0.436063743404721, 0.4185936433680788, 0.310770279098895, 0.4235982678600332, 0.44417335180108464, 0.36367637864540814, 0.23894776551113572, 0.23293893908454855, 0.2697110021493144, 0.3219484979465296, 0.23107884290249492, 0.2747390061193482, 0.2167618192240739, 0.3559408152394893, 0.3020832074777049, 0.21114288081856125, 0.2279953092990934, 0.20615147707357118, 0.23194812051664837, 0.2209916085761816, 0.22177345941050985, 0.2194800129398714, 0.21788005789040776, 0.21095427010263534, 0.20019002743122605, 0.22230657774545803, 0.20421294299007164, 0.23726226550206775, 0.21463689923366236, 0.19358418181430648, 0.19517639260091169, 0.2386896239409716, 0.20089546317090046, 0.18642479111845234, 0.8225095958787891, 0.18404209198598442, 0.8126457630906314, 0.7935651496514818, 0.16980886781752724, 0.16160561619052938, 0.19590187185741914, 0.8347838028910957, 0.6858483567822476, 0.2099201904661554, 0.5730580150822175, 0.5551678625935141, 0.16805597481287204, 0.16516840215537965, 0.21164800753779356, 0.1978708387971796, 0.6114210082328085, 0.16990994137242887, 0.1872810011797481, 0.17650738499031382, 0.18483351893164213, 0.19302812701354732, 0.1830409117857721, 0.20248409321231664, 0.1825662312476527, 0.19200005763228867, 0.08355495470585594, 0.09285680680628561, 0.095473453830208, 0.0972949943146576, 0.08153946086048858, 0.09073232162705736, 0.09382352691608087, 0.08953054562312357, 0.09049603583264831]}, "mutation_prompt": null}
{"id": "436139e6-8fee-4b10-a031-d68ad631a6ce", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.6\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.5, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE algorithm with adaptive multi-swarm cooperation, dynamic self-regulation, and stochastic exploration enhancements.", "configspace": "", "generation": 45, "fitness": 0.3177956034112081, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8329538094716242, 0.8047339030887157, 0.8031345073548735, 0.839980845272622, 0.8166995206657462, 0.8108181996038969, 0.8243131109318768, 0.7989190052399749, 0.8256436394747868, 0.613930125683001, 0.6005911688257124, 0.5923153370825696, 0.6467478092039677, 0.6378752859559322, 0.5966764797855303, 0.614320288269687, 0.6152414808695078, 0.5752665833389017, 0.13809802723815479, 0.10588710510814603, 0.13538230433897702, 0.14182104536622353, 0.14757775342320223, 0.16237162748853184, 0.1441954385293458, 0.15892960814210633, 0.12649952894897465, 0.11444651518183624, 0.13255016878175774, 0.10321528202381702, 0.10661953814938319, 0.13624711255203925, 0.1141630126583073, 0.10374013310737495, 0.12223191694294022, 0.14006414817702695, 0.952761068467026, 0.9509348812389562, 0.9492793303159629, 0.9583461865013371, 0.9493251949924314, 0.9526356649372231, 0.9532575773239791, 0.9580582568905773, 0.9526716275953832, 0.4734183380099526, 0.4409491879942693, 0.4361643958391448, 0.48282936947523636, 0.4021149873268127, 0.41484088072107783, 0.4952249214469302, 0.41339642656359654, 0.4720446552501767, 0.7591879708175422, 0.8006124968290369, 0.3387046118284007, 0.760279451481231, 0.7375752068537065, 0.7913590895251097, 0.5598161383180831, 0.6685537504980014, 0.3022821650489249, 0.19408092296537927, 0.20249948542489282, 0.19867000131236556, 0.21057745881616052, 0.1988564771018012, 0.21282726064544855, 0.21214750272239158, 0.19512299279938283, 0.19109738461419024, 0.21480953460636554, 0.21758411268829125, 0.18577884193634597, 0.2096003020161531, 0.1944870921928843, 0.25789702266645764, 0.22718115280493512, 0.17838966649586108, 0.2201194160029315, 0.03522824324523732, 0.02838005456624615, 0.011484263320458155, 0.04580870710897145, 0.0322404452251529, 0.02859449091931965, 0.024206275147987788, 0.0006039884672740525, 0.0612275219423678, 0.10876887550880399, 0.07884021482236736, 0.06695080269949827, 0.10539129955205095, 0.049022163940482644, 0.04019399036376892, 0.10810693889623202, 0.0679855625296657, 0.0979554217323586, 0.19017076034626135, 0.11822165257756478, 0.2205019953277182, 0.18076258266192946, 0.06929540635589715, 0.10908681372697115, 0.09023908577664175, 0.08328535572229123, 0.09770730974702169, 0.17395050525907407, 0.07255257244048041, 0.1908434709319694, 0.28733602456634, 0.21345805491637904, 0.1325870762001301, 0.18517498780410224, 0.2519377284047274, 0.0800145758421611, 0.5247890950127667, 0.5443563216530626, 0.5502326095329613, 0.526008640414125, 0.564845044069616, 0.5168268097074917, 0.5252375045072133, 0.5053517050912577, 0.5304442189338336, 0.1273206535907968, 0.12738576358667764, 0.1257831700094677, 0.1349992529048497, 0.10913271528323654, 0.09718383184143153, 0.12389272409068597, 0.13412327583637873, 0.1220925593475175, 0.18188401940853338, 0.32863491935886713, 0.22394868136760238, 0.17038999759492313, 0.21842326001585743, 0.293573478608371, 0.18450251243261195, 0.23970275864412516, 0.2648022885221214, 0.40242603831826096, 0.38782435533898396, 0.4113046233458495, 0.4392489411906304, 0.49359238588246457, 0.4238997428824115, 0.5727203810112931, 0.3736670475486391, 0.4140325518682041, 0.3279263898364273, 0.2228557130992801, 0.27042726647746296, 0.26354027661181345, 0.20948645397603283, 0.26274317135440484, 0.23209866810806912, 0.2872603459993731, 0.2197731019193656, 0.2253655068816175, 0.2516696088372521, 0.20014363539516822, 0.22887886992732376, 0.21472633909703653, 0.21137535080392078, 0.20161591794556877, 0.2341077439846606, 0.23568530391804476, 0.20935410113738884, 0.19982402229157348, 0.2176779281430522, 0.19359305427421913, 0.21619743594369378, 0.20313994094730092, 0.21739692153876122, 0.2360592000548688, 0.1953995123678246, 0.18323963228948037, 0.1851395313591323, 0.18584131909596557, 0.8432159745693873, 0.7751677362422185, 0.14631893607848634, 0.8968347643557596, 0.18386546886065702, 0.8533441794117677, 0.5205536234924775, 0.20904496786506266, 0.7157757626767727, 0.16557696119982435, 0.45809751873518767, 0.20168900100946308, 0.20572391019389225, 0.16530448777961648, 0.164059521483658, 0.1767106760907624, 0.1851258479246558, 0.1788485793901311, 0.18035147129660378, 0.18473234300584107, 0.18698752604214386, 0.19828585718946357, 0.18544072127130407, 0.18604603294078415, 0.09309306955388674, 0.09376060863759872, 0.09007314392105437, 0.09688365632340923, 0.08697285048434611, 0.08119039765161618, 0.09521569304872535, 0.11207800788433364, 0.09968785306552364]}, "mutation_prompt": null}
{"id": "de09a454-6e16-4939-b47c-12e42645cc13", "solution": "import numpy as np\n\nclass ElitePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.elite_ratio = 0.1\n        self.adaptive_rate = 0.05\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n\n            elite_size = max(1, int(self.pop_size * self.elite_ratio))\n            elite_indices = np.argsort(personal_best_scores)[:elite_size]\n            elite_position = np.mean(personal_best_positions[elite_indices], axis=0)\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        elite_component = self.c2 * r3 * (elite_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component + elite_component,\n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        return global_best_position, global_best_score", "name": "ElitePSODEOptimizer", "description": "An elite-informed adaptive PSO-DE hybrid with hierarchical swarm leadership and environment-adaptive parameters for enhanced exploration and exploitation balance.", "configspace": "", "generation": 46, "fitness": 0.2695478166603158, "feedback": "The algorithm ElitePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8343238325198237, 0.8044833285166897, 0.8374916304564035, 0.8542432233404572, 0.8274696111067653, 0.7523762756478172, 0.8260427144167809, 0.7970574526523376, 0.7799320015838052, 0.4937744124128086, 0.44434198766683297, 0.3932854092105207, 0.43707977535052833, 0.5081621810236704, 0.4067708958071715, 0.4214228962401688, 0.41308061538080443, 0.4501411239526961, 0.10974221678292129, 0.08932044854022003, 0.12011571144395039, 0.11173767876737606, 0.10331228429932504, 0.09894064298191585, 0.10167213537369058, 0.10286937013581243, 0.13165167667157274, 0.09728846668139046, 0.0846997325987171, 0.09014581974849045, 0.0998590231682891, 0.10013106776155078, 0.09995195883311259, 0.08965676692177404, 0.10718795736246334, 0.09849122584716896, 0.942069225765642, 0.9526165929009976, 0.9497321006926935, 0.9434895921987326, 0.9433977524690833, 0.9479702668918325, 0.9464247755262754, 0.9443731466946345, 0.9447597509212895, 0.3502969928591657, 0.25767653080326325, 0.27536047069170244, 0.27830511826640647, 0.2965284867264246, 0.3063401587357292, 0.23121351103886878, 0.24838921973546435, 0.2563140627571814, 0.22626237168312735, 0.37060881868840767, 0.27539684981830115, 0.257109007220792, 0.2778730118023346, 0.2728222158239497, 0.2595654904247876, 0.2427317017294508, 0.3331881007113201, 0.1603315993106913, 0.13636236852541883, 0.12633496578406989, 0.16732279227471392, 0.14558626444841816, 0.21257858213679381, 0.15394919674420238, 0.16396354339447194, 0.21847622695053892, 0.15992228786603757, 0.12931529789919882, 0.13075347526498626, 0.1496230866370173, 0.1692148965351964, 0.14147100635602705, 0.1268483943860439, 0.12355317308761771, 0.12633245559685458, 9.999999999998899e-05, 0.005720203299127702, 9.999999999998899e-05, 0.020188188120870088, 9.999999999998899e-05, 9.999999999998899e-05, 0.03381129867852051, 0.008361193439294978, 0.11519608440387752, 0.13030421349786392, 0.08568169273497639, 0.14747956578865118, 0.048699980624061556, 0.06885709178646138, 0.05038321991301231, 0.059735341457126556, 0.10467191213281912, 0.1070533071401365, 0.204787095949437, 0.13570471651866678, 0.22310816107369336, 0.07655821515638095, 0.07587284085989254, 0.10726343676844641, 0.09278229457352449, 0.16021984811609669, 0.08863325394751687, 0.11929646624706314, 0.10100756521051368, 0.07426646251778402, 0.08974481609642082, 0.1285355598808896, 0.24991765122182452, 0.08801518759096127, 0.14247041515507686, 0.08578747506196871, 0.46213018151651075, 0.5028600501372622, 0.4859946880662839, 0.4510311995473839, 0.498774422583665, 0.46063561120666596, 0.5390124842414203, 0.4808082152803761, 0.46925644544709155, 0.102275688146792, 0.10045238310816063, 0.09810184046269754, 0.0951257305247265, 0.09642588936925511, 0.09774792492229534, 0.1078823660398408, 0.10348488474880646, 0.09404045175961606, 0.13495978912687245, 0.3109960840441873, 0.15143440805157626, 0.19386718223298782, 0.1561509370865537, 0.14773567483088368, 0.14018342010388785, 0.1271368374343489, 0.13142394737659302, 0.3263589782908197, 0.3313523953250439, 0.2955154364218264, 0.2928150546332109, 0.32510109147647415, 0.2747347759013592, 0.34478352766560283, 0.3525171296802979, 0.35852599335794577, 0.24345508972233343, 0.23812377644961302, 0.289370589007489, 0.29647361789429816, 0.24303410214039178, 0.3041964090871162, 0.22111060872933974, 0.2742011709429727, 0.19436389655970188, 0.23381872603195386, 0.2220124944859706, 0.2242779891291823, 0.20755318882957186, 0.21544755720827757, 0.20329421240481527, 0.20109832596127586, 0.20360130650808894, 0.21524542392557466, 0.1920285144376611, 0.20040989283966137, 0.17582153623907448, 0.16862447882956588, 0.19960845099247848, 0.19066075963801687, 0.19353888985452006, 0.21322405412361733, 0.1900551807498857, 0.8650597481010188, 0.18663428374185453, 0.7310468152163845, 0.8513141706903704, 0.19968285109755401, 0.8372783316972862, 0.17235210161558057, 0.17063790839355375, 0.739440689792898, 0.5038942777716953, 0.2095929569451651, 0.5622944357291835, 0.38095501353573835, 0.20829081116869874, 0.2017506269181134, 0.11527232146495703, 0.3686726186128271, 0.32926818755267595, 0.1824360419494203, 0.17947984873689005, 0.17834930943375116, 0.17893782944540015, 0.17924693890773036, 0.19011904722147033, 0.17189537175765235, 0.18579903332711734, 0.17702008095279964, 0.08392460591527762, 0.07492984023579286, 0.0799872076627618, 0.08406111552282947, 0.09193561639035286, 0.09096549644484875, 0.07753731237453154, 0.08005868212189948, 0.08440026436542047]}, "mutation_prompt": null}
{"id": "25e4cc89-224a-42f4-8b04-b5d6546536c7", "solution": "import numpy as np\n\nclass StochasticPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.5, 2.5)  # Slightly wider velocity bounds for enhanced exploration\n        self.c1 = 1.6  # Adjusted cognitive component\n        self.c2 = 1.4  # Adjusted social component\n        self.w = 0.5  # Adjusted inertia weight\n        self.de_F = 0.8  # Adjusted differential weight\n        self.de_CR = 0.9  # Adjusted crossover rate\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.2, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.4, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            # Dynamic swarm restructuring\n            if np.random.rand() < 0.1:\n                swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Fitness-based mutation adjustment\n                mutant = np.clip(particles[a] + (self.de_F + (scores[i] / global_best_score)) * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "StochasticPSODEOptimizer", "description": "An enhanced adaptive PSO-DE with stochastic velocity shifts, dynamic swarm restructuring, and fitness-based mutation adjustments for improved convergence.", "configspace": "", "generation": 47, "fitness": 0.29149469212198414, "feedback": "The algorithm StochasticPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.7878745142006448, 0.8143172794481801, 0.8054189237269622, 0.7923708559437901, 0.7837164016961456, 0.8179988998510134, 0.8017337057467608, 0.8107488420952076, 0.8078647366190016, 0.6287556117444606, 0.5876966419113423, 0.5621092533423329, 0.5333693143891949, 0.5917166497518753, 0.5368022282532736, 0.5728372454288453, 0.6172985589536663, 0.6016945706875217, 0.2755304409067879, 0.14588201036993065, 0.12687367530305238, 0.13597141207626973, 0.139974160310263, 0.1243700013982656, 0.14906646646287192, 0.1290782380911636, 0.13319154032348746, 0.25901476406685164, 0.12850450211122388, 0.11438243659544878, 0.10189624958685017, 0.13812560311564726, 0.10776273548457904, 0.10359546855331314, 0.13799885614141238, 0.08538076356098101, 0.9775833475868199, 0.9744906652499006, 0.982734783416288, 0.9859404143589373, 0.9674166480546066, 0.9563130178610382, 0.9756431126061774, 0.9768421936572769, 0.9525708545679988, 0.3601417989570157, 0.34592092443471, 0.40885758482419254, 0.33259493747647495, 0.3299105256172272, 0.3757131827873744, 0.37301939575192977, 0.38326937306224906, 0.4372724198944753, 0.3758309859039588, 0.8065648401058608, 0.22334880808826507, 0.19321399709500564, 0.8246879158878955, 0.24654911381196876, 0.5534624642703643, 0.22882128217363684, 0.22940213795140885, 0.2258907410403994, 0.18413802401727652, 0.3153869922570808, 0.18329506673651408, 0.2310165183252344, 0.12380294222484212, 0.16865078114089505, 0.1736383401031355, 0.19739272891576842, 0.14930851313640214, 0.23142724118890834, 0.17245626118043078, 0.20775601563217527, 0.4072129017952707, 0.39074974304601395, 0.1889865100786472, 0.2850332947427219, 0.29544333170848247, 9.999999999998899e-05, 0.02344425144935558, 0.0012205877202643434, 0.03558988185751988, 0.053230614592362, 0.030035335421229492, 9.999999999998899e-05, 0.07774338417423665, 0.06088342005173397, 0.13299807946665465, 0.06884363668882398, 0.07437162701613709, 0.027523718568401856, 0.11494302530460154, 0.09834077096412297, 0.09038342729546234, 0.08838868851761272, 0.03836987533850933, 0.07749150515564929, 0.06268929638771348, 0.04371464656931934, 0.06342419146788036, 0.07860128347595563, 0.06748022638201878, 0.18152664854626355, 0.07306411657241607, 0.06423359570683551, 0.20239791931679485, 0.09003678791293734, 0.15674364142896724, 0.10099375020715251, 0.1612476350044284, 0.15220384296494427, 0.14665202230414476, 0.13595334633576928, 0.1621548003150456, 0.5511431902361372, 0.5155839073592233, 0.4750425669358561, 0.5092670423268151, 0.5118243461417763, 0.5021585562560074, 0.5197596978672223, 0.5260485080754915, 0.5463279232388801, 0.07915286298672985, 0.13236138276852594, 0.12826935298333264, 0.10568213184369402, 0.11754104343956728, 0.13189718612060153, 0.10252252602952394, 0.12677144230131143, 0.1058788059162451, 0.14706607690900442, 0.14906842169868828, 0.1424152483364789, 0.20760092578301015, 0.20051634262056695, 0.2031665615447793, 0.2179565253087994, 0.16453675411840507, 0.17461421279976475, 0.35680758543284796, 0.42546804229868973, 0.3241137933978343, 0.3220289911338885, 0.39290490209950524, 0.34669144381870265, 0.38827848458811254, 0.41859079200749416, 0.3996426518389623, 0.23072003056041757, 0.2642155216286173, 0.23623128576530272, 0.23740445326248638, 0.1940083329431459, 0.31842435184673257, 0.22694980030254885, 0.3390296701758575, 0.3169224343746293, 0.23144190485038818, 0.19952391569407257, 0.2285266299357751, 0.23843124336558186, 0.22350647501665166, 0.22608888111727865, 0.22665853839529504, 0.20581741353046223, 0.20976337805887846, 0.19751126973877264, 0.21720228267808206, 0.19309480947234292, 0.20548165451652478, 0.19668859090314184, 0.22536737341666102, 0.1990071731850066, 0.21090908574500244, 0.1830843001152901, 0.17975208745129512, 0.15190465512195228, 0.18591664184120893, 0.5771570982453187, 0.19506907557048903, 0.19429416734041105, 0.17762309074081062, 0.17696779637999038, 0.7870138522767371, 0.41976905665790676, 0.2040714521550484, 0.47284769350760414, 0.1658903811705662, 0.4878967750033122, 0.20665199791427946, 0.20663431862034798, 0.3494741998813189, 0.6032011604518297, 0.190968260462002, 0.17258418944621445, 0.17492868614599433, 0.15795508460415475, 0.16392555485817573, 0.19527825848905367, 0.18495890825819616, 0.18637596284128755, 0.18073496781825948, 0.09575271857044321, 0.0802409285294059, 0.09941786242887352, 0.0946343143988968, 0.09482598518067387, 0.08850137441889205, 0.07367325225474197, 0.10563466990702541, 0.0918701787953018]}, "mutation_prompt": null}
{"id": "eb4044d7-450d-4101-999d-05ba615f304d", "solution": "import numpy as np\n\nclass PSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizer", "description": "A refined adaptive hybrid PSO-DE algorithm with multi-swarm collaboration, dynamic parameter tuning, and enhanced exploration through randomized velocity and mutation strategies.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.810170933353271, 0.817608680489373, 0.8229813147074075, 0.8175174746459195, 0.8120341263421713, 0.8060400906548193, 0.8208386554634539, 0.8134156613248733, 0.8100103570699376, 0.6307235557721512, 0.5984639426809715, 0.6535987071001161, 0.6466751199174143, 0.6393550506979018, 0.5783788613760854, 0.6455061415308092, 0.6260076179432597, 0.6300135613780267, 0.15206173310338833, 0.14575545547931978, 0.15890100579439892, 0.151438447546004, 0.14753650786701544, 0.4187640770911013, 0.14756760330755347, 0.14393957768459453, 0.15101246305076688, 0.11958225516630083, 0.10867425289513544, 0.1306240052435993, 0.1463889081030333, 0.1094031264406593, 0.14824930953583737, 0.14607884197764087, 0.13404404689737404, 0.14015307191062853, 0.959825014429609, 0.9485869146518302, 0.9114117129508668, 0.9559632377673404, 0.9450491649685774, 0.9651242369463799, 0.9598103871966824, 0.9360776081871376, 0.9748093432422449, 0.5296610026612905, 0.47674231904106057, 0.3707977117003185, 0.4615324763468618, 0.39986240779608917, 0.4889578258716145, 0.4100444225252159, 0.4462353665610115, 0.47642638870849363, 0.7138930737395353, 0.6872455869740415, 0.6034686756031817, 0.31039830250456657, 0.36763071164213035, 0.20679024032866533, 0.6661592406070156, 0.793504569620196, 0.754586996811285, 0.264369170706797, 0.19503533693978603, 0.22097349819027645, 0.2358610975310631, 0.19253714197216654, 0.21687962833510444, 0.22969311274308513, 0.3172571126630107, 0.25327922811005066, 0.21439473830615563, 0.197179270225741, 0.21248703920727852, 0.24181336258601938, 0.2340583858725973, 0.19438643966892322, 0.2568809184786168, 0.22744757935374305, 0.24071178701168106, 0.05640145046960754, 0.06780622225704358, 0.047538296457292795, 0.04315980783481177, 0.018711040327705097, 0.048163569628452585, 0.027097526661724824, 0.06338387980591031, 9.999999999998899e-05, 0.11440364735538655, 0.07425534014236668, 0.10623511216315806, 0.07887531561175276, 0.0400845133202089, 0.025383215958031502, 0.1267983709593311, 0.08756268913655418, 0.14566575687429484, 0.13843194136233417, 0.14347143892627878, 0.20485345265631494, 0.1436653469126915, 0.06967185889189731, 0.13832668395112147, 0.18026754224267516, 0.1150330009678977, 0.08375927892444357, 0.19954501849532524, 0.1564208384954121, 0.2730071983663491, 0.20586678736045605, 0.19278383171952562, 0.2404948867396528, 0.06684576117349861, 0.11774525128816404, 0.23746570885095208, 0.5200059319190699, 0.49750425905667883, 0.4926279235762626, 0.5413286778415359, 0.5457174030004284, 0.5206330513613447, 0.5602975835560402, 0.6160075359346471, 0.5206855276128676, 0.13244637744190135, 0.16009974051314058, 0.13744721540483473, 0.14201275872350694, 0.12090233047113574, 0.10789966919376981, 0.16724022787474646, 0.14250187070949016, 0.1398303176551543, 0.22949291566033558, 0.17731489144910462, 0.19245757295924726, 0.2728444336188056, 0.27926899130148986, 0.30360048515711857, 0.2636502640462668, 0.27170765220821935, 0.17548722787976878, 0.3974167620678457, 0.3685705382258888, 0.3891928210702126, 0.4085491724843717, 0.34395184931999156, 0.33336666488332434, 0.478882561298661, 0.44255205104675244, 0.42751539023745777, 0.2715591725804205, 0.24861943474641301, 0.2542332121490337, 0.31328179660381283, 0.24361662669465345, 0.3386742883074647, 0.2082165857490762, 0.3075000758312212, 0.33849642717328343, 0.23318641228415826, 0.20484966011788697, 0.1973607277082, 0.22405297998937068, 0.20837703020683207, 0.2757629881343746, 0.21902585318248935, 0.19359360326550756, 0.20907197997670202, 0.4999713888338164, 0.5973649448634938, 0.21505921328863353, 0.19784860553741523, 0.19959356574776332, 0.21475960113245596, 0.20210979729816458, 0.23266857981629097, 0.19194583099042006, 0.8415794144019224, 0.8054944523529094, 0.8426281701349143, 0.9028859963194054, 0.19681268516511508, 0.1963412041117314, 0.8007403430239397, 0.8011104433472707, 0.852981018374637, 0.6622172702066234, 0.20855643674845947, 0.630644042767169, 0.4967220265124912, 0.6855816828463227, 0.5781723269108296, 0.21134570903109395, 0.2071039672938173, 0.6818517628535188, 0.19063285418441933, 0.17513082127270152, 0.19217121140800086, 0.18351264001748224, 0.19170175925917987, 0.19931011430312318, 0.19544576509749856, 0.17720832089667893, 0.19304917464719729, 0.08855458549186301, 0.08786907807120936, 0.09437825389447918, 0.09121694156608207, 0.08189687626848285, 0.07803128030279893, 0.09139695450120122, 0.09857568946921258, 0.09316695818954213]}, "mutation_prompt": null}
{"id": "e33a9a9d-e81c-409e-b0c7-e4eaa8bf86c0", "solution": "import numpy as np\n\nclass AdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.07\n        self.adaptive_w_rate = 0.025\n        self.adaptive_de_F_rate = 0.035\n        self.num_swarms = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.1, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODEOptimizer", "description": "Adaptive Multi-swarm PSO-DE with Stochastic Parameter Evolution and Local Search Enhancement.", "configspace": "", "generation": 49, "fitness": 0.3314435959755678, "feedback": "The algorithm AdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8282242389835526, 0.8388683076317796, 0.827101663175442, 0.8389423884483225, 0.8268563958941966, 0.8181363189226183, 0.8282059115933392, 0.8067336688566488, 0.8288900112529899, 0.6140360460092077, 0.6658169341141545, 0.6412312601434987, 0.6577191303624849, 0.6545378744387409, 0.6290940308513834, 0.6314345115492626, 0.5766506558230938, 0.598649944758237, 0.17230420932021384, 0.15325534347426906, 0.1267765537877238, 0.1774510802195568, 0.16743749343156922, 0.1303704017861257, 0.15009590666805983, 0.503370955048852, 0.1517869940937855, 0.13366758579011462, 0.1330277423899262, 0.12493114752527767, 0.14482383724826176, 0.1345479597305782, 0.12472113419330322, 0.13371748316543386, 0.12165638473796714, 0.14499243533832362, 0.9598192931303374, 0.9512725337567611, 0.9302004607998697, 0.9559081593691534, 0.9393023871220606, 0.9651360854088765, 0.9600475216176511, 0.9374499780949406, 0.9748054201916001, 0.4601095725891622, 0.3971954321780192, 0.41420170937399947, 0.44577800461204153, 0.4150744919100777, 0.409057039632306, 0.43551052743340246, 0.4463549055963292, 0.4030244472387765, 0.566828084928992, 0.7968973643580414, 0.37647878358678677, 0.6769335528004283, 0.6023601373647178, 0.6808149577907199, 0.7103219940509904, 0.35190574571448996, 0.5397314493225776, 0.25436494567120993, 0.18404437209088742, 0.2334166965093114, 0.16136232169321352, 0.2908319358671274, 0.31427389901506364, 0.17297074228715958, 0.31490530109986303, 0.23958208153892224, 0.20773657925097344, 0.19924438808209533, 0.22978253240315571, 0.22718240188580785, 0.16383189163659173, 0.28588178430013544, 0.22125319398012921, 0.22122585152151764, 0.27345466840795785, 9.999999999998899e-05, 0.05735121229336693, 0.02669680829816845, 0.030817116089446372, 0.008373671521979653, 0.011110191434820837, 0.007885460574908909, 0.0635076358209904, 0.08309690969829298, 0.1655186184263443, 0.12302975882971989, 0.1014537940513115, 0.06417671817754567, 0.09229420671688582, 0.11084633697124613, 0.11155153011484398, 0.11731598791932807, 0.08987190940746115, 0.13936962824052046, 0.12930541776238047, 0.31058933290302726, 0.16298070636908546, 0.06578280170814776, 0.09229388596803689, 0.20535239213799872, 0.08053699661875868, 0.07318343219625145, 0.11301921703090334, 0.1718219545166343, 0.15208329440638702, 0.19707038422397616, 0.12145500069055293, 0.17876000709535456, 0.05577086986435098, 0.18425969386388374, 0.1823658728165879, 0.509296348670422, 0.5043098128250791, 0.5383025644894966, 0.5370030959082919, 0.5381414687805997, 0.5330595124421493, 0.5345147931651324, 0.520273530123201, 0.506681659163374, 0.10908940366763453, 0.1297258500597276, 0.14571624576928988, 0.11033015038418781, 0.13762396713317793, 0.13491371645459949, 0.09957231553645329, 0.12383169857637788, 0.1119556413970868, 0.16521318258632256, 0.18862597200211617, 0.35580852870592905, 0.17402339401709632, 0.27490520512589256, 0.23279469222272953, 0.23056036161610405, 0.19197237938535705, 0.21687914745156278, 0.36846951172166686, 0.32236226262651757, 0.3151905165854688, 0.380188453951285, 0.4192965667813974, 0.4341002939509627, 0.45073837056828625, 0.3950750498461727, 0.3565994462360471, 0.30405125909508657, 0.23126713515972852, 0.24936902110136416, 0.2522565024693957, 0.31565304311513376, 0.2533238254043515, 0.24168811373044752, 0.3025494583798022, 0.29908043398912565, 0.2000085758371487, 0.1992210291181662, 0.20083993181312876, 0.22058446460221026, 0.2335711575451016, 0.20534808733555676, 0.23930915585631551, 0.199768514808494, 0.2115652022646235, 0.21435583393888402, 0.2230846359994847, 0.20225568509638236, 0.1919821833971388, 0.18247170452477635, 0.4458048017123326, 0.21208633468519333, 0.19270127943677728, 0.18901755097466932, 0.8013291295518787, 0.7387373706748199, 0.8214937332822205, 0.8769492821458671, 0.1971042963472961, 0.1957727466010165, 0.16115096783747773, 0.8309140171096381, 0.892435400462509, 0.5613499722955412, 0.20360459467939318, 0.41970295049960293, 0.5200084519096653, 0.6117867510486099, 0.5833442520033334, 0.21125247588501583, 0.20807622658418645, 0.7478283689701962, 0.19195382947097972, 0.17602470722959496, 0.18881269152613878, 0.1773344733754264, 0.1877422646876149, 0.1804350910752115, 0.19523820829480387, 0.18810404622237487, 0.18561629246239542, 0.09029665153307109, 0.09131408904313598, 0.08861653510683443, 0.08102018102881792, 0.09239707292227817, 0.09255989630240946, 0.09907590117888943, 0.08285391180886803, 0.09029154551549345]}, "mutation_prompt": null}
{"id": "204d4e3c-fdfe-4c41-9bf9-aed3c6186431", "solution": "import numpy as np\n\nclass PSODEOptimizerEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.9\n        self.c2 = 1.1\n        self.w = 0.5\n        self.de_F = 0.6\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.035\n        self.adaptive_c2_rate = 0.065\n        self.adaptive_w_rate = 0.025\n        self.adaptive_de_F_rate = 0.033\n        self.num_swarms = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "PSODEOptimizerEnhanced", "description": "An enhanced adaptive hybrid PSO-DE algorithm utilizing multi-swarm intelligence and stochastic parameter adjustments for improved convergence in diverse optimization landscapes.", "configspace": "", "generation": 50, "fitness": 0.3197577999552716, "feedback": "The algorithm PSODEOptimizerEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.861304491070069, 0.8218832209767024, 0.8119891042159002, 0.8189047619014092, 0.8234492764592902, 0.8020330134545088, 0.8179200337632926, 0.8238014886818196, 0.7858909721313921, 0.6203150655755416, 0.6769389936605706, 0.5824229781147288, 0.6335050119940739, 0.6435273408437086, 0.5844504724618551, 0.5575513137886821, 0.6269490952073719, 0.5988919838859701, 0.13988586263361158, 0.14941375789147437, 0.15331406691311278, 0.11722277387802038, 0.41288336854347507, 0.14548051009067986, 0.3069479998290383, 0.17025067897957546, 0.1422455672723112, 0.11419198517217866, 0.11869496629066723, 0.1287078168231819, 0.12037900485420583, 0.1326915581932162, 0.13410545670530805, 0.16241035841055473, 0.10937058279431222, 0.09181415316902963, 0.9514459556219714, 0.9255297306127482, 0.946074238673606, 0.949755089115173, 0.9415090080067525, 0.9177960901970355, 0.9530779406306866, 0.9565624802713268, 0.9323285422338679, 0.4117905165937277, 0.42857331105108654, 0.37332979625232665, 0.40402105160594737, 0.3976268335490991, 0.3816158305840539, 0.38746539381316436, 0.30713612877550645, 0.4190192942111888, 0.3404288355693982, 0.7609979936363531, 0.535620730848791, 0.26952895874749394, 0.5832215567008097, 0.7326792011821261, 0.6899778948499491, 0.7421344232868905, 0.5887397029078384, 0.2140514462945886, 0.18489688136595706, 0.20766526357000725, 0.18753226534277834, 0.22925583175602615, 0.198245075417407, 0.19883875399978745, 0.23502372181014375, 0.21241340717205104, 0.46018904565586416, 0.31045594785066544, 0.2181653207304063, 0.2780152332465845, 0.20423048986946446, 0.24421728759314365, 0.21460236697207857, 0.20938759175324562, 0.23146068465597447, 0.0008554416433047551, 0.05332835653332968, 0.05000666294496736, 0.09664156524891154, 0.037503515498502615, 0.012034249450589396, 0.041669665445612014, 0.011440580630138752, 0.07064793582731854, 0.11442282440581297, 0.144743271352067, 0.10637510273829376, 0.11203446767001646, 0.0977491368551835, 0.07563423042985373, 0.12318296576436316, 0.0781786611918529, 0.07915301866776658, 0.03674816496930522, 0.06426368634691748, 0.20963291108225157, 0.08430485045026526, 0.07221355271734697, 0.09233831778351631, 0.2065115085418261, 0.08471562803622257, 0.1542592875155998, 0.17459617053412835, 0.2165658769267399, 0.09765985411822986, 0.19277867064816778, 0.1316376104435909, 0.2402248762174971, 0.10412448768627491, 0.17453333551355676, 0.21445955938022332, 0.4991557252057093, 0.4867708513325121, 0.49485627591792714, 0.5282092632021338, 0.5419086336876378, 0.5093665743789041, 0.5500303836699629, 0.5306274214028002, 0.5522821531920923, 0.10085486392063214, 0.14280210212801103, 0.10191260676081293, 0.16794694431588464, 0.14109192661948577, 0.13236038407752404, 0.1459526161801823, 0.1702317890285947, 0.11846523250285368, 0.21455239357192402, 0.17995470484645082, 0.20860470892227856, 0.24314067915677529, 0.21547539739234767, 0.18256671352319787, 0.26305816677913285, 0.22080412118181114, 0.16519581596494026, 0.3925329848076945, 0.36577947605814354, 0.3931602881426738, 0.42678003112730567, 0.46984196700838954, 0.376433233691142, 0.407135433267687, 0.4950267108641727, 0.4410807137623508, 0.3088149843968948, 0.2905854216055015, 0.2823521924140705, 0.30473534081303555, 0.3196233624728183, 0.3244959105909929, 0.26447964536153845, 0.260906876362082, 0.2321374342330792, 0.21519817920447792, 0.20443631357616499, 0.22255884538093118, 0.2249022930955713, 0.20926731847194247, 0.18457448119217812, 0.2368362893880751, 0.19079748668457364, 0.20482935418571402, 0.20212669747173584, 0.2172865381740725, 0.19522088863803277, 0.5143212522919651, 0.4858651554119383, 0.23301331439634665, 0.20167168799651192, 0.18106751283811273, 0.20205842169819, 0.18540273542198293, 0.1848967601763537, 0.8490973045044135, 0.8061639123560411, 0.19508430678553823, 0.19678229512021495, 0.1687714383767709, 0.7371973885877406, 0.16485995886679228, 0.685211411880757, 0.5161843087014022, 0.578210750672163, 0.2091826935562925, 0.4143661134547889, 0.1629188468334818, 0.10315131227147412, 0.20047214923957835, 0.5581795422078668, 0.18636171979975036, 0.20164323188828326, 0.17428740416868238, 0.1825368589099865, 0.1877730070734056, 0.19827957721767653, 0.20152921050678752, 0.1997052304350816, 0.19124180973594607, 0.09364604214947048, 0.08936614969997136, 0.11552011631527348, 0.08652615572871747, 0.08628846332995577, 0.10833741966909471, 0.09607667596935643, 0.10695686399734172, 0.0898209063661276]}, "mutation_prompt": null}
{"id": "4ed8244a-f313-4035-90fe-8076d98b9ae3", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            if np.random.rand() < 0.0875:\n                self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n                self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n                self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n                self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced adaptive PSO-DE algorithm with probabilistic parameter adaptation and swarm diversity maintenance for improved exploration-exploitation balance.", "configspace": "", "generation": 51, "fitness": 0.31033449689175496, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.7877093267998208, 0.7755646482634965, 0.7777298731880816, 0.7589949526333803, 0.7879312161361395, 0.7803115646789051, 0.7773743591777205, 0.7797559436080883, 0.7660136040101245, 0.563185471589873, 0.5403137603441519, 0.5652889033918327, 0.5731933821424493, 0.5753672543236621, 0.5867415607817512, 0.5623167339803253, 0.5425901752452348, 0.5669670213497694, 0.34703028471174224, 0.14452269854364463, 0.2753372666421612, 0.15546660453150218, 0.15987797415575422, 0.1435486487618033, 0.3305849079063389, 0.12752439206575505, 0.1382685648786448, 0.12188470828386033, 0.12101591913265197, 0.12226663488408229, 0.11346142104211232, 0.14792633656333987, 0.1128079723660056, 0.09003900285478417, 0.15369892434925092, 0.0959067913893652, 0.9467023553081193, 0.9677625287515501, 0.9343372380752368, 0.9433060535396105, 0.9644942830559246, 0.9738117721800085, 0.9620902479482442, 0.9456189938208661, 0.9332332123480763, 0.4145718389591051, 0.38200892320861546, 0.4012903289187959, 0.4139973658849476, 0.37700516153701424, 0.49312814618988743, 0.4413977285214099, 0.4235443206235502, 0.38999807345839077, 0.6461201073699976, 0.742499937633468, 0.6888262729249391, 0.6913121631529118, 0.32267604722589127, 0.5603116232876155, 0.5270669739043709, 0.6843340000444817, 0.6914202656771895, 0.23194917397351444, 0.1879677954552461, 0.19259552474600206, 0.22048599492486098, 0.20618049472505895, 0.19118218625872263, 0.21415669134369086, 0.20967078671802952, 0.19542360535554626, 0.20271291348929832, 0.19374728192999502, 0.1996998482924267, 0.22069068762612065, 0.2131861572397168, 0.19512274191877266, 0.18726003042707684, 0.225453795256636, 0.24776952839813016, 0.11692454394150409, 0.00970489406902142, 0.0035578893305546755, 9.999999999998899e-05, 0.04277878947641223, 0.006468793797589023, 0.03070922732597081, 0.028790474437156766, 0.017026006189013843, 0.07043888209068738, 0.045127116736586315, 0.09093611074453578, 0.0804136096552378, 0.10155744899606889, 0.04678998720051475, 0.06205551950647181, 0.05416947210919332, 0.06953059296227404, 0.1029102046416448, 0.11356019352663593, 0.08550270895639278, 0.10442773661529592, 0.12415442429673129, 0.1177244682682469, 0.1998829722256783, 0.17533835685030408, 0.12032706334196097, 0.26529743159952746, 0.16579742934411734, 0.12364625661496087, 0.17857158961912323, 0.17852451222880916, 0.1843348581571972, 0.15695665653561341, 0.15715112988451363, 0.11261108294570255, 0.5412676846379808, 0.4832972398981876, 0.5680715707176616, 0.5363099627811883, 0.4996683235198478, 0.5356688310951476, 0.5134394178398928, 0.5414613541715494, 0.5147682449685849, 0.12361351573973456, 0.13505496873934586, 0.12505961455249615, 0.28497220598044537, 0.12246086719367244, 0.19438150638805574, 0.13586313382002302, 0.15124226364259963, 0.12331969329369963, 0.2622273614946218, 0.17523237481094944, 0.183518185514847, 0.22303419579032457, 0.24523649364134148, 0.20703720779129864, 0.1686288496142586, 0.22860135245516644, 0.26311385876726134, 0.3528862770567305, 0.38265425260001107, 0.43471166728518595, 0.3990217292778515, 0.385264886383611, 0.3672838420309942, 0.4437537236635727, 0.43479690019920914, 0.3858632653893961, 0.26928432692858695, 0.29893836704203935, 0.2642941817161095, 0.2770986228724702, 0.2705723404910625, 0.2814878030459492, 0.2803677877961702, 0.33347523052111194, 0.30513230627747057, 0.2124414424325588, 0.1900438111780357, 0.21796920608179549, 0.21205883086517674, 0.19958373178615874, 0.20379739642442551, 0.20021542613257404, 0.19227289581842133, 0.21033263950438263, 0.2602178401624712, 0.23386029838877775, 0.1848216645876558, 0.4289244997366537, 0.18204816532588497, 0.20050466139356993, 0.1855068932279167, 0.20137289942690217, 0.20532562811430755, 0.18496878513768056, 0.807138192451231, 0.767352747148229, 0.23183686324386987, 0.1961803401836697, 0.1945966798986195, 0.15940300673705765, 0.16808934841167733, 0.7274032426949049, 0.4262297817275794, 0.20722024504767889, 0.4979129676378814, 0.16563090356767862, 0.47335416741122205, 0.16566887580233847, 0.16535260284366016, 0.2090018576202083, 0.5574310917751752, 0.18895421359071152, 0.1791239195621076, 0.19229863172846773, 0.19122282451642292, 0.18221786882542923, 0.2041923310279944, 0.17332697214183723, 0.18209246566128034, 0.19149059220638842, 0.08173028090616408, 0.0880524949485274, 0.08015402533907268, 0.07596774504524073, 0.08136852308003595, 0.07534440415185184, 0.0879174152256792, 0.08550153641735814, 0.10134922432083326]}, "mutation_prompt": null}
{"id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE hybrid with adaptive memory, stochastic restarts, and neighborhood-based mutation for improved exploration and convergence.", "configspace": "", "generation": 52, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "2fbf19d1-30ed-454d-bfa6-7815bdd8412a", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "3a19dca6-4b98-42d5-99f2-420831b79369", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A PSO-DE hybrid enhanced with adaptive mutation strategies, multi-swarm cooperation, and dynamic parameter tuning for robust optimization.", "configspace": "", "generation": 53, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "f7a167e6-fbb2-4057-9645-4d306908e2e8", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A hybrid optimization algorithm combining adaptive PSO-DE with enhanced stochastic strategies for improved exploration and convergence.", "configspace": "", "generation": 54, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "e263edb9-356e-4999-b807-d7efb8472916", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizerWithMomentum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.momentum = 0.9\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - 0.04 * np.random.rand())\n            self.c2 = min(2.3, self.c2 + 0.06 * np.random.rand())\n            self.w = max(0.2, self.w - 0.02 * np.random.rand())\n            self.de_F = max(0.5, self.de_F + 0.03 * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.momentum * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizerWithMomentum", "description": "A novel adaptive PSO-DE hybrid with momentum-based velocity updates and dynamic subpopulation adjustments for enhanced exploration and exploitation.", "configspace": "", "generation": 55, "fitness": 0.17060305590586314, "feedback": "The algorithm EnhancedPSODEOptimizerWithMomentum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.28911309206874203, 0.32145341811948724, 0.31246641517632845, 0.3542774893121343, 0.33940745127132754, 0.32883977672961384, 0.29578746956029234, 0.34338874612734416, 0.3110651132090224, 0.008325040230568237, 0.0004510278595596384, 0.01644297528221339, 0.0020797741895188793, 0.016567174362441595, 0.008781758543024654, 0.0037958647573135273, 9.999999999998899e-05, 0.011568760190332483, 0.07502163554868124, 0.0827064643478399, 0.07518386464137472, 0.06652667704853188, 0.0684939340784404, 0.07147288929272055, 0.07059058262501061, 0.07405528102031167, 0.08404857564818069, 0.06622097168340624, 0.06857778014148663, 0.06368541793465643, 0.06745742877437255, 0.062068384513914165, 0.06984019033240907, 0.059488566898449946, 0.07085148717572354, 0.06322847219521588, 0.9595414805666612, 0.9534611004243775, 0.9585955436590975, 0.9517897682823696, 0.9645064903371803, 0.9579775166467601, 0.9603884211381837, 0.9535082860885866, 0.9413267565565002, 0.18013967652313967, 0.15022923465406735, 0.1450753539469799, 0.13067390316638283, 0.12252889639881903, 0.1620489159520737, 0.08655006556693734, 0.1516034608101018, 0.08833677945342555, 0.19639357343337893, 0.17822693830699432, 0.21111863271630815, 0.18512327880082646, 0.19387442242765285, 0.17993159692415717, 0.2173761355552567, 0.24689561027696283, 0.2161620919492363, 0.10744580305189044, 0.08369463178339431, 0.11901697306513015, 0.09911709737637042, 0.0950273635715082, 0.12733859594958363, 0.0938310011825606, 0.09662766895194308, 0.08663965827420939, 0.11482009634374846, 0.10704911614996249, 0.09749459543368011, 0.08640368044424251, 0.08872325520702651, 0.09764132064707087, 0.10704760231509192, 0.10561684891833523, 0.07299260297822785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053607576991995254, 0.05872151052022112, 0.056249727318240184, 0.04644639981317178, 0.013780047103759352, 0.13542334335495143, 0.08884129509981542, 0.061543691251778054, 0.05409508485908032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033265910154435696, 0.029890303652282846, 0.0199812377113594, 0.03515364791041897, 0.031232511361066084, 0.030251058060445812, 0.0370940485400566, 0.03572169158338634, 0.03184586306553572, 0.3005045016155865, 0.2833644027480414, 0.3083536731764819, 0.2784139617167041, 0.33849398816219634, 0.3168377684012563, 0.3537171399298904, 0.28476314934532254, 0.3006635131962786, 0.08802090530650963, 0.08423367268193105, 0.08618145954319056, 0.08096278573071869, 0.0792271081006003, 0.09863976303822852, 0.07434466023584552, 0.09712717643641866, 0.08140247667232581, 0.1272849461442327, 0.1381063439253276, 0.143314806904406, 0.1369898065384303, 0.12770161449388795, 0.16829250611550872, 0.13170286152333088, 0.12921161822663474, 0.15191338268971244, 0.2137816676653549, 0.23023046685070825, 0.23204228659727888, 0.22360731961809444, 0.24310821297503982, 0.2165331784263398, 0.217707868352067, 0.22684700887981002, 0.2169791874710133, 0.17959779324474112, 0.1563524506900441, 0.14428737957011994, 0.14295153558794005, 0.17085138880474315, 0.16399216675527972, 0.1894794481990285, 0.15427272756857724, 0.18590693208096876, 0.17252515496314957, 0.18917422519731242, 0.18295518243928344, 0.18699398551600332, 0.20035435408183988, 0.17706788042581123, 0.2051240637296683, 0.19195845505738862, 0.17826948060022674, 0.17542577322811448, 0.17677459052443933, 0.17342427697062357, 0.18036697314855865, 0.17267830050832966, 0.16947685347695074, 0.1741820931271808, 0.17111164048690064, 0.16729874637901399, 0.15359631089997527, 0.36374713603145226, 0.14670131495860728, 0.3421588973837255, 0.18242397888248574, 0.43305263195362664, 0.2983552698480967, 0.15479513014555946, 0.39245584387521504, 0.12260591993658532, 0.28387176061098085, 0.3128336960756214, 0.1995058765602704, 0.3193791411403034, 0.16257750063189946, 0.1980312079980655, 0.19110344190464734, 0.17129629950013026, 0.18683785582769863, 0.18712096690885205, 0.18899648711941375, 0.17898481348438944, 0.1793797110840507, 0.17792584077142604, 0.19886558386767306, 0.18038913351036168, 0.17845335423693376, 0.0819757238657769, 0.07275397142593232, 0.08985615606318165, 0.08238147989386269, 0.08380777267290429, 0.08203455856956898, 0.08128430509113094, 0.06728518730641864, 0.07168803238428445]}, "mutation_prompt": null}
{"id": "3f631991-e292-460b-a5ae-187164f5b869", "solution": "import numpy as np\n\nclass QuantumPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.quantum_prob = 0.2\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.06\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - 0.01 * np.random.rand())\n            self.c2 = min(2.3, self.c2 + 0.03 * np.random.rand())\n            self.w = max(0.3, self.w - 0.02 * np.random.rand())\n            self.de_F = max(0.6, self.de_F + 0.01 * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.quantum_prob:\n                    particles[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    scores[i] = func(particles[i])\n                    evaluations += 1\n                else:\n                    sorted_indices = np.argsort(personal_best_scores)\n                    neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                    a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                    mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                    trial = np.copy(particles[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_CR or j == j_rand:\n                            trial[j] = mutant[j]\n                    trial_score = func(trial)\n                    if evaluations < self.budget and trial_score < scores[i]:\n                        particles[i] = trial\n                        scores[i] = trial_score\n                        personal_best_positions[i] = trial\n                        personal_best_scores[i] = trial_score\n                        evaluations += 1\n\n        return global_best_position, global_best_score", "name": "QuantumPSODEOptimizer", "description": "Quantum-inspired PSO-DE hybrid with adaptive entanglement for enhanced global exploration and local exploitation.", "configspace": "", "generation": 56, "fitness": 0.2178112644749595, "feedback": "The algorithm QuantumPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.5052226957282562, 0.5420423880380034, 0.5259408624593874, 0.4666373983984029, 0.5216279719000312, 0.45550582024647424, 0.5049573830179033, 0.5223091946412443, 0.4844305584158063, 0.056198935500161085, 0.11621718325508446, 0.06894924427719584, 0.07275519063333924, 0.13333855252922933, 0.14350417697830087, 0.06192413408055397, 0.07172306535674688, 0.07847607631762399, 0.11635938971832771, 0.09577924730321119, 0.15251087179810652, 0.1302227938172913, 0.10633130946688962, 0.10685036524278624, 0.10019198259431539, 0.11664458780921727, 0.090684279959515, 0.10700446443956646, 0.09613247329715724, 0.08053006165976317, 0.09523602836897482, 0.10262408653015154, 0.08817451554476397, 0.0926792886044765, 0.09199142742680555, 0.09159171162543389, 0.9585967246159672, 0.9335556854964197, 0.9388672296559933, 0.9479020867416098, 0.9302921946101824, 0.9579767047510666, 0.95335244263951, 0.9424396013593863, 0.958318153566556, 0.2129370308150399, 0.20310642636525922, 0.226765603837355, 0.21285911035085214, 0.22058888549092193, 0.18700909393643572, 0.18308502556952178, 0.20924473586320425, 0.24872513426656417, 0.24361590813087353, 0.23408236198144106, 0.2527162145604689, 0.33126907484023616, 0.31227728397677257, 0.22462570527974257, 0.5568591985507315, 0.28002527896966467, 0.24883125172606424, 0.15003316627661312, 0.14945314374841434, 0.14663238657344213, 0.13396340939084972, 0.13123657700817626, 0.13650132537140347, 0.16010859687422618, 0.16116148022596932, 0.13704979233022785, 0.028730073015534097, 0.1480417795349085, 0.13529177311710106, 0.13571682772499716, 0.15902352162908284, 0.14199114376987654, 0.1338106097475471, 0.1354693320552809, 0.14352664831037854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008912756678012723, 9.999999999998899e-05, 0.003828412970940942, 9.999999999998899e-05, 0.020321779962747644, 0.08014322177672983, 0.050439082410951186, 0.05169635039041187, 0.05622422401374716, 0.06928893480585707, 0.06049674365562918, 0.06471360492345335, 0.08035143252712262, 0.08393198533539603, 9.999999999998899e-05, 0.007884577118383085, 9.999999999998899e-05, 9.999999999998899e-05, 0.008118201999361196, 0.022209118302086606, 0.02183210271151692, 0.014262757990069042, 9.999999999998899e-05, 0.12795200647257843, 0.12364629337581556, 0.10715766137266514, 0.05252945904011941, 0.1514175281692025, 0.10771394197359718, 0.08260250346403153, 0.07282591012251793, 0.10703627890481404, 0.4362339951772163, 0.4253897215703383, 0.3714679979744536, 0.38432978436130083, 0.4141671193454879, 0.39142449554776515, 0.4018108051031991, 0.4483752731780378, 0.3812973065055604, 0.08897650788668943, 0.0970604578106482, 0.09371824905297166, 0.09274712925469342, 0.09333699907222404, 0.10748100196611465, 0.10658664240008875, 0.09934868023628174, 0.09278315913990776, 0.12290657180905817, 0.13645217014097466, 0.13874583278181785, 0.15384511523700972, 0.14282162929151943, 0.15048310498738504, 0.14753656098437573, 0.1765619555929172, 0.1476308051810412, 0.28589455459977375, 0.30408060090929034, 0.28389976015981033, 0.28652221513498877, 0.29410682403745236, 0.286196216500784, 0.3141249625253286, 0.31287249651433835, 0.2816506362874197, 0.23480004218000883, 0.22006016090888758, 0.19683790493348197, 0.22888819537594896, 0.22555991560645383, 0.21332236443567143, 0.20697237675939573, 0.21788783188152905, 0.19890093699848865, 0.2001289973693482, 0.20520806793662372, 0.18302258868513532, 0.18156060717102385, 0.2091585826258311, 0.1936362238731616, 0.18567789814998104, 0.19131820228222474, 0.2078977863312581, 0.19522357854068273, 0.20070674286981272, 0.18535238499897966, 0.19109468670296936, 0.1813958868932496, 0.1843505683386636, 0.17005307339971842, 0.19657741723680133, 0.19272404188608316, 0.48169637070167537, 0.4282570172920557, 0.5787614648382371, 0.5930954753148692, 0.19509765701690363, 0.1469997286902377, 0.5742321659243694, 0.567452118584183, 0.6508441702663939, 0.42857973681112826, 0.2053023664480188, 0.4109041354947185, 0.20183684446652395, 0.1759049708518462, 0.2238265154794309, 0.20581375612081176, 0.15175687438184327, 0.20226245134022458, 0.1853682136735061, 0.1757804935349816, 0.17540941107101093, 0.1844110379588053, 0.194409682335134, 0.18167383943597315, 0.1845616658807514, 0.18210070779739496, 0.17678619882125346, 0.07676722757227616, 0.07801964322745192, 0.06820270522446303, 0.06754625284616722, 0.07014849036908088, 0.0797170703085861, 0.07250998434568845, 0.09602958040555964, 0.07448037702989263]}, "mutation_prompt": null}
{"id": "88585c98-4df7-4d9b-9c9b-a680719f18f3", "solution": "import numpy as np\n\nclass NovelPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_rates = np.array([0.04, 0.06, 0.02, 0.03])\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.leader_selection_prob = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_rates[0] * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_rates[1] * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rates[2] * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rates[3] * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    if np.random.rand() < self.leader_selection_prob:\n                        swarm_leader = particles[np.random.choice(swarm_indices)]\n                    else:\n                        swarm_leader = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_leader - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                neighborhood_indices = np.random.choice(np.arange(self.pop_size), self.neighborhood_size, replace=False)\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "NovelPSODEOptimizer", "description": "A novel PSO-DE hybrid with stochastic leader selection and adaptive parameter tuning for improved convergence and robustness.", "configspace": "", "generation": 57, "fitness": 0.31601842361112015, "feedback": "The algorithm NovelPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8196898337481937, 0.8002442794459774, 0.8158761015374865, 0.8020812900182823, 0.8100105971315616, 0.8110618196873919, 0.8004008854373782, 0.8245022308801646, 0.8089655229107279, 0.6417876000048799, 0.5890867502287965, 0.5927751678494433, 0.6456976060549631, 0.6527862502614119, 0.6097896387424934, 0.6352886897509809, 0.5537788355477773, 0.5970433330758657, 0.11401498099362395, 0.3726056286843993, 0.16241924899234506, 0.13342518066837505, 0.1506754612028095, 0.1722300248880485, 0.14805204234537872, 0.1574918230738962, 0.15883839915685005, 0.1221447041873096, 0.10710959708929313, 0.12808323067877658, 0.12639701247095858, 0.10784110464910823, 0.11946661558187988, 0.1365761240540151, 0.1075087544579163, 0.11154021676135595, 0.9272463213093315, 0.9224703386641819, 0.932051016301106, 0.9385993207335054, 0.9226912831694091, 0.9342011164169302, 0.9483414539157788, 0.8872001520240539, 0.9321642056181243, 0.4002233444944223, 0.43192645585846545, 0.33860074286968034, 0.3957522895069532, 0.36208198595738117, 0.4372442140626587, 0.39468277722508127, 0.3737770066821713, 0.4496597490544548, 0.6982001211245441, 0.7341433000337815, 0.7462956681965327, 0.36116503595461746, 0.36411439339953144, 0.20579639796741267, 0.5419138467843418, 0.6108660879499832, 0.31132848399797475, 0.12767179951556973, 0.19136400590885583, 0.16836723728655856, 0.21371633422503877, 0.21996158403457566, 0.18303569595581193, 0.1918739906915189, 0.18905224426108613, 0.189499308030471, 0.2080421152486318, 0.19007455386283367, 0.34901828113356215, 0.1999987640703168, 0.20311344444889512, 0.18187304155589423, 0.20704191705157804, 0.21660632468466856, 0.20740025275023088, 0.03206013404588415, 0.00496406455750531, 0.00446746042930557, 0.007247296500353828, 9.999999999998899e-05, 0.02138305295427234, 0.0020356764185985865, 0.012197737875914383, 0.05305120815859432, 0.13554050470113177, 0.09338858924790527, 0.0732737757801768, 0.0324413851232912, 0.07106240350959725, 0.07471180332833305, 0.07511871765071787, 0.11507763261784931, 0.06696011736146501, 0.13314409648386427, 0.025705152542372933, 0.19012785679311128, 0.07103664856553349, 0.07659139311180263, 0.05971682490340413, 0.08079161953034963, 0.12886757135545157, 0.21940443175434743, 0.2350237395300988, 0.1740275661272782, 0.13205441627043368, 0.11016019565915325, 0.15189438080372042, 0.22046613301795837, 0.08503214042522578, 0.1820650350750843, 0.08515711668301551, 0.479333866863194, 0.5463707384302081, 0.511438167653294, 0.5729839807862036, 0.49112708896768686, 0.5111358416524798, 0.5289111041539646, 0.5338278881087685, 0.5388172035849252, 0.12490778843942973, 0.1502987750587439, 0.11290670747874176, 0.12109442949567839, 0.13508337793653502, 0.10609032566410825, 0.14372406641649815, 0.11341775941212107, 0.12891192404814955, 0.15345650648565046, 0.1569648628651037, 0.21662331871364549, 0.24297249656837272, 0.19825698912765022, 0.16415481880901628, 0.21483362785237237, 0.17378262140938883, 0.16847243724158756, 0.37362663906108506, 0.4437172102939223, 0.4160467033940606, 0.45240015876795525, 0.39968552428339044, 0.3630668479944926, 0.3912557589654282, 0.46040498035987243, 0.4058464184530951, 0.31872383674517113, 0.30486260971179424, 0.3173503475137044, 0.23586472786842805, 0.2632508688784272, 0.23694118893827565, 0.2598131734652106, 0.28896326295326735, 0.30286095548133063, 0.19790852032728157, 0.21350135583272567, 0.21267463371640394, 0.2194285336051487, 0.21082212116906363, 0.20275005400158863, 0.19997436174430616, 0.19788767172331378, 0.20386653296939594, 0.4767230766186875, 0.38596201585475665, 0.22914373098569418, 0.22256661039955994, 0.21127612309505905, 0.22568654459058413, 0.5570645252014419, 0.1903371542408151, 0.19692165920857063, 0.18599520609046294, 0.7377302469013314, 0.18416034700028228, 0.9071929601056243, 0.19844002096300972, 0.8454767173868806, 0.18498302382440102, 0.1501384153189982, 0.8336518256995806, 0.6880270670715467, 0.20620180185912274, 0.5917660106922762, 0.6843544420516088, 0.4220957890921909, 0.46579311495758735, 0.5766638765967224, 0.20893732735299775, 0.5702991351385129, 0.20491804670675062, 0.17852893704493633, 0.18415393348301645, 0.175614237906358, 0.1877774242980802, 0.19647942107610405, 0.18373456302627478, 0.20729962478328545, 0.1844120402886682, 0.08896071650339887, 0.08975102833806847, 0.07925833121808823, 0.08494240143130061, 0.08312102721470149, 0.08127236300870211, 0.08612927519975144, 0.07812938909712519, 0.09043179450564598]}, "mutation_prompt": null}
{"id": "b597b3c3-0b32-43da-a0af-7a1116e9a2e5", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizerV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            # Adaptive parameters with time-varying change\n            iteration_ratio = evaluations / self.budget\n            self.c1 = 1.7 + 0.5 * np.sin(np.pi * iteration_ratio)\n            self.c2 = 1.3 + 0.4 * np.cos(np.pi * iteration_ratio)\n            self.w = 0.4 + 0.2 * np.sin(2 * np.pi * iteration_ratio)\n            self.de_F = 0.5 + 0.3 * np.sin(iteration_ratio * np.pi)\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizerV2", "description": "A novel PSO-DE variant with adaptive time-varying parameters, memory-enhanced crossover, and dynamic restart mechanisms for diverse problem landscapes.", "configspace": "", "generation": 58, "fitness": 0.3067371613622701, "feedback": "The algorithm EnhancedPSODEOptimizerV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.72457600390005, 0.7255880140967308, 0.719849498384691, 0.7418104973026314, 0.7300255495439929, 0.7353752842803074, 0.7497002543108734, 0.7270429781664706, 0.7211286627200719, 0.5157679832063982, 0.5002036852312008, 0.48415195755679796, 0.48143414164336396, 0.46828763237885707, 0.46731566997030116, 0.4595082368401481, 0.4390951557731785, 0.46653237599237374, 0.1542739700101725, 0.24687485719540314, 0.11973689868847737, 0.12495174839515477, 0.13505576971500177, 0.1966396429881141, 0.13372433138256024, 0.10414775978497659, 0.14164080904477616, 0.12287151828496734, 0.11588414908436007, 0.10904971413089881, 0.10140882843721244, 0.09967199593319842, 0.10220009345365155, 0.10944192270746989, 0.11103040530267083, 0.10846639411385639, 0.9163534771621771, 0.9322001057681887, 0.9338390207343401, 0.9235016240711972, 0.9176298915161526, 0.9414538224623082, 0.9505322251957937, 0.9165645220227271, 0.9194266622162638, 0.3761885835289327, 0.34301576310343007, 0.32209716204099437, 0.40764109824787687, 0.35021330151012875, 0.33451991603877107, 0.36229727178660165, 0.3086952327276623, 0.39239975891180323, 0.8121050349895822, 0.6404979041480914, 0.7973265671624468, 0.6875622726939422, 0.2165985776056556, 0.2074564026804978, 0.2642682098752499, 0.43864137327349295, 0.50261275337495, 0.22924336897366082, 0.17932569640986384, 0.2074536219340155, 0.17461255877598547, 0.18467485195272293, 0.24353831630546707, 0.19104800970793068, 0.17572215338917563, 0.2610620042435814, 0.2024386438056689, 0.20960107617955936, 0.21277627797276222, 0.20831939459323634, 0.2122128678493388, 0.20977053447238037, 0.2225742048628978, 0.2335194302123268, 0.2007263460800479, 0.02963245051794805, 0.006031015749095259, 0.01673639383655423, 0.022709950454680383, 0.0030644214792612257, 9.999999999998899e-05, 0.007187555065768181, 0.013178428949614296, 0.041648470813744676, 0.10798163241202763, 0.06732065872356818, 0.07767773574828751, 0.068958454001666, 0.0362024001494341, 0.0374770657726784, 0.10842007090493877, 0.08127909503438768, 0.10019014462371711, 0.03442744920783447, 0.10736470346995197, 0.09605963755987834, 0.07979292517279557, 0.09779321646528172, 0.07927637901751472, 0.11296834236413655, 0.14106329059083123, 0.05393381214791593, 0.17040480792870616, 0.1849388447830238, 0.11686344569610096, 0.14468759385982521, 0.14078744613543526, 0.17758595232090812, 0.19318965400135446, 0.11953335241370255, 0.1199040580154197, 0.5268347034950374, 0.5030685108220962, 0.5002518765094279, 0.49063170512139487, 0.4711046002436907, 0.4740459095749412, 0.5110223558849024, 0.5043243295190455, 0.496826434294391, 0.10744960823788097, 0.11724546183066487, 0.1219087753328919, 0.14412305650725343, 0.09568695518169223, 0.12545110102236956, 0.10923337287386026, 0.14355860756269923, 0.10112674527384446, 0.35077357927573716, 0.20610082342514746, 0.17735452262578533, 0.30624950130194106, 0.2286320393814123, 0.20569534985405002, 0.3239898109053858, 0.1455312080305302, 0.24708981836341704, 0.38253754673868456, 0.36506519358241474, 0.3621826375546727, 0.37325787738051497, 0.37778782211776696, 0.3842281624891394, 0.36946413372594666, 0.37492589328116877, 0.38965961297736484, 0.29412481288400016, 0.26781117518510444, 0.2514851567706321, 0.2762066712657294, 0.2690475033738625, 0.2648813673721412, 0.24354004025014897, 0.3037611078856386, 0.28680132110380185, 0.19220081967556313, 0.22701285484310707, 0.19282884757997132, 0.19566828591442387, 0.20045570213338593, 0.1977854994068673, 0.21615683739327285, 0.21161843826138804, 0.1869210356009532, 0.1892234757730411, 0.23224628867829122, 0.21401064189657448, 0.21691081986605398, 0.33558965994268297, 0.23884488787779645, 0.182444289555181, 0.3819548178584633, 0.1864531275519382, 0.7957881834978997, 0.7668247479207062, 0.18635470209329308, 0.8504506958693069, 0.7460318731909923, 0.1958785083453296, 0.733327560993456, 0.809489380545243, 0.7922897840644935, 0.5124539065200426, 0.5044397954347604, 0.6033836665937509, 0.4887326870100185, 0.6337444883401446, 0.5419075760133782, 0.4915684861061529, 0.47247927012485513, 0.10440553598584101, 0.19217896017837766, 0.1819334506939726, 0.17892651702715578, 0.16811132236556203, 0.16962857420935884, 0.17896765985206853, 0.17572609090532276, 0.19511356455301843, 0.18613081224753503, 0.08503061783353938, 0.08059852941964651, 0.08982302537567899, 0.08952475527660686, 0.08392089054926732, 0.08724633695484896, 0.08636296045558989, 0.08054761534629684, 0.080406056248425]}, "mutation_prompt": null}
{"id": "7ff0bbdd-124b-4b95-a193-f02181ff5415", "solution": "import numpy as np\n\nclass RefinedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 5  # Increased number of swarms for better diversity\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n        \n        inertia_adaptation = lambda w0, t: w0 * (1 - t / self.budget)  # Dynamic inertia\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = inertia_adaptation(self.w, evaluations)  # Apply dynamic inertia\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "RefinedPSODEOptimizer", "description": "A refined PSO-DE hybrid with enhanced adaptive memory, dynamic inertia, and multi-swarm collaboration for optimized search efficiency.", "configspace": "", "generation": 59, "fitness": 0.32627526509738525, "feedback": "The algorithm RefinedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8322547986215518, 0.8290360505751855, 0.8462870284945653, 0.8406052967644975, 0.8190726068545879, 0.8596305280343318, 0.8163658703579197, 0.8442333893767284, 0.8159261791985909, 0.6337248402278866, 0.6968970177138625, 0.6985951439604599, 0.6925314174322936, 0.6591139574815708, 0.6735807170734331, 0.6428482333622725, 0.6602276400807646, 0.6810970911278229, 0.16825323831901118, 0.15305574979058656, 0.12582524808558215, 0.1289318692275525, 0.13663343083992419, 0.1521358389451345, 0.09826763051064669, 0.15434819873964734, 0.17047748368970184, 0.14577153160956824, 0.16703521152204537, 0.09754887168956483, 0.14458029346941226, 0.09214557054946604, 0.11070356571628037, 0.12441283366970346, 0.15023205175266685, 0.13747376940197842, 0.9390587471074731, 0.9509448299623455, 0.9435805438850221, 0.9326435672968942, 0.9063345796079436, 0.9227297349267856, 0.9513167968398761, 0.9364847197523362, 0.9098523482727918, 0.5115604864876153, 0.5382925046221352, 0.4597534740983049, 0.46806961519910784, 0.542516717093175, 0.4669651769485371, 0.5386992109641098, 0.32998987694252824, 0.4182754614964129, 0.34644116202850606, 0.35203954423216366, 0.3770908506912448, 0.27250555030442636, 0.849535185614188, 0.2661157071016762, 0.80660803219946, 0.5588146681090824, 0.8060562685491736, 0.1950084041273713, 0.18804580579352237, 0.29321461242544755, 0.12060644019876599, 0.21226126366230258, 0.12252264399142965, 0.1792440676862479, 0.2105534987860247, 0.19292743396095569, 0.18697511956442714, 0.17051265223797363, 0.12841560682721753, 0.16613373254362673, 0.1695149146369055, 0.1963362339330872, 0.20952690920281136, 0.1940266412199444, 0.21402246361670085, 9.999999999998899e-05, 0.008417889830054981, 0.03062224724761875, 0.06867481071999448, 0.056011030304635834, 9.999999999998899e-05, 0.0505563852141071, 0.006747579885055033, 0.15136030344738882, 0.0706734263974711, 0.07118709770306342, 0.1744458604335396, 0.02820647974029178, 0.1299776573196263, 0.06419494008299076, 0.09386585624649357, 0.16159215073740563, 0.1133086554028434, 0.22242775283221095, 0.07652663878472776, 0.07786760521988212, 0.21138012389288474, 0.10244007077850914, 0.18809134143325779, 0.11086491214624528, 0.0938798260749365, 0.06910793263811832, 0.14914707142201167, 0.20682846756170692, 0.139335872505306, 0.2821303796361845, 0.22526561895548902, 0.1274714645021009, 0.1615956624718865, 0.10604231594776936, 0.08472908111729627, 0.5590115113899872, 0.5317377125594823, 0.5431368984476121, 0.5655054011943086, 0.5358571292240322, 0.5106910104962659, 0.5947107021450563, 0.558900615916408, 0.5257913680524687, 0.14012577013575045, 0.1144738909119909, 0.11590883293632759, 0.14490875534456715, 0.1303258364721832, 0.17789689990023638, 0.13344796951517024, 0.17059080559622963, 0.17893617060907085, 0.17903413800450385, 0.23198711975293962, 0.1861365499163279, 0.14896374781025368, 0.2366106778669328, 0.2152581884300997, 0.19247205026171688, 0.3050259898312465, 0.2955337613612409, 0.39671534133830366, 0.3745473973238578, 0.48301456179776037, 0.45616564080300015, 0.49212704085928394, 0.28951698099682743, 0.36255661960279684, 0.520770852093967, 0.4342374791846946, 0.34347958930650024, 0.3598972883371353, 0.30936122894758444, 0.3430338255125963, 0.3451625205901806, 0.23930575394665055, 0.3153906736693909, 0.3002031253156574, 0.30524126478770697, 0.227031224669748, 0.21000457870682454, 0.23513597318639057, 0.2625061077033167, 0.25207139740901485, 0.19354427128537577, 0.22553316829029157, 0.2153403353723592, 0.23114313489271932, 0.22139854270885018, 0.6555099579496448, 0.5683203035378276, 0.24035856172380254, 0.21297316302877023, 0.21789192694080572, 0.19530121210312112, 0.20018022032849037, 0.20566678373868352, 0.18466961132567739, 0.803137021589019, 0.8127931117537028, 0.8822469663069246, 0.19628544320372832, 0.8460631063363806, 0.16069818079879716, 0.1672835033222092, 0.8086610713579571, 0.6532493766141669, 0.20597454910505475, 0.4480087152753962, 0.1674443160357303, 0.16838789232292894, 0.16651238714665983, 0.16552554470722758, 0.1657094761573562, 0.6804216535571086, 0.17326127789321055, 0.18159561298817328, 0.189157794444761, 0.21638274908569788, 0.1936072177023198, 0.19810681707992428, 0.19982924576453132, 0.18104940946087333, 0.18133245083424632, 0.09845353709694205, 0.08545398972882245, 0.09210241191768309, 0.09073329870426283, 0.09455369636515731, 0.09542074426699221, 0.09831914300254319, 0.0899703774084144, 0.1022795006543149]}, "mutation_prompt": null}
{"id": "27eb545f-ce9e-4fef-80d7-011d719c39cf", "solution": "import numpy as np\n\nclass RefinedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.04\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 5\n        self.memory_factor = 0.15\n        self.restart_prob = 0.04\n        self.neighborhood_size = 7\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "RefinedPSODEOptimizer", "description": "A refined PSO-DE hybrid with learning-based adaptation and strategic restarts for robust convergence.", "configspace": "", "generation": 60, "fitness": 0.3176386648989278, "feedback": "The algorithm RefinedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7878137123931696, 0.8001538770317596, 0.7692235554714764, 0.7756516962078943, 0.7952463439713303, 0.7535519420847859, 0.7991765594078258, 0.7906822468178165, 0.7579691874415642, 0.6192663304063747, 0.5292532987313692, 0.5572030238573769, 0.568009545883611, 0.5569008458900698, 0.5790299619022578, 0.5764349360249545, 0.58820248561598, 0.5400591170440237, 0.5847355564965205, 0.1347852610330338, 0.17429765277378906, 0.11229545375880334, 0.11435945497940592, 0.14037091894324005, 0.12301082585604195, 0.15713548350851247, 0.14702533607642088, 0.10608633418550328, 0.09392668805860671, 0.10744759557512984, 0.0919459033170702, 0.11053275164984011, 0.10893150011479158, 0.10297394809572002, 0.09963803259135617, 0.12671822817569378, 0.964588249201028, 0.9434927567480953, 0.9463162809180689, 0.9298824669397603, 0.9148282724200792, 0.9733308045771604, 0.9484761466000414, 0.916789967973729, 0.9170467668772646, 0.48291316713690835, 0.4486098105761722, 0.38486038814989, 0.5661436758847039, 0.42203246745128586, 0.3810891458317217, 0.4341807669835712, 0.4243545273245136, 0.42797756514055774, 0.7377748691659195, 0.7966181581010213, 0.33154724376095135, 0.2676427678233205, 0.7462287064288892, 0.410696259743623, 0.647304528089091, 0.36017266577383666, 0.5994845316179328, 0.18614071671435473, 0.20106993337179024, 0.20217933086655215, 0.18930236718590276, 0.2506581281512291, 0.16654107989341826, 0.2062563984286443, 0.19467397851956825, 0.2342178059499752, 0.20173534480636002, 0.16887633657066325, 0.20829787381264908, 0.2513812293415686, 0.24470873833495455, 0.2133945663971354, 0.21841947342230916, 0.4289318554968171, 0.2953407882255794, 0.013023369371089943, 0.05590258786687141, 0.0006359485675911936, 0.0026506135035355705, 9.999999999998899e-05, 9.999999999998899e-05, 0.03967461373767234, 9.999999999998899e-05, 9.999999999998899e-05, 0.05303404475590001, 0.08295326476621634, 0.08606959324324504, 0.10662528888319778, 0.07983314514240936, 0.1253323427857309, 0.04687227755355472, 0.12907984099197634, 0.09152254479814914, 0.10260341141164009, 0.13219874082816163, 0.21161166375502127, 0.08673236549435093, 0.06795690835855817, 0.10848271273658916, 0.097411122683016, 0.2199358231136478, 0.1039890487824725, 0.18036283883355375, 0.17559875923006363, 0.10236695816641062, 0.2595107579151614, 0.13428772520083698, 0.2833607423241018, 0.2118301976664737, 0.11721684055334514, 0.205893437969628, 0.5047973814031236, 0.4844711430701222, 0.5314612836701549, 0.5131349904809885, 0.5409121553486211, 0.5000876347349635, 0.5769748659175384, 0.5087764998323777, 0.5170739515956011, 0.14774783793782842, 0.13060967830810621, 0.151235591412214, 0.14842396598409469, 0.12115336804429022, 0.13653047294630127, 0.13891035386305317, 0.13269037278045293, 0.13869829952746127, 0.21461517744960323, 0.2735557227883636, 0.174449707458049, 0.16616706147120186, 0.1763470330867578, 0.23111321799552076, 0.2152181577983352, 0.185278360698366, 0.2447532919210722, 0.44988889877253413, 0.4050620338100128, 0.3713447629267348, 0.3703642294308809, 0.3104276855559852, 0.31659148558919226, 0.38399023932045306, 0.43075816056971483, 0.35602852340960955, 0.22833998213405848, 0.2419750556139637, 0.3051319686659545, 0.28093741660760096, 0.3220669889151363, 0.2734965444833064, 0.2778853356591008, 0.2851071618327977, 0.25053748244588125, 0.20304292258612122, 0.2375100876361621, 0.19598693869901318, 0.21380509027236638, 0.21796263422655582, 0.18792179995569036, 0.21238825597279387, 0.21237393424974738, 0.22804935145875194, 0.1991436794537067, 0.1992419013958654, 0.21443641407361602, 0.19197176395948568, 0.192442306338375, 0.21232542568482005, 0.607872648038464, 0.21856423614486808, 0.21476114655820688, 0.8176366583524537, 0.84033501761861, 0.18153975757424468, 0.17104960076775733, 0.8124426906237601, 0.1948217226233815, 0.16479049844930782, 0.7849413124529594, 0.8172760755564941, 0.6936924953838874, 0.19909971296791784, 0.5902834304672793, 0.16657729759061313, 0.203465771945342, 0.7173865234778429, 0.20881016336015623, 0.16573607631138842, 0.7054957659995427, 0.18447703979610097, 0.19600867158636515, 0.18173165801652857, 0.19614866960813837, 0.1822700441915378, 0.1894362999692628, 0.17723364715417833, 0.19019832459925268, 0.19881016780518257, 0.08806171813595298, 0.09002002864606251, 0.07994884090608356, 0.0914083998475167, 0.08533475009624403, 0.08011825118149629, 0.08202591448551011, 0.08031626049076146, 0.09458626506528944]}, "mutation_prompt": null}
{"id": "9b9bbbb8-c41c-4c41-811c-254f0ccb6411", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A refined hybrid PSO-DE algorithm with adaptive swarms, memory improvement, and dynamic neighborhood reshaping for robust optimization.", "configspace": "", "generation": 61, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "c8f2eba5-2ddf-47f2-aa7a-f62ef689257c", "solution": "import numpy as np\n\nclass QuantumEnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.quantum_prob = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n        \n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.quantum_prob:\n                    quantum_particle = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    quantum_score = func(quantum_particle)\n                    evaluations += 1\n                    if quantum_score < scores[i]:\n                        particles[i] = quantum_particle\n                        scores[i] = quantum_score\n                        personal_best_positions[i] = quantum_particle\n                        personal_best_scores[i] = quantum_score\n                else:\n                    sorted_indices = np.argsort(personal_best_scores)\n                    neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                    a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                    mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                    trial = np.copy(particles[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_CR or j == j_rand:\n                            trial[j] = mutant[j]\n                    trial_score = func(trial)\n                    if evaluations < self.budget and trial_score < scores[i]:\n                        particles[i] = trial\n                        scores[i] = trial_score\n                        personal_best_positions[i] = trial\n                        personal_best_scores[i] = trial_score\n                        evaluations += 1\n\n        return global_best_position, global_best_score", "name": "QuantumEnhancedPSODEOptimizer", "description": "Adaptive Quantum-Inspired PSO-DE hybrid with convergence boosting through quantum particles' exploration and dynamic neighborhood mutation.", "configspace": "", "generation": 62, "fitness": 0.3302659913536804, "feedback": "The algorithm QuantumEnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8268136970351555, 0.8429538271052142, 0.8327396282945949, 0.8504529899554765, 0.8433721339283402, 0.8357144035993934, 0.8231565857654645, 0.8402226982888353, 0.8251280483271535, 0.6694922416447365, 0.7052589989776319, 0.6347844683782395, 0.6495143563799487, 0.6397142961663596, 0.6737180180398679, 0.6386487783163493, 0.6959927690424257, 0.6872760611679716, 0.1532547710118901, 0.18107976040754947, 0.13602511753492286, 0.1374826199827488, 0.17725905492999205, 0.1645797731748465, 0.12205611452839205, 0.16795153574643495, 0.1373630130184772, 0.13946007835785035, 0.11088827073401886, 0.1430246568482293, 0.10595068587715595, 0.1068311600910673, 0.10764455820387264, 0.1153375991620813, 0.1354497525912991, 0.10726847937418493, 0.941100914166458, 0.9303886498833935, 0.9320393647139716, 0.9210473166711048, 0.89535455915177, 0.9427701595940304, 0.9243576749209392, 0.9082279288108817, 0.9241063029675489, 0.5378871680872336, 0.557174619261884, 0.510486921091013, 0.5900657437085007, 0.5936269095707833, 0.4612408103794008, 0.47873730341764, 0.503590381763633, 0.5442606515637488, 0.8286154634096597, 0.32511862191448293, 0.5714740495463109, 0.21076570153818197, 0.6979063950367359, 0.20999538161719833, 0.7717734978723727, 0.21466675646013966, 0.7162329865848216, 0.4475460770731383, 0.1829272885101706, 0.1808967020173401, 0.301923680341461, 0.17485945013417037, 0.22710190288849819, 0.17766014002113784, 0.20751238048338327, 0.21902985469478153, 0.18113384823813905, 0.1748958096467459, 0.1776589971503416, 0.16648839520142156, 0.19454163224399268, 0.19488970836373842, 0.21637576942952463, 0.2299930324451226, 0.21066286194108985, 0.00011331084105403733, 0.06754719294540723, 0.04949965765135489, 9.999999999998899e-05, 0.00987441836378622, 0.054431444975187704, 0.013582557264138262, 0.055809327184735635, 0.04871152656263367, 0.15012358978969675, 0.0940256595235549, 0.1248244175275951, 0.09968554364746418, 0.10997482597549368, 0.03868131877128922, 0.13257662485337918, 0.13726895124490734, 0.12369409285656197, 0.27759996589263913, 0.05846099506459834, 0.09220785258567032, 0.12381331994012068, 0.13365492856907746, 0.09438831528584035, 0.11634749107756215, 0.28500045756518244, 0.07999841126580709, 0.19450266478806888, 0.13770075741818533, 0.07113008321939274, 0.05860977602940076, 0.20278623929331896, 0.2988300484799905, 0.10675538995159173, 0.22690791278857758, 0.08076907291011215, 0.5248473949571688, 0.5257008054740775, 0.5472130452346635, 0.5533440252019826, 0.5718434130110082, 0.5142107426814386, 0.5783702872600085, 0.545706749614197, 0.5647543239849249, 0.1188049402141893, 0.1257229056950444, 0.140539111453021, 0.1512175097380034, 0.10625798641455042, 0.14583201178112615, 0.11716257576558164, 0.13019583696211556, 0.14487445713764424, 0.3683042949927742, 0.25922626649656, 0.17362456143771887, 0.2729282321527394, 0.22937220399248903, 0.28154816363846846, 0.2217618868706721, 0.3190654869197427, 0.2299839569058998, 0.33959177582173705, 0.32541345438110436, 0.37590925250376406, 0.4093393790270997, 0.3490675844257345, 0.38947463536618854, 0.4793461441626343, 0.40355095299576793, 0.27374864149766964, 0.21208635299745915, 0.24985780338141217, 0.38380740056402984, 0.2641744856531433, 0.323595044009107, 0.34886036180842483, 0.25425262354798894, 0.2268945593513273, 0.24368942298244944, 0.22062973324970125, 0.2635502388203982, 0.22925158067789586, 0.22200798289797052, 0.22111640191965776, 0.23151078913041678, 0.21136051863969696, 0.2330014835045492, 0.1846974665670813, 0.18345575590699703, 0.2081080068982184, 0.19211428613452186, 0.2412312791050122, 0.20455265076193396, 0.197738194085332, 0.22232338904169258, 0.6931015051842817, 0.20723700562206115, 0.18444463301079672, 0.18503793006603886, 0.8543948754457266, 0.8725560252274478, 0.5618692814852426, 0.1983997628781553, 0.7787426678424711, 0.8737681661702205, 0.8848869472709826, 0.6550627851378749, 0.208333751434156, 0.5696158204458038, 0.6109843441304206, 0.20802663894263207, 0.16723593876352438, 0.15333198071312037, 0.6236773584945431, 0.12832538366531465, 0.17104334143532196, 0.17430165896678373, 0.17637609258098785, 0.18059301447307663, 0.17887654081538717, 0.1755684212198113, 0.18252511793067117, 0.1826222958885061, 0.18519481428984452, 0.12656670645452428, 0.0998073129176591, 0.10923990725157395, 0.08874199747639433, 0.0876605709477215, 0.09570985534810261, 0.11299676748253318, 0.09043824426251357, 0.09547695429722591]}, "mutation_prompt": null}
{"id": "a65aaf88-8d1d-4e9c-9eda-0d12bad4a268", "solution": "import numpy as np\n\nclass EnhancedPSODEV2Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n                # Crowding-based selection\n                if evaluations < self.budget and np.random.rand() < 0.5:\n                    crowd_indices = sorted_indices[max(0, i-1):min(self.pop_size, i+2)]\n                    crowd_scores = scores[crowd_indices]\n                    worst_index = crowd_indices[np.argmax(crowd_scores)]\n                    particles[worst_index] = particles[i]\n                    scores[worst_index] = scores[i]\n                    personal_best_positions[worst_index] = personal_best_positions[i]\n                    personal_best_scores[worst_index] = personal_best_scores[i]\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEV2Optimizer", "description": "A hybrid PSO-DE with adaptive parameter tuning, improved exploration via stochastic restarts, and crowding-based selection for better convergence.", "configspace": "", "generation": 63, "fitness": 0.3195847835797094, "feedback": "The algorithm EnhancedPSODEV2Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8596782648173917, 0.8272509642365764, 0.8632446293766243, 0.8306681141524146, 0.8410959378236667, 0.853655251315449, 0.8425102997226357, 0.834321762523324, 0.8284779198033083, 0.6169479527278923, 0.6820242956645526, 0.6436714918238047, 0.6599472323009076, 0.6581252051135055, 0.6929787150784603, 0.6383065110767703, 0.6759425748810883, 0.6692802772606825, 0.10816474614611382, 0.13721439064829355, 0.12987989536280198, 0.1243735191264348, 0.10417994439943501, 0.14894705537946262, 0.12560173052676094, 0.1408371311577461, 0.1507369422155591, 0.12336163446348891, 0.11374125074455455, 0.09035108174503781, 0.11578149334940213, 0.12320411136762666, 0.13562352595909688, 0.11269554353801337, 0.09924889777879997, 0.09013987793754608, 0.9424751903635138, 0.952818682974692, 0.9252929852447335, 0.9404828471332054, 0.9282000523445919, 0.9365803759560761, 0.9580139974598778, 0.9425474052348124, 0.9591034115933106, 0.6128124488676473, 0.5698340418411254, 0.5555578778629198, 0.5772008585048418, 0.5273290654592672, 0.4574828207381796, 0.5367005125738715, 0.5607109620307361, 0.5329323105950393, 0.22586072638489518, 0.7852846515238958, 0.22568592789283115, 0.27711533300338265, 0.7026582577509328, 0.606607107692674, 0.7550376112512012, 0.2371265099744413, 0.8475770142404268, 0.22780607731923852, 0.21756974712387933, 0.18714363503953468, 0.12736756692012274, 0.1764723237232385, 0.230001179492214, 0.18200223203381305, 0.2264947751711519, 0.28898235057135757, 0.17668667569032737, 0.13039791563953473, 0.19898678863098684, 0.19896642985852975, 0.19854429682356245, 0.19944961185180932, 0.2340317240412786, 0.2251977503866216, 0.24622419764693604, 0.0029084449214745733, 0.0005922690180301116, 0.020734465893186504, 9.999999999998899e-05, 0.03023170477830317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010154487875871254, 0.053719272285065234, 0.08721542965857132, 0.208384490065618, 0.04229609323503736, 0.05459371255048495, 0.057016854299486996, 0.08724783005819026, 0.12128136294030734, 0.07508494259098375, 0.04881938183651802, 0.030911069968602156, 0.043356683859897216, 0.11188840033409919, 0.08782081079773274, 0.09336925385696282, 0.10302023861974807, 0.2680188052524589, 0.23435705063628998, 0.22964927166312843, 0.2410466893152594, 0.13426306180600334, 0.058783388272773074, 0.16157057846798883, 0.10436689711639446, 0.26135801674090764, 0.11618402371529535, 0.08234117909896521, 0.5272077524104455, 0.5880426281316524, 0.5354233151048957, 0.5457766166045299, 0.5411928481323464, 0.5384653873523297, 0.5844102261910669, 0.5441691630309805, 0.5443890687842943, 0.14772096403263657, 0.14734861748489914, 0.10827534523068794, 0.09788357006939719, 0.1133518043012891, 0.17884863384336314, 0.09156787490178009, 0.13838883466541407, 0.15055302715861252, 0.33494635005705686, 0.49200892636789606, 0.31568296184135947, 0.198004378801658, 0.21464824052329445, 0.19489159716964943, 0.2575038610593119, 0.416531517226725, 0.4644894594914747, 0.3232320305097963, 0.4284114614234338, 0.4132229959960647, 0.43695511707413803, 0.436251407514071, 0.3351022130091472, 0.43938184578284933, 0.5114935472289576, 0.5012789975994938, 0.23318651629702813, 0.2632026333001122, 0.2809406498478809, 0.2748603407134609, 0.2755028446679767, 0.3660249476091846, 0.2828281321296928, 0.31673430045011164, 0.235960181893218, 0.19962090555295964, 0.19330813225898746, 0.19841677799067448, 0.19837883890828933, 0.1959079764530729, 0.2057835665011324, 0.20239101644321744, 0.19536718099850703, 0.26734709842084203, 0.5228969062650441, 0.189821018064685, 0.188526852802409, 0.21929444874239756, 0.20601406887287355, 0.22206483309431613, 0.21635449674018614, 0.18648089823802982, 0.19509058202749852, 0.8787415916280812, 0.1853744240330648, 0.1454647434277082, 0.8741349523117956, 0.19795812704700988, 0.1974232592701125, 0.1220145596718718, 0.15871568929109092, 0.17552864962763304, 0.6099266579067315, 0.20677534991926783, 0.7071256979801794, 0.20792567746371526, 0.1498994512806432, 0.16404792313003713, 0.6937142848472239, 0.10315788554551131, 0.7672941908496598, 0.18604862068550165, 0.18206720342513105, 0.17602289225903156, 0.1815787419009548, 0.184818672291424, 0.1870285724748615, 0.18293739899688788, 0.1776867421001278, 0.18944117061316623, 0.0820836840181901, 0.08412895209168214, 0.08956261944771271, 0.08684446019078951, 0.08485076814205472, 0.08668103638647429, 0.08307126940178933, 0.08807790681840966, 0.07625009781877756]}, "mutation_prompt": null}
{"id": "6dd4224a-a58f-43cd-85bd-dab2d164e3dd", "solution": "# Description: A PSO-DE hybrid utilizing adaptive parameters and dynamic neighborhood mutation for robust exploration and convergence.\n# Code:\nimport numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A PSO-DE hybrid utilizing adaptive parameters and dynamic neighborhood mutation for robust exploration and convergence.", "configspace": "", "generation": 64, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "499f24cd-6fd9-4a57-a601-ab44eeba5bbe", "solution": "import numpy as np\n\nclass AdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.velocity_decay = 0.99\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w * self.velocity_decay)\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive parameters, neighborhood-based mutation, and dynamic velocity adjustments for robust global search.", "configspace": "", "generation": 65, "fitness": 0.3230764881776179, "feedback": "The algorithm AdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8340959737067742, 0.8076015371579593, 0.8120964835850786, 0.8055906585621032, 0.8205316372404154, 0.8218158174722857, 0.8231258148483619, 0.8134101322802509, 0.8033924306487921, 0.6178111018764736, 0.6497578636921614, 0.6541892658974084, 0.6056928693552541, 0.6095975707893735, 0.6368877008644052, 0.6373019618669263, 0.6078647284051999, 0.6624377058519608, 0.12803769040781676, 0.1632930438325204, 0.13019038667052152, 0.14972957847026558, 0.1677123249241106, 0.1654908033680873, 0.13971352983749707, 0.10698896831266669, 0.17545293314772914, 0.1057014029675385, 0.1474497584181509, 0.10676124568958023, 0.10613285203982215, 0.0983183720273737, 0.11450179912646274, 0.11951375244776086, 0.13883626148739436, 0.10628985082791564, 0.9423607473300024, 0.937509866530032, 0.9343282994759472, 0.9473563259416509, 0.9366925017472202, 0.9513181915828538, 0.9675138665789472, 0.9269818479332159, 0.9577650024533252, 0.524561956873647, 0.48851201278712164, 0.49576797419553664, 0.44383836394660825, 0.4996777041161471, 0.46335872629109986, 0.4836178978090553, 0.4934220219115155, 0.49091890578784625, 0.6922731817906016, 0.7656042864137371, 0.3634830928169427, 0.2704171825158397, 0.5778331251067816, 0.7363313070096518, 0.8260127601824632, 0.23338981094206301, 0.23417058896245713, 0.18271647155328052, 0.1851398043558915, 0.17913723258527647, 0.1303988004232136, 0.1885757593550944, 0.12005574163022936, 0.5178704994101813, 0.18290203874106525, 0.2707424942080946, 0.2134448684318876, 0.19631619864690109, 0.19189220277738783, 0.19979006554328116, 0.19206177393315116, 0.22382251698704125, 0.25211169200100625, 0.22409538916766425, 0.1899499976393617, 9.999999999998899e-05, 0.015246095104842428, 9.999999999998899e-05, 9.999999999998899e-05, 0.052576720140020905, 0.017919167211597253, 0.0016106798062770489, 0.030639969990460814, 0.04275890191505749, 0.13548063983332392, 0.1036700216264066, 0.06061579254599947, 0.08673173481649488, 0.06538442614408557, 0.02566516095631355, 0.12952754706655523, 0.10441847113634017, 0.10467795475290531, 0.12695720699006452, 0.08072966206881516, 0.11463253428527309, 0.0851865927097446, 0.27843551069227646, 0.16159230275223435, 0.13567827322447068, 0.14324445950503684, 0.0808940717149571, 0.17943885814690963, 0.27213065264781355, 0.1051913720317702, 0.30868985621648304, 0.15682461417139182, 0.20110098489493167, 0.1566907997154261, 0.1500733146842136, 0.18641080405989574, 0.5021158434475166, 0.568083453600567, 0.5080515889783072, 0.5337023413815815, 0.5002612437495777, 0.5253228514050594, 0.5900921081614436, 0.5241144743691107, 0.5752550294427932, 0.11915799939277671, 0.14873928293113226, 0.12195509288890405, 0.10998605304251818, 0.13421631976198134, 0.1329729824382121, 0.12452586045545011, 0.11340259191118052, 0.141237926132875, 0.22898289157257046, 0.16215441563363053, 0.3714217357819455, 0.2951312727226868, 0.27550114462165165, 0.2026825566943775, 0.19790955821847966, 0.34292742266591336, 0.2559650032270012, 0.4366739965698877, 0.36079899329609033, 0.3479331860592275, 0.3509967676553556, 0.41969380328615624, 0.34443464317759553, 0.46094808542983345, 0.42668720965139695, 0.4434790598293339, 0.24794251104802956, 0.21862206915010618, 0.299057231728734, 0.2850213080948524, 0.31339739874068095, 0.2825232418034702, 0.21228070815704192, 0.3002082646007711, 0.30575213898705256, 0.23476611452859064, 0.22930863487654218, 0.21523140595109203, 0.21064785724758361, 0.20301442017345106, 0.2084482486159398, 0.22395896425280803, 0.20731764650358253, 0.2457716494017591, 0.23720606053137194, 0.202469289624283, 0.24086679338655936, 0.666915657858732, 0.24403837634544645, 0.23966497182971347, 0.1899533589446576, 0.23136032214632596, 0.21295591936057923, 0.18642096427089927, 0.19550599017371018, 0.18485747748996095, 0.8282816754413741, 0.19619171356969256, 0.1980500236024304, 0.8338028956204715, 0.8088727610132387, 0.15999281342301197, 0.7382455475373109, 0.2094323626049246, 0.7689005267748985, 0.2060884755411102, 0.16793605108121135, 0.5136094981644419, 0.20148615191202157, 0.668649928051785, 0.6403052083162808, 0.18874256161613379, 0.1979935657446843, 0.17749034586932144, 0.17909796365689434, 0.18267508889832762, 0.2103791092941626, 0.1810383349773974, 0.19824789195337023, 0.19155640708196653, 0.0971418068070592, 0.09729687021814948, 0.11909542459417499, 0.09078515210994831, 0.09422632055991631, 0.09189878819376185, 0.07765407694315218, 0.08723586682361495, 0.08863839487568226]}, "mutation_prompt": null}
{"id": "5130c389-6fe2-49d3-af4a-5bf7a20646da", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.diversity_threshold = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n            \n            if np.std(scores) < self.diversity_threshold:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A novel PSO-DE hybrid with adaptive diversity management and elite-driven mutation for enhanced robustness and convergence.", "configspace": "", "generation": 66, "fitness": 0.34006630513515623, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8352740480558997, 0.8512127954383785, 0.8127124914501138, 0.8305440474448725, 0.8301557460880324, 0.7806968771639702, 0.8417799252170742, 0.8030940198164579, 0.806967886877121, 0.6220323644736445, 0.6418103922842607, 0.5519612907752817, 0.7023418675401927, 0.6592917943148965, 0.6782884299306771, 0.6717915637231435, 0.6567094283214706, 0.6359210443001619, 0.13989429137014175, 0.11331846235470489, 0.38296160272779933, 0.14212901945856626, 0.16737510448394333, 0.13144161289132317, 0.6137621358709366, 0.1710752263415818, 0.1639974297528186, 0.137859634764256, 0.12715541459363267, 0.11543094615577487, 0.1458098797366989, 0.13749142856159235, 0.40668186050127697, 0.137130094139561, 0.12827470962559295, 0.14110306044925924, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.5393098586118195, 0.612632888814878, 0.5534666127454858, 0.5777172754298705, 0.5261383468148995, 0.5341003744147546, 0.5144047438147509, 0.5111410507703553, 0.49219052533207297, 0.5587590483920472, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.35910861388970283, 0.23147897892381852, 0.20276824343642552, 0.31749927842704206, 0.16344395601462403, 0.12668420880135267, 0.19767607498873863, 0.16555725049514114, 0.19538209976297727, 0.1800788363822894, 0.19423636425085555, 0.21405415821632556, 0.29094181882949555, 0.4022174601787497, 0.21612346144106365, 0.21774785891886206, 0.20853551104053925, 0.22542948512957095, 0.18726396814005675, 0.21574173708281275, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299663191850968, 0.05427835021639826, 0.07963024747201963, 0.07307474721447793, 0.07796254553725812, 0.2593595581515029, 0.1745986236761219, 0.16985249149895265, 0.15349597945406646, 0.12878773528526233, 0.26330652930522924, 0.25533977708148103, 0.27685122235990733, 0.2037698715459163, 0.22489434094016691, 0.07937760216820189, 0.10611688356165228, 0.11578436296380623, 0.5424700835605885, 0.5620240337180542, 0.5387522091504577, 0.5256835905943519, 0.5199425094442951, 0.5509167718899939, 0.5483511279054867, 0.5638665718527706, 0.547187310375516, 0.1372516001757822, 0.17615070327857285, 0.09302208615567287, 0.1494873166825772, 0.10736401644717275, 0.09267752118257977, 0.15483749772251543, 0.17449136465226145, 0.14854126071427054, 0.21662506657273028, 0.18951001658192912, 0.2789355410227208, 0.3552567186451271, 0.30326076788123124, 0.34311586683141493, 0.4896975361616974, 0.24200003532325198, 0.22439977452117432, 0.30441134919461676, 0.45767201318308404, 0.3268175608491177, 0.3758873994115868, 0.4262010320180697, 0.42318078423348626, 0.4451480271936402, 0.46330917797155824, 0.4633048248040835, 0.2819753138371982, 0.26607606526299, 0.2981310320862196, 0.3452723561219537, 0.31230956478596494, 0.27558732607423575, 0.27646201367553924, 0.2907794836975123, 0.31584334206641607, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.2018165672621064, 0.5968059820133362, 0.22908789699722187, 0.6339631404857552, 0.18765148062297465, 0.24756327754978458, 0.18517925791063572, 0.5877102955945162, 0.19003339465178082, 0.18490381505239029, 0.1860915579533633, 0.8825333770944284, 0.9025765210858474, 0.8400969090807162, 0.1970545962835446, 0.8504504049044086, 0.16680530763904589, 0.20651519914822825, 0.4918893330928218, 0.21125407062539958, 0.5177406628428781, 0.6225358217953737, 0.20798046362916633, 0.15429195714641153, 0.5938180645215527, 0.10470558259620844, 0.16412022954012062, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963781900412504, 0.09091313770712717, 0.08729371355411242, 0.0982159586964324, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.08548960407710071]}, "mutation_prompt": null}
{"id": "f6146758-a7da-43db-af6a-1bca9c97e170", "solution": "import numpy as np\n\nclass AdvancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.6  # Slightly reduced cognitive component\n        self.c2 = 1.4  # Slightly increased social component\n        self.w = 0.5   # Increased inertia weight for better exploration\n        self.de_F = 0.8 # Increased differential weight for diversity\n        self.de_CR = 0.9 # Increased crossover rate for diversity\n        self.adaptive_c1_rate = 0.035  # Adjusted adaptive rates\n        self.adaptive_c2_rate = 0.065\n        self.adaptive_w_rate = 0.025\n        self.adaptive_de_F_rate = 0.035\n        self.num_swarms = 5  # Increased number of swarms\n        self.memory_factor = 0.1\n        self.restart_prob = 0.06  # Slightly increased restart probability\n        self.neighborhood_size = 6  # Altered neighborhood size\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.4, self.c2 + self.adaptive_c2_rate * np.random.rand())  # Adjusted max c2\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())  # Adjusted min w\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())  # Adjusted min de_F\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdvancedPSODEOptimizer", "description": "An improved hybrid PSO-DE approach with modified adaptive rates and strategic diversification techniques for enhanced flexibility and convergence.", "configspace": "", "generation": 67, "fitness": 0.31731640268172767, "feedback": "The algorithm AdvancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7642678831225711, 0.7516311580455095, 0.7933810856789016, 0.8045221010836657, 0.7628535207399235, 0.7931080498422659, 0.8187449871007015, 0.7669862342705481, 0.7732852710759831, 0.5903103297486347, 0.5106951192066567, 0.6016571911299307, 0.5226915249754617, 0.5509436081712782, 0.582180998851755, 0.5834668422984763, 0.5697761634069949, 0.5323001089648242, 0.1510005379410626, 0.1336000340615786, 0.12233759100102504, 0.16775520211757722, 0.11192310724900711, 0.14812278206621632, 0.1740459415068415, 0.16175487075719452, 0.1534030385853321, 0.09209677553222939, 0.09893635629294728, 0.09617592015522436, 0.14454102650935274, 0.12181191968064486, 0.09306448488463614, 0.13254138025564421, 0.09527120075781692, 0.14006950239485128, 0.9444232764392212, 0.9529418424646413, 0.9443797638410818, 0.9421058443519837, 0.9336548977154642, 0.9337614270591894, 0.9475564829026266, 0.9314211886674374, 0.9236582759732934, 0.3977126443131782, 0.40955284643880396, 0.4095810579507957, 0.33345314812795046, 0.4463835210122966, 0.4151903437339568, 0.4250057324688812, 0.4162687485084918, 0.39362865549112813, 0.3593552313184645, 0.3693882248520939, 0.5376672655862427, 0.7638507154022952, 0.686858115013173, 0.35102583442095536, 0.7686892373429403, 0.6536730600616798, 0.6353283693903458, 0.22919033835355207, 0.17643780152363164, 0.19841171760202814, 0.17692892772019275, 0.20120419030752124, 0.2020737141286586, 0.21792610144065905, 0.18905926974734488, 0.2008391226511793, 0.19808865976453016, 0.19176439312563875, 0.19643502196833307, 0.22411767073393662, 0.22786458240344643, 0.29846625105942326, 0.2137049010417743, 0.21407828713752064, 0.1883787012001561, 0.002406861952314432, 9.999999999998899e-05, 9.999999999998899e-05, 0.014476575795065005, 0.06331771211985271, 9.999999999998899e-05, 9.999999999998899e-05, 0.08936999896420061, 0.07402809542080135, 0.10961544738610629, 0.08533120584589671, 0.14974338796873277, 0.06316238421510412, 0.06898688567514999, 0.016827894859951953, 0.10185655090741053, 0.11426559195832342, 0.10203783636646035, 0.03205331639803821, 0.12131494583110347, 0.12685192488513053, 0.07709038979858629, 0.06212004205691135, 0.14524390467069137, 0.24394838464031643, 0.21045365724633347, 0.16465190099050087, 0.15876832951300934, 0.16596997469111174, 0.2656835934604084, 0.15132107682706974, 0.2261523914685094, 0.20868103627887102, 0.13424310325934452, 0.06490424849438947, 0.07793143872563835, 0.5435849142140272, 0.49379649997700337, 0.4820470998601484, 0.5274033839049665, 0.49442185538111305, 0.5270127067068762, 0.5933415540686106, 0.5568372537134738, 0.5054800750208094, 0.1446330946509724, 0.1327709974555853, 0.1102460187404164, 0.17285586009588683, 0.13099079752879128, 0.09861583285419184, 0.10900058570282634, 0.16431532237605495, 0.10584178424444746, 0.1927004890033518, 0.17843381552539372, 0.2490485485567835, 0.22446013545899068, 0.21770500842196983, 0.174183900063979, 0.20551018182623437, 0.26114734351630664, 0.20042104252372694, 0.3920506683775824, 0.37449806513642114, 0.3392528541023594, 0.36000278004859654, 0.38893148588292104, 0.3534442762866369, 0.4146413085530962, 0.4418167931384924, 0.365638142797889, 0.25806484282643505, 0.23128941434166805, 0.29537770876434266, 0.27743957240944206, 0.22421769121271962, 0.2389749416361452, 0.26874262270071336, 0.300143409541875, 0.25719986058060285, 0.19481652195520205, 0.1912646519667155, 0.21885895596961158, 0.20003367230649294, 0.18804566147289115, 0.2029913754405388, 0.2049486322663875, 0.19314024654767925, 0.22080214165444312, 0.1891848072530138, 0.2409737414346932, 0.20481214942950565, 0.2179316298480639, 0.19251612823949515, 0.20757409704089413, 0.2153299699776039, 0.19528992201336337, 0.19987309916865692, 0.18498071139219918, 0.827771265271392, 0.19290883864677477, 0.8157107700620838, 0.8171225552701604, 0.8146103093254038, 0.7313457869621431, 0.8245471873269926, 0.16070662152215665, 0.7104377832068265, 0.20754096919955056, 0.6604621071448631, 0.16682628376196118, 0.20417004973857267, 0.533160372490699, 0.555062156577035, 0.6686743875674578, 0.5915896309434086, 0.19949000342160694, 0.20272389706069416, 0.18817149360193164, 0.1985905786252491, 0.19460238651068962, 0.18452161368034425, 0.18158740185524536, 0.19426084040622815, 0.18719035315653787, 0.08385750219562982, 0.08855586146018957, 0.08295048916168746, 0.08211196056770109, 0.08674054321225466, 0.08641143694179954, 0.09372172730172335, 0.10556293083347246, 0.0987948882416465]}, "mutation_prompt": null}
{"id": "795dcddc-ed94-4715-baa2-1379fc171acb", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizerV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.02\n        self.neighborhood_size = 5\n        self.chaotic_factor = 0.9\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        chaotic_update = self.chaotic_factor * np.sin(velocities[i])  # Chaos exploration\n                        particles[i] = np.clip(particles[i] + chaotic_update + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizerV2", "description": "A dynamic PSO-DE hybrid with adaptive and reactive mechanisms, leveraging chaos-influenced exploration and social learning for robust optimization.", "configspace": "", "generation": 68, "fitness": 0.1909305388687305, "feedback": "The algorithm EnhancedPSODEOptimizerV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.4205444732263435, 0.36708528849226807, 0.44074113516978175, 0.3919306787305985, 0.3719538131728284, 0.33744816706193426, 0.3698952066982326, 0.3637126772882726, 0.3545462725170231, 0.09878165571992181, 0.11512736749541796, 0.023998014260382505, 0.03588981124123858, 0.14335339431015093, 0.07902566438753533, 0.09548674153462966, 0.08996148800833559, 0.060238368161974365, 0.10434942896633292, 0.0978388842564416, 0.08616065788822869, 0.08461432757266807, 0.10044254165171218, 0.07923922791823446, 0.08793170942833717, 0.09440314580662457, 0.08715156963355364, 0.10465174222319473, 0.08518984096686177, 0.09669313207966257, 0.08831019745644586, 0.0802799980472495, 0.07244682094827859, 0.0721087752545343, 0.080144141055426, 0.0702949715954776, 0.9504993494413354, 0.9503044226459749, 0.9560827010170125, 0.9618046252535953, 0.9454882555189833, 0.9439370234779363, 0.9665949686528345, 0.9362942019504767, 0.9526705549050436, 0.1720411239016536, 0.16318433978694558, 0.15963629775869426, 0.21842722488591282, 0.17075948454419554, 0.1463907096925252, 0.16824580179815551, 0.2120885835708718, 0.14395714821485783, 0.2141870872121825, 0.22365697425601372, 0.24583015382757523, 0.26076157307434156, 0.21605310420318968, 0.2410218125045137, 0.28492047470230475, 0.23047716276772745, 0.22008501803010927, 0.15317417117615129, 0.13342293402790895, 0.09637417462179587, 0.11053039441754575, 0.11363149154325147, 0.1099669125646564, 0.18750289361811323, 0.1253479995354082, 0.11537713436392283, 0.14405485130797535, 0.11750842005673401, 0.13641732337011003, 0.12108527371416078, 0.12076610785681718, 0.1234477872220121, 0.14766759177858024, 0.13836982316097368, 0.11731204399342043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024606282468064844, 9.999999999998899e-05, 9.999999999998899e-05, 0.06498387936786532, 0.07097613670979985, 0.048195722671540375, 0.08279251515562247, 0.06646223363891823, 0.0471759325544967, 0.10933181712528717, 0.050915559187911685, 0.04387326657232138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07425935251917526, 0.04596199724922412, 0.03996148322191462, 0.05745500936041792, 0.05713053645799737, 0.05718244029272501, 0.06968426992560639, 0.04198355915764529, 0.058336530160561284, 0.33205954390771697, 0.34155718737781826, 0.33334891418252754, 0.3711821921995636, 0.3716558905846863, 0.3256856750945216, 0.3386506083517551, 0.318038251901523, 0.38954500202715336, 0.08434554630365909, 0.09204556755864779, 0.08527515754814796, 0.10615787319934422, 0.07346003344532781, 0.07400373977323194, 0.08873586723391214, 0.0867480217872264, 0.09304263087574804, 0.14714895650717064, 0.14471251676464236, 0.19245663590649387, 0.13236659128009742, 0.14574555261980437, 0.16222886153411642, 0.2411794710331291, 0.17845100540916226, 0.12776231562723606, 0.23789413157647288, 0.23653654508703104, 0.2620091553465257, 0.2762116791611374, 0.22393336776173778, 0.23559118352685537, 0.23052772157547763, 0.2500644150166116, 0.23784929168940538, 0.19228333822610344, 0.1634883013749504, 0.16915747208056275, 0.1791810203013241, 0.16459582405851214, 0.17250663257575183, 0.1661949489274902, 0.17768506877328383, 0.17421409855191416, 0.17958019216482968, 0.18656624106829844, 0.18297089915973974, 0.2065993451204886, 0.1831901313196379, 0.17506317224055712, 0.18906273412313102, 0.20119863994222342, 0.18365176866852184, 0.18783019358238384, 0.1729981550826598, 0.1712205975629686, 0.1855848092370599, 0.18575317695819227, 0.18353382454443168, 0.17670494983106255, 0.18170139565972665, 0.19191584645151238, 0.17640860267148495, 0.34319587131483453, 0.36170988972654294, 0.4226426323444882, 0.3994593047670336, 0.1894687176378277, 0.4645772910935043, 0.40080165190446093, 0.4207921431381073, 0.4134560138454363, 0.20045473220472287, 0.19509278584492518, 0.25861200055600975, 0.1835400816668269, 0.16407590215986734, 0.20443424956815548, 0.13110830207096202, 0.16702820807363206, 0.18785262201643738, 0.17452494959696596, 0.17052023219815382, 0.16676047876426814, 0.19102398622942784, 0.19062329902844488, 0.1765843763890762, 0.18434493305972632, 0.18050985348023818, 0.0739194979836717, 0.07832538185222637, 0.07259584291380194, 0.08092328969957485, 0.07400869608040417, 0.08455324306368606, 0.07175077133024965, 0.07703676953190375, 0.06770277317142648]}, "mutation_prompt": null}
{"id": "fd6df497-5983-4b45-993c-45effbff660f", "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\n\nclass EnhancedPSO_DE_CMAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_clusters = 4\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.cov_learning_rate = 0.05\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        cluster_assignments = np.random.choice(self.num_clusters, self.pop_size)\n        cov_matrices = [np.eye(self.dim) for _ in range(self.num_clusters)]\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_clusters):\n                cluster_indices = np.where(cluster_assignments == s)[0]\n                if len(cluster_indices) > 1:\n                    cluster_global_best_position = personal_best_positions[cluster_indices[np.argmin(personal_best_scores[cluster_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in cluster_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (cluster_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component,\n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                    cluster_mean = np.mean(particles[cluster_indices], axis=0)\n                    cov_matrices[s] = (1 - self.cov_learning_rate) * cov_matrices[s] + self.cov_learning_rate * np.cov(particles[cluster_indices], rowvar=False)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n            for s in range(self.num_clusters):\n                cluster_indices = np.where(cluster_assignments == s)[0]\n                if len(cluster_indices) > 0:\n                    new_positions = multivariate_normal.rvs(mean=particles[np.argmin(scores)], cov=cov_matrices[s], size=len(cluster_indices))\n                    for i, pos in zip(cluster_indices, new_positions):\n                        pos = np.clip(pos, self.lower_bound, self.upper_bound)\n                        score = func(pos)\n                        evaluations += 1\n                        if evaluations < self.budget and score < scores[i]:\n                            particles[i] = pos\n                            scores[i] = score\n                            personal_best_positions[i] = pos\n                            personal_best_scores[i] = score\n\n        return global_best_position, global_best_score", "name": "EnhancedPSO_DE_CMAOptimizer", "description": "A PSO-DE hybrid with dynamic clustering and covariance matrix adaptation for enhanced exploration and convergence.", "configspace": "", "generation": 69, "fitness": 0.29542624283891555, "feedback": "The algorithm EnhancedPSO_DE_CMAOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7787822276866467, 0.7749403855384429, 0.7981482661343509, 0.8048301077577223, 0.7759709166890019, 0.7352512936027096, 0.7868279055639774, 0.8088149990728494, 0.7756439113048806, 0.48206015870138086, 0.5301840864521368, 0.49184852839973114, 0.5153154964257678, 0.5446796261081608, 0.4872744215040177, 0.5889739684625347, 0.5412120832141795, 0.5260061422582181, 0.16548025862920168, 0.14299291098837585, 0.1414869289199845, 0.13890936157231448, 0.15500841573618274, 0.1261038065214981, 0.13364305360434936, 0.1252602069163068, 0.1312271848866321, 0.10434665186977576, 0.10792332852847575, 0.1349559694985646, 0.11116839300228876, 0.10729522196135677, 0.12104273377228514, 0.10019330423908845, 0.10495943034176725, 0.11799226615387814, 0.9811327457499378, 0.97809154042561, 0.9628033779773618, 0.9554571533161125, 0.9501707517820139, 0.9417835639843328, 0.9266401768810328, 0.9467317633971583, 0.9735505674347829, 0.4476956558058054, 0.46232627380175695, 0.37305631512609816, 0.4546900256431836, 0.44291819797481935, 0.34343143519809205, 0.43703407312994946, 0.43725920233960713, 0.4051258390734167, 0.2290167651981897, 0.29792383391280397, 0.35411525377908315, 0.3642964449226581, 0.29099686898091337, 0.2228414391522412, 0.20939790515282986, 0.22942162280561917, 0.5535303525370895, 0.1804752391820924, 0.17838156755692836, 0.15135885942405225, 0.15450275965466842, 0.1698418740046873, 0.1817617094547792, 0.17089021056368925, 0.1753996409731191, 0.1986898894510748, 0.17673490842723205, 0.18327997276225072, 0.15829952222548815, 0.1720038336512949, 0.2183302302083988, 0.20854750882323336, 0.18923603873251638, 0.15898464634617415, 0.23460592703332805, 0.016807811398659056, 9.999999999998899e-05, 0.018709939815227727, 0.04965505197336528, 9.999999999998899e-05, 9.999999999998899e-05, 0.002944443240542771, 0.21689729160985816, 0.04792330378726928, 0.09506420764751489, 0.10560707019847848, 0.12121838923763939, 0.10023293006510137, 0.09717558499067558, 0.0670118845809966, 0.10422826936344776, 0.05098597088951207, 0.06862452872034153, 0.0763340933755089, 0.06576861217980645, 0.07253067835638971, 0.07005475894014013, 0.06455088479781257, 0.15966196182977888, 0.08560602183195665, 0.25547644767088296, 0.1295846657524924, 0.2280555292421822, 0.21486938432881464, 0.21690388567589658, 0.11337990509595552, 0.11787948224411615, 0.128852966360955, 0.0964105253219315, 0.14201508117543804, 0.1137152033726363, 0.491898374830531, 0.5297358171787373, 0.4972704594570013, 0.5508102000474108, 0.4784246446546837, 0.5113574240063707, 0.5020821300131357, 0.5345065626244637, 0.5372103447364354, 0.11955469102329042, 0.12923526648795092, 0.10168813614189787, 0.11527371720270463, 0.17578469564950427, 0.10626067416972096, 0.10816908252423452, 0.11500356942733447, 0.1210547171807893, 0.16889852442561182, 0.24389915383125027, 0.41301017947118235, 0.23100372979197048, 0.23214422700968385, 0.1762723032432454, 0.2771970556812755, 0.23093062223050753, 0.27473463792268427, 0.45870608223393017, 0.38097624733912827, 0.3955927967784427, 0.365135125537569, 0.32803799801420763, 0.4296287023749368, 0.4117718919866674, 0.44718612079309716, 0.4240145034231576, 0.2697269708037635, 0.3372630430950625, 0.2273826866575982, 0.23658590341239527, 0.30329547214403674, 0.29638144911846775, 0.28959758435832406, 0.33574806144093217, 0.3033091886492303, 0.20902980640360525, 0.22167866105787037, 0.1998203068047506, 0.21357196574124748, 0.2097063015574484, 0.1943064319814739, 0.19354968789628058, 0.20986319572903422, 0.21833240740159687, 0.20775372724832208, 0.19256701061282133, 0.20525770051533798, 0.21963031074770056, 0.18135128228457975, 0.24340960785218302, 0.49853819719093495, 0.2370222645026081, 0.4498246774074436, 0.16493258827252555, 0.17284898291105422, 0.8831060313020448, 0.8862720986739957, 0.20072935564559258, 0.11697595069284938, 0.8774830200656809, 0.17520444221393705, 0.21082280205062032, 0.5306282609847283, 0.21059501162229577, 0.656690987145852, 0.21146621388140707, 0.16869490786916486, 0.15142850630518112, 0.7220949185760217, 0.10504348408629338, 0.49868374894042367, 0.17713734882181797, 0.17184453734186578, 0.22023066559060656, 0.17329043412041523, 0.18613119354033647, 0.17135334207705055, 0.1865626023080439, 0.17127249965303637, 0.18399047274637215, 0.07973703510691954, 0.07560543348934856, 0.0863057892761584, 0.08627760999661516, 0.08795044797043505, 0.08087323441843386, 0.08233749315338823, 0.08198500141507825, 0.0819634878324963]}, "mutation_prompt": null}
{"id": "0265393a-668e-414c-ad85-37ed6af63352", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE algorithm with adaptive multi-swarm dynamics, memory-based restarts, and localized differential evolution for robust optimization.", "configspace": "", "generation": 70, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "27770ebb-b8eb-4f41-b538-fb613050273f", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.clustering_rate = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    if len(swarm_indices) > self.neighborhood_size:\n                        clustering_indices = np.random.choice(swarm_indices, int(len(swarm_indices) * self.clustering_rate), replace=False)\n                        for ci in clustering_indices:\n                            particles[ci] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                            scores[ci] = func(particles[ci])\n                            evaluations += 1\n\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component,\n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A hybrid PSO-DE optimizer using dynamic clustering and adaptive mutation strategies for enhanced exploration and convergence.", "configspace": "", "generation": 71, "fitness": 0.30179490933989156, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8016263454521484, 0.8207793712592182, 0.8044195953232991, 0.8147895487294374, 0.7534234698795998, 0.7843201706543681, 0.8167145968224807, 0.7830362026650093, 0.7886551827029306, 0.6136462830525459, 0.49981693374272385, 0.3890804008698394, 0.60548709422085, 0.4293649541180401, 0.41966863847285163, 0.5615229349249407, 0.42979986768885337, 0.4655927296910547, 0.38445129378720944, 0.1345325378501555, 0.16475294861934797, 0.1605904951593189, 0.13325337273997628, 0.1219980371570375, 0.15705003729652378, 0.16116339124143997, 0.13019288799811635, 0.13899469812170395, 0.14827281821508664, 0.10798301839602642, 0.13104640586638183, 0.12180620864588032, 0.10042407257430497, 0.1241847603377062, 0.10874305529390926, 0.13007159100907262, 0.9477665984732385, 0.9293570580413347, 0.9479724609863621, 0.9480353076442468, 0.9175692339983492, 0.9550062794842004, 0.9316889963939844, 0.9276214442782937, 0.9354719030227465, 0.46771380506627824, 0.31883471013338227, 0.3801505362026004, 0.3620797153727955, 0.3330724228508065, 0.3798497650202317, 0.37470118340482683, 0.36290189133383777, 0.31338343150545167, 0.366720563980075, 0.7339263597357315, 0.2963211544715626, 0.20923155155556128, 0.34686273199666684, 0.8408801781127871, 0.8294525631866707, 0.5323438214762697, 0.6378280202962312, 0.1999512338604239, 0.1778058263233412, 0.18937385066683032, 0.1842271615415647, 0.181967005810857, 0.17668788350569997, 0.16967001623585642, 0.18918972405500578, 0.17901755436456512, 0.18554924218193924, 0.2251429743918656, 0.14102810962220136, 0.15454995093992563, 0.15833488395560413, 0.2532906812411093, 0.23568797798425978, 0.16495971466378834, 0.17676971244399975, 0.07542964831948851, 0.011978704346179425, 0.047058023368853896, 0.058487373602146175, 0.028672787373792197, 0.016972255664682412, 0.025235155623052563, 0.046589768679122456, 0.036026317695248666, 0.10529733139606323, 0.06719901351311452, 0.1195481527062664, 0.050350712304206846, 0.03004937941336905, 0.07331427816921077, 0.11274271783008738, 0.06756938628966469, 0.06262940380938231, 0.1800763609561169, 0.05848051186973713, 0.18065299419282133, 0.11206739643024233, 0.0989403616440182, 0.1101138346868693, 0.18812317539737278, 0.12227830429060049, 0.13506599138042985, 0.08330470949003388, 0.14605387197402908, 0.1550572787786474, 0.2508794821986434, 0.18476941208390474, 0.1251887582447938, 0.07804239582833505, 0.1298505550023994, 0.26119192800805646, 0.49050005698508525, 0.5115962270442859, 0.4935133805212786, 0.5591479327348288, 0.4448101741128785, 0.48657898083180406, 0.5062547832739208, 0.505658490467554, 0.5378043920284301, 0.09894954691900038, 0.11183747018863543, 0.12823146918484896, 0.12218172326434573, 0.14949463445624245, 0.12908449965233737, 0.13098933054566841, 0.14295821908139972, 0.13446040143993432, 0.3258887877307476, 0.15415842438735505, 0.2120218533607363, 0.17795874395079003, 0.16377848890771296, 0.18004686481352095, 0.18149533100786142, 0.2722167448970291, 0.18087740487408643, 0.34987293172738443, 0.3369461008980221, 0.3432826438409856, 0.3356785180832029, 0.33998155467793356, 0.3513833545134828, 0.42115887360282955, 0.3801136703388316, 0.37505947583012045, 0.3066461743386921, 0.260076348584552, 0.24419796699161256, 0.273533896064317, 0.26150871101502804, 0.25734264310932675, 0.2565461305169985, 0.2674195903497276, 0.19190620720016338, 0.19653859816667396, 0.21862820649765569, 0.21149526902029714, 0.19846668986322513, 0.22618150191951047, 0.19832001150055956, 0.2155797216043781, 0.22219199206235152, 0.1917348375386484, 0.6391982695588837, 0.2185309347692298, 0.21073134823703832, 0.19673571878514817, 0.2106647618345009, 0.18605176740385732, 0.17734177090503822, 0.21362682035766623, 0.33453842103770126, 0.18530422796197699, 0.18704391565682976, 0.1843110892071882, 0.8297221771705463, 0.7381884832715002, 0.1982882345205209, 0.7529678514346939, 0.7583338381512434, 0.2031824999303996, 0.6211891594443153, 0.48346021245044535, 0.7905274525339603, 0.5117683850256891, 0.20816751767621366, 0.2039247529124616, 0.10437220534044622, 0.48919766646678076, 0.16181059270784304, 0.18398007426688212, 0.19717688576634296, 0.1849609282140845, 0.1795444231314841, 0.17502173492292472, 0.1853812580391272, 0.1808462128981958, 0.19055547756542224, 0.18720357171537239, 0.08930433690174577, 0.0854470754487856, 0.11211752856196266, 0.0937366192594471, 0.08198966858148271, 0.08954315679396041, 0.09056131841849069, 0.08734665128571939, 0.08302656942046449]}, "mutation_prompt": null}
{"id": "6b3927d9-8978-4889-ac47-46d00f3d142d", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristicEnhancer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.07\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 4\n        self.memory_factor = 0.15\n        self.restart_prob = 0.04\n        self.neighborhood_size = 6\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.2, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.4, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridMetaheuristicEnhancer", "description": "Adaptive Hybrid Metaheuristic Enhancer (AHME): A sophisticated integration of adaptive PSO and DE with dynamic parameter tuning, multi-swarm cooperation, and stochastic perturbations for enhanced global search efficiency.", "configspace": "", "generation": 72, "fitness": 0.31733212276847406, "feedback": "The algorithm AdaptiveHybridMetaheuristicEnhancer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8016644457773843, 0.806661803804711, 0.7806015688386362, 0.818623993515631, 0.8097992613711741, 0.7756467295383929, 0.8065886801858351, 0.8218579199321734, 0.8111991738945062, 0.6375222376073344, 0.6398455064595989, 0.6024247810272991, 0.6154466862872305, 0.6413261333043418, 0.5650145700592886, 0.6876843833570204, 0.6103539698925797, 0.6233103613147168, 0.17354822845579732, 0.1454553609515168, 0.1293436110231755, 0.13780227232476228, 0.1711882984613412, 0.1589203154931842, 0.14262265635537896, 0.12520756751025852, 0.13391003627134435, 0.10814146468794261, 0.10480212437786052, 0.14693162815711602, 0.12898317872768872, 0.13375262617928751, 0.1139506274821479, 0.09877713162953605, 0.11116598077827877, 0.1245416152664024, 0.9267605649810341, 0.968353823304944, 0.9171279287552139, 0.9497053188455087, 0.9513445399351504, 0.9328382905321272, 0.9526962762951793, 0.9416562919163609, 0.9410011490254707, 0.45331128658608033, 0.49388265404844456, 0.4838801783768575, 0.3489121007948194, 0.3410109662988179, 0.47127180223394893, 0.501815322558849, 0.4807261835666091, 0.4228793624083428, 0.46261441388616464, 0.8413283812064383, 0.324892866055691, 0.2571716956620447, 0.2712529379386688, 0.26998817736468583, 0.29257625369533524, 0.23137761361490172, 0.4535243468282889, 0.22255825870514445, 0.1955399219607521, 0.1815355956269915, 0.21926546665506386, 0.1903794124504925, 0.22396786366860866, 0.2146217375910956, 0.18381705548117366, 0.3013104828369437, 0.19797149870431663, 0.20180056871393726, 0.18285935695271094, 0.17994512003624963, 0.20780303299718506, 0.16445901080420722, 0.2122850603077785, 0.23325557670875463, 0.22564119543741212, 0.004617991038601943, 0.014860315040102101, 0.03210615719582566, 9.999999999998899e-05, 0.03904343776837993, 9.999999999998899e-05, 9.999999999998899e-05, 0.05617027980213918, 0.08764046528069136, 0.11643405842373777, 0.10588563020231956, 0.12229829835771011, 0.08166354521835528, 0.03786378331266371, 0.07401243424055814, 0.09620796356952466, 0.058477606474105936, 0.09623088537068947, 0.1772230656859498, 0.05333212954857458, 0.1692320080964237, 0.08443647741149218, 0.14005965347465477, 0.11254556420281991, 0.09810161209024915, 0.06969014299208609, 0.20423713076925065, 0.21443451006257785, 0.17234705058218824, 0.1329179216509474, 0.18750688289835793, 0.2154396769411714, 0.09614550476923722, 0.15550064389226503, 0.3307103936007333, 0.10431061680227482, 0.49557675189188555, 0.5488758730514274, 0.5262910533981009, 0.5211663203959845, 0.5063809562642045, 0.5092817389003319, 0.5291523360686663, 0.5053395652025701, 0.5163027237935385, 0.10892323318477104, 0.11069650333381253, 0.11342204900727082, 0.14920957097738463, 0.11259242504494427, 0.10650362351721543, 0.13832075205811578, 0.12434341602342824, 0.14029370828868382, 0.25296429809197185, 0.2307327055295596, 0.2255455591876997, 0.17021832068811693, 0.2973570520167176, 0.3365425548891743, 0.37400196648305184, 0.27220561602274107, 0.22257858881756654, 0.41245098694848736, 0.3234582802689725, 0.44530316992484154, 0.43217602538080235, 0.3945711171872428, 0.3084360901352279, 0.38219509562359966, 0.3857293101276912, 0.38350214454964493, 0.3278400665753568, 0.23059699540846446, 0.30105740616194654, 0.3438647692085022, 0.29022416702584064, 0.24220086861030454, 0.22367723210202062, 0.28491531250670765, 0.3383386945875385, 0.25144429811291624, 0.20231865323086162, 0.2013800922632084, 0.23544988902653397, 0.20695914679440275, 0.23383872896558933, 0.21677189545026954, 0.22214968289425274, 0.22400669902763615, 0.20591284657008935, 0.19848782327830727, 0.20098496696060097, 0.17842930487226893, 0.2146934347259697, 0.20574204105167948, 0.1720150099240978, 0.24765018095230995, 0.18269027465587173, 0.8804518610980963, 0.18650027329772323, 0.812494470203037, 0.8515371834509916, 0.19842146116447512, 0.1956937548868768, 0.8381163076595646, 0.8468172133474583, 0.811383889038285, 0.5783909317891884, 0.7986391141870188, 0.6779137084890502, 0.16784808340118018, 0.16745352321377427, 0.1647479114843594, 0.5079667103189098, 0.6287908818550513, 0.1525716673279086, 0.18681822290472738, 0.19702059851731302, 0.18687264271512027, 0.1795875227386583, 0.17774106337173268, 0.19449952815344418, 0.18088091392063788, 0.20458423855984875, 0.18210651643057318, 0.089302088911554, 0.09362680929660039, 0.0883717289653041, 0.09151299261295676, 0.08749705754778592, 0.08434866525135509, 0.07317450538376558, 0.0864120076638496, 0.08784279619089663]}, "mutation_prompt": null}
{"id": "779d1d6e-cd05-45d0-ba0a-8447f5a3c5c9", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A stochastic hybridized PSO-DE with adaptive mutation and memory-enhanced exploration for improved convergence.", "configspace": "", "generation": 73, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "46d917d4-f95c-4854-a2d9-3361290274a2", "solution": "import numpy as np\n\nclass AdvancedPSODEGradientOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-3.0, 3.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 3\n        self.memory_factor = 0.15\n        self.restart_prob = 0.03\n        self.neighborhood_size = 4\n\n    def gradient_approximation(self, func, x, epsilon=1e-8):\n        grad = np.zeros_like(x)\n        fx = func(x)\n        for i in range(self.dim):\n            x_epsilon = np.copy(x)\n            x_epsilon[i] += epsilon\n            grad[i] = (func(x_epsilon) - fx) / epsilon\n        return grad\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n                # Gradient-based local exploitation\n                if evaluations < self.budget:\n                    grad = self.gradient_approximation(func, particles[i])\n                    local_search_candidate = np.clip(particles[i] - 0.01 * grad, self.lower_bound, self.upper_bound)\n                    local_search_score = func(local_search_candidate)\n                    evaluations += 1\n                    if local_search_score < scores[i]:\n                        particles[i] = local_search_candidate\n                        scores[i] = local_search_score\n                        personal_best_positions[i] = local_search_candidate\n                        personal_best_scores[i] = local_search_score\n\n        return global_best_position, global_best_score", "name": "AdvancedPSODEGradientOptimizer", "description": "A hybrid algorithm combining adaptive PSO, DE, and gradient-guided search to enhance exploration and local exploitation.", "configspace": "", "generation": 74, "fitness": 0.16841904856596543, "feedback": "The algorithm AdvancedPSODEGradientOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.35413379192110217, 0.3582976482283775, 0.382541201896652, 0.31919789961226486, 0.36252965705829143, 0.3504983535887356, 0.35560985856338834, 0.3188895514006628, 0.325810401140635, 0.04162162136477732, 0.037093865090300104, 0.05458296200546797, 0.03166445577330501, 0.026495345048251684, 0.039946305530294324, 0.03485350150735789, 0.032761858292661206, 0.02070545274328839, 0.06782389604477734, 0.0813693814791302, 0.09075876336682087, 0.07511889966550822, 0.06975693038063457, 0.08045705193287156, 0.07227418974268474, 0.07359844097430612, 0.08006166957501881, 0.07620505956295331, 0.06861008203550378, 0.09949308483861319, 0.063546254711766, 0.06285102848373625, 0.0571259726041099, 0.06754216823239678, 0.054174534425807774, 0.06626967730988964, 0.7240618074122003, 0.8646447043680217, 0.8994478905343003, 0.7850429219985654, 0.7201332015309195, 0.832305051133769, 0.8260381515105503, 0.8300827227644426, 0.7931806021117115, 0.1849326673376127, 0.17766452724000648, 0.19259519953589765, 0.18353631899588962, 0.16405246979592825, 0.19666025392973452, 0.18422146301080689, 0.17560332574288373, 0.1417010605492185, 0.17739522933613516, 0.17087198694282746, 0.2766310086837963, 0.17236875109314698, 0.20693588606801006, 0.21114037861638835, 0.20570794408532866, 0.18300262137693912, 0.17295685844481612, 0.06697765380550669, 0.08924161053618918, 0.08541122803918821, 0.06008194214612872, 0.08469186893089731, 0.03883540906354954, 0.09829296769640472, 0.08767384846289861, 0.1058169573296629, 0.06514808212287948, 0.09572837865611405, 0.07381829531050466, 0.10565565181706027, 0.10019621633662523, 0.10437579410843933, 0.1013204500306043, 0.08025375628005715, 0.11230326699093462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10372450994748128, 0.04831184541652256, 0.08463973932987046, 0.020414326532971594, 9.999999999998899e-05, 0.007346436318595995, 0.04472561117857954, 0.039411563238523795, 0.036194584509359085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061562497097558455, 0.06007420638856387, 0.05698994025367776, 0.08394454366528048, 0.05876606492733083, 0.07207650014548383, 0.05097120988003678, 0.04178323868578593, 0.05084046777950302, 0.3125427962924101, 0.35203215406498234, 0.3410451311705347, 0.30375285737758506, 0.2976834657479389, 0.32134440873739323, 0.3296796162572614, 0.31316121315738477, 0.34047501836428273, 0.05818478700404883, 0.08351675959062155, 0.07038852456310873, 0.07144655961829105, 0.0879287113652586, 0.06615890785796508, 0.06236727829880162, 0.08200636306294251, 0.08312594174773336, 0.13821462127548878, 0.13960428276929593, 0.14226126412252016, 0.1342575257448585, 0.1322093167283902, 0.1321873146096254, 0.16096449415588487, 0.1285870857107364, 0.15708072204589385, 0.22596868229502998, 0.2198524775061993, 0.23928526599161226, 0.2410725101423017, 0.2190027168643337, 0.26938043998538475, 0.24906053775395298, 0.23547637978710578, 0.24273747806951362, 0.15921240782383483, 0.159550295986438, 0.1628572650914173, 0.17234075350255773, 0.1549329532786986, 0.17029894946727742, 0.18235754353542044, 0.18693201161316564, 0.15864415659185815, 0.17071621470997178, 0.1791860811466235, 0.17798216596799665, 0.1779606740230767, 0.1646577470680577, 0.16785614782857028, 0.17064814201811784, 0.15839517421703508, 0.16317794454558154, 0.20428797281644506, 0.21770287100841657, 0.18396046919181008, 0.19925411895789846, 0.1830570928040678, 0.17590782176598674, 0.20271880327384495, 0.1866724691958117, 0.1841904314455729, 0.1691279423127775, 0.1499441642905136, 0.41457997338541175, 0.5441140576235188, 0.17080594336589816, 0.182046772311813, 0.3561097150915511, 0.4504801737431938, 0.3963849303866769, 0.14791197459354977, 0.18508643506224998, 0.19251851432314437, 0.23071458817733292, 0.1550974561652656, 0.19762687782496846, 0.18233273959484253, 0.3273411668043098, 0.15537836700921692, 0.17736354556833356, 0.18207615840977376, 0.17570603960295916, 0.1713119908578361, 0.16725423958724472, 0.1712032583697639, 0.17400919545810845, 0.16903089837722496, 0.17923833839489434, 0.06249818349298819, 0.06862363608884048, 0.06227268263651253, 0.05974625870112782, 0.06442707155807692, 0.05657519024558477, 0.05545359519758053, 0.06744591363914187, 0.06048773004312025]}, "mutation_prompt": null}
{"id": "4cd665e4-fcb9-43d1-aab7-b13050b9a605", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-3.0, 3.0)\n        self.c1_initial = 2.0\n        self.c2_initial = 1.5\n        self.w_initial = 0.5\n        self.de_F_initial = 0.8\n        self.de_CR_initial = 0.9\n        self.num_swarms = 3\n        self.memory_factor = 0.15\n        self.restart_prob = 0.07\n        self.neighborhood_size = 7\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1_initial + 0.1 * np.sin(evaluations / self.budget * np.pi))\n            self.c2 = min(2.5, self.c2_initial - 0.1 * np.cos(evaluations / self.budget * np.pi))\n            self.w = max(0.3, self.w_initial - 0.05 * np.sin(evaluations / self.budget * np.pi))\n            self.de_F = max(0.6, self.de_F_initial + 0.05 * np.cos(evaluations / self.budget * np.pi))\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR_initial or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiSwarmPSODE", "description": "Adaptive Multi-Swarm PSO-DE Hybrid with Dynamic Parameters for Balanced Exploration and Exploitation.", "configspace": "", "generation": 75, "fitness": 0.3068549925197079, "feedback": "The algorithm AdaptiveMultiSwarmPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7758672559315597, 0.8014468472443874, 0.7751746681799221, 0.7986943043605219, 0.7947262645463812, 0.7821390310809736, 0.760354272504633, 0.7716612409199359, 0.765310246110814, 0.568317936821187, 0.5613417966838012, 0.5506401719032399, 0.5850083569731681, 0.5730046576003454, 0.5999531883353528, 0.5593686678864846, 0.5370472654897762, 0.5733678240943121, 0.13928883419943217, 0.11553860766259372, 0.11028373129941904, 0.1508749161150812, 0.2110297752802508, 0.16907307332828603, 0.12497947326775849, 0.14142483839858488, 0.1273051143391023, 0.12757670210901928, 0.134616825964055, 0.09976896264602941, 0.09623702135895784, 0.10650021433114631, 0.10032973480702168, 0.121940919597191, 0.12043415194574136, 0.10777797556425739, 0.9438113430363483, 0.9409914705358162, 0.9663208555586679, 0.942960713803092, 0.9588964638186712, 0.9576421475235434, 0.9769858763431556, 0.9512070521605769, 0.9380795439438275, 0.3915020903023627, 0.48678891357046505, 0.43507039045226614, 0.419258579296959, 0.31663596338014177, 0.3839976370363626, 0.41977198105267033, 0.4049758339683097, 0.4316874081818276, 0.22818099452847207, 0.2915952817066173, 0.5972741400401744, 0.7593745703718358, 0.20939420634550332, 0.21404471232588207, 0.5325046038884095, 0.7290852026377735, 0.7233570193725554, 0.2579073884907227, 0.21202735497332592, 0.17447653551343956, 0.18228316867341388, 0.22227399755404753, 0.19785897623170368, 0.17413911828575024, 0.2060855195823743, 0.18792969064576537, 0.20950011442446892, 0.1919591427744073, 0.1768853031882054, 0.20733613444133336, 0.1999114772833568, 0.22257936516635313, 0.22503956176521156, 0.21402795895215687, 0.21265929231949987, 0.031166466432362205, 0.03942021706284482, 9.999999999998899e-05, 0.02911707745008807, 9.999999999998899e-05, 9.999999999998899e-05, 0.005130224021230423, 0.0661193774584331, 0.05506850139995345, 0.1207729260341599, 0.06307107700793946, 0.07186520002426822, 0.06089119884119243, 0.021189400637392053, 0.06313878059240396, 0.06734116499033893, 0.0912627940578783, 0.06339213824876988, 0.12466341854999141, 0.09234183760320724, 0.2794093452691617, 0.10536419063214542, 0.2703926148628808, 0.2281092813210739, 0.05647927190156443, 0.1576350723068941, 0.05367586452660367, 0.24241294670061453, 0.16090035292167482, 0.13969573548494008, 0.11997599124229019, 0.1350418138912901, 0.20227218024048355, 0.1146153102155355, 0.07769696848983876, 0.09501131976835697, 0.4950769432179647, 0.5258011086549368, 0.5061145178245786, 0.5005779093564575, 0.5492006453730072, 0.5201725845873164, 0.5230175463737041, 0.5252638525726756, 0.5433664246228821, 0.11961197957006042, 0.12444639181507011, 0.11288804250902262, 0.10781992291860809, 0.14096776032107972, 0.11732635205644693, 0.1158643940563514, 0.12048160928130414, 0.10993267031295617, 0.19550079738829362, 0.18596571055915068, 0.14758558333559957, 0.15004731088163226, 0.18006832485889024, 0.16880119680002004, 0.16181792963626906, 0.17117736613113976, 0.16941095741932188, 0.3665978981896344, 0.36760875206114374, 0.3325340948619756, 0.3892222491392112, 0.3968667192790547, 0.38675742486831555, 0.4233122296183869, 0.44739951243108766, 0.4414332204447544, 0.26551620825026456, 0.28962346993080723, 0.32778117648804295, 0.20234954943679118, 0.269777719162385, 0.26519450703437863, 0.339820465687937, 0.34147333637217203, 0.30237486931001556, 0.18775662288815242, 0.2070245028246811, 0.18916214805048914, 0.198098571248425, 0.209365286451761, 0.19137816579427303, 0.20584707765850063, 0.1933361980578513, 0.21067059551667422, 0.19049007666543682, 0.1969675995493001, 0.19381376137565198, 0.2204743528996712, 0.19980940726197371, 0.18482035753595005, 0.20139791509902405, 0.4647517664407691, 0.18859934775687748, 0.8161393554028795, 0.18421096888632638, 0.7951359589692457, 0.8101907844205207, 0.19790360090276404, 0.19560516211605583, 0.7531856229286824, 0.8457448785338154, 0.20494721024372853, 0.6005095399686267, 0.20856798120356246, 0.6325799802344653, 0.49896491188042424, 0.16680530001344274, 0.201641861518845, 0.12486235325255546, 0.5859740676631058, 0.5862227463007414, 0.19449799211498764, 0.1866336537119282, 0.19168501924363346, 0.179960310865517, 0.17688607885662477, 0.2047161923857439, 0.18534125624101494, 0.19926736555685987, 0.17627004025394855, 0.09424364681905695, 0.07875028274404683, 0.07970556115612104, 0.07939737667789815, 0.0802794801754726, 0.08225727766365998, 0.07172445885441736, 0.08156783016399127, 0.08096926373927527]}, "mutation_prompt": null}
{"id": "24f27b56-4a6a-4b75-b145-bc4d49259e57", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizerV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.6\n        self.c2 = 1.4\n        self.w = 0.5\n        self.de_F = 0.6\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.07\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 4\n        self.memory_factor = 0.15\n        self.restart_prob = 0.07\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizerV2", "description": "A hybrid PSO-DE algorithm with adaptive strategies and periodic resampling for dynamic exploration and exploitation.", "configspace": "", "generation": 76, "fitness": 0.3188036812703203, "feedback": "The algorithm EnhancedPSODEOptimizerV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.819324937046621, 0.8210585670687461, 0.7972129414000317, 0.8208183080820114, 0.8222387381386547, 0.8242800177770522, 0.8385891587762014, 0.8231820685756086, 0.8091217475318576, 0.630967586094529, 0.6542245492253058, 0.6148044139244988, 0.6626774224673109, 0.6623630059453851, 0.6364126040356267, 0.6342440612578291, 0.6428806350288832, 0.6099345894333443, 0.1687355048294088, 0.1258409446645441, 0.15422598614129823, 0.15059262615187674, 0.16381772635869385, 0.14330331749069414, 0.1475942654211685, 0.12298170813634368, 0.1483172126737522, 0.13022370079711687, 0.13403532079413183, 0.10421542597841327, 0.10073601287780476, 0.14528092164368134, 0.13226681295689902, 0.09704066619797991, 0.11069240987496765, 0.1713575709624685, 0.9493755570246197, 0.945382674920066, 0.9341449244571266, 0.9478926696405608, 0.9065097828146735, 0.9323753704127933, 0.9652822479010292, 0.9043663839195891, 0.9256571153124189, 0.5276460475754456, 0.5711977850321925, 0.47224317155785733, 0.5031251570047304, 0.5933793350838816, 0.5811065889880013, 0.4391708338391862, 0.45004613436412033, 0.4914109831463931, 0.8493163308165201, 0.49492524197796195, 0.27959600636760273, 0.21380480762759257, 0.2693055473842172, 0.25135796144765576, 0.37780293737954385, 0.5846735586411683, 0.671114363852218, 0.17401778641849142, 0.3277881780673543, 0.178126561787175, 0.200725524083479, 0.20531053001028288, 0.1836698227750555, 0.19560442031624414, 0.23551987836302934, 0.13004432978275104, 0.10432459043300368, 0.20980257946556935, 0.18297585977154496, 0.12917306348365076, 0.1869220780310077, 0.21663799942526318, 0.20351863443594775, 0.19884521816048362, 0.21776628664693776, 0.042762201330030836, 0.0328510042378779, 0.05938827824543147, 0.03761958286841749, 0.05450613270712579, 0.027464039392729123, 0.06365723529812006, 0.11892701951890106, 0.014873120570237042, 0.09971363627465346, 0.12014594042163007, 0.0937753382277684, 0.07603749787423209, 0.022134636151758036, 0.05820874165340206, 0.11641533991283393, 0.09914862286423509, 0.17623726476677726, 0.05743463060795473, 0.2141045387100824, 0.1381646057451662, 0.09494097332641449, 0.06091088896539387, 0.11061085627351896, 0.09241393672500964, 0.08633351230190744, 0.07313843382987983, 0.22626988707959073, 0.1357659915088434, 0.21651987706535125, 0.1196780687340322, 0.3108942260494725, 0.16496569325692578, 0.11216808876134232, 0.10748472800294162, 0.14485058596246836, 0.531294859308416, 0.555554479975031, 0.5129624662650182, 0.5336465173989855, 0.5365323575654439, 0.5386255033306658, 0.5814374602244465, 0.5237707871841024, 0.515000921945187, 0.11307678364290419, 0.14613772479618692, 0.0904828009048908, 0.1369837020272855, 0.1716172346031264, 0.17310810011919586, 0.10737353363017832, 0.1410526825515983, 0.08926887209449419, 0.15710714642437829, 0.22492122247929247, 0.2846878385980348, 0.24034946218813402, 0.27880228687734476, 0.20582787214691933, 0.2524966512456386, 0.3470356189446764, 0.2597148988332679, 0.41564543853592917, 0.35771824328330726, 0.2851792405708664, 0.35124353794788454, 0.33224755883155443, 0.3876527712006742, 0.42610784641112576, 0.3867081388607194, 0.375639307359355, 0.28711582605652464, 0.32670522296425275, 0.26519666744900583, 0.35489123438250736, 0.2748198612951197, 0.385090799811573, 0.2726150485828194, 0.36948131840003395, 0.31845630583480944, 0.20962955927689753, 0.22425646051939607, 0.2256223731536101, 0.2246277270887822, 0.19398653427262436, 0.21680565782695227, 0.20371319840439905, 0.22153567025128929, 0.23067565034754312, 0.21793869801301113, 0.23309751689085578, 0.6405758383299094, 0.19124970464877555, 0.1989835799978079, 0.23795938667196392, 0.19784008647970264, 0.5352424948307286, 0.18250864667812838, 0.18504178493400836, 0.1835101271242887, 0.15209481648713208, 0.8874403157637801, 0.8565373026469973, 0.19590983221382152, 0.8449617538085659, 0.16787438035007451, 0.20697466596422032, 0.531046382670207, 0.20923872568161483, 0.6628862132147284, 0.6548022483278138, 0.2063940522555443, 0.16592902969267476, 0.12172242025409996, 0.6717812747780818, 0.5366288288544532, 0.18392068815977514, 0.18062553413939464, 0.19364987549759094, 0.1932588683544164, 0.16889451172235947, 0.19633531570925067, 0.19309151541009228, 0.20109341038499895, 0.18701673491839388, 0.0867649202105355, 0.08995014262134482, 0.09529560443361429, 0.09262259393346672, 0.09736269420666943, 0.10499896730898306, 0.09225398348947711, 0.1029738654377319, 0.08398733573407258]}, "mutation_prompt": null}
{"id": "157970b5-0bba-4328-addf-20c580670832", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.7\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 5\n        self.memory_factor = 0.2\n        self.restart_prob = 0.04\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.1, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "Enhanced PSO-DE hybrid with adaptive diversity management, dynamic crossover, and inertia control for robust convergence.", "configspace": "", "generation": 77, "fitness": 0.3180094864530994, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8097088141398409, 0.8150819357369501, 0.8262532831515754, 0.837891105879637, 0.8115274726470567, 0.7912700102475262, 0.8187021442986556, 0.7976920268598797, 0.8200039039832755, 0.6555857465813727, 0.6746816218936943, 0.5915074634964038, 0.6882538568710956, 0.6847947766547169, 0.6476260147160532, 0.6403682988460062, 0.6130932843681066, 0.6266493822496659, 0.13514502130663075, 0.614522496668575, 0.14443192274966987, 0.1760980443382144, 0.14931936130224277, 0.1390126145055809, 0.1515614144283952, 0.17156628720289102, 0.14663543460024087, 0.12382354543679908, 0.14054573447232832, 0.1424836320140277, 0.12324660150925515, 0.14932885501829474, 0.090923025974606, 0.10457578314235583, 0.13335025999840966, 0.12931969306220215, 0.9327758592198035, 0.9428319328589608, 0.9466591745675075, 0.9661115707534708, 0.9324082971806482, 0.9356665953580612, 0.9429988313506916, 0.9417071655050511, 0.9440925362306222, 0.5201219668692508, 0.5949089216547585, 0.4773490282582854, 0.509124448452424, 0.44342137077162114, 0.5006535589461734, 0.5123155513357264, 0.5065649300279257, 0.5096697588562132, 0.21991452273380108, 0.3685082831631703, 0.30071391939821224, 0.21326067340500243, 0.8456875870887444, 0.27173914472549987, 0.766502454528333, 0.2284578543045389, 0.37022143893581494, 0.12351449107842805, 0.17583250032834008, 0.18073643304591203, 0.18030507492694725, 0.15858121422341542, 0.17556167077568918, 0.16211213667388236, 0.21720802638014003, 0.16725083631604065, 0.18533760995388315, 0.19169043170681244, 0.18466127063788684, 0.16734963827393368, 0.1965494058767726, 0.1279423751327411, 0.2022207871037256, 0.20086440539489803, 0.2096371855897894, 0.019979086617898822, 0.11076315885311927, 0.08751199179147717, 9.999999999998899e-05, 0.07204305584733284, 0.055392862086057204, 0.04982345625002127, 0.09517727013268362, 0.08060206467484732, 0.09648068345325678, 0.052782523786227054, 0.13397085648231988, 0.07818306595780522, 0.034308184882479886, 0.03060308295037195, 0.1375366108337608, 0.09633557686996441, 0.08494530217030893, 0.03572142112583532, 0.1909494644081372, 0.16644605938446144, 0.11830427446934066, 0.07506180097818682, 0.2721951224293442, 0.08705716520202789, 0.09065728431876918, 0.06203786441421566, 0.25724246935428463, 0.1609728676132376, 0.19184781323591482, 0.17696484464510254, 0.14615998465589253, 0.12884855484489566, 0.0765007590048501, 0.16550661467988936, 0.1294001408011003, 0.5452191845050742, 0.5533570903924756, 0.5368687071746975, 0.5262523760468416, 0.5407030585973482, 0.5135485844072237, 0.4945575023833326, 0.5230009308567483, 0.5764940853669509, 0.10945535289578034, 0.14365343479777914, 0.13650612649169724, 0.11107238390184071, 0.1336644199105954, 0.11809683491116396, 0.13982582995802129, 0.13329555682571648, 0.10349646124187328, 0.20258654300711987, 0.2509762531706652, 0.37817070919714724, 0.20094559250222954, 0.26489412036019233, 0.28437677035895637, 0.1897150787580275, 0.22584883668948674, 0.21647668176016255, 0.4384798354866235, 0.3032845173683528, 0.46982463312239986, 0.5074689706917974, 0.3521968393134499, 0.38533389637192983, 0.4023520932867143, 0.36726129544182906, 0.3848736706564351, 0.25891065009117253, 0.28182038597089676, 0.32633364600058756, 0.23534338431080426, 0.2498284891516055, 0.27351657563055876, 0.2851769137413226, 0.2839237758028146, 0.2625241478445858, 0.24132926420565914, 0.2062989582391095, 0.20263364832922792, 0.21621540278764373, 0.21750868362105324, 0.22835735967678505, 0.242770372742258, 0.21078368482008703, 0.21096575497944337, 0.19654800198180677, 0.23868589415910557, 0.23581997062827253, 0.20651665633428606, 0.2155590339358141, 0.18366606951715958, 0.2050448288938197, 0.23502750658857285, 0.2161200796240158, 0.1872499561427251, 0.184349126185551, 0.8407043784316517, 0.8623140536059543, 0.19760901302946765, 0.19770507097951606, 0.8226780445485957, 0.8184539614910359, 0.824322395124421, 0.5004806032642974, 0.2082323968961255, 0.6176903115105686, 0.1665711599277152, 0.20605884271567343, 0.16677628513872056, 0.20769058807583052, 0.5091802295351169, 0.6378642625021804, 0.195596132962779, 0.17813254777229381, 0.19239704153598025, 0.19509584073208475, 0.1941668253590576, 0.19601451517475765, 0.19615949265356447, 0.18259635441938338, 0.19033820214760377, 0.1001061876685615, 0.09441827469353936, 0.09582255329360068, 0.09488831375063123, 0.10353787756034671, 0.09356105483092525, 0.09712280202431867, 0.10098120580834435, 0.08508269510220401]}, "mutation_prompt": null}
{"id": "708c4879-a873-4dfa-ae5e-c39e1aae8024", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE hybrid with adaptive memory, stochastic restarts, and neighborhood-based mutation for improved exploration and convergence.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "aa6b078c-579f-42fe-a02d-1cce6adeb394", "solution": "import numpy as np\n\nclass HybridPSODESelfOrganizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 4\n        self.memory_factor = 0.15\n        self.restart_prob = 0.04\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "HybridPSODESelfOrganizer", "description": "A hybrid PSO-DE algorithm with adaptive strategy adjustments, multilevel restarts, and self-organizing swarms for robust exploration and exploitation.", "configspace": "", "generation": 79, "fitness": 0.31578634118856846, "feedback": "The algorithm HybridPSODESelfOrganizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.813144040564644, 0.7905276513062345, 0.7727359617722602, 0.7947614805497993, 0.8106577494451106, 0.7768922591183053, 0.7966586032767802, 0.7791774926765181, 0.7675022537835003, 0.61970567944081, 0.5756770904806074, 0.5432455043838949, 0.5996864050679188, 0.588822814343626, 0.5725479193917777, 0.5914386212734539, 0.5551189068801123, 0.5455311190347978, 0.1446666100329006, 0.12624694391112612, 0.15937288641638547, 0.39272159149104, 0.12782814975071743, 0.45921870864535075, 0.15379526123198772, 0.1498702070342124, 0.14805298044959347, 0.11981880982851512, 0.10414516195560575, 0.12123741926151177, 0.1162587312381762, 0.11275335935607345, 0.1101817212330547, 0.11079245897726919, 0.13883578059571244, 0.1293952196084227, 0.9368884007860326, 0.9440889458940361, 0.9588502263428772, 0.942063725721827, 0.9256661285405203, 0.9305360962573939, 0.9510066283288151, 0.9090737895316112, 0.9277874267914883, 0.5028557712110027, 0.4498233812548931, 0.4309965132905025, 0.4651930692725651, 0.4408466127359938, 0.5087832725966763, 0.44363475585973333, 0.4654478755877026, 0.4537339497042563, 0.34246016829912085, 0.6575684646972262, 0.22439218407802997, 0.3129407700527891, 0.5498567129649878, 0.27215171077348654, 0.298177541101455, 0.7333700844254956, 0.8176207085383939, 0.21282146143746727, 0.1928814376860789, 0.2194793386088456, 0.18659766148819046, 0.17946854115665445, 0.18146129658938925, 0.3560127510745875, 0.1912361357878951, 0.23416916595168458, 0.20840109671323326, 0.22228413875955022, 0.17413693536273, 0.19875305637983143, 0.1861472715272473, 0.21055945056719905, 0.24650381211721517, 0.23023258904039534, 0.19085202494152442, 9.999999999998899e-05, 0.03810949493301263, 9.999999999998899e-05, 9.999999999998899e-05, 0.05656219918213379, 9.999999999998899e-05, 0.07029353291985097, 0.0452815310801874, 0.0006507105841028205, 0.07968902510044484, 0.060353837134301314, 0.11648496293471855, 0.06250369729764138, 0.07380309535947605, 0.02318407412762913, 0.10134547583270559, 0.0960046621648285, 0.053843124685638344, 0.08733521590264481, 0.03537036372670932, 0.06848037789186723, 0.08011578097529981, 0.09327063528598956, 0.2527107895867058, 0.08967458246065729, 0.08076923738070219, 0.17972534293827935, 0.1648033081118787, 0.12281839371899073, 0.3041866836710756, 0.21565912185549752, 0.2047232669052731, 0.12538533310874067, 0.1168276427289493, 0.1318838709074509, 0.08027982318862736, 0.5054432211648889, 0.5203660600673199, 0.4990405114475449, 0.5237806990072489, 0.4959142579357452, 0.5398173526136286, 0.556888060418711, 0.530913611865439, 0.5547934472889698, 0.12329902465248455, 0.14208423271980142, 0.128766400645123, 0.13018184687720824, 0.10871011768640582, 0.1415163291041317, 0.10397519248411502, 0.12671536798459726, 0.16809569669110458, 0.1597600874636923, 0.16351059852038397, 0.20087725081198948, 0.41031357500801524, 0.3291044208831285, 0.18994179878905892, 0.26342927393071014, 0.17929826911046598, 0.3247479555289571, 0.3675723999428505, 0.38191869958182967, 0.36368281245065714, 0.4288730869259477, 0.43400569028027225, 0.4214098517949332, 0.4036058181534855, 0.4702482910066247, 0.45204457128872055, 0.31272499858083347, 0.34167922894401614, 0.22697659802360082, 0.23374727085656866, 0.25255605660283864, 0.30620580006677356, 0.3123205836170736, 0.3389617782307657, 0.27439564752030743, 0.21742045013694966, 0.20783683182954538, 0.20578199949052933, 0.21631804193852133, 0.1884826510958254, 0.2347176513525011, 0.2159421831140561, 0.2175001724022091, 0.20413132954284685, 0.3495394603510973, 0.19290881471125576, 0.2061814714693253, 0.19815097363706036, 0.1975962551982967, 0.2049775254027585, 0.21446090237142212, 0.21631466354674878, 0.21239269928123594, 0.16429998940896895, 0.18583122319452816, 0.1839819837109652, 0.8102348569507213, 0.19645778659615531, 0.167486043142121, 0.8017497733873078, 0.8281527316769561, 0.8277764366539011, 0.5562621848976157, 0.20858221336100835, 0.7620992514492995, 0.16697868115922143, 0.7247425209499341, 0.16595171624291838, 0.20837859020187743, 0.6026170553459329, 0.6904877920386312, 0.18686163142285195, 0.17310680024686098, 0.175866896828756, 0.19424142287470714, 0.2015805455887395, 0.19029487047579208, 0.17904221367743556, 0.17138196073372403, 0.1885945080750666, 0.11548831967717377, 0.09271170524100014, 0.08343218371638683, 0.09045223268014957, 0.07831198221880897, 0.08219570043033908, 0.08883395682307127, 0.08540075549260795, 0.0857474313996559]}, "mutation_prompt": null}
{"id": "31986099-41a8-489a-b79b-38b85879aa6e", "solution": "import numpy as np\n\nclass RefinedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 5\n        self.memory_factor = 0.2\n        self.restart_prob = 0.05\n        self.neighborhood_size = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "RefinedPSODEOptimizer", "description": "A refined PSO-DE hybrid using a novel social influence mechanism, adaptive velocity, and diversity maximization for enhanced convergence and exploration.", "configspace": "", "generation": 80, "fitness": 0.31042451476585453, "feedback": "The algorithm RefinedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7456258063375208, 0.7801299242605247, 0.7718009546992823, 0.794793711220157, 0.7682504333156011, 0.7771940728844015, 0.7909044612721893, 0.8041869821804633, 0.7838798479774878, 0.5655245750939055, 0.5326731728227281, 0.5398201446824776, 0.5580540475135249, 0.579600475719326, 0.5456372656837494, 0.5434310912502922, 0.5795595144935517, 0.5655623471468119, 0.1730664536748664, 0.11347138570125681, 0.1673401299108307, 0.14230568392486853, 0.137111101660508, 0.13217748067958746, 0.11534642109112336, 0.44309147182379727, 0.10373418454084271, 0.11839676779434516, 0.12803556312527054, 0.1135993263360946, 0.12479744111009927, 0.1076100714137661, 0.10330791063289158, 0.13263157675669768, 0.1330722690478997, 0.1292370902659089, 0.9330633463492746, 0.934373698779644, 0.9363765104994624, 0.9428037260384411, 0.9424864639749876, 0.9450774461264828, 0.9575156535951493, 0.9411152971489776, 0.913659186699487, 0.4086251759474695, 0.37821016639927185, 0.4884732529644652, 0.4277764719606666, 0.1467407909697488, 0.4121400932249487, 0.3972265296181815, 0.2785248290416735, 0.4614209456753089, 0.36041701302938567, 0.7688846412165049, 0.7124010602982589, 0.6389159914159639, 0.38327188239125953, 0.7960760795538272, 0.7559435103882801, 0.6149870490916824, 0.22546184967384075, 0.17368564378868145, 0.12863653098862537, 0.1831247303188921, 0.2205788863748408, 0.1911930797218243, 0.1975319531147255, 0.2174730815281769, 0.18411087990229547, 0.46042981434141483, 0.1865152234224795, 0.20246086683858266, 0.2170329924918919, 0.20200352506147368, 0.2301381188981706, 0.22838484923428137, 0.2214687825619046, 0.20728812083591341, 0.20860831946516023, 0.02180227960026493, 0.0013517257102581004, 0.014879156724146747, 0.007492952535288144, 0.059659248160547906, 0.011297221864276064, 0.050135135668793906, 0.0020856631437905504, 0.03583356559222395, 0.08376146644685867, 0.06755254773134434, 0.07882240244189576, 0.07700369014537811, 0.04695257310937395, 0.049849621646111175, 0.10365856715052468, 0.07615482277759078, 0.10009538770155413, 0.13203444384389673, 0.24063747465376595, 0.13153874275330513, 0.09824612937555488, 0.0637266375821951, 0.14844790795616936, 0.166715479661111, 0.06029116992896322, 0.06191739872361901, 0.10896333599162333, 0.08107969364257261, 0.14188205541214305, 0.17626914830684604, 0.12632288793301083, 0.09204098639067748, 0.2408749039427126, 0.07927807526399977, 0.1289740902632398, 0.5123487012936493, 0.5090952322532978, 0.5159077479145807, 0.5220109359577668, 0.5125789775477514, 0.519336854588466, 0.49624717959016384, 0.5428879682943542, 0.5169248118177593, 0.12284538322742844, 0.12726106491418376, 0.13279759061977425, 0.10209932152225809, 0.12598696714000956, 0.141745484134692, 0.10813152272602, 0.14273187939656762, 0.12345420766615867, 0.30622413011869, 0.17490972069774746, 0.33542945610788655, 0.2122981295649221, 0.1878182839474538, 0.17146896525533062, 0.21968071872117312, 0.18176079529653466, 0.24080195763279855, 0.4562157029968704, 0.30907084567888354, 0.41464710980706976, 0.3921648407407047, 0.37324587236641316, 0.38842262343060996, 0.39977531666048394, 0.4343143390205425, 0.380443341300832, 0.27116618371649714, 0.2667892144970744, 0.2837461516305948, 0.3268864681580874, 0.2576851968999303, 0.26435608998825466, 0.28709530306593656, 0.33466796902374885, 0.30584453013549906, 0.21305606638831032, 0.1987845263797131, 0.18795287106599634, 0.21404062187858153, 0.2060130693559471, 0.20137811388581706, 0.2034003960872508, 0.19748012640187218, 0.17412399406133294, 0.20834278370168535, 0.22597299219498113, 0.1962016255399993, 0.1956515181882994, 0.19665612245653297, 0.21069076274304666, 0.19739081194684927, 0.2064966418321409, 0.47704750752726677, 0.7671958255356941, 0.1929886000799904, 0.1640493331228836, 0.849962839750353, 0.19498299778725048, 0.7778594710344017, 0.14087930553485606, 0.16488471342384525, 0.8474937093672145, 0.760804498967844, 0.20903411079380507, 0.5479242635966214, 0.661431709908743, 0.20633609085502091, 0.6032389028600991, 0.2070495312690508, 0.11174427861979053, 0.5348457752412623, 0.1971751506675019, 0.1932722566974514, 0.18603660917569265, 0.19491402318215445, 0.18042859914784604, 0.18655825213470179, 0.18393720977895167, 0.192424358293233, 0.18103714046119534, 0.1000974350116639, 0.08144294103366756, 0.08721118135981609, 0.08010533173159418, 0.09131983761839946, 0.08570020333509276, 0.0836201515567776, 0.07884482807521964, 0.08763827493155729]}, "mutation_prompt": null}
{"id": "258922dd-25f7-40ff-a23b-0f67ac47f9eb", "solution": "import numpy as np\n\nclass AdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_rate = 0.05\n        self.num_swarms = 3\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.5, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODEOptimizer", "description": "A PSO-DE hybrid with adaptive parameter tuning, dynamic memory allocation, and stochastic restarts for enhanced exploration and convergence.", "configspace": "", "generation": 81, "fitness": 0.3176202479887624, "feedback": "The algorithm AdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8420574809510296, 0.8559512745598143, 0.8730030123035905, 0.8410710023302566, 0.8463022945258938, 0.8660137938908163, 0.8325986978446092, 0.8530125587544256, 0.8515073140500331, 0.7151608008834744, 0.6963532594867463, 0.7190824245799536, 0.6672328772747682, 0.7265016070713171, 0.7131504394580517, 0.7027961378224746, 0.7230737881113464, 0.6019804231256044, 0.16932631593680858, 0.1495037678831428, 0.18262522278139937, 0.13100272950045422, 0.1427349649087324, 0.1214089426874041, 0.12975061182135617, 0.15766352411831563, 0.11473385255740154, 0.1454665617985509, 0.1078867426598652, 0.10559141956855544, 0.1479586108808595, 0.12893979730062233, 0.10630900816186895, 0.11209325306542939, 0.12393693563977504, 0.10644459837474063, 0.9520376395996952, 0.9337744053180752, 0.929296319358011, 0.9588789968184971, 0.9376257610080695, 0.9238829403943073, 0.9584894654718095, 0.9330081281586855, 0.9441151516587142, 0.611169600310008, 0.5394720307131124, 0.5961171832569809, 0.5911069314551884, 0.4691889700437726, 0.6307832505788828, 0.5916890881424219, 0.10431642438121325, 0.6800938300918493, 0.3186134524121761, 0.22566437818721496, 0.30255162578377837, 0.2047625042249519, 0.2781267187192896, 0.22545181673538506, 0.32982392529395954, 0.2804387935911058, 0.7414222528864319, 0.22773464460954296, 0.15334010922332508, 0.17399182842673688, 0.19106336996570095, 0.12992278415555503, 0.19726905704540776, 0.17829861316863682, 0.18584261304767546, 0.19593559823775075, 0.21625390806541478, 0.3025932397342075, 0.12907526645941203, 0.19526273923871218, 0.1875662878326103, 0.2319371655056932, 0.1278381677867284, 0.2408518812197732, 0.2136038775510739, 0.050213661561327005, 0.0025601040124551, 0.03338964265908673, 0.038186571573485484, 0.010447187528788482, 9.999999999998899e-05, 0.0013384040028344701, 9.999999999998899e-05, 0.030994844709839486, 0.10770141302987446, 0.22372134580662628, 0.1374072929142911, 0.049783742768425676, 0.027744576297931367, 0.09624806753193138, 0.16454611678051367, 0.05584870747866644, 0.10767448933970503, 0.06781606752231562, 0.08345129877372359, 0.29839818007984975, 0.10604084602211239, 0.07590674034319833, 0.11582102767470948, 0.09428457343590546, 0.2798707999508907, 0.10477091144576423, 0.18191255945365536, 0.17457234073336114, 0.1895268007668316, 0.16105800931710368, 0.202309447943262, 0.2726521898262373, 0.08853464561777169, 0.2813970003868954, 0.11829445160026064, 0.5433485113721146, 0.5554316896526754, 0.6658969587528095, 0.5738801211691015, 0.5530880676075668, 0.5540173742115366, 0.5946201448520818, 0.6578976711803286, 0.5328333489274859, 0.0982688693165843, 0.154322543640099, 0.129851602213508, 0.14987534221446464, 0.15538555463909776, 0.15121070063424813, 0.14714308940491538, 0.10669202554638924, 0.1312171818784209, 0.19338884556854496, 0.2264659389257646, 0.15062991010382998, 0.26480616765961873, 0.3496653567560616, 0.1947595025185489, 0.2775982453286938, 0.33022085750864305, 0.37069944691867607, 0.29491438253056745, 0.3073726342359048, 0.3225391634151604, 0.2987600158318129, 0.34019550128466314, 0.40086563400313036, 0.5326587829646516, 0.27602108912997103, 0.24670408904128305, 0.26257015594515165, 0.2742242534568401, 0.3181318562602552, 0.2585181926408352, 0.2148794347661548, 0.28040892787072236, 0.3528383163786333, 0.34924317100412094, 0.3249000686883944, 0.2066745375946566, 0.2330061102048001, 0.26532165563954124, 0.24113407579829582, 0.23393911826619063, 0.2269540070556998, 0.22405724432007124, 0.22003357121790046, 0.22696831482934765, 0.24343836858316426, 0.24744472124060213, 0.2502033441010856, 0.21585135952562484, 0.23430335220499654, 0.22080393958121836, 0.19417844940628637, 0.19420315554770218, 0.22093855750665903, 0.880400420118561, 0.1752493587036421, 0.18378612485404844, 0.9035458196743616, 0.1998078035187686, 0.145501058785669, 0.8797408776726556, 0.8934692213060093, 0.8389907054289752, 0.5269297623434479, 0.20812594275182295, 0.41843899372128845, 0.46865586719091723, 0.16808257797219972, 0.16658935519823959, 0.21082428187881064, 0.12647604477519014, 0.1665837230291679, 0.17837726789051578, 0.17623058673388026, 0.17874047497806478, 0.17221771950269227, 0.20107731689106156, 0.18765741763082677, 0.17689494759143998, 0.17945588022320813, 0.17817372182892488, 0.0930323371905677, 0.08633590800150381, 0.1026210330297066, 0.08868079510697557, 0.09399322668881449, 0.09971837572004227, 0.09013152929754054, 0.09455491134172844, 0.08333471500084799]}, "mutation_prompt": null}
{"id": "929f5dc7-84f3-45ae-980a-e2aefece45d2", "solution": "import numpy as np\n\nclass RefinedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-1.5, 1.5)\n        self.c1 = 1.6\n        self.c2 = 1.4\n        self.w = 0.5\n        self.de_F = 0.8\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.07\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 5\n        self.memory_factor = 0.2\n        self.restart_prob = 0.04\n        self.neighborhood_size = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.5, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.6, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "RefinedPSODEOptimizer", "description": "A refined PSO-DE hybrid with adaptive strategies focusing on local exploitation and dynamic parameter tuning to enhance convergence accuracy.", "configspace": "", "generation": 82, "fitness": 0.29417432233244406, "feedback": "The algorithm RefinedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7753954295428133, 0.7691726618555013, 0.7723584988436049, 0.7523445675853336, 0.7548461502307713, 0.7492790926019113, 0.7484644660721881, 0.7966284989516663, 0.7129495081270252, 0.5369362232384682, 0.5781023808330119, 0.5246926888082023, 0.5398806871154908, 0.5482553740254749, 0.4668455557900385, 0.5270017367381583, 0.5424959873187108, 0.5197573449439392, 0.13045917953650166, 0.16621621197558833, 0.13021056128124253, 0.11508385842131719, 0.14084039239964874, 0.1653847667100412, 0.1320235258660576, 0.14607989907303964, 0.13647123632227554, 0.10077061919451391, 0.12489900013367117, 0.10190074707459496, 0.10744561027207633, 0.11311779566898417, 0.11988032190570941, 0.10818521772281198, 0.12181637672212131, 0.12563541749864693, 0.9366477835290976, 0.939962276599789, 0.9197348418000223, 0.9437778579498134, 0.93272509769033, 0.9325362874854997, 0.9160821940381979, 0.9337129236444587, 0.928161563027638, 0.40402209908199516, 0.34873171102489764, 0.3558078234066787, 0.3315731340114776, 0.361837631260432, 0.3584047642990348, 0.36768646782334535, 0.08749748067572605, 0.37863601349500275, 0.5179536606792218, 0.24874259780436414, 0.6494889197935878, 0.3383672155107862, 0.30490124687351994, 0.3581690184434919, 0.3915649764556056, 0.6691969848792827, 0.7566871879401798, 0.2713894446296219, 0.21200002330819434, 0.20375751616886506, 0.1810451247118029, 0.21692567836685006, 0.14845954303516695, 0.23467176458104322, 0.16994020538916899, 0.1857340256438723, 0.23786590137480457, 0.1950663568784926, 0.12695140545028005, 0.18952562538493134, 0.19712289305904984, 0.18609592507457906, 0.2468849242992216, 0.19046576871927767, 0.16505736397162707, 0.044490577633815476, 0.11677968840744268, 0.009247904297997933, 9.999999999998899e-05, 0.012109109525763273, 0.027359329259345255, 0.009019054323968878, 9.999999999998899e-05, 0.0674864425066547, 0.07836532023125486, 0.06816601761282004, 0.10739344793739325, 0.06741141213999469, 0.051112252297891625, 0.06249737475850614, 0.08419272000924916, 0.12668002724678573, 0.1141538359216826, 0.10048107902582304, 0.104963658750158, 0.1694823053284037, 0.0804631641747281, 0.06751833197677748, 0.14846593196388536, 0.09106163767769415, 0.06009060131166155, 0.1487662434818492, 0.174099976632476, 0.12022584788812873, 0.15195934791989785, 0.164918060182212, 0.17390563154185168, 0.24385149955657093, 0.28344346070032456, 0.11973224102007773, 0.1247381067440465, 0.542972073796905, 0.4908907722702536, 0.4744377598273468, 0.5057842974066423, 0.4963662875654009, 0.5081199810308257, 0.5114957177729791, 0.5082189912592168, 0.4878373501506499, 0.1298634158779427, 0.10429129788004377, 0.14304441164527926, 0.12350559909115433, 0.1169600130421784, 0.10522653904669899, 0.13112467806591066, 0.12106847870488213, 0.11731127134712571, 0.3255167640354927, 0.18893820500387382, 0.19174018900910372, 0.2278710716229403, 0.1947881157803406, 0.15202358274430805, 0.32221793718454006, 0.19024422336201063, 0.20866743441940472, 0.3084840889069477, 0.3362142116108967, 0.3710409026134307, 0.37780609449954095, 0.3934412117359374, 0.31685312204503924, 0.3616931214582362, 0.3516371294569217, 0.3801013178917867, 0.30083090224889986, 0.24105849512823896, 0.2648715795334541, 0.23605449913000298, 0.25036413819726344, 0.28556019762645113, 0.26360425307065993, 0.2960487567542355, 0.2575246336002266, 0.21679184475683055, 0.21326296813059287, 0.21559512299687034, 0.2144366867892562, 0.24332796327408612, 0.21708847838250311, 0.23459046102732362, 0.2321490437040059, 0.20854076990749504, 0.1954808105479181, 0.23445540822556055, 0.2036524659083253, 0.2039272167407623, 0.20933808850568036, 0.21088635148966473, 0.19778452997200802, 0.20235875432995665, 0.20327645542248174, 0.7953458083533704, 0.1844995188107822, 0.18563277779126452, 0.8434297531631417, 0.7225266970761959, 0.19712168253478268, 0.1483311168371131, 0.8170125941445658, 0.20633174084166772, 0.5684902541563748, 0.20805020951782238, 0.5187934747667591, 0.6449490802605771, 0.16648438173699087, 0.16616799449723696, 0.41079300864255053, 0.20847626692888355, 0.3542899410705902, 0.18008883894289573, 0.1833797624006931, 0.1845128095812808, 0.1749661206916917, 0.19110370681886735, 0.18268893064416092, 0.18168069186492175, 0.20920572703556106, 0.1812329224235053, 0.09051912740956503, 0.0932405345662124, 0.09648357102762006, 0.07866691957733762, 0.08755589219695081, 0.09669839776047351, 0.0920605457711885, 0.08697627213841985, 0.08497953760434562]}, "mutation_prompt": null}
{"id": "83438487-cda4-433c-b8af-0927563cc073", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.03\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.07\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A hybrid PSO-DE algorithm with dynamic acceleration coefficients, enhanced memory, and adaptive restarts for comprehensive exploration and robust convergence.", "configspace": "", "generation": 83, "fitness": 0.34146908034399576, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8439406870560717, 0.8361402035231408, 0.8321378194464677, 0.8394359770909924, 0.8312584509695582, 0.8318321097513453, 0.8519037106528788, 0.8281888996757262, 0.847219136668228, 0.6805167642866121, 0.667570499151561, 0.6885468331739397, 0.6984106440996325, 0.6566911525468464, 0.6770205472073496, 0.6619993114116465, 0.6954628141021947, 0.6580538028565189, 0.640631117285726, 0.17522302763255015, 0.13684169907715027, 0.13285143282635414, 0.141679397926745, 0.15552204399112834, 0.13944849872441578, 0.13528800489627524, 0.13524070360679985, 0.13472163525088765, 0.13573991391864038, 0.1482045357024555, 0.13871485622663515, 0.14698718189998794, 0.1359015919657408, 0.1485010069441829, 0.15212548779943624, 0.11237166263149723, 0.940850378916847, 0.9477903076348724, 0.9249777427702263, 0.9518732258915459, 0.9337555687640662, 0.941377621589356, 0.9351288139790417, 0.9115647083608465, 0.9405645682425424, 0.5551694377801917, 0.5079084836370185, 0.42820909125866324, 0.44026445412812765, 0.4952391252252981, 0.5816367606748828, 0.5270110948570508, 0.6488276692089927, 0.5590731177696073, 0.3792611396544239, 0.7765404619307397, 0.3682496213254218, 0.27583593860665345, 0.8283358567419103, 0.5757521708617921, 0.1730019941915838, 0.8293044247100065, 0.8051727757350832, 0.26831409534663375, 0.26965589048702054, 0.17553721688155433, 0.2996923278429142, 0.17867065745176225, 0.1282070017054533, 0.21069166055315636, 0.20035841260568676, 0.20783876157791015, 0.20415948463550337, 0.27008495150397416, 0.23338529407108077, 0.19889704609696102, 0.16207325783742976, 0.19428361071057587, 0.19282083446832243, 0.19268666935622836, 0.21534397513077363, 0.025550613972751268, 0.02996051919702991, 0.014805242531249818, 0.07417037050572561, 0.09642508353504708, 9.999999999998899e-05, 0.023324625052787318, 0.026086097961138366, 0.0574696876741726, 0.10934039413878405, 0.10846752739977406, 0.1381810067633793, 0.08421260729182234, 0.03702108903217616, 0.13303495485572114, 0.11816461238295628, 0.09411088747342078, 0.10046008051600674, 0.17106359449394293, 0.10843685765756561, 0.10546728784194948, 0.07519644142805615, 0.12258286420924391, 0.22294812056002034, 0.20045323175564167, 0.21927624030976145, 0.06450118276282424, 0.0785806070156817, 0.2531971168475359, 0.12519028154503997, 0.26871300805859377, 0.21973785684539082, 0.2773865397820202, 0.13529033581719851, 0.15770347796153805, 0.08188159062347933, 0.5419492930533466, 0.5373390753325058, 0.528933527585747, 0.530418386656196, 0.522224238645367, 0.5617072354220365, 0.6006113847252637, 0.6386879997573447, 0.5699046983768079, 0.14008170448172952, 0.1319819597934233, 0.1771591220000781, 0.13913097750782688, 0.13880621999365905, 0.1535745185202264, 0.10809970599862029, 0.15396681834213488, 0.11686293601473574, 0.256056323501495, 0.2068374978925015, 0.24944934711265054, 0.25218992388242545, 0.3202932126502287, 0.20973089342255213, 0.3142997125360327, 0.1892653531739178, 0.2143719286404604, 0.4700601952828227, 0.2900065717696221, 0.4243302016971978, 0.427694138623154, 0.3553912784645362, 0.46933942328801004, 0.4554923550192145, 0.4390364574220398, 0.42219125129559754, 0.246243521590906, 0.2701215235185789, 0.31373384712893304, 0.32354162188398095, 0.3195304539900463, 0.2905618009132812, 0.31105348602230887, 0.29559182364515757, 0.23770392507969185, 0.22940553289001375, 0.20266145180534967, 0.21243387150629367, 0.22298918023574044, 0.19506445312612586, 0.24487327904882727, 0.21877237002661765, 0.21749038332766557, 0.21539419228019108, 0.24164803740696894, 0.2035450372237304, 0.24294353831573645, 0.209595927847968, 0.650922994234463, 0.22072290740132083, 0.245394786061766, 0.22057302838953996, 0.2202785562596754, 0.17056235699527822, 0.18419330009451929, 0.1852745599667518, 0.866988690136438, 0.8171300208738299, 0.1978611452250587, 0.8940074669099638, 0.15755085149616443, 0.8703450200266244, 0.634575092700739, 0.20885075511628948, 0.6286755812703033, 0.6471357333837842, 0.6537496573900581, 0.6206035347683463, 0.5981336256946828, 0.10481099732429155, 0.6422434687075831, 0.1868308266720231, 0.19859195482122416, 0.19289107722007415, 0.18879176113771368, 0.19340340589812977, 0.1980985861747585, 0.17794738507052277, 0.19047910353438702, 0.18413362690202817, 0.12435430367544198, 0.081824166464747, 0.09837447199530103, 0.07908971762725336, 0.10001704587695381, 0.09600669757280578, 0.11164722010008898, 0.08205018848019296, 0.09363765746987629]}, "mutation_prompt": null}
{"id": "5a38dcb8-dad7-4fd7-a68c-595f0f2e9c2b", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp_base = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_base_size = 5\n    \n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp_base[0], self.velocity_clamp_base[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            dynamic_velocity_clamp = (self.velocity_clamp_base[0] * (1 - evaluations/self.budget), \n                                      self.velocity_clamp_base[1] * (1 - evaluations/self.budget))\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                dynamic_velocity_clamp[0], dynamic_velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                neighborhood_size = max(1, int(self.neighborhood_base_size * (1 + np.random.rand())))\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-neighborhood_size):min(self.pop_size, i+neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "Introduced dynamic neighborhood size and adaptive velocity clamping to enhance exploration and convergence in PSO-DE hybrid.", "configspace": "", "generation": 84, "fitness": 0.332446395047172, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8425173758043099, 0.833062723055848, 0.8383466829230136, 0.848720271172284, 0.8386517699380727, 0.8102381655666502, 0.8372510327251454, 0.851683641568334, 0.8148062124675325, 0.7101631614637922, 0.6805007820722744, 0.6616004519032561, 0.7122927859152375, 0.6837055293465966, 0.6108294175741849, 0.6958693376939487, 0.7066646301269902, 0.6841000672466011, 0.1378186968679611, 0.12120465848437745, 0.14327133493245015, 0.13039207811417186, 0.12973319364957114, 0.173529703484536, 0.18102956710956442, 0.13328799211822007, 0.16781033481049945, 0.13550106056464284, 0.13400734245833978, 0.1038496218971855, 0.11362373000043458, 0.13819707224534028, 0.13763270810129347, 0.14461338079997876, 0.132071405359231, 0.16598952221284058, 0.9378162878819006, 0.9435904140996824, 0.9211782928628804, 0.9679444181829958, 0.939436096040935, 0.9438270995350501, 0.9583566192243342, 0.9317524795589405, 0.9480138481519201, 0.5665846589772536, 0.46735916932090216, 0.4676629373179648, 0.5785786971327262, 0.5156379990803033, 0.5428174541348953, 0.5642785474435459, 0.534351019415065, 0.5988738304636574, 0.37209158947261334, 0.3681421425495175, 0.21989185721132876, 0.2764293415694761, 0.21386806682018633, 0.26701034176428806, 0.4256593971450521, 0.7713133525037924, 0.6656363922836261, 0.21202242015458928, 0.2903506084336438, 0.18122933919841833, 0.18108406632307184, 0.18060595626001796, 0.1689904228900725, 0.20804751978805602, 0.19823581305462923, 0.17034375567693372, 0.1935663953327471, 0.19483661176516198, 0.1290971791721307, 0.19993233311630798, 0.2031021234854743, 0.3197684003635972, 0.24713134335391185, 0.20723617156324903, 0.223674037348084, 0.056499244480039845, 0.04846663789696526, 0.0402244094101869, 0.06273971530982014, 0.009461847058741646, 9.999999999998899e-05, 0.05379200181920518, 0.033770552520383856, 0.038082055536704296, 0.14603477283343202, 0.09260285893245546, 0.08058025945590541, 0.06836619609153427, 0.07593904892833836, 0.07250726288550446, 0.09830132057410079, 0.048889481178857386, 0.1105917617770329, 0.153082124777971, 0.12566594944692966, 0.18252158335760982, 0.11997649690507173, 0.13612412688661057, 0.29120266873022627, 0.14474273678395733, 0.16123439456711353, 0.11541234221786312, 0.13387324291678648, 0.24453430865670733, 0.14708763148195225, 0.1446678425454575, 0.11836560979848143, 0.381547151205605, 0.13299001828777235, 0.07526640272126495, 0.1480249647281371, 0.6190055264285159, 0.5557324703172255, 0.5596513209145766, 0.5870700681133776, 0.5907252919126535, 0.5797433490578701, 0.5501753408910637, 0.5975068995155545, 0.5716358781765508, 0.14024033101466649, 0.129711992443167, 0.10887281266673488, 0.12802242072070436, 0.17471607780711762, 0.13642995714288353, 0.1334592289610238, 0.12145478553767575, 0.16876890484939744, 0.3370491822484295, 0.36659164245222575, 0.18719129528735967, 0.2538526065811084, 0.18682243017044686, 0.18166747668130634, 0.1964098500366075, 0.24929274878786323, 0.3660804816557933, 0.4723149514719074, 0.31489559975518855, 0.40197040787159855, 0.3428946291586814, 0.48510780691271016, 0.35698404270816486, 0.3420339908494362, 0.4624527407279263, 0.35281304216026055, 0.21331373552082644, 0.2840598823287175, 0.27638824197740963, 0.27937727186661254, 0.22392896180548016, 0.25356149849426624, 0.2611564495785008, 0.32971284025582726, 0.22965608941825533, 0.22637192336709733, 0.20398486001542315, 0.222121538039999, 0.20937086275730232, 0.2360244279209086, 0.217090226383162, 0.22108685909965597, 0.22953460321835928, 0.2512389972350799, 0.1990206217434951, 0.674535319383055, 0.21577862439870943, 0.22021982231253334, 0.20761120031560087, 0.19173207194467545, 0.19821163819192644, 0.19035365492468714, 0.2378915930846528, 0.18631290124023803, 0.8820418034356048, 0.8521600922773043, 0.884761965220621, 0.19680056615736208, 0.14678961563224202, 0.8591318684928977, 0.854962659050742, 0.8530512129713453, 0.5324335973528421, 0.2099017673537099, 0.5160992448060105, 0.20723676861022666, 0.2044359756772265, 0.6441744044420522, 0.504215530052979, 0.15352517062770843, 0.6346918535406865, 0.18097501054307674, 0.20809055385317987, 0.17887397127097793, 0.19598326181993386, 0.20947046026006044, 0.17495332778739936, 0.17644356077096746, 0.18353147658070912, 0.16957186190271023, 0.11360731859705397, 0.09779492087893626, 0.09470108645540387, 0.08904444621229546, 0.08747212309019703, 0.1220069823360993, 0.11628691567774752, 0.09054865614031093, 0.08846368959593964]}, "mutation_prompt": null}
{"id": "002eba2a-83ec-484f-989e-16a2d3beb085", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE hybrid with adaptive memory, stochastic restarts, and neighborhood-based mutation for improved exploration and convergence.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "b9aff75f-e35b-4255-9860-8f7cd69ce2a7", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An enhanced PSO-DE hybrid with adaptive memory, stochastic restarts, and neighborhood-based mutation for improved exploration and convergence.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "397460fc-205b-4b95-a322-19b5eac8e680", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODEOptimizer", "description": "A hybrid optimizer combining adaptive PSO and DE strategies, enhanced with intelligent parameter tuning and dynamic restart mechanisms.", "configspace": "", "generation": 87, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedHybridPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "93a6a0a2-67b0-448f-ba6d-c30529a6dcb1", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A PSO-DE hybrid algorithm enhanced with adaptive parameters, dynamic memory-based particle reset, and local-global neighborhood mutation for diverse exploration and robust convergence.", "configspace": "", "generation": 88, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "8a7e8a15-a435-4168-9339-7a056a207eaf", "solution": "import numpy as np\n\nclass QuantumEnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n        self.quantum_scale = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n\n                # Quantum-inspired perturbation\n                quantum_perturbation = self.quantum_scale * np.random.normal(size=self.dim)\n                mutant += quantum_perturbation\n\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "QuantumEnhancedPSODEOptimizer", "description": "Quantum-Inspired Enhanced PSO-DE with Adaptive Quantum Perturbation for Robust Exploration and Convergence.", "configspace": "", "generation": 89, "fitness": 0.28950243299373096, "feedback": "The algorithm QuantumEnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.22.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.5888349586698661, 0.5900884174310964, 0.6074546063138551, 0.6651482816805332, 0.5682526195293129, 0.5715473901133112, 0.8703369203393578, 0.5651099584047448, 0.5795708679669764, 0.6106617277659523, 0.23991585562530415, 0.24985961283310087, 0.36641516749270486, 0.2551394280822047, 0.22358803694465512, 0.21368267311255063, 0.21042638638487776, 0.27806081679548766, 0.15044507894476777, 0.15010667422087076, 0.12036048526072884, 0.1814732747351342, 0.24183394890936272, 0.18041302842515272, 0.17130087614930145, 0.1741364444697856, 0.13186595725096906, 0.1303615882399145, 0.14276562074607757, 0.11747889895019958, 0.13328310130084264, 0.13317672828223226, 0.10836901082830941, 0.1361337988331739, 0.1179547940760034, 0.16641100612168847, 0.9038210103793717, 0.9344659247189652, 0.9151288364789152, 0.8871371871900261, 0.9204585469466293, 0.9292079287365439, 0.9143865361459395, 0.9010420533701224, 0.9551226928771531, 0.4171615599022903, 0.37237328121762503, 0.33750853874366915, 0.3744370242558127, 0.360432285589005, 0.36443647255158595, 0.34271177330129243, 0.33986958811703905, 0.4186330147297145, 0.7333155201303161, 0.424975787807091, 0.7927762413000594, 0.3990248964361748, 0.790526877786726, 0.3438344365709284, 0.4401030928929568, 0.3547336917749918, 0.38481403705609785, 0.25690619131191683, 0.3869915226019738, 0.1396092498816397, 0.31402492745881017, 0.21948641232975685, 0.2065107767668991, 0.22520319068891792, 0.16732040331027564, 0.1920936153198758, 0.17263132256404334, 0.1633177993119168, 0.19449574974039263, 0.18684543222050576, 0.1287604940058914, 0.1604064488587772, 0.1945025404843932, 0.15111079362364288, 0.1888913368865628, 0.06586601768435918, 0.031697332212276, 9.999999999998899e-05, 0.03690893641773585, 0.104034852760305, 0.07449861046317052, 9.999999999998899e-05, 0.0030609611236819267, 0.13824480494552882, 0.1496999969624665, 0.09662704088584284, 0.11183742043625133, 0.04701440430239778, 0.04118375299874821, 0.057708461793410604, 0.07830406647223642, 0.11175332110774217, 0.1184023522837726, 0.12106150130035043, 0.05029730867531801, 0.18352303224276456, 0.11533818017846986, 0.11420555941204635, 0.0840646893637742, 0.16346991972734126, 0.1082870617643995, 0.06998899442446904, 0.22833633909203144, 0.09250002900789145, 0.11865573293757248, 0.17822885919572584, 0.14466823066051038, 0.19577123393397455, 0.12527125213264623, 0.12740711399414917, 0.11566387280442669, 0.4711567847384398, 0.5168316208830437, 0.5025480926442677, 0.47657137496672985, 0.47974678555057393, 0.4627384821278292, 0.4950978638473066, 0.4611720118538516, 0.47708850548275805, 0.13834638605953065, 0.12475951960835896, 0.16428659920295974, 0.12441464528733637, 0.12977973046991098, 0.10468984105879608, 0.13305804535242327, 0.11292195274117334, 0.09281522685418164, 0.23384278590215724, 0.18834330473952066, 0.19988574866340447, 0.22475138038767395, 0.2758713159954962, 0.2224167522685907, 0.22186690591257652, 0.2514559971866662, 0.35135748181248816, 0.3544916826784211, 0.33505160024176717, 0.37580194653433596, 0.32085343643630226, 0.36151861216561165, 0.31412015722244446, 0.3339421258606007, 0.33141452957700523, 0.38365054909256535, 0.23051896265170246, 0.2870647096592953, 0.3026588718572286, 0.2843960620350089, 0.28426481942356396, 0.29163944357465765, 0.266665547952753, 0.28094077043568033, 0.23839571428286832, 0.2279097322786824, 0.22647868141050354, 0.20586871497573023, 0.2129758582886907, 0.2055960139137133, 0.23415257859067373, 0.26020337779788894, 0.1969236081302994, 0.2000711746710323, 0.23224832593079303, 0.21627121816445338, 0.23297905213851222, 0.23990692747325915, 0.41527181172342886, 0.23387142078727807, 0.20259144528699546, 0.24620592469020508, 0.24202175723262476, 0.7716423693772447, 0.1857837604663991, 0.7963925683536847, 0.7731216321436718, 0.19730493652991032, 0.837816025116735, 0.8001819841447341, 0.16859841232731765, 0.8001138686367404, 0.5063690961815399, 0.2074276302794935, 0.47467060275271866, 0.16661801171443968, 0.5202168459952099, 0.1678745675365233, 0.20662197543609795, 0.1049076858747745, 0.4188375807442646, 0.167588197255627, 0.19599756776681465, 0.1928069140491825, 0.1978237239876427, 0.19064047119551109, 0.20110468308937568, 0.19407997447495762, 0.19582952327250802, 0.17571232577506002, 0.09764821702204662, 0.08661397045426167, 0.09140044060915808, 0.09096612640947954, 0.0811174721991853, 0.09396044908167933, 0.09615135874499214, 0.10392639508613388, 0.0806135264947101]}, "mutation_prompt": null}
{"id": "8a06110f-189c-484b-b648-3c821cc36d3f", "solution": "import numpy as np\n\nclass ImprovedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.045\n        self.adaptive_c2_rate = 0.065\n        self.adaptive_w_rate = 0.025\n        self.adaptive_de_F_rate = 0.035\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, (i + 1) % self.pop_size - self.neighborhood_size):\n                                                      min(self.pop_size, (i + 1) % self.pop_size + self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "ImprovedPSODEOptimizer", "description": "An improved PSO-DE hybrid with dynamic neighborhood restructuring and enhanced adaptive control for superior exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": 0.3218249838412905, "feedback": "The algorithm ImprovedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8242537670855417, 0.8358229418114018, 0.8193131241503308, 0.8185836955858206, 0.824260107007518, 0.8309286876012452, 0.8206044202156895, 0.8392794556219613, 0.8334003289420613, 0.6916963398115853, 0.6504789733256886, 0.641042362502966, 0.6658958391099302, 0.6837457980467541, 0.7328883777450124, 0.6597037153032951, 0.7103185391961825, 0.6387682174425269, 0.09938000191227025, 0.6926172946868243, 0.1281042732220149, 0.1394147025216571, 0.15156567134326393, 0.14964828318089407, 0.1498797446537834, 0.17167534739573365, 0.1348464481534556, 0.12438704614192997, 0.0898489740217836, 0.1361267910740065, 0.11139704404035966, 0.13659731365178174, 0.12276445936746916, 0.12300658938121756, 0.11217450303517673, 0.16113658157723554, 0.9562052873884673, 0.9491403284770091, 0.9372278155318244, 0.9241023362185998, 0.9232601568228478, 0.9346147958648227, 0.9511118699950742, 0.9009635022176442, 0.9112515490666031, 0.5491938321012223, 0.4945244127064312, 0.47145632051967556, 0.44076918671992893, 0.5720576638320087, 0.5167690021260235, 0.6182837959141507, 0.5353557684278827, 0.4599561770737304, 0.4842248337230086, 0.3671001095456803, 0.3700992156583439, 0.2165314796189376, 0.2706633546872391, 0.35816809585801956, 0.7393025879847479, 0.8436281956649982, 0.5571841131942373, 0.16936377476705822, 0.2628117070175169, 0.19957670275800266, 0.16620084003610114, 0.1812903612475366, 0.19946719050066664, 0.24485551002410977, 0.18028261450667593, 0.18441616603329514, 0.20166906132116125, 0.21527536884660126, 0.19605639000070263, 0.18675295135735492, 0.21251250564272917, 0.2216978985027389, 0.20234749371979133, 0.18741390068668096, 0.21736158818964202, 0.04438348197174513, 0.0006602906042869616, 9.999999999998899e-05, 0.0905931553966478, 9.999999999998899e-05, 0.05001337867760103, 0.018551189395331513, 0.1322687862341867, 0.000338171814055932, 0.10025331708156904, 0.12401836852989834, 0.06908337650347007, 0.06675346212474909, 0.06001839277523591, 0.06879192299026582, 0.13751275696607512, 0.12204794391878937, 0.07837164455650558, 0.06441168446090395, 0.035473995088149635, 0.1933642082991509, 0.14856470595394444, 0.09944979317086278, 0.07604061084833957, 0.09429362284527598, 0.22955700244415944, 0.07182144673407798, 0.20002752999908302, 0.13046524000938775, 0.11876000800159014, 0.18800488080101763, 0.23153182969088015, 0.2668328541225531, 0.10078932389952278, 0.2424403054729034, 0.08049858355540107, 0.5598328857087592, 0.5466411377892264, 0.485216475382383, 0.5157491160928185, 0.5378790453310903, 0.5409463261145181, 0.5746048221923412, 0.5543832890835201, 0.5236728560119337, 0.14535184620097896, 0.13473742619988494, 0.09412920187251583, 0.08124539691218124, 0.13467954344402366, 0.11279309179228425, 0.10174281813671693, 0.13166155927173062, 0.13159039444468867, 0.19234370668536682, 0.24217707680609635, 0.3050040971765072, 0.21119674807901034, 0.1973899173150362, 0.19347816356483938, 0.29993243107692347, 0.3593328612022738, 0.21452245551169513, 0.40785157940685535, 0.41321168800592323, 0.4718953547437018, 0.4488143999887787, 0.49478239903260746, 0.42028050997734556, 0.4358100350721056, 0.5020223732067621, 0.3834903277545476, 0.2814047871044075, 0.3503764710073112, 0.3125243167671984, 0.2783731385448257, 0.284168658542168, 0.2905963459733323, 0.4621319764827079, 0.40738228685247857, 0.27947022119700715, 0.20867715261767472, 0.19157706398633045, 0.2092921276632892, 0.21485141933364527, 0.21619147055482524, 0.22678629441035025, 0.20149685204845802, 0.22661004919125072, 0.20553338686246392, 0.20093528816374828, 0.20618299527588246, 0.24738026168422367, 0.21475863236033788, 0.18704913788634003, 0.1951784708631733, 0.24633094825102497, 0.6277448272234221, 0.19910327522732119, 0.8648777298606982, 0.18617672068577606, 0.7896574777608547, 0.17212318346688915, 0.19857371153795456, 0.813373063698757, 0.1661934506761611, 0.16769366342934355, 0.1673330163483966, 0.5343338373473396, 0.21168794960528792, 0.554467113109329, 0.20677013442858805, 0.6409500732728464, 0.15484713244351678, 0.4216135486282748, 0.2091029056638215, 0.20672481197626102, 0.17499415776307703, 0.1756716884207673, 0.18890060770476802, 0.20124386393334848, 0.20134520195906191, 0.1981828933757932, 0.17401783851025154, 0.18560568721884896, 0.18095916356733455, 0.09750665675868642, 0.10029608802124279, 0.08680019859277321, 0.09015096579201343, 0.08356781426554605, 0.08053879497410432, 0.09350809178746222, 0.09793571235433907, 0.08972951121454276]}, "mutation_prompt": null}
{"id": "cc9fa49c-d327-4f36-9a79-b5b230884496", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A multi-swarm PSO-DE hybrid with dynamic parameter adaptation and diversity maintenance for enhanced exploration and exploitation in complex landscapes.", "configspace": "", "generation": 91, "fitness": 0.34291673445852416, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8411323717420798, 0.8526994590767016, 0.8148621521702433, 0.8508574033161267, 0.8511080272096004, 0.7940721238218513, 0.8547241908811383, 0.8026942545612727, 0.7863717548354539, 0.6092578875240608, 0.6586322288188031, 0.5600454662192409, 0.696531777204245, 0.6619892211820232, 0.6578688634146975, 0.6672998887215599, 0.6796362923997832, 0.6372995575475096, 0.13989429249364438, 0.11331821189299773, 0.3812564063243884, 0.1421290470746549, 0.16738090106931924, 0.12848587201885275, 0.6343697626800177, 0.1710757070905986, 0.15017878058327327, 0.13785980872558978, 0.12323019416198788, 0.11543094204701632, 0.14580991293641377, 0.13749163544836118, 0.39862036602721684, 0.13713013357406745, 0.12827510593967473, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.526939327561986, 0.606862357354226, 0.5480299485213873, 0.554712197346567, 0.5469156587557658, 0.5619126316639107, 0.5137495715686556, 0.5150146097111871, 0.4654534197681496, 0.7631867541449928, 0.7997387186888003, 0.8422936457886392, 0.7809611791343994, 0.7576829300314959, 0.8146729293940889, 0.22853769509805855, 0.6389254842215955, 0.23147897892381852, 0.2008610637585415, 0.3250024833771322, 0.16116243309591394, 0.1272385205268931, 0.19689690662999804, 0.16129436895463478, 0.19526460645879173, 0.1786236914521614, 0.18787593237452338, 0.2038204180241251, 0.2938715498770257, 0.40118674926706, 0.21046213794313473, 0.21831083068115342, 0.2268093841818246, 0.21853366553270348, 0.19744435494465373, 0.20942910566993256, 0.0021952011083165024, 0.03437332154754713, 0.030817067234072626, 0.031646164647020636, 9.999999999998899e-05, 0.03375820851489275, 9.999999999998899e-05, 0.009378781027484684, 0.011583572350129523, 0.09472613580677336, 0.1701250021611297, 0.14799353812230187, 0.05613916697083099, 0.04237350506633297, 0.05982698266951558, 0.10378067632149723, 0.11848271628208662, 0.07025191163812128, 0.2299645422215424, 0.054279865639678015, 0.07963117492634919, 0.07308270661640703, 0.07796589772391926, 0.2593407942755629, 0.1746745704650966, 0.16985041633525777, 0.15321012788555977, 0.1287787083087354, 0.2634340722740771, 0.2549756521017854, 0.2771150052538416, 0.20375446548165188, 0.22506876243703478, 0.0793778227531382, 0.10610448853961374, 0.11578410287108742, 0.5390451138032272, 0.5450169139809208, 0.5263271186970653, 0.5497842206782759, 0.5363447355986743, 0.5289466717628877, 0.5362436915564077, 0.5609619789491768, 0.5799991448977264, 0.13725163190942435, 0.17615162438491117, 0.09302218105701832, 0.14948739198687944, 0.10736408945950082, 0.092688436625332, 0.1548374870203234, 0.1744917475954859, 0.14854115558561842, 0.2166457196522108, 0.18954004887740805, 0.2793096888728782, 0.35886772189759386, 0.3058139485963931, 0.34976827824260515, 0.4338472238747525, 0.24435883216429954, 0.22469452877617146, 0.30556917761339764, 0.49132392243204714, 0.3258964072761401, 0.40280218533154244, 0.423710651322588, 0.44905026628730993, 0.45265789018632463, 0.5326954029275957, 0.5051812885793947, 0.2795294625500937, 0.2654565307242793, 0.3153596997252667, 0.3453266374035142, 0.31234615135614185, 0.27197726632788366, 0.27575567707406723, 0.2925377196744511, 0.3166468736364323, 0.24063970084115138, 0.2220105753676812, 0.21296366714288828, 0.23207371710429614, 0.20551879947473128, 0.2604044522803062, 0.21791426983638473, 0.199370761305118, 0.2348146279220369, 0.19679705193693475, 0.5882879394137577, 0.2290937678339432, 0.6706846109591742, 0.18765135174399272, 0.2475653050833816, 0.18517884828697562, 0.5806491141735595, 0.19003410512492291, 0.1849039630026449, 0.1860910654725394, 0.8646780425072293, 0.902015523605176, 0.8471201890344121, 0.19705364683803506, 0.8533368425156196, 0.16680613650543163, 0.2065167646907169, 0.47516445826359277, 0.21125248508871064, 0.535391326259492, 0.522738618435177, 0.2079906671936813, 0.15429151231953853, 0.6117333720518909, 0.10470570725245221, 0.1641179069982016, 0.17392298656652272, 0.1975827472172691, 0.18544707287941875, 0.19366732838897083, 0.19295658392724946, 0.17592242277941783, 0.1928502077844858, 0.18694387734908702, 0.17082540948305125, 0.08963846986352697, 0.09091313770712717, 0.08729370881745968, 0.098215958760411, 0.08837185795131841, 0.08692238014435083, 0.0915148835216032, 0.0980321777419747, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "a10fa4df-55a6-4b61-8b9b-d76bed2cf6c4", "solution": "import numpy as np\n\nclass MultiSwarmPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.6\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.04\n        self.neighborhood_size = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.1, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "MultiSwarmPSODEOptimizer", "description": "A multi-swarm PSO-DE hybrid with adaptive memory, stochastic restarts, and local mutation for enhanced exploration and robust convergence.", "configspace": "", "generation": 92, "fitness": 0.3146689066611532, "feedback": "The algorithm MultiSwarmPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7974799156239751, 0.77642100109245, 0.7886136679692168, 0.7951642749892671, 0.7875392207631107, 0.7804147971251759, 0.7890171164306325, 0.795032655778889, 0.7630162468730165, 0.5974788009682923, 0.6322648641149099, 0.527502621994349, 0.553327754551248, 0.6149846176953928, 0.6200146110733132, 0.5701534070608919, 0.6353227771172677, 0.5995431208410844, 0.17922146469392863, 0.13065080822892727, 0.12866726512468563, 0.158256500225747, 0.10962751798951398, 0.11883078749440756, 0.1478417295319716, 0.128213104636702, 0.165131691849561, 0.11516664699268253, 0.12480075984678063, 0.10300604253598233, 0.1389236067350823, 0.13086458286214586, 0.12049702915613947, 0.13556487307106113, 0.10590673541548423, 0.10015166476259074, 0.9420307653428324, 0.9339287518524663, 0.9402629564685174, 0.9350339828714301, 0.9169944899721456, 0.9489968261158427, 0.9419428756902422, 0.9313578565236036, 0.9336921973392805, 0.5520592311965644, 0.4619536053281045, 0.48786537905485183, 0.5070560109351168, 0.14847812300529573, 0.44520534244276067, 0.43449222593472747, 0.45653175330850326, 0.49629714251208046, 0.37219110276881706, 0.7527383163193462, 0.7229078047513142, 0.20639179312277578, 0.2687667888091976, 0.20110671650391654, 0.3639810661550118, 0.6230689395470627, 0.6180323631481676, 0.3303877266582068, 0.16133841223632484, 0.19097601249115992, 0.1698957991022968, 0.21832225751142342, 0.19384522975882712, 0.19812025276960954, 0.18553103510460112, 0.20547882442211662, 0.19817308075421203, 0.18416240708556075, 0.1919542261520678, 0.20513983563100624, 0.2533876139109591, 0.20376411533036776, 0.22629732139301129, 0.23133488095576804, 0.19192973421358817, 0.035661452800688, 0.02105271708078582, 0.005757351422180146, 0.00041729269425883064, 0.03166111485482781, 0.0103651846860775, 0.002706245259069928, 0.09477274169515604, 0.0017997062956174315, 0.13456405383384484, 0.09684844125389769, 0.13039635733316113, 0.07033884100890486, 0.06088704204653972, 0.06682467343603671, 0.14838133070218396, 0.03338999880991944, 0.05869148605357133, 0.08244216836445828, 0.030189575401733948, 0.07423962227500647, 0.08219916118036596, 0.10355164649860671, 0.3791856049057025, 0.09526543753797123, 0.19336829938294564, 0.15331827076829685, 0.13340508960814346, 0.1281007867898556, 0.16311100056297567, 0.10960081356762874, 0.18118767336127162, 0.16585963349286126, 0.07723142169593433, 0.09545917401626414, 0.11051482268335877, 0.5223075145039948, 0.6199140060167321, 0.5843586493653932, 0.5090628122907495, 0.5190402814294267, 0.5285788666903285, 0.5480523878424444, 0.5330633173216228, 0.5311969591669236, 0.13391516407510973, 0.11325749273812091, 0.1199845939955938, 0.15256254143055592, 0.11616959403130878, 0.14583456454405952, 0.1251815670344848, 0.1633811503968805, 0.1428788302639814, 0.1673267894804249, 0.20536789220053653, 0.3287220156667804, 0.2372562379390466, 0.38672289275303573, 0.1950761794567778, 0.3085242769929294, 0.4500208435339328, 0.16448480167486246, 0.3969553233676847, 0.410876463243229, 0.4228686618131007, 0.3190947772522248, 0.43657584274913275, 0.4024724354279541, 0.4647836291465566, 0.4369734189743716, 0.4236928274522985, 0.1865592104341116, 0.3142017218596549, 0.26299814753824335, 0.3112667667136054, 0.28129768794774934, 0.3115738637804071, 0.2515861517967466, 0.33374746329645233, 0.2899181037892674, 0.22727492112474124, 0.22223070430637648, 0.20976223971435914, 0.23611330462382807, 0.20117228268056686, 0.2606348559125512, 0.19515657374463624, 0.23461570398119513, 0.23070335833720568, 0.22216327381767298, 0.1849315959210317, 0.19773876552683511, 0.2256884842469039, 0.2036100404509542, 0.20672569319475254, 0.21634629032142105, 0.6303273879659418, 0.1873159098141346, 0.1857697881306113, 0.8232463513752917, 0.8345242148026621, 0.7778809609939535, 0.7745023464651941, 0.1960289049245314, 0.1655518013299927, 0.16674459025902777, 0.7937664608658578, 0.20640881076752826, 0.20810838755702643, 0.495731518366741, 0.20685582413289538, 0.3426990527455903, 0.16734542241217154, 0.6572473575637401, 0.7452571837173889, 0.155424131229143, 0.18105507529557674, 0.18452149733169598, 0.1917220420211906, 0.2059112298943483, 0.18923192988242155, 0.17356856209237936, 0.20401585365367436, 0.19218737282753773, 0.18461159377322078, 0.09193921141876671, 0.08779504284224227, 0.0944160758872693, 0.08276928439816089, 0.08733035046329529, 0.12557928632284676, 0.08769139159229, 0.09204872691043142, 0.09603641038139688]}, "mutation_prompt": null}
{"id": "c99ed8d9-9fbf-4a66-bf01-1e3b5d84dc75", "solution": "import numpy as np\n\nclass NovelPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.5\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 4\n        self.memory_factor = 0.15\n        self.restart_prob = 0.07\n        self.neighborhood_size = 3\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                local_best_indices = np.argsort(personal_best_scores)[:self.neighborhood_size]\n                if self.pop_size <= self.neighborhood_size:\n                    a, b, c = np.random.choice(local_best_indices, 3, replace=True)\n                else:\n                    a, b, c = np.random.choice(local_best_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "NovelPSODEOptimizer", "description": "A novel PSO-DE hybrid with dynamic adaptive parameters, stochastic restarts, and local-best-informed mutation for enhanced global exploration and balance.", "configspace": "", "generation": 93, "fitness": 0.3073205934896395, "feedback": "The algorithm NovelPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8843825078420633, 0.8692258772926327, 0.8623186359879635, 0.9026997723413623, 0.8811735511116966, 0.8604243366010899, 0.8856373201873758, 0.8717696253572124, 0.8807862945405853, 0.5397941286029444, 0.7007771205434572, 0.6851940703181604, 0.42617387142223884, 0.7440173637311993, 0.6599191036467267, 0.6973249563280879, 0.737318763851891, 0.632669045270988, 0.09594336121015656, 0.10885504938451107, 0.15054327100867415, 0.0944106324124141, 0.14953703898807302, 0.136306395190553, 0.08767367909775314, 0.1142024574957774, 0.07217868684493756, 0.10843514717765335, 0.07527603544208883, 0.11783799458314426, 0.10341194752731209, 0.10543900399222517, 0.07543110814314025, 0.08784626345695656, 0.11058289426101142, 0.11665684744926197, 0.9700273138037611, 0.9255700112408832, 0.9092320064564289, 0.9503727361006872, 0.4299666199373048, 0.8834402997987395, 0.9518247290148006, 0.9091792655300911, 0.9513361199872706, 0.6512984555873418, 0.44178183188776576, 0.7551048737309054, 0.6597340091806931, 0.3776402449643086, 0.1505515309356018, 0.5230880137577576, 0.1828312665963101, 0.4104147974507849, 0.17431482275337784, 0.34051977008894396, 0.2230929002799248, 0.2076511584727153, 0.9009351835962629, 0.2089777894408782, 0.23696837364519274, 0.12663744529821508, 0.22654308984521354, 0.32782308044987996, 0.07585062324736702, 0.35847581246198956, 0.11773164947096271, 0.12800576492944005, 0.46057766415461954, 0.16239876865523672, 0.4222660731397112, 0.16231800946609531, 0.2546813665245099, 0.17612422643485592, 0.130609282560614, 0.18733006882564596, 0.13596340824313136, 0.12912924045088126, 0.13498858020637672, 0.16650248849988125, 0.17411606271979585, 9.999999999998899e-05, 0.03687030342583275, 0.06459548367928802, 0.04844995419569531, 0.00557983915855309, 0.11797474579225875, 0.05035520489404066, 9.999999999998899e-05, 0.03791712083285437, 0.14796957033090852, 0.03787007568186651, 0.08518926909263902, 0.04684257989666962, 0.018399001604634257, 0.00153230500767787, 0.09878747540558619, 0.03579977079417551, 0.0451292867912918, 0.2129062050874163, 0.043305823087146034, 0.34933255268519725, 0.10403479053388198, 0.2563565493529384, 0.12578663741498441, 0.16843346022073724, 0.07784374305231867, 0.10919776473673004, 0.32479582355371817, 0.14194857864293986, 0.06440862623772758, 0.22390548212807604, 0.24880599915538792, 0.12659978117223325, 0.08216040278631176, 0.2852999280284987, 0.0831766778022035, 0.5105025439640074, 0.5103756013311525, 0.5259504610673291, 0.580351777746253, 0.3808439071954577, 0.5910730665954402, 0.5511406647406184, 0.44677918949243245, 0.59060649144288, 0.15050597627286877, 0.06931823001421711, 0.11394011560863004, 0.11027978839929731, 0.0906667285828866, 0.12826211713139657, 0.07097096538164682, 0.1028562408276461, 0.1071080587420642, 0.26911229252720925, 0.4911535365580826, 0.18150160078039512, 0.29870476344251917, 0.16514114446448747, 0.3287128501274492, 0.22437187006973358, 0.5225460988052154, 0.21226490365673456, 0.3754227617457472, 0.5259560630519705, 0.43865657030974825, 0.32126979130676236, 0.5526909244718741, 0.30013791146494173, 0.4384007930981375, 0.28890068924873413, 0.504244138162246, 0.31991844574125783, 0.2416058148941902, 0.330853620925472, 0.19956805435893354, 0.20657495806045834, 0.3491431933390112, 0.23815439469354782, 0.2540359906012891, 0.46461826426854935, 0.23979142925149544, 0.2512069837964799, 0.21043138178908893, 0.23170700444058878, 0.25379912408645133, 0.19052862656658698, 0.2465374538484092, 0.1915802898954051, 0.21312351597442325, 0.2483881403384567, 0.22338328235042693, 0.20847233973682833, 0.20689937129354719, 0.24851616413656108, 0.22498737377860722, 0.1970756009331276, 0.17994212724792835, 0.24793718542175536, 0.8883998413213005, 0.16942415250874643, 0.15360521048592746, 0.1725790435372161, 0.19952024320248907, 0.19706495626819154, 0.859752041837921, 0.16581326387042739, 0.9003809821677234, 0.5594999015164035, 0.1555933158084033, 0.678778710427462, 0.4455689380453437, 0.1683758900178569, 0.5532127639112104, 0.09431942266004512, 0.8416705981369885, 0.13784495906723715, 0.17532265609157693, 0.17639606218390003, 0.1799543656447553, 0.1917445078201171, 0.17102101040823126, 0.18105358614549394, 0.18578931003697485, 0.18545347985374327, 0.18058007366707185, 0.07997764267281204, 0.08380101357491787, 0.09302194841245759, 0.08430425548491349, 0.09467803519642004, 0.08980934854686107, 0.09411943025588321, 0.08941141447139889, 0.0900432581777253]}, "mutation_prompt": null}
{"id": "ca0d7b4e-6dfc-40bc-b3e4-7aea82e17a93", "solution": "import numpy as np\n\nclass RefinedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.8\n        self.c2 = 1.2\n        self.w = 0.5\n        self.de_F = 0.6\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.03\n        self.adaptive_c2_rate = 0.07\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.04\n        self.num_swarms = 3\n        self.memory_factor = 0.15\n        self.restart_prob = 0.04\n        self.neighborhood_size = 4\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "RefinedPSODEOptimizer", "description": "A hybrid PSO-DE optimizer with enhanced adaptive strategies and focused exploitation through memory-guided and restart-refined exploration.", "configspace": "", "generation": 94, "fitness": 0.32225272644345854, "feedback": "The algorithm RefinedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8204695646706671, 0.7964471327718652, 0.797529942672994, 0.7952055876851558, 0.7644636289934533, 0.7729867099473688, 0.8057660006472572, 0.7620797772131094, 0.7794328731317559, 0.5950414557303152, 0.5604362111993775, 0.589023604483012, 0.6066415791484414, 0.5974478018936551, 0.5802633338889498, 0.5945813019009276, 0.5686260541771346, 0.594213428305927, 0.14416109782268083, 0.11932802697539469, 0.11869577391390207, 0.13882020740252243, 0.14424526934469684, 0.1548718238677087, 0.16621701939905364, 0.11247773338555977, 0.13000629748052794, 0.13857574134175843, 0.11397017015187483, 0.1479934693416901, 0.11933411614436207, 0.12895255456397647, 0.14052094612151067, 0.11615681440469106, 0.13623543156386642, 0.1025114865012291, 0.9318256367590387, 0.9393192708600627, 0.9418860449206484, 0.9340662258815364, 0.9412026850873496, 0.9133230118051574, 0.9269280824193742, 0.9232960088454605, 0.9411165688795609, 0.5007234159204077, 0.35599817369921893, 0.4173167708051614, 0.44503987383820787, 0.4072976861659653, 0.4628255376709045, 0.4533482693573917, 0.408298121197162, 0.46869920545214006, 0.8544509719554975, 0.36362458970394573, 0.5808273018096759, 0.2124887272549213, 0.3711335669566652, 0.3613014311976629, 0.6803379250386667, 0.6427656012081124, 0.7665166728208057, 0.2603365462114151, 0.12297666868312807, 0.22547691972967354, 0.47195542467632035, 0.17632321152745878, 0.17363116798200118, 0.18946776370794738, 0.17774126654462108, 0.26424061038803115, 0.23956272215370333, 0.20730812662213127, 0.18738630633260656, 0.16873052428488422, 0.227902423440712, 0.19492697964374972, 0.19987325442481985, 0.1282050608365327, 0.20463814147314674, 0.04791530645261899, 0.004360274695998312, 9.999999999998899e-05, 0.07006149160186692, 9.999999999998899e-05, 9.999999999998899e-05, 0.031512744508874535, 0.03903790897697401, 0.03840277276709059, 0.11624537978862792, 0.06575591561668792, 0.07511357006199937, 0.15578241898187684, 0.05714901647293569, 0.0652864162708433, 0.08556651575611252, 0.06017376067573876, 0.10241192809675992, 0.044018873025144734, 0.17772850347544533, 0.06861936973081684, 0.12179912578213425, 0.07108097797625779, 0.16477772208223251, 0.23010249346306766, 0.16930124700055016, 0.061874352290856915, 0.16818524779065724, 0.23140124987489663, 0.0876813096057586, 0.16993954558044844, 0.16754751795362477, 0.16436320417556471, 0.14372586778390561, 0.10479245090072742, 0.08609678885670202, 0.5263874332935818, 0.5561075184819866, 0.49877317108653607, 0.5564283359496858, 0.48634775653145634, 0.5151138309634726, 0.5436403720448977, 0.5629176688477084, 0.5492337857754683, 0.1233360399152843, 0.10556620159772634, 0.09725864536160411, 0.4957429928641838, 0.1033289996089406, 0.102537238876103, 0.11539344027992249, 0.12024256257184607, 0.14317924898849144, 0.19778275875903695, 0.27226515935156936, 0.44566190810994666, 0.23047007737389535, 0.2665807354105155, 0.16726312750620054, 0.3322657868014721, 0.17165522798860489, 0.17554241721903707, 0.4186168520360136, 0.34204724169296064, 0.3933099115124108, 0.48546867389332315, 0.3558960784337518, 0.3799938087541809, 0.42094936461999966, 0.44810046272416626, 0.42220866781001054, 0.2967798089337985, 0.29827074679610954, 0.285616280684174, 0.30197077026491015, 0.3160939122855809, 0.24503421293044514, 0.38214883432516933, 0.30863621232076466, 0.2550681701927009, 0.23612201046925674, 0.2141898150530086, 0.23133549371394735, 0.22590658220787108, 0.1888232875851913, 0.197386116560058, 0.20905892637132484, 0.22337747658869989, 0.22092258405785425, 0.18614627345175927, 0.18431602037876293, 0.19997340823679344, 0.1927213877944718, 0.19914656836576672, 0.20163754599680073, 0.21517859182245525, 0.22052026654751533, 0.20979018654551074, 0.820995465346539, 0.18585801019885306, 0.8255960612206755, 0.8502038186095965, 0.8172314409412338, 0.8357347592357304, 0.20820553628833927, 0.1648888684033074, 0.8071987186044637, 0.4877770094619732, 0.20987698196893279, 0.6196640168381641, 0.522641055487258, 0.1663220979989426, 0.20751480816381274, 0.20617596076257683, 0.7764780338634288, 0.7086305067049865, 0.18954959332209265, 0.18328344440438993, 0.166350771406939, 0.2056308967532806, 0.17936880381866704, 0.1876101125560169, 0.17874693544281195, 0.18367467510844648, 0.1751574987140634, 0.09371823918709743, 0.0827802451567281, 0.07951330318714278, 0.09526526289543213, 0.08238320838910129, 0.09415297091597419, 0.0934206687334479, 0.08973573655829936, 0.08298666918585329]}, "mutation_prompt": null}
{"id": "f06cd4ed-b94e-4600-8cd5-c161a0f4d224", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n\n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive multi-swarm optimizer integrating particle dynamics with variable neighborhood search and memory-based mutation for enhanced diversity and convergence stability.", "configspace": "", "generation": 95, "fitness": 0.33864077341812143, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8428176120222753, 0.8679147048600929, 0.8182870391067103, 0.8358482496742116, 0.8358190706866191, 0.8319606564987456, 0.8443648416531996, 0.8394414139162746, 0.8208204713994152, 0.6668862124707209, 0.7135653867605694, 0.6678390362212938, 0.6659475347231214, 0.6816218056508065, 0.6261581574785089, 0.6163081162499509, 0.6833777090222367, 0.6814197927861125, 0.17660255686132698, 0.17864887016458997, 0.15036357491374452, 0.15149363372538283, 0.1730335447990834, 0.140688181306729, 0.11180270556338712, 0.13756916851027468, 0.1794643028343973, 0.13098746867125444, 0.14250080261563558, 0.11888933021726567, 0.09025155290977405, 0.10093831055940228, 0.08491206583310684, 0.10751731474590431, 0.11985469620940459, 0.14034479978335912, 0.9357903084778212, 0.9696579002527173, 0.9312548403326649, 0.9523229004605258, 0.9244305291637556, 0.9409930610114263, 0.9518411243504901, 0.9086428886588848, 0.938931391325377, 0.5466748257277863, 0.4670795807662729, 0.6788090790846562, 0.5937746162682574, 0.4798106489937818, 0.6439552930743639, 0.4693431741535895, 0.535560481392117, 0.4935047280620679, 0.8200175434418748, 0.3623918399026691, 0.6949166862591152, 0.24756329402963417, 0.8444005645078965, 0.2687464337521379, 0.34155809692159456, 0.8440306974294114, 0.8474960527524537, 0.27141525287065316, 0.2929839529098418, 0.17313700756122996, 0.2073829573107452, 0.3199830424165011, 0.1688676219119214, 0.17122879312033124, 0.19277795504759754, 0.1765012394940566, 0.23743627702235148, 0.21350022918019218, 0.33989030202413195, 0.16396819376624194, 0.26487442078215695, 0.23392208343968957, 0.2151816596722187, 0.1972267735352401, 0.26769028716496257, 0.036098888279532226, 0.03984402267369691, 0.004465860525575627, 0.044189188466998486, 0.0014411566726215685, 0.05836377282530647, 0.022218069276373154, 0.04444706299000589, 0.11406793572061036, 0.18839910116820446, 0.0826167103957881, 0.0814499321556219, 0.042205774166637844, 0.07202789484236605, 0.0747083238656534, 0.2071516639298342, 0.11301742772726664, 0.06786045935223284, 0.17603051658203894, 0.12709550155028082, 0.13296668474440665, 0.11074974072464372, 0.08765527932270256, 0.2603894465530957, 0.1560239596751155, 0.19995385372941166, 0.12009378379879121, 0.13183771874066041, 0.22464623266946515, 0.14914011263162663, 0.13086064175776224, 0.13974491581476045, 0.21591826120930924, 0.0814627676215709, 0.11383769470547289, 0.09196031744089561, 0.5592504820203387, 0.5573516475172373, 0.5534513835540681, 0.5347037509914685, 0.5232819357945078, 0.5241788706832792, 0.5352030808786362, 0.5692140228410538, 0.6307578089229391, 0.10292662880270365, 0.11321609237074703, 0.14694600868962993, 0.1232221610514378, 0.12411719761617546, 0.5790418858928321, 0.14062449826804846, 0.11887426926514721, 0.14334403104668658, 0.17897979928014995, 0.21140084477820698, 0.147617563031349, 0.3199279861769665, 0.26304158410644474, 0.18915847013928266, 0.2552773136917471, 0.4712864494268584, 0.37630210755546945, 0.3606674646193184, 0.39512276060533946, 0.35292030939606567, 0.34137274570346854, 0.4570197822103709, 0.402763919215005, 0.37207968292381643, 0.49039255700418716, 0.44531887839567885, 0.26382887499607155, 0.23219189208711755, 0.22266235666368206, 0.2930614913060847, 0.2293162682086003, 0.3505808786951635, 0.29365475913805317, 0.2539077072859576, 0.24306917327277033, 0.24514751862145023, 0.2113575001901533, 0.2054131178145453, 0.22901365326546808, 0.22146285346347927, 0.23016056514258787, 0.2008033111535238, 0.20207565010552964, 0.23061286823555116, 0.22590678122996055, 0.22232606444678504, 0.21640945022299074, 0.21249808086684885, 0.1979925801010557, 0.23627377451447462, 0.23495178168620767, 0.22113569558638935, 0.18646781364846632, 0.18543978974152642, 0.18572173931163083, 0.8334808351119226, 0.8940947159062855, 0.8809316288376428, 0.19689163126654252, 0.8464908921728255, 0.16694003635856058, 0.8681405205662891, 0.45388075501682246, 0.20985233899011901, 0.7854860297052236, 0.5101967453958139, 0.16587699923380372, 0.5686270721448423, 0.5797706856724594, 0.10478421686197159, 0.5804652042065677, 0.18820287312175144, 0.1796483719591504, 0.18764501778343567, 0.22608484626661818, 0.17911386678674113, 0.18703300274115509, 0.17703138197275436, 0.17649509301588728, 0.18319798945418375, 0.12082679182677691, 0.09013888624758126, 0.09445198964508272, 0.09089184009512341, 0.09402902879760733, 0.09797190787478449, 0.0974541831703849, 0.08640661516024939, 0.08740510398384649]}, "mutation_prompt": null}
{"id": "d577ffc3-fbdc-445d-9b6e-cd6592e6538e", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.05\n        self.neighborhood_size = 5\n\n    def chaotic_map(self, x):\n        return 4.0 * x * (1 - x)  # Logistic map for chaos\n\n    def opposition_based_initialization(self):\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.dim)\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * self.chaotic_map(np.random.rand()))\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * self.chaotic_map(np.random.rand()))\n            self.w = max(0.2, self.w - self.adaptive_w_rate * self.chaotic_map(np.random.rand()))\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * self.chaotic_map(np.random.rand()))\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = self.opposition_based_initialization()\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "An adaptive PSO-DE hybrid with chaotic variation and opposition-based initialization for enhanced exploration and convergence.", "configspace": "", "generation": 96, "fitness": 0.3266583016308426, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8433346215900819, 0.8174904594140102, 0.8352994758035561, 0.8285659593167135, 0.8218982082345121, 0.8353631572713249, 0.847456168151971, 0.8326374645932173, 0.8149005342664756, 0.6311018878224655, 0.6854282543536543, 0.6610811070595873, 0.6651686539608166, 0.6542415708113958, 0.6734716613838232, 0.6531784615535654, 0.6531107878478519, 0.6482012434880973, 0.16452910302314216, 0.12647604118227862, 0.1498910681128789, 0.14275203234139722, 0.1275352312943243, 0.49574626863887017, 0.1635611213358381, 0.1638408008670318, 0.11868572406323452, 0.11677547340342076, 0.1113144188464843, 0.12581485151573268, 0.11115760078369219, 0.12910672934101708, 0.12949465094886525, 0.1552258681606108, 0.10076261248812557, 0.1279127175019672, 0.934558654775436, 0.9516571681931677, 0.9078238521963771, 0.9500819497189852, 0.9350240850286429, 0.9209013603327683, 0.9520563188634971, 0.9109141297644403, 0.9283871119672307, 0.569197769273637, 0.41461984379132877, 0.5385231609343974, 0.47165445671647055, 0.505365916798297, 0.5877353626521733, 0.3927498545606911, 0.5008388856981738, 0.4690856197193375, 0.6977729503367529, 0.22617661714116855, 0.2210907577993746, 0.7903946021454639, 0.7702480233405704, 0.8163200537916808, 0.6745263019618362, 0.4808840196235302, 0.3369347068411316, 0.17541398960243637, 0.26106392263827916, 0.19700692395307284, 0.1819691610437345, 0.23391491022664546, 0.2118070357867824, 0.19863995874747564, 0.18230454639227978, 0.22783839867907563, 0.18993440441600562, 0.17765827327837436, 0.210182285026267, 0.259009248633857, 0.21611867338965485, 0.13108447021726044, 0.22179120928581064, 0.19008065628209836, 0.2105052881347388, 0.004197344804597769, 0.029222185340004536, 0.015073808726562499, 9.999999999998899e-05, 0.027022031413459047, 0.0024481200939442394, 0.02681134856185985, 0.05768365551410948, 0.025079513414957177, 0.07397419289176399, 0.05690442990480582, 0.10123723282758634, 0.09193652838733557, 0.06764218842969316, 0.07104109662061309, 0.09801922882560554, 0.12988423997658316, 0.17510533777833193, 0.28758872525591006, 0.2590994158124146, 0.19051569408833202, 0.08651324080871547, 0.07802839045177479, 0.0708405765193153, 0.14856747275839766, 0.17436712594882198, 0.16937945253858688, 0.18264168842668715, 0.09411078817946761, 0.13716101109566026, 0.20820846721847242, 0.1297814327853657, 0.1986705506294696, 0.13473365164202422, 0.247396804012587, 0.10221697477750369, 0.49564653191865027, 0.5400661661278228, 0.5325979237355556, 0.5174007931733213, 0.5587455514799804, 0.5868502166800238, 0.5234043113194081, 0.508249075013159, 0.6123176232083054, 0.09364007639408134, 0.0778328748976832, 0.12707494458296698, 0.15128824261177087, 0.1346537455851594, 0.10389646390455187, 0.17321249425556817, 0.132251400342838, 0.13218039194829811, 0.1927477106942903, 0.19675139318962798, 0.23881740858175537, 0.32541283923975295, 0.1677750042044659, 0.21050906592067642, 0.2666650323046508, 0.19496702772182206, 0.20926531655532776, 0.3508707341784024, 0.40552927248248316, 0.39031030548051104, 0.4622341979966421, 0.3564750483108573, 0.3982370962411108, 0.37380575595545706, 0.4751841982377355, 0.4822447916779309, 0.26416190180688404, 0.28783652956456185, 0.28573356555353246, 0.24778443167649244, 0.2723737197519672, 0.3566051040823557, 0.2745987574387242, 0.29365592085865533, 0.3905406371888054, 0.21988040682547094, 0.21971960118284983, 0.2169900049980764, 0.22324753073934045, 0.21446651976530995, 0.21263880365472365, 0.2657755455571279, 0.21297632426222513, 0.23965130442164706, 0.20108764292248038, 0.5099782917025669, 0.21353199557081737, 0.1984833211927195, 0.19099929706062901, 0.18890862997327373, 0.21599492229994932, 0.23390584191039743, 0.2386830101429046, 0.16650307446412005, 0.1859940534065867, 0.15239144257285298, 0.8589982384612528, 0.19741873480258088, 0.19872682179602907, 0.8313502073602236, 0.15799508783403504, 0.8746527839191676, 0.6132471419914903, 0.20618719471960711, 0.5341576623108388, 0.5802585061919447, 0.38220599479687045, 0.16636807863390424, 0.6052782538413015, 0.48644879292818866, 0.6135957127477335, 0.18983780308121545, 0.19076918263024667, 0.18447250356635947, 0.16940632619868978, 0.17784123109600913, 0.17686002267468726, 0.20892925008675467, 0.18094880259769364, 0.18528136536784623, 0.09826033488613173, 0.08593598020516602, 0.10362300807094327, 0.08896070259822697, 0.08700507071726682, 0.08547824852338015, 0.09468287608124759, 0.09911760414460447, 0.10212164176589544]}, "mutation_prompt": null}
{"id": "0e8f2c1c-1fc7-4fd6-994a-fcbd68d61155", "solution": "import numpy as np\n\nclass EnhancedPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.7\n        self.c2 = 1.3\n        self.w = 0.4\n        self.de_F = 0.7\n        self.de_CR = 0.8\n        self.adaptive_c1_rate = 0.04\n        self.adaptive_c2_rate = 0.06\n        self.adaptive_w_rate = 0.02\n        self.adaptive_de_F_rate = 0.03\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.06  # Slight modification here\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "EnhancedPSODEOptimizer", "description": "A balanced PSO-DE hybrid utilizing adaptive inertia, randomized restarts, and clustering for enhanced exploitation and exploration.", "configspace": "", "generation": 97, "fitness": 0.3383408150105043, "feedback": "The algorithm EnhancedPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.849058471424659, 0.8423609054317105, 0.8148621521702433, 0.8453876675513521, 0.8649650772126372, 0.7940721238218513, 0.8392458726725708, 0.8174679614549586, 0.7863717548354539, 0.6408916360357235, 0.6868667064638292, 0.5600454662192409, 0.7162648953750365, 0.7011897003861052, 0.6578688634146975, 0.7054970172034143, 0.7137938145302138, 0.6372995575475096, 0.13998321029484595, 0.15009132874511855, 0.3812564063243884, 0.15442154383973006, 0.12915406142365848, 0.12848587201885275, 0.6133523816099671, 0.522773839312919, 0.15017878058327327, 0.13767200086305398, 0.13597707083206256, 0.11543094204701632, 0.13476498714219487, 0.14884087879921248, 0.39862036602721684, 0.1369521872632251, 0.11265345927475356, 0.14110283776392485, 0.9309459353864739, 0.9696958829529384, 0.9334331410822302, 0.9412578968887946, 0.9265767249629406, 0.9460406135173041, 0.9439266661790854, 0.9312900525289115, 0.9342772693078305, 0.5552928004336315, 0.5121496459134901, 0.5480299485213873, 0.5242831310790241, 0.49737861505400394, 0.5619126316639107, 0.5962999215327836, 0.4560641944958743, 0.4654534197681496, 0.812611454341592, 0.8110651700575836, 0.8422936457886392, 0.7918948381442211, 0.27113882504179976, 0.8146729293940889, 0.2284275510709063, 0.6335941373072785, 0.23147897892381852, 0.18183104243666193, 0.31061759533112043, 0.16116243309591394, 0.1271853414817644, 0.1747092049584591, 0.16129436895463478, 0.1738925546004202, 0.18016478168072847, 0.18787593237452338, 0.2183943371215653, 0.3283382944059591, 0.40118674926706, 0.21200690081762086, 0.22541764954642152, 0.2268093841818246, 0.23457193896206796, 0.2274037698469541, 0.20942910566993256, 0.032775933029632, 9.999999999998899e-05, 0.030817067234072626, 0.02947411821512702, 9.999999999998899e-05, 0.03375820851489275, 0.028046994887291676, 0.007649930681693284, 0.011583572350129523, 0.08661701326570326, 0.09522708590865692, 0.14799353812230187, 0.06489944440642903, 0.042380227052426056, 0.05982698266951558, 0.10279352752670856, 0.04475103319812679, 0.07025191163812128, 0.12045137919914195, 0.061031601110896894, 0.07963117492634919, 0.07563000118931795, 0.07944627717888342, 0.2593407942755629, 0.16567890347399572, 0.16614293958618453, 0.15321012788555977, 0.09903425605558991, 0.35263018398668045, 0.2549756521017854, 0.23335925607555852, 0.19427612355000023, 0.22506876243703478, 0.07935805563218967, 0.12259238678685447, 0.11578410287108742, 0.5843692513234847, 0.6043933992347205, 0.5263271186970653, 0.5476975113374536, 0.5079441704691552, 0.5289466717628877, 0.578640356899133, 0.5636514676537692, 0.5799991448977264, 0.13546120962168717, 0.17274905519384498, 0.09302218105701832, 0.12543648110482986, 0.10749300268052253, 0.092688436625332, 0.15484392659783608, 0.5461361603572423, 0.14854115558561842, 0.23610041201796594, 0.1951435286715002, 0.2793096888728782, 0.41441982829844837, 0.17420480428559004, 0.34976827824260515, 0.41818008425465614, 0.24918215059516524, 0.22469452877617146, 0.30055603568304234, 0.35799530634244436, 0.3258964072761401, 0.4409088510403655, 0.36763379555570697, 0.44905026628730993, 0.4631049626449152, 0.5143879898558548, 0.5051812885793947, 0.2380469180744853, 0.31780008038588725, 0.3153596997252667, 0.3667142863937841, 0.3126356418778129, 0.27197726632788366, 0.2447167290464266, 0.3029263618630301, 0.3166468736364323, 0.21097481056367573, 0.22145525762368135, 0.21296366714288828, 0.22473514245903925, 0.20429954825569807, 0.2604044522803062, 0.21975504069983776, 0.19823738776143385, 0.2348146279220369, 0.23768446244347263, 0.6005570436556948, 0.2290937678339432, 0.22006815105269129, 0.20939389646616224, 0.2475653050833816, 0.21876171156833701, 0.24049165018983187, 0.19003410512492291, 0.18490455888137536, 0.18607037806892157, 0.8646780425072293, 0.8973982812877334, 0.8499561635726242, 0.19705364683803506, 0.8690723936326462, 0.166803947290889, 0.2065167646907169, 0.45281024664244585, 0.21119039252594163, 0.535391326259492, 0.28449946860469755, 0.20780899520486695, 0.15429151231953853, 0.5914954933592924, 0.10470738893567688, 0.1641179069982016, 0.1827069188608107, 0.17664946489119449, 0.18544707287941875, 0.17748974709888554, 0.1747038213081793, 0.17592242277941783, 0.195753908214912, 0.1789899836522263, 0.17082540948305125, 0.09675851426139015, 0.09342409755150205, 0.08729370881745968, 0.09789313754514484, 0.09486576209820596, 0.08692238014435083, 0.08647407022889253, 0.08737853793424166, 0.0854896120493408]}, "mutation_prompt": null}
{"id": "dfab8365-ed0e-420b-881c-8ec1f193e68b", "solution": "import numpy as np\n\nclass HybridPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.de_F = 0.6\n        self.de_CR = 0.9\n        self.adaptive_c1_rate = 0.05\n        self.adaptive_c2_rate = 0.05\n        self.adaptive_w_rate = 0.01\n        self.adaptive_de_F_rate = 0.02\n        self.num_swarms = 4\n        self.memory_factor = 0.1\n        self.restart_prob = 0.07\n        self.neighborhood_size = 5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.4, self.c1 - self.adaptive_c1_rate * np.random.rand())\n            self.c2 = min(2.0, self.c2 + self.adaptive_c2_rate * np.random.rand())\n            self.w = max(0.3, self.w - self.adaptive_w_rate * np.random.rand())\n            self.de_F = max(0.4, self.de_F + self.adaptive_de_F_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        cognitive_component = self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                        social_component = self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(self.w * velocities[i] + cognitive_component + social_component, \n                                                self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "HybridPSODEOptimizer", "description": "A hybrid PSO-DE algorithm with adaptive parameter tuning, memory-driven exploration, and random perturbation for enhanced global search capabilities.", "configspace": "", "generation": 98, "fitness": 0.3139958016577773, "feedback": "The algorithm HybridPSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.7924509690790074, 0.8231263664257872, 0.7864480103699578, 0.783425595128182, 0.8130673226713012, 0.7766222137770332, 0.8190537414618714, 0.7962125255441003, 0.7740663496318296, 0.6163674170050805, 0.6410846013686907, 0.5664002112808824, 0.5839077645249302, 0.6460323869714277, 0.6202013605955219, 0.6046672058182454, 0.6146846252049483, 0.586479320014871, 0.13333651608920627, 0.11630966159280864, 0.1434007640378615, 0.14146475692684013, 0.1464589117714843, 0.1442757587286877, 0.16820113010077675, 0.11579754024119138, 0.10473054215748834, 0.13029304922796037, 0.14140859612201417, 0.1281361345297619, 0.11630867940984446, 0.13650348306203575, 0.10336167327603785, 0.11682182175007039, 0.1101543069934865, 0.10871901873864775, 0.9413687635289701, 0.9184227371222788, 0.9402350873795633, 0.9499129375308156, 0.944084459575098, 0.9335386890760167, 0.9640468889402832, 0.9327421000221043, 0.939686040154546, 0.5497600607207989, 0.5415614493905965, 0.058033817099895524, 0.5298576931626601, 0.5063236692274335, 0.5353895673439524, 0.47943159289569426, 0.5540378243187004, 0.5642660071354215, 0.22724306268832706, 0.25152632529855223, 0.38017739805549466, 0.7540499909513589, 0.26700531213067547, 0.27357027965835046, 0.22656657967139293, 0.8391660613899412, 0.6718332194785401, 0.17694434404879233, 0.2292605979468515, 0.17349612206792897, 0.1964377413044781, 0.1693045256812007, 0.20798758193222577, 0.19835446388686984, 0.18280852519809787, 0.20139693359466104, 0.1947539124583343, 0.18510035343347186, 0.20283563843472685, 0.23871521481310742, 0.17027507643442408, 0.3115042311038012, 0.23893800454679837, 0.22198589103325106, 0.2522381442463635, 0.04354783054744327, 0.0653706044763479, 0.010256745921930266, 9.999999999998899e-05, 0.06756188064904423, 0.006241927290430271, 0.0050613450854607445, 0.04425288454746734, 0.010983684267489635, 0.10823109877871395, 0.10181939124960937, 0.15880005657551466, 0.10408527002436985, 0.061131475438986116, 0.029610238266100763, 0.08261300787786263, 0.12199343212491842, 0.11299386135267109, 0.15233755191866527, 0.05879822116012712, 0.028248661214074877, 0.13782092857461448, 0.07102333829263752, 0.06958180165132977, 0.08297563794013096, 0.11572177089214042, 0.061141330354193446, 0.1806594875986891, 0.21022394874871686, 0.20800939460347723, 0.18327637869996893, 0.15587085839832837, 0.18573066466648902, 0.20940362609394647, 0.12365342320431483, 0.07858259321695038, 0.5167542856601237, 0.5051225645802253, 0.5104912565167362, 0.5276351962240668, 0.497305800602862, 0.509048750329604, 0.56576088011087, 0.5846841820671885, 0.5135259196223778, 0.0898520318776116, 0.128734505106482, 0.11254651777536984, 0.10487058811886707, 0.07900024017046614, 0.12586686236494515, 0.13559635777365697, 0.49560525766588215, 0.15403616556765032, 0.16954705287357652, 0.3428862101026088, 0.20566712812795251, 0.1845709541612749, 0.17436912713890573, 0.184901597929364, 0.27522341270355133, 0.2641741789852021, 0.23487735160918788, 0.43203111152200413, 0.3419474186118461, 0.42172471880124973, 0.35583946224418317, 0.42150776646802246, 0.4716691629206802, 0.4664612476480692, 0.31812584648268993, 0.46020510737501796, 0.20845530429615933, 0.29508464026977144, 0.1971431038286825, 0.2849955887566906, 0.30742060637973934, 0.2923273145144404, 0.20470651996975198, 0.33024073183753144, 0.29892473163106004, 0.2266715425771858, 0.20232041671306533, 0.2219583988880499, 0.20670268695657923, 0.21961143043440612, 0.2072223690227939, 0.21846553282266057, 0.2534932479670099, 0.24360410440830849, 0.2184520102322538, 0.1916639076827219, 0.24209336805762427, 0.1985598479455969, 0.19537036824782705, 0.1973558545364713, 0.17523135345459828, 0.23649106587285096, 0.19518695060101077, 0.18635595652275683, 0.1846509344853564, 0.8146960471210676, 0.8710140245961067, 0.1974511843756399, 0.16842890959052115, 0.8275058892152996, 0.16274582345480537, 0.8089186857466375, 0.5818971252537224, 0.20840667730725249, 0.7305027848540218, 0.6675786850202476, 0.1661174429465384, 0.1660724902728441, 0.20794314125447277, 0.5723789440531688, 0.787074432586329, 0.18170772381773537, 0.17862624421870932, 0.1808671733848437, 0.18041831798602326, 0.20641062697507606, 0.18235808658978114, 0.1773195732124957, 0.1837164927501147, 0.18378566892647663, 0.1333458023047237, 0.08738117593144457, 0.0932067305407096, 0.08545414408284835, 0.09935385221586224, 0.11271052292600248, 0.08562896890115446, 0.09175892502432403, 0.09351513444369353]}, "mutation_prompt": null}
{"id": "d6c4e7ad-61ac-4105-a849-9af237a05bbf", "solution": "import numpy as np\n\nclass AdaptivePSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = (-2.0, 2.0)\n        self.c1 = 1.5  # Slightly adjusted for better exploration\n        self.c2 = 1.5  # Balanced cognitive and social components\n        self.w = 0.5   # Increased inertia weight for more exploration\n        self.de_F = 0.7\n        self.de_CR = 0.9  # Increased crossover rate for more diversity\n        self.adaptive_rate = 0.04\n        self.num_swarms = 3  # Reduced number of swarms to focus cooperation\n        self.memory_factor = 0.1\n        self.restart_prob = 0.03  # Reduced restart probability for stability\n        self.neighborhood_size = 3  # Smaller neighborhood for DE mutation\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(self.velocity_clamp[0], self.velocity_clamp[1], (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([np.inf] * self.pop_size)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        swarm_assignments = np.random.choice(self.num_swarms, self.pop_size)\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in particles])\n            evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = particles[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = particles[i]\n\n            self.c1 = max(0.3, self.c1 - self.adaptive_rate * np.random.rand())\n            self.c2 = min(2.3, self.c2 + self.adaptive_rate * np.random.rand())\n            self.w = max(0.2, self.w - self.adaptive_rate * np.random.rand())\n            self.de_F = max(0.5, self.de_F + self.adaptive_rate * np.random.rand())\n            \n            if np.random.rand() < self.restart_prob:\n                random_idx = np.random.choice(self.pop_size)\n                particles[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                scores[random_idx] = func(particles[random_idx])\n                evaluations += 1\n\n            for s in range(self.num_swarms):\n                swarm_indices = np.where(swarm_assignments == s)[0]\n                if len(swarm_indices) > 0:\n                    swarm_global_best_position = personal_best_positions[swarm_indices[np.argmin(personal_best_scores[swarm_indices])]]\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    for i in swarm_indices:\n                        velocities[i] = self.w * velocities[i] + self.c1 * r1 * (personal_best_positions[i] - particles[i]) + self.c2 * r2 * (swarm_global_best_position - particles[i])\n                        velocities[i] = np.clip(velocities[i], self.velocity_clamp[0], self.velocity_clamp[1])\n                        particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.pop_size):\n                sorted_indices = np.argsort(personal_best_scores)\n                neighborhood_indices = sorted_indices[max(0, i-self.neighborhood_size):min(self.pop_size, i+self.neighborhood_size)]\n                a, b, c = np.random.choice(neighborhood_indices, 3, replace=False)\n                mutant = np.clip(particles[a] + self.de_F * (particles[b] - particles[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.de_CR or j == j_rand:\n                        trial[j] = mutant[j]\n                trial_score = func(trial)\n                if evaluations < self.budget and trial_score < scores[i]:\n                    particles[i] = trial\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    evaluations += 1\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODEOptimizer", "description": "An adaptive PSO-DE hybrid with dynamic parameter control and multiswarm cooperation for enhanced optimization efficiency.", "configspace": "", "generation": 99, "fitness": 0.32171099103744966, "feedback": "The algorithm AdaptivePSODEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "6ce2fa37-73f3-481f-92b8-7e81a06fe7a7", "metadata": {"aucs": [0.8417270637026641, 0.8171408008692282, 0.8339419858148995, 0.8402211227485644, 0.8041677817022077, 0.8243675984111523, 0.8538642974779758, 0.8460821294394105, 0.8244672559457856, 0.7008295527876407, 0.7058035157252498, 0.6686701739918285, 0.6798733649599245, 0.7037674969510316, 0.6807404319030808, 0.7159144876088036, 0.6960823669777093, 0.6234023500600956, 0.1836701478577284, 0.13372014851944003, 0.15090208068649624, 0.11481352746687168, 0.11208617116844033, 0.17414141057952437, 0.11193810167879636, 0.16889110185246814, 0.17566700050557715, 0.09433951375063676, 0.1690064378122459, 0.1462684046698347, 0.1262298879710555, 0.0810833677204551, 0.10514728239338822, 0.12039096163586815, 0.11287862445637709, 0.11978847904144496, 0.9420628825169425, 0.9413689445320201, 0.9308277497595638, 0.9477736005205244, 0.922554016966696, 0.9258518565963088, 0.9497120992399631, 0.9227155887410745, 0.9290414079761197, 0.6366958856997282, 0.6268192268949233, 0.4366396330363602, 0.6027949782901822, 0.6223139516398222, 0.5360454612274986, 0.5397379355700974, 0.5191546421998345, 0.5530580053085145, 0.22676567831418526, 0.22348250916603807, 0.8610904704396409, 0.1934803772232251, 0.7988747742168304, 0.21131787445550798, 0.8438541417363562, 0.35124591604819566, 0.3617039235904702, 0.2006471798212639, 0.20654458973295575, 0.21414122619856857, 0.1299757283875097, 0.22152284795094612, 0.16772697479187426, 0.20916338872985807, 0.20649129301856073, 0.1899302288802458, 0.14659593114862668, 0.19343520495737077, 0.17566182249590434, 0.24137644959559434, 0.1690686661144919, 0.17658008670637027, 0.1948997883311372, 0.23542521379288683, 0.2098540410591686, 0.005576867482515069, 0.09272712814741702, 0.06766228676538466, 0.0003693948759529997, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003387177347929926, 9.999999999998899e-05, 0.0837467895098436, 0.09913411859994925, 0.05239053554626294, 0.12072801479740103, 0.08847830672938928, 0.0905856781844685, 0.1008017240686162, 0.13860946201607915, 0.09634524159902047, 0.14263216330365502, 0.20981515530378547, 0.0965164049521221, 0.0917999891913458, 0.12210422317567504, 0.07029795838119313, 0.14777607045988883, 0.1561433195673062, 0.16917468922627354, 0.06100007511918537, 0.1929059344983335, 0.08030031588877318, 0.213492373110567, 0.07426227985152178, 0.0652618371050927, 0.11308171736587769, 0.08083548214215874, 0.055400474199684635, 0.08147307712708463, 0.5292022447690612, 0.5011570074966534, 0.5592301896303369, 0.5643769613435847, 0.5365136071265838, 0.4984152898507751, 0.5778633925924634, 0.5662269419031852, 0.5490453261308774, 0.11817975332851605, 0.171369873626389, 0.10622979129289123, 0.13707121647807852, 0.10815763119844946, 0.17855170850067548, 0.11277704708966962, 0.1261753820358268, 0.1302049981262824, 0.15803621864231376, 0.22856265483372884, 0.25499398057466716, 0.14945380033857925, 0.1954952915633682, 0.25008589003729265, 0.18486738732188834, 0.3117544297035102, 0.4637839208793536, 0.3789600601669819, 0.337062856646545, 0.29665641616635596, 0.3537851672535973, 0.39124441075098926, 0.42843060538550204, 0.44421321457049223, 0.36919805799758953, 0.46723300696359826, 0.2841698320625017, 0.29047587650782725, 0.3000507104678152, 0.2998685685743302, 0.23113559088198188, 0.26451269333631044, 0.34710788569166295, 0.2856625030491309, 0.23804091379716552, 0.23640486107630665, 0.2596274209552871, 0.2336032915429791, 0.20735528329526598, 0.24326813812913362, 0.23457002245877245, 0.2577976939782719, 0.237553393530461, 0.22327698064684676, 0.19033926091442033, 0.2198352189474565, 0.20671001565338887, 0.20181042162929785, 0.2152952745586395, 0.19537288476502046, 0.18293304203852223, 0.2240847699194074, 0.24374505713792993, 0.8630718992944812, 0.1848573366623757, 0.8779625720584769, 0.1982697493641986, 0.17676825958014508, 0.8367362806009613, 0.17560266731585483, 0.8931155540319922, 0.16516236674372797, 0.6623113935858345, 0.21085176714410248, 0.7180836237486421, 0.49467926692194875, 0.16773143313537875, 0.20963821095320134, 0.6272121312199073, 0.12691232891521687, 0.6984796234639654, 0.18020534007288602, 0.1877366113800626, 0.19754487182983005, 0.18628912723627467, 0.19428838811110005, 0.18038275264488435, 0.19007873035902734, 0.18820593664716412, 0.18244564428327392, 0.09195077438539234, 0.10038333800971744, 0.09764475695095953, 0.09269003177002211, 0.0913106328513128, 0.09307187895301283, 0.09396115868493438, 0.0906145458672819, 0.10403131495831819]}, "mutation_prompt": null}
