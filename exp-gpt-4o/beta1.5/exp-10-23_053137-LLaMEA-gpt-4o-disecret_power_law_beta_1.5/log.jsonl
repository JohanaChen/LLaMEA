{"id": "b5953a9a-b355-480f-ac78-f1573d16645a", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3270393588475144, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7261951749981467, 0.7261951749981467, 0.7261951749981467, 0.7240109184586018, 0.7240109184586018, 0.7240109184586018, 0.7169494180888172, 0.7169494180888172, 0.7169494180888172, 0.49921554037507676, 0.49921554037507676, 0.49921554037507676, 0.5000410121067161, 0.5000410121067161, 0.5000410121067161, 0.5332064680180376, 0.5332064680180376, 0.5332064680180376, 0.11300722253273976, 0.11300722253273976, 0.11300722253273976, 0.1008609706090614, 0.1008609706090614, 0.1008609706090614, 0.10399046479165974, 0.10399046479165974, 0.10399046479165974, 0.09549110977242559, 0.09549110977242559, 0.09549110977242559, 0.09414934164953737, 0.09414934164953737, 0.09414934164953737, 0.08396562056464807, 0.08396562056464807, 0.08396562056464807, 0.9308902689300774, 0.9308902689300774, 0.9308902689300774, 0.9231587568129964, 0.9231587568129964, 0.9231587568129964, 0.8993839964329611, 0.8993839964329611, 0.8993839964329611, 0.3438203183702141, 0.3438203183702141, 0.3438203183702141, 0.3809689132598574, 0.3809689132598574, 0.3809689132598574, 0.36387926937432236, 0.36387926937432236, 0.36387926937432236, 0.7268826068557661, 0.7268826068557661, 0.7268826068557661, 0.6738557199470785, 0.6738557199470785, 0.6738557199470785, 0.6442769320881785, 0.6442769320881785, 0.6442769320881785, 0.21498980115526845, 0.21498980115526845, 0.21498980115526845, 0.16120910604541372, 0.16120910604541372, 0.16120910604541372, 0.20725891261838003, 0.20725891261838003, 0.20725891261838003, 0.1331505866165309, 0.1331505866165309, 0.1331505866165309, 0.1718750113769102, 0.1718750113769102, 0.1718750113769102, 0.16519084335204204, 0.16519084335204204, 0.16519084335204204, 0.2822335553977815, 0.2822335553977815, 0.2822335553977815, 0.20775509014771365, 0.20775509014771365, 0.20775509014771365, 0.2874206385533379, 0.2874206385533379, 0.2874206385533379, 0.36716807682308383, 0.36716807682308383, 0.36716807682308383, 0.3613979721725469, 0.3613979721725469, 0.3613979721725469, 0.4185987540661491, 0.4185987540661491, 0.4185987540661491, 0.05285778350116821, 0.05285778350116821, 0.05285778350116821, 0.14294495339506408, 0.14294495339506408, 0.14294495339506408, 0.11703567399867498, 0.11703567399867498, 0.11703567399867498, 0.23008732101231955, 0.23008732101231955, 0.23008732101231955, 0.23264280990423936, 0.23264280990423936, 0.23264280990423936, 0.21606864397101755, 0.21606864397101755, 0.21606864397101755, 0.6129374485886814, 0.6129374485886814, 0.6129374485886814, 0.61965410109342, 0.61965410109342, 0.61965410109342, 0.5646670209161818, 0.5646670209161818, 0.5646670209161818, 0.09264885081054386, 0.09264885081054386, 0.09264885081054386, 0.10973685817843448, 0.10973685817843448, 0.10973685817843448, 0.08527017268976855, 0.08527017268976855, 0.08527017268976855, 0.13258578052872527, 0.13258578052872527, 0.13258578052872527, 0.1396512130492129, 0.1396512130492129, 0.1396512130492129, 0.15324860454869627, 0.15324860454869627, 0.15324860454869627, 0.3624607833794218, 0.3624607833794218, 0.3624607833794218, 0.3368101085300508, 0.3368101085300508, 0.3368101085300508, 0.38302659435890674, 0.38302659435890674, 0.38302659435890674, 0.29249223978851335, 0.29249223978851335, 0.29249223978851335, 0.2735753831612662, 0.2735753831612662, 0.2735753831612662, 0.27132041837495713, 0.27132041837495713, 0.27132041837495713, 0.18651842461392631, 0.18651842461392631, 0.18651842461392631, 0.17926612378920348, 0.17926612378920348, 0.17926612378920348, 0.19982602425419838, 0.19982602425419838, 0.19982602425419838, 0.18609502193591632, 0.18609502193591632, 0.18609502193591632, 0.192740555196104, 0.192740555196104, 0.192740555196104, 0.1787376268126185, 0.1787376268126185, 0.1787376268126185, 0.7198691305379168, 0.7198691305379168, 0.7198691305379168, 0.6445916383241028, 0.6445916383241028, 0.6445916383241028, 0.5373982492724959, 0.5373982492724959, 0.5373982492724959, 0.20110899063036136, 0.20110899063036136, 0.20110899063036136, 0.19854322165272542, 0.19854322165272542, 0.19854322165272542, 0.7177835462349802, 0.7177835462349802, 0.7177835462349802, 0.18317825905690133, 0.18317825905690133, 0.18317825905690133, 0.19576416011375075, 0.19576416011375075, 0.19576416011375075, 0.19791987267330002, 0.19791987267330002, 0.19791987267330002, 0.09092589731754686, 0.09092589731754686, 0.09092589731754686, 0.07139375232882961, 0.07139375232882961, 0.07139375232882961, 0.0870021861348127, 0.0870021861348127, 0.0870021861348127]}, "mutation_prompt": null}
{"id": "d15ac83e-d75d-4ef7-92a1-d717b3ed2c58", "solution": "import numpy as np\n\nclass AdaptiveDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(7):  # Perform a few more local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "AdaptiveDEALS", "description": "An Adaptive Differential Evolution with Stochastic Local Search to dynamically balance exploration and exploitation in the search space.", "configspace": "", "generation": 1, "fitness": 0.28048782231345665, "feedback": "The algorithm AdaptiveDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.6682646753254553, 0.6682646753254553, 0.6682646753254553, 0.6953902398435261, 0.6953902398435261, 0.6953902398435261, 0.657692108454021, 0.657692108454021, 0.657692108454021, 0.3858332805624076, 0.3858332805624076, 0.3858332805624076, 0.37429545100155526, 0.37429545100155526, 0.37429545100155526, 0.3933601440764313, 0.3933601440764313, 0.3933601440764313, 0.10252741025740764, 0.10252741025740764, 0.10252741025740764, 0.10010944680449485, 0.10010944680449485, 0.10010944680449485, 0.08974014845387557, 0.08974014845387557, 0.08974014845387557, 0.08926863796736306, 0.08926863796736306, 0.08926863796736306, 0.08773639405431644, 0.08773639405431644, 0.08773639405431644, 0.09949824815970698, 0.09949824815970698, 0.09949824815970698, 0.858253720669488, 0.858253720669488, 0.858253720669488, 0.8453229351360543, 0.8453229351360543, 0.8453229351360543, 0.8556898266926342, 0.8556898266926342, 0.8556898266926342, 0.2786749238931294, 0.2786749238931294, 0.2786749238931294, 0.2844155236331778, 0.2844155236331778, 0.2844155236331778, 0.28903422472040274, 0.28903422472040274, 0.28903422472040274, 0.6426764375524168, 0.6426764375524168, 0.6426764375524168, 0.6311894270528433, 0.6311894270528433, 0.6311894270528433, 0.6284527114852547, 0.6284527114852547, 0.6284527114852547, 0.1801428596830421, 0.1801428596830421, 0.1801428596830421, 0.1476887022779041, 0.1476887022779041, 0.1476887022779041, 0.18415096695524225, 0.18415096695524225, 0.18415096695524225, 0.14308378152670143, 0.14308378152670143, 0.14308378152670143, 0.16571377814866628, 0.16571377814866628, 0.16571377814866628, 0.18842904970126073, 0.18842904970126073, 0.18842904970126073, 0.15532259438008622, 0.15532259438008622, 0.15532259438008622, 0.18630986910902125, 0.18630986910902125, 0.18630986910902125, 0.16918430492430725, 0.16918430492430725, 0.16918430492430725, 0.31584389714772587, 0.31584389714772587, 0.31584389714772587, 0.1970406380985722, 0.1970406380985722, 0.1970406380985722, 0.3100517804358972, 0.3100517804358972, 0.3100517804358972, 0.09468827306212169, 0.09468827306212169, 0.09468827306212169, 0.04070330879302586, 0.04070330879302586, 0.04070330879302586, 0.08493889059556825, 0.08493889059556825, 0.08493889059556825, 0.17164693610144133, 0.17164693610144133, 0.17164693610144133, 0.20637196948680447, 0.20637196948680447, 0.20637196948680447, 0.16713214856773517, 0.16713214856773517, 0.16713214856773517, 0.5107030020562907, 0.5107030020562907, 0.5107030020562907, 0.5346125622435769, 0.5346125622435769, 0.5346125622435769, 0.504029396072869, 0.504029396072869, 0.504029396072869, 0.08673876966200877, 0.08673876966200877, 0.08673876966200877, 0.08759800768299231, 0.08759800768299231, 0.08759800768299231, 0.0924127863882841, 0.0924127863882841, 0.0924127863882841, 0.13363595706040654, 0.13363595706040654, 0.13363595706040654, 0.12431490112637222, 0.12431490112637222, 0.12431490112637222, 0.12253325759538625, 0.12253325759538625, 0.12253325759538625, 0.3070212933587382, 0.3070212933587382, 0.3070212933587382, 0.29357751233389084, 0.29357751233389084, 0.29357751233389084, 0.3089594764018767, 0.3089594764018767, 0.3089594764018767, 0.2162578265850178, 0.2162578265850178, 0.2162578265850178, 0.20484614177193072, 0.20484614177193072, 0.20484614177193072, 0.22555244068436353, 0.22555244068436353, 0.22555244068436353, 0.194675712565345, 0.194675712565345, 0.194675712565345, 0.19963637193700767, 0.19963637193700767, 0.19963637193700767, 0.18721280863209666, 0.18721280863209666, 0.18721280863209666, 0.17887525258609627, 0.17887525258609627, 0.17887525258609627, 0.18921643188477733, 0.18921643188477733, 0.18921643188477733, 0.2016608921283347, 0.2016608921283347, 0.2016608921283347, 0.41718952375950036, 0.41718952375950036, 0.41718952375950036, 0.1584388784176859, 0.1584388784176859, 0.1584388784176859, 0.528255862726428, 0.528255862726428, 0.528255862726428, 0.3965960841263597, 0.3965960841263597, 0.3965960841263597, 0.19766884509697746, 0.19766884509697746, 0.19766884509697746, 0.6135568569898575, 0.6135568569898575, 0.6135568569898575, 0.18333014983651985, 0.18333014983651985, 0.18333014983651985, 0.19373707908669735, 0.19373707908669735, 0.19373707908669735, 0.1944897643249408, 0.1944897643249408, 0.1944897643249408, 0.0850599921851437, 0.0850599921851437, 0.0850599921851437, 0.08152469125349471, 0.08152469125349471, 0.08152469125349471, 0.07533501321652658, 0.07533501321652658, 0.07533501321652658]}, "mutation_prompt": null}
{"id": "644ab8ae-6e15-42e6-aabe-645e1d6c7316", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Differential weight slightly increased for exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Perturbation\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.adaptive_perturbation(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_perturbation(self, solution, func):\n        # Adaptive perturbation: small changes with random scaling\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        perturbation_scale = np.random.rand() * 0.5 + 0.5\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim) * perturbation_scale\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Perturbation and Local Search to effectively balance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": 0.2952543561118418, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.6581982968829749, 0.6581982968829749, 0.6581982968829749, 0.6540628503858633, 0.6540628503858633, 0.6540628503858633, 0.6740597261764032, 0.6740597261764032, 0.6740597261764032, 0.39770199503232084, 0.39770199503232084, 0.39770199503232084, 0.3540517081014799, 0.3540517081014799, 0.3540517081014799, 0.42345178361786906, 0.42345178361786906, 0.42345178361786906, 0.09575099747180771, 0.09575099747180771, 0.09575099747180771, 0.09467633532457964, 0.09467633532457964, 0.09467633532457964, 0.1099963932737743, 0.1099963932737743, 0.1099963932737743, 0.07940689521820055, 0.07940689521820055, 0.07940689521820055, 0.08308017117696287, 0.08308017117696287, 0.08308017117696287, 0.07520544663143813, 0.07520544663143813, 0.07520544663143813, 0.8758096041921807, 0.8758096041921807, 0.8758096041921807, 0.8961993435134121, 0.8961993435134121, 0.8961993435134121, 0.8879162105455493, 0.8879162105455493, 0.8879162105455493, 0.30372439375268234, 0.30372439375268234, 0.30372439375268234, 0.3041401921256499, 0.3041401921256499, 0.3041401921256499, 0.3395537793838723, 0.3395537793838723, 0.3395537793838723, 0.5424942467506403, 0.5424942467506403, 0.5424942467506403, 0.5664225077695507, 0.5664225077695507, 0.5664225077695507, 0.6639452319703361, 0.6639452319703361, 0.6639452319703361, 0.21140012156822774, 0.21140012156822774, 0.21140012156822774, 0.19721999493650222, 0.19721999493650222, 0.19721999493650222, 0.1613131412353911, 0.1613131412353911, 0.1613131412353911, 0.18786384563026126, 0.18786384563026126, 0.18786384563026126, 0.20041691472497936, 0.20041691472497936, 0.20041691472497936, 0.21163294991077086, 0.21163294991077086, 0.21163294991077086, 0.15053280376812816, 0.15053280376812816, 0.15053280376812816, 0.1617751299534368, 0.1617751299534368, 0.1617751299534368, 0.1952220747235618, 0.1952220747235618, 0.1952220747235618, 0.3109000736425309, 0.3109000736425309, 0.3109000736425309, 0.2956841281713888, 0.2956841281713888, 0.2956841281713888, 0.323017046694695, 0.323017046694695, 0.323017046694695, 0.05769981280876635, 0.05769981280876635, 0.05769981280876635, 0.1175894898874631, 0.1175894898874631, 0.1175894898874631, 0.05230637006171002, 0.05230637006171002, 0.05230637006171002, 0.1801990164897146, 0.1801990164897146, 0.1801990164897146, 0.19504296505117114, 0.19504296505117114, 0.19504296505117114, 0.16893674279655113, 0.16893674279655113, 0.16893674279655113, 0.5368910343101075, 0.5368910343101075, 0.5368910343101075, 0.5192515199876374, 0.5192515199876374, 0.5192515199876374, 0.5370063474540298, 0.5370063474540298, 0.5370063474540298, 0.08785188817967371, 0.08785188817967371, 0.08785188817967371, 0.088726076969601, 0.088726076969601, 0.088726076969601, 0.09613524716733024, 0.09613524716733024, 0.09613524716733024, 0.1397426358837227, 0.1397426358837227, 0.1397426358837227, 0.15910094457564306, 0.15910094457564306, 0.15910094457564306, 0.16656138829670686, 0.16656138829670686, 0.16656138829670686, 0.2881974058582828, 0.2881974058582828, 0.2881974058582828, 0.290876122347568, 0.290876122347568, 0.290876122347568, 0.3005921061365079, 0.3005921061365079, 0.3005921061365079, 0.23255575835843278, 0.23255575835843278, 0.23255575835843278, 0.23786944926037645, 0.23786944926037645, 0.23786944926037645, 0.23076429092165895, 0.23076429092165895, 0.23076429092165895, 0.2034502802311695, 0.2034502802311695, 0.2034502802311695, 0.20634776605324112, 0.20634776605324112, 0.20634776605324112, 0.17893537692595296, 0.17893537692595296, 0.17893537692595296, 0.1761514781988408, 0.1761514781988408, 0.1761514781988408, 0.17864934804113486, 0.17864934804113486, 0.17864934804113486, 0.18187673853755093, 0.18187673853755093, 0.18187673853755093, 0.7504022977632883, 0.7504022977632883, 0.7504022977632883, 0.4614055495571475, 0.4614055495571475, 0.4614055495571475, 0.3672646322640978, 0.3672646322640978, 0.3672646322640978, 0.1992903495279208, 0.1992903495279208, 0.1992903495279208, 0.5482820414986649, 0.5482820414986649, 0.5482820414986649, 0.6438910650239056, 0.6438910650239056, 0.6438910650239056, 0.18918007790202718, 0.18918007790202718, 0.18918007790202718, 0.18781965846964144, 0.18781965846964144, 0.18781965846964144, 0.1877355250571061, 0.1877355250571061, 0.1877355250571061, 0.08109181938214038, 0.08109181938214038, 0.08109181938214038, 0.07686353141251656, 0.07686353141251656, 0.07686353141251656, 0.068953157146187, 0.068953157146187, 0.068953157146187]}, "mutation_prompt": null}
{"id": "f7a6b27f-e08d-4ba2-bb54-af9737a81899", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Differential weight\n        self.CR = 0.8  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Biased Random Walk\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.2 * np.random.randn(self.dim), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.15 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(7):  # Perform a larger number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALSImproved", "description": "A hybrid metaheuristic integrating Differential Evolution with an Adaptive Local Search and Biased Random Walk for improved exploration and exploitation.", "configspace": "", "generation": 3, "fitness": 0.17133089270842172, "feedback": "The algorithm HybridDEALSImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.3529168367403569, 0.3529168367403569, 0.3529168367403569, 0.34352075926628445, 0.34352075926628445, 0.34352075926628445, 0.36227213078710496, 0.36227213078710496, 0.36227213078710496, 0.004040211146691175, 0.004040211146691175, 0.004040211146691175, 0.0012035775208336652, 0.0012035775208336652, 0.0012035775208336652, 0.02581465060137056, 0.02581465060137056, 0.02581465060137056, 0.08403343394593543, 0.08403343394593543, 0.08403343394593543, 0.0929247785974594, 0.0929247785974594, 0.0929247785974594, 0.08572376367652756, 0.08572376367652756, 0.08572376367652756, 0.07757073463259512, 0.07757073463259512, 0.07757073463259512, 0.08137961301857122, 0.08137961301857122, 0.08137961301857122, 0.07584546442858442, 0.07584546442858442, 0.07584546442858442, 0.9064690782639642, 0.9064690782639642, 0.9064690782639642, 0.8795424133728413, 0.8795424133728413, 0.8795424133728413, 0.8634733204065532, 0.8634733204065532, 0.8634733204065532, 0.17613718340638773, 0.17613718340638773, 0.17613718340638773, 0.1665613542680432, 0.1665613542680432, 0.1665613542680432, 0.1838354907417168, 0.1838354907417168, 0.1838354907417168, 0.2187196633039371, 0.2187196633039371, 0.2187196633039371, 0.21666820405854925, 0.21666820405854925, 0.21666820405854925, 0.2320821800899232, 0.2320821800899232, 0.2320821800899232, 0.11448951029173571, 0.11448951029173571, 0.11448951029173571, 0.10028287332916153, 0.10028287332916153, 0.10028287332916153, 0.10773947041485521, 0.10773947041485521, 0.10773947041485521, 0.08540707677180126, 0.08540707677180126, 0.08540707677180126, 0.1061303529434563, 0.1061303529434563, 0.1061303529434563, 0.10463678225115469, 0.10463678225115469, 0.10463678225115469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04221808089455403, 0.04221808089455403, 0.04221808089455403, 0.09287310263516169, 0.09287310263516169, 0.09287310263516169, 0.05024651011743231, 0.05024651011743231, 0.05024651011743231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05165083393708669, 0.05165083393708669, 0.05165083393708669, 0.06416248689087678, 0.06416248689087678, 0.06416248689087678, 0.039054370236991987, 0.039054370236991987, 0.039054370236991987, 0.3412734232663497, 0.3412734232663497, 0.3412734232663497, 0.3262997350336707, 0.3262997350336707, 0.3262997350336707, 0.32860446354439965, 0.32860446354439965, 0.32860446354439965, 0.07833263537724466, 0.07833263537724466, 0.07833263537724466, 0.07928291195776638, 0.07928291195776638, 0.07928291195776638, 0.07967649817239508, 0.07967649817239508, 0.07967649817239508, 0.13158629839013725, 0.13158629839013725, 0.13158629839013725, 0.12191042297672816, 0.12191042297672816, 0.12191042297672816, 0.141938896873398, 0.141938896873398, 0.141938896873398, 0.2279904966464159, 0.2279904966464159, 0.2279904966464159, 0.2309659048915702, 0.2309659048915702, 0.2309659048915702, 0.24658989099890027, 0.24658989099890027, 0.24658989099890027, 0.16684415879959524, 0.16684415879959524, 0.16684415879959524, 0.16065623487630565, 0.16065623487630565, 0.16065623487630565, 0.16939504787840398, 0.16939504787840398, 0.16939504787840398, 0.19949345475494096, 0.19949345475494096, 0.19949345475494096, 0.17764820334095788, 0.17764820334095788, 0.17764820334095788, 0.19389821364591353, 0.19389821364591353, 0.19389821364591353, 0.1827481329229932, 0.1827481329229932, 0.1827481329229932, 0.17990114066658403, 0.17990114066658403, 0.17990114066658403, 0.16939853894160972, 0.16939853894160972, 0.16939853894160972, 0.2207655255630967, 0.2207655255630967, 0.2207655255630967, 0.23095860556505976, 0.23095860556505976, 0.23095860556505976, 0.2260736350080027, 0.2260736350080027, 0.2260736350080027, 0.17851817081898114, 0.17851817081898114, 0.17851817081898114, 0.15347407503895028, 0.15347407503895028, 0.15347407503895028, 0.2411676362159304, 0.2411676362159304, 0.2411676362159304, 0.19424388865451425, 0.19424388865451425, 0.19424388865451425, 0.16915276709188087, 0.16915276709188087, 0.16915276709188087, 0.19049797504058286, 0.19049797504058286, 0.19049797504058286, 0.06971507717681691, 0.06971507717681691, 0.06971507717681691, 0.07374127631004834, 0.07374127631004834, 0.07374127631004834, 0.06285464557772324, 0.06285464557772324, 0.06285464557772324]}, "mutation_prompt": null}
{"id": "90d30804-babf-4892-bc9f-64ee4ab9e7e6", "solution": "import numpy as np\n\nclass HybridDEALSPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Updated differential weight for improved exploration\n        self.CR = 0.85  # Adjusted crossover probability for balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with enhanced strategy\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover with modified logic\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Stochastic local search: varied perturbations\n        step_size = 0.15 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(6):  # Perform more local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALSPlus", "description": "A hybrid algorithm that combines Differential Evolution with Stochastic Local Search using adaptive strategies to balance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": 0.23843348952096963, "feedback": "The algorithm HybridDEALSPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.5796705872254406, 0.5796705872254406, 0.5796705872254406, 0.5588604286405667, 0.5588604286405667, 0.5588604286405667, 0.5887705483693102, 0.5887705483693102, 0.5887705483693102, 0.27359024100932616, 0.27359024100932616, 0.27359024100932616, 0.289759612223216, 0.289759612223216, 0.289759612223216, 0.2693385303806832, 0.2693385303806832, 0.2693385303806832, 0.09862810879528283, 0.09862810879528283, 0.09862810879528283, 0.09360456978669751, 0.09360456978669751, 0.09360456978669751, 0.10479448325160134, 0.10479448325160134, 0.10479448325160134, 0.08415853537468265, 0.08415853537468265, 0.08415853537468265, 0.08414609326816935, 0.08414609326816935, 0.08414609326816935, 0.09700292432545954, 0.09700292432545954, 0.09700292432545954, 0.936626915986963, 0.936626915986963, 0.936626915986963, 0.9241921792604935, 0.9241921792604935, 0.9241921792604935, 0.8922524158473358, 0.8922524158473358, 0.8922524158473358, 0.2623003866124368, 0.2623003866124368, 0.2623003866124368, 0.23312643023131774, 0.23312643023131774, 0.23312643023131774, 0.25791530978197774, 0.25791530978197774, 0.25791530978197774, 0.514254517147603, 0.514254517147603, 0.514254517147603, 0.550475900563011, 0.550475900563011, 0.550475900563011, 0.5800850056671771, 0.5800850056671771, 0.5800850056671771, 0.12924525027491474, 0.12924525027491474, 0.12924525027491474, 0.15780728196803628, 0.15780728196803628, 0.15780728196803628, 0.12214655342396241, 0.12214655342396241, 0.12214655342396241, 0.09459680749671351, 0.09459680749671351, 0.09459680749671351, 0.1377740865639172, 0.1377740865639172, 0.1377740865639172, 0.1116857229272964, 0.1116857229272964, 0.1116857229272964, 0.09191487841943713, 0.09191487841943713, 0.09191487841943713, 0.05656071797582796, 0.05656071797582796, 0.05656071797582796, 0.06327550817897665, 0.06327550817897665, 0.06327550817897665, 0.1302458730440107, 0.1302458730440107, 0.1302458730440107, 0.152217379541972, 0.152217379541972, 0.152217379541972, 0.21015897197185862, 0.21015897197185862, 0.21015897197185862, 0.013063783192464706, 0.013063783192464706, 0.013063783192464706, 0.008629757368153301, 0.008629757368153301, 0.008629757368153301, 0.01229472249970387, 0.01229472249970387, 0.01229472249970387, 0.12752595425987734, 0.12752595425987734, 0.12752595425987734, 0.13734151310680376, 0.13734151310680376, 0.13734151310680376, 0.10996246971522017, 0.10996246971522017, 0.10996246971522017, 0.4487862709799231, 0.4487862709799231, 0.4487862709799231, 0.45772422775341726, 0.45772422775341726, 0.45772422775341726, 0.43900857517542846, 0.43900857517542846, 0.43900857517542846, 0.08623800313820884, 0.08623800313820884, 0.08623800313820884, 0.08072428720357094, 0.08072428720357094, 0.08072428720357094, 0.09811453785277191, 0.09811453785277191, 0.09811453785277191, 0.17338754223465513, 0.17338754223465513, 0.17338754223465513, 0.13211608375189876, 0.13211608375189876, 0.13211608375189876, 0.13526680241949185, 0.13526680241949185, 0.13526680241949185, 0.2536056517367189, 0.2536056517367189, 0.2536056517367189, 0.26718272752962224, 0.26718272752962224, 0.26718272752962224, 0.2898365505670498, 0.2898365505670498, 0.2898365505670498, 0.1795336124268846, 0.1795336124268846, 0.1795336124268846, 0.19284957636006594, 0.19284957636006594, 0.19284957636006594, 0.19951490907726055, 0.19951490907726055, 0.19951490907726055, 0.20333112687625798, 0.20333112687625798, 0.20333112687625798, 0.1890239470788555, 0.1890239470788555, 0.1890239470788555, 0.19453188311056102, 0.19453188311056102, 0.19453188311056102, 0.18494356435089387, 0.18494356435089387, 0.18494356435089387, 0.17949340760312193, 0.17949340760312193, 0.17949340760312193, 0.17434763191610636, 0.17434763191610636, 0.17434763191610636, 0.49206758900173375, 0.49206758900173375, 0.49206758900173375, 0.1907862919097163, 0.1907862919097163, 0.1907862919097163, 0.17701873060756956, 0.17701873060756956, 0.17701873060756956, 0.41859542487499934, 0.41859542487499934, 0.41859542487499934, 0.19535176604750504, 0.19535176604750504, 0.19535176604750504, 0.2027445738232515, 0.2027445738232515, 0.2027445738232515, 0.18318585338460258, 0.18318585338460258, 0.18318585338460258, 0.1779867199121703, 0.1779867199121703, 0.1779867199121703, 0.19833359296846087, 0.19833359296846087, 0.19833359296846087, 0.07948344103694382, 0.07948344103694382, 0.07948344103694382, 0.08442541391257818, 0.08442541391257818, 0.08442541391257818, 0.06766997320961765, 0.06766997320961765, 0.06766997320961765]}, "mutation_prompt": null}
{"id": "cf695870-10e9-4130-957e-72126d2c03f5", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.7261951749981467, 0.7261951749981467, 0.7261951749981467, 0.7240109184586018, 0.7240109184586018, 0.7240109184586018, 0.7169494180888172, 0.7169494180888172, 0.7169494180888172, 0.49921554037507676, 0.49921554037507676, 0.49921554037507676, 0.5000410121067161, 0.5000410121067161, 0.5000410121067161, 0.5332064680180376, 0.5332064680180376, 0.5332064680180376, 0.11300722253273976, 0.11300722253273976, 0.11300722253273976, 0.1008609706090614, 0.1008609706090614, 0.1008609706090614, 0.10399046479165974, 0.10399046479165974, 0.10399046479165974, 0.09549110977242559, 0.09549110977242559, 0.09549110977242559, 0.09414934164953737, 0.09414934164953737, 0.09414934164953737, 0.08396562056464807, 0.08396562056464807, 0.08396562056464807, 0.9308902689300774, 0.9308902689300774, 0.9308902689300774, 0.9231587568129964, 0.9231587568129964, 0.9231587568129964, 0.8993839964329611, 0.8993839964329611, 0.8993839964329611, 0.3438203183702141, 0.3438203183702141, 0.3438203183702141, 0.3809689132598574, 0.3809689132598574, 0.3809689132598574, 0.36387926937432236, 0.36387926937432236, 0.36387926937432236, 0.7268826068557661, 0.7268826068557661, 0.7268826068557661, 0.6738557199470785, 0.6738557199470785, 0.6738557199470785, 0.6442769320881785, 0.6442769320881785, 0.6442769320881785, 0.21498980115526845, 0.21498980115526845, 0.21498980115526845, 0.16120910604541372, 0.16120910604541372, 0.16120910604541372, 0.20725891261838003, 0.20725891261838003, 0.20725891261838003, 0.1331505866165309, 0.1331505866165309, 0.1331505866165309, 0.1718750113769102, 0.1718750113769102, 0.1718750113769102, 0.16519084335204204, 0.16519084335204204, 0.16519084335204204, 0.2822335553977815, 0.2822335553977815, 0.2822335553977815, 0.20775509014771365, 0.20775509014771365, 0.20775509014771365, 0.2874206385533379, 0.2874206385533379, 0.2874206385533379, 0.36716807682308383, 0.36716807682308383, 0.36716807682308383, 0.3613979721725469, 0.3613979721725469, 0.3613979721725469, 0.4185987540661491, 0.4185987540661491, 0.4185987540661491, 0.05285778350116821, 0.05285778350116821, 0.05285778350116821, 0.14294495339506408, 0.14294495339506408, 0.14294495339506408, 0.11703567399867498, 0.11703567399867498, 0.11703567399867498, 0.23008732101231955, 0.23008732101231955, 0.23008732101231955, 0.23264280990423936, 0.23264280990423936, 0.23264280990423936, 0.21606864397101755, 0.21606864397101755, 0.21606864397101755, 0.6129374485886814, 0.6129374485886814, 0.6129374485886814, 0.61965410109342, 0.61965410109342, 0.61965410109342, 0.5646670209161818, 0.5646670209161818, 0.5646670209161818, 0.09264885081054386, 0.09264885081054386, 0.09264885081054386, 0.10973685817843448, 0.10973685817843448, 0.10973685817843448, 0.08527017268976855, 0.08527017268976855, 0.08527017268976855, 0.13258578052872527, 0.13258578052872527, 0.13258578052872527, 0.1396512130492129, 0.1396512130492129, 0.1396512130492129, 0.15324860454869627, 0.15324860454869627, 0.15324860454869627, 0.3624607833794218, 0.3624607833794218, 0.3624607833794218, 0.3368101085300508, 0.3368101085300508, 0.3368101085300508, 0.38302659435890674, 0.38302659435890674, 0.38302659435890674, 0.29249223978851335, 0.29249223978851335, 0.29249223978851335, 0.2735753831612662, 0.2735753831612662, 0.2735753831612662, 0.27132041837495713, 0.27132041837495713, 0.27132041837495713, 0.18651842461392631, 0.18651842461392631, 0.18651842461392631, 0.17926612378920348, 0.17926612378920348, 0.17926612378920348, 0.19982602425419838, 0.19982602425419838, 0.19982602425419838, 0.18609502193591632, 0.18609502193591632, 0.18609502193591632, 0.192740555196104, 0.192740555196104, 0.192740555196104, 0.1787376268126185, 0.1787376268126185, 0.1787376268126185, 0.7198691305379168, 0.7198691305379168, 0.7198691305379168, 0.6445916383241028, 0.6445916383241028, 0.6445916383241028, 0.5373982492724959, 0.5373982492724959, 0.5373982492724959, 0.20110899063036136, 0.20110899063036136, 0.20110899063036136, 0.19854322165272542, 0.19854322165272542, 0.19854322165272542, 0.7177835462349802, 0.7177835462349802, 0.7177835462349802, 0.18317825905690133, 0.18317825905690133, 0.18317825905690133, 0.19576416011375075, 0.19576416011375075, 0.19576416011375075, 0.19791987267330002, 0.19791987267330002, 0.19791987267330002, 0.09092589731754686, 0.09092589731754686, 0.09092589731754686, 0.07139375232882961, 0.07139375232882961, 0.07139375232882961, 0.0870021861348127, 0.0870021861348127, 0.0870021861348127]}, "mutation_prompt": null}
{"id": "97fe0000-cb2c-4ce5-a91b-2abeb2f46c40", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection using Stochastic Ranking\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n\n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Local Search and Stochastic Ranking for constraint handling to efficiently explore and exploit the search space.", "configspace": "", "generation": 6, "fitness": 0.3270393588475144, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.7261951749981467, 0.7261951749981467, 0.7261951749981467, 0.7240109184586018, 0.7240109184586018, 0.7240109184586018, 0.7169494180888172, 0.7169494180888172, 0.7169494180888172, 0.49921554037507676, 0.49921554037507676, 0.49921554037507676, 0.5000410121067161, 0.5000410121067161, 0.5000410121067161, 0.5332064680180376, 0.5332064680180376, 0.5332064680180376, 0.11300722253273976, 0.11300722253273976, 0.11300722253273976, 0.1008609706090614, 0.1008609706090614, 0.1008609706090614, 0.10399046479165974, 0.10399046479165974, 0.10399046479165974, 0.09549110977242559, 0.09549110977242559, 0.09549110977242559, 0.09414934164953737, 0.09414934164953737, 0.09414934164953737, 0.08396562056464807, 0.08396562056464807, 0.08396562056464807, 0.9308902689300774, 0.9308902689300774, 0.9308902689300774, 0.9231587568129964, 0.9231587568129964, 0.9231587568129964, 0.8993839964329611, 0.8993839964329611, 0.8993839964329611, 0.3438203183702141, 0.3438203183702141, 0.3438203183702141, 0.3809689132598574, 0.3809689132598574, 0.3809689132598574, 0.36387926937432236, 0.36387926937432236, 0.36387926937432236, 0.7268826068557661, 0.7268826068557661, 0.7268826068557661, 0.6738557199470785, 0.6738557199470785, 0.6738557199470785, 0.6442769320881785, 0.6442769320881785, 0.6442769320881785, 0.21498980115526845, 0.21498980115526845, 0.21498980115526845, 0.16120910604541372, 0.16120910604541372, 0.16120910604541372, 0.20725891261838003, 0.20725891261838003, 0.20725891261838003, 0.1331505866165309, 0.1331505866165309, 0.1331505866165309, 0.1718750113769102, 0.1718750113769102, 0.1718750113769102, 0.16519084335204204, 0.16519084335204204, 0.16519084335204204, 0.2822335553977815, 0.2822335553977815, 0.2822335553977815, 0.20775509014771365, 0.20775509014771365, 0.20775509014771365, 0.2874206385533379, 0.2874206385533379, 0.2874206385533379, 0.36716807682308383, 0.36716807682308383, 0.36716807682308383, 0.3613979721725469, 0.3613979721725469, 0.3613979721725469, 0.4185987540661491, 0.4185987540661491, 0.4185987540661491, 0.05285778350116821, 0.05285778350116821, 0.05285778350116821, 0.14294495339506408, 0.14294495339506408, 0.14294495339506408, 0.11703567399867498, 0.11703567399867498, 0.11703567399867498, 0.23008732101231955, 0.23008732101231955, 0.23008732101231955, 0.23264280990423936, 0.23264280990423936, 0.23264280990423936, 0.21606864397101755, 0.21606864397101755, 0.21606864397101755, 0.6129374485886814, 0.6129374485886814, 0.6129374485886814, 0.61965410109342, 0.61965410109342, 0.61965410109342, 0.5646670209161818, 0.5646670209161818, 0.5646670209161818, 0.09264885081054386, 0.09264885081054386, 0.09264885081054386, 0.10973685817843448, 0.10973685817843448, 0.10973685817843448, 0.08527017268976855, 0.08527017268976855, 0.08527017268976855, 0.13258578052872527, 0.13258578052872527, 0.13258578052872527, 0.1396512130492129, 0.1396512130492129, 0.1396512130492129, 0.15324860454869627, 0.15324860454869627, 0.15324860454869627, 0.3624607833794218, 0.3624607833794218, 0.3624607833794218, 0.3368101085300508, 0.3368101085300508, 0.3368101085300508, 0.38302659435890674, 0.38302659435890674, 0.38302659435890674, 0.29249223978851335, 0.29249223978851335, 0.29249223978851335, 0.2735753831612662, 0.2735753831612662, 0.2735753831612662, 0.27132041837495713, 0.27132041837495713, 0.27132041837495713, 0.18651842461392631, 0.18651842461392631, 0.18651842461392631, 0.17926612378920348, 0.17926612378920348, 0.17926612378920348, 0.19982602425419838, 0.19982602425419838, 0.19982602425419838, 0.18609502193591632, 0.18609502193591632, 0.18609502193591632, 0.192740555196104, 0.192740555196104, 0.192740555196104, 0.1787376268126185, 0.1787376268126185, 0.1787376268126185, 0.7198691305379168, 0.7198691305379168, 0.7198691305379168, 0.6445916383241028, 0.6445916383241028, 0.6445916383241028, 0.5373982492724959, 0.5373982492724959, 0.5373982492724959, 0.20110899063036136, 0.20110899063036136, 0.20110899063036136, 0.19854322165272542, 0.19854322165272542, 0.19854322165272542, 0.7177835462349802, 0.7177835462349802, 0.7177835462349802, 0.18317825905690133, 0.18317825905690133, 0.18317825905690133, 0.19576416011375075, 0.19576416011375075, 0.19576416011375075, 0.19791987267330002, 0.19791987267330002, 0.19791987267330002, 0.09092589731754686, 0.09092589731754686, 0.09092589731754686, 0.07139375232882961, 0.07139375232882961, 0.07139375232882961, 0.0870021861348127, 0.0870021861348127, 0.0870021861348127]}, "mutation_prompt": null}
{"id": "ac948bfc-42cf-4752-bc84-a760a52cf8a6", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.8  # Enhanced differential weight\n        self.CR = 0.8  # Crossover probability slightly reduced\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Enhanced Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 4, replace=False)\n                x0, x1, x2, x3 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.5 * (x3 - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.3:  # 30% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: dynamically adjust step size based on fitness improvement\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(7):  # Perform more local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n                step_size *= 1.2  # Increase step size if improvement found\n            else:\n                step_size *= 0.8  # Decrease step size if no improvement\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "A hybrid metaheuristic with enhanced mutation strategies and adaptive step sizes for improving exploration and exploitation in Differential Evolution.", "configspace": "", "generation": 7, "fitness": 0.1971097003754092, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.5317153073720047, 0.5317153073720047, 0.5317153073720047, 0.5256333437294661, 0.5256333437294661, 0.5256333437294661, 0.5413634006344059, 0.5413634006344059, 0.5413634006344059, 0.20765843294054975, 0.20765843294054975, 0.20765843294054975, 0.15299084300748933, 0.15299084300748933, 0.15299084300748933, 0.22059161587938514, 0.22059161587938514, 0.22059161587938514, 0.12266977618830355, 0.12266977618830355, 0.12266977618830355, 0.09290733651870653, 0.09290733651870653, 0.09290733651870653, 0.10296113305328869, 0.10296113305328869, 0.10296113305328869, 0.07298515793399762, 0.07298515793399762, 0.07298515793399762, 0.0759584615347283, 0.0759584615347283, 0.0759584615347283, 0.07479226844833897, 0.07479226844833897, 0.07479226844833897, 0.8265771762512235, 0.8265771762512235, 0.8265771762512235, 0.79784554515205, 0.79784554515205, 0.79784554515205, 0.8935344884337647, 0.8935344884337647, 0.8935344884337647, 0.19622508852066378, 0.19622508852066378, 0.19622508852066378, 0.18873927312599414, 0.18873927312599414, 0.18873927312599414, 0.21904390484238812, 0.21904390484238812, 0.21904390484238812, 0.24773919799427502, 0.24773919799427502, 0.24773919799427502, 0.31889223420366875, 0.31889223420366875, 0.31889223420366875, 0.251876787958776, 0.251876787958776, 0.251876787958776, 0.11909770330630731, 0.11909770330630731, 0.11909770330630731, 0.12482606708002808, 0.12482606708002808, 0.12482606708002808, 0.13150016191378822, 0.13150016191378822, 0.13150016191378822, 0.1153061206940692, 0.1153061206940692, 0.1153061206940692, 0.12882430168972892, 0.12882430168972892, 0.12882430168972892, 0.13408745468881933, 0.13408745468881933, 0.13408745468881933, 0.023835561867294408, 0.023835561867294408, 0.023835561867294408, 0.013991549127625902, 0.013991549127625902, 0.013991549127625902, 0.0060039882166378344, 0.0060039882166378344, 0.0060039882166378344, 0.10680926661920587, 0.10680926661920587, 0.10680926661920587, 0.10841537560523151, 0.10841537560523151, 0.10841537560523151, 0.13302098036459042, 0.13302098036459042, 0.13302098036459042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10095890898622861, 0.10095890898622861, 0.10095890898622861, 0.09618147626978446, 0.09618147626978446, 0.09618147626978446, 0.08813666518869956, 0.08813666518869956, 0.08813666518869956, 0.42193435319287487, 0.42193435319287487, 0.42193435319287487, 0.3843339853155645, 0.3843339853155645, 0.3843339853155645, 0.40557832197305965, 0.40557832197305965, 0.40557832197305965, 0.08420152789731128, 0.08420152789731128, 0.08420152789731128, 0.08950627346585716, 0.08950627346585716, 0.08950627346585716, 0.08649001496193653, 0.08649001496193653, 0.08649001496193653, 0.1523817889697472, 0.1523817889697472, 0.1523817889697472, 0.14378068819109435, 0.14378068819109435, 0.14378068819109435, 0.13231901530161194, 0.13231901530161194, 0.13231901530161194, 0.23995503564619736, 0.23995503564619736, 0.23995503564619736, 0.2359251556246813, 0.2359251556246813, 0.2359251556246813, 0.2373486038202175, 0.2373486038202175, 0.2373486038202175, 0.16730422756647734, 0.16730422756647734, 0.16730422756647734, 0.1587228394665573, 0.1587228394665573, 0.1587228394665573, 0.20184992214331565, 0.20184992214331565, 0.20184992214331565, 0.20140721996360866, 0.20140721996360866, 0.20140721996360866, 0.18406424596229531, 0.18406424596229531, 0.18406424596229531, 0.19628167240261696, 0.19628167240261696, 0.19628167240261696, 0.1675811118486461, 0.1675811118486461, 0.1675811118486461, 0.16486752021680207, 0.16486752021680207, 0.16486752021680207, 0.17984005061385555, 0.17984005061385555, 0.17984005061385555, 0.18577787418619873, 0.18577787418619873, 0.18577787418619873, 0.1580017760474669, 0.1580017760474669, 0.1580017760474669, 0.1700043460577796, 0.1700043460577796, 0.1700043460577796, 0.20341640662910898, 0.20341640662910898, 0.20341640662910898, 0.19018503507884765, 0.19018503507884765, 0.19018503507884765, 0.18428467063907306, 0.18428467063907306, 0.18428467063907306, 0.18585832762929744, 0.18585832762929744, 0.18585832762929744, 0.20534221802418562, 0.20534221802418562, 0.20534221802418562, 0.17286200455329037, 0.17286200455329037, 0.17286200455329037, 0.06768950103306415, 0.06768950103306415, 0.06768950103306415, 0.07148162267585323, 0.07148162267585323, 0.07148162267585323, 0.06732471458945855, 0.06732471458945855, 0.06732471458945855]}, "mutation_prompt": null}
{"id": "90ebd849-4f69-405a-942f-ca5f00061744", "solution": "import numpy as np\n\nclass HybridDEALSPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.85  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.stochastic_local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def stochastic_local_search(self, solution, func):\n        # Stochastic local search: adaptive perturbations in random directions\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(7):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALSPlus", "description": "A novel hybrid metaheuristic integrating Differential Evolution with Stochastic Local Search and adaptive parameters to explore and exploit the search space more effectively.", "configspace": "", "generation": 8, "fitness": 0.18729388001851144, "feedback": "The algorithm HybridDEALSPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.41429462196123445, 0.41429462196123445, 0.41429462196123445, 0.4227293256992457, 0.4227293256992457, 0.4227293256992457, 0.4271068187800432, 0.4271068187800432, 0.4271068187800432, 0.15335514862413258, 0.15335514862413258, 0.15335514862413258, 0.13543776133179564, 0.13543776133179564, 0.13543776133179564, 0.17738854327120568, 0.17738854327120568, 0.17738854327120568, 0.08477038061892095, 0.08477038061892095, 0.08477038061892095, 0.10459256329693944, 0.10459256329693944, 0.10459256329693944, 0.08197406074438218, 0.08197406074438218, 0.08197406074438218, 0.06960060912175325, 0.06960060912175325, 0.06960060912175325, 0.07042273472462945, 0.07042273472462945, 0.07042273472462945, 0.07426519753505889, 0.07426519753505889, 0.07426519753505889, 0.8851454399773055, 0.8851454399773055, 0.8851454399773055, 0.9625378781049907, 0.9625378781049907, 0.9625378781049907, 0.9140351665365609, 0.9140351665365609, 0.9140351665365609, 0.1911631447643367, 0.1911631447643367, 0.1911631447643367, 0.18626088005193286, 0.18626088005193286, 0.18626088005193286, 0.1990279751621733, 0.1990279751621733, 0.1990279751621733, 0.21652563729270735, 0.21652563729270735, 0.21652563729270735, 0.2662689918211013, 0.2662689918211013, 0.2662689918211013, 0.24620861156858842, 0.24620861156858842, 0.24620861156858842, 0.11443156799190657, 0.11443156799190657, 0.11443156799190657, 0.11225859790094306, 0.11225859790094306, 0.11225859790094306, 0.1125728985836506, 0.1125728985836506, 0.1125728985836506, 0.08574870194015205, 0.08574870194015205, 0.08574870194015205, 0.09632220459528507, 0.09632220459528507, 0.09632220459528507, 0.10114939712026039, 0.10114939712026039, 0.10114939712026039, 0.01333470099021683, 0.01333470099021683, 0.01333470099021683, 0.021765063585184374, 0.021765063585184374, 0.021765063585184374, 0.03176279867217602, 0.03176279867217602, 0.03176279867217602, 0.09645117440272155, 0.09645117440272155, 0.09645117440272155, 0.06400076065573213, 0.06400076065573213, 0.06400076065573213, 0.11460346878738414, 0.11460346878738414, 0.11460346878738414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07649709493345469, 0.07649709493345469, 0.07649709493345469, 0.08438924376377177, 0.08438924376377177, 0.08438924376377177, 0.07331481820442531, 0.07331481820442531, 0.07331481820442531, 0.36636610614214604, 0.36636610614214604, 0.36636610614214604, 0.34294541673704393, 0.34294541673704393, 0.34294541673704393, 0.3578660138874926, 0.3578660138874926, 0.3578660138874926, 0.080773763109109, 0.080773763109109, 0.080773763109109, 0.07857509452872058, 0.07857509452872058, 0.07857509452872058, 0.06965345735644646, 0.06965345735644646, 0.06965345735644646, 0.146818082529809, 0.146818082529809, 0.146818082529809, 0.13319204942013985, 0.13319204942013985, 0.13319204942013985, 0.1275792718158184, 0.1275792718158184, 0.1275792718158184, 0.22139396316465731, 0.22139396316465731, 0.22139396316465731, 0.2094875222492556, 0.2094875222492556, 0.2094875222492556, 0.24281273724221641, 0.24281273724221641, 0.24281273724221641, 0.14822759358306592, 0.14822759358306592, 0.14822759358306592, 0.13745570486009184, 0.13745570486009184, 0.13745570486009184, 0.17194638731865708, 0.17194638731865708, 0.17194638731865708, 0.17036850545412185, 0.17036850545412185, 0.17036850545412185, 0.1728962803493882, 0.1728962803493882, 0.1728962803493882, 0.18033596581551503, 0.18033596581551503, 0.18033596581551503, 0.16244553017337982, 0.16244553017337982, 0.16244553017337982, 0.1656626109499253, 0.1656626109499253, 0.1656626109499253, 0.1659122614832622, 0.1659122614832622, 0.1659122614832622, 0.3658031835655092, 0.3658031835655092, 0.3658031835655092, 0.246814215523794, 0.246814215523794, 0.246814215523794, 0.15378872851762593, 0.15378872851762593, 0.15378872851762593, 0.1808938277355926, 0.1808938277355926, 0.1808938277355926, 0.2352014967951751, 0.2352014967951751, 0.2352014967951751, 0.1994492028155469, 0.1994492028155469, 0.1994492028155469, 0.1797724068912363, 0.1797724068912363, 0.1797724068912363, 0.21259884918824512, 0.21259884918824512, 0.21259884918824512, 0.18011870670926378, 0.18011870670926378, 0.18011870670926378, 0.07045572562540459, 0.07045572562540459, 0.07045572562540459, 0.0601716649231141, 0.0601716649231141, 0.0601716649231141, 0.06536305175574908, 0.06536305175574908, 0.06536305175574908]}, "mutation_prompt": null}
{"id": "01e9ed43-35f5-4750-9255-dece1f5fee28", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive F\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                diversity_factor = np.std(population) / (self.upper_bound - self.lower_bound)\n                adaptive_F = self.F * (1 + diversity_factor)\n                mutant = np.clip(x0 + adaptive_F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search with dynamic probability\n                local_search_probability = 0.15 + 0.05 * (1 - diversity_factor)\n                if np.random.rand() < local_search_probability:  # Dynamic chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "An enhanced HybridDEALS algorithm incorporating a mutation strategy that dynamically adapts based on population diversity to improve convergence and exploration balance.", "configspace": "", "generation": 9, "fitness": 0.2818916977196602, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.6774035140862247, 0.6774035140862247, 0.6774035140862247, 0.616982542905798, 0.616982542905798, 0.616982542905798, 0.6888975716049679, 0.6888975716049679, 0.6888975716049679, 0.4307407898766742, 0.4307407898766742, 0.4307407898766742, 0.3798874357203912, 0.3798874357203912, 0.3798874357203912, 0.3689886078840444, 0.3689886078840444, 0.3689886078840444, 0.09794988506063396, 0.09794988506063396, 0.09794988506063396, 0.09613156569174774, 0.09613156569174774, 0.09613156569174774, 0.0964090773370242, 0.0964090773370242, 0.0964090773370242, 0.0922266919374255, 0.0922266919374255, 0.0922266919374255, 0.09729386037146726, 0.09729386037146726, 0.09729386037146726, 0.07710457985542674, 0.07710457985542674, 0.07710457985542674, 0.9659793874627214, 0.9659793874627214, 0.9659793874627214, 0.8979655939205311, 0.8979655939205311, 0.8979655939205311, 0.9088324090771469, 0.9088324090771469, 0.9088324090771469, 0.33448285698926306, 0.33448285698926306, 0.33448285698926306, 0.28340006598219936, 0.28340006598219936, 0.28340006598219936, 0.3159006374088841, 0.3159006374088841, 0.3159006374088841, 0.6050784923251162, 0.6050784923251162, 0.6050784923251162, 0.5934856007743063, 0.5934856007743063, 0.5934856007743063, 0.6246778837075774, 0.6246778837075774, 0.6246778837075774, 0.20407615039853544, 0.20407615039853544, 0.20407615039853544, 0.15594189555215654, 0.15594189555215654, 0.15594189555215654, 0.16353414614884043, 0.16353414614884043, 0.16353414614884043, 0.16757327489815865, 0.16757327489815865, 0.16757327489815865, 0.18333503368978665, 0.18333503368978665, 0.18333503368978665, 0.20330519208980247, 0.20330519208980247, 0.20330519208980247, 0.1690874663562234, 0.1690874663562234, 0.1690874663562234, 0.2048947716692855, 0.2048947716692855, 0.2048947716692855, 0.197460227069852, 0.197460227069852, 0.197460227069852, 0.3087620229533614, 0.3087620229533614, 0.3087620229533614, 0.2896676982101293, 0.2896676982101293, 0.2896676982101293, 0.35599871548136064, 0.35599871548136064, 0.35599871548136064, 0.04238763469605655, 0.04238763469605655, 0.04238763469605655, 0.07998598806400292, 0.07998598806400292, 0.07998598806400292, 0.0892870909532194, 0.0892870909532194, 0.0892870909532194, 0.1894152551743955, 0.1894152551743955, 0.1894152551743955, 0.17966726119290888, 0.17966726119290888, 0.17966726119290888, 0.1562608028649538, 0.1562608028649538, 0.1562608028649538, 0.5320985390906092, 0.5320985390906092, 0.5320985390906092, 0.5013753415397992, 0.5013753415397992, 0.5013753415397992, 0.5670362603193119, 0.5670362603193119, 0.5670362603193119, 0.09007383651873757, 0.09007383651873757, 0.09007383651873757, 0.08352725089532309, 0.08352725089532309, 0.08352725089532309, 0.09487712362391809, 0.09487712362391809, 0.09487712362391809, 0.13630683637840668, 0.13630683637840668, 0.13630683637840668, 0.13486006460176014, 0.13486006460176014, 0.13486006460176014, 0.14041564525244976, 0.14041564525244976, 0.14041564525244976, 0.3175690014802852, 0.3175690014802852, 0.3175690014802852, 0.3260907039621329, 0.3260907039621329, 0.3260907039621329, 0.30223585456049384, 0.30223585456049384, 0.30223585456049384, 0.25245275650242427, 0.25245275650242427, 0.25245275650242427, 0.22903233412761614, 0.22903233412761614, 0.22903233412761614, 0.21191350016191057, 0.21191350016191057, 0.21191350016191057, 0.1861222228664643, 0.1861222228664643, 0.1861222228664643, 0.18740444370056453, 0.18740444370056453, 0.18740444370056453, 0.17807964197577042, 0.17807964197577042, 0.17807964197577042, 0.17893856416235776, 0.17893856416235776, 0.17893856416235776, 0.1807263694634168, 0.1807263694634168, 0.1807263694634168, 0.20613727861207598, 0.20613727861207598, 0.20613727861207598, 0.6382592724860086, 0.6382592724860086, 0.6382592724860086, 0.17682044836621447, 0.17682044836621447, 0.17682044836621447, 0.3766503379625069, 0.3766503379625069, 0.3766503379625069, 0.1642382740024827, 0.1642382740024827, 0.1642382740024827, 0.3095406806947115, 0.3095406806947115, 0.3095406806947115, 0.20814430068115886, 0.20814430068115886, 0.20814430068115886, 0.18511588133652435, 0.18511588133652435, 0.18511588133652435, 0.1922930294794405, 0.1922930294794405, 0.1922930294794405, 0.18929782818838048, 0.18929782818838048, 0.18929782818838048, 0.07943727809590806, 0.07943727809590806, 0.07943727809590806, 0.07559578388430166, 0.07559578388430166, 0.07559578388430166, 0.07307587339947164, 0.07307587339947164, 0.07307587339947164]}, "mutation_prompt": null}
{"id": "de2a50bf-fbb0-429e-8a7f-b1eb2a99d690", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search with Genetic Mutation\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n                else:  # Genetic-style mutation for increased diversity\n                    mutation_prob = 0.1\n                    mutation_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    trial = np.where(np.random.rand(self.dim) < mutation_prob, mutation_vector, trial)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "Introducing Genetic Algorithm elements into HybridDEALS for diversity and enhanced global search capability.", "configspace": "", "generation": 10, "fitness": 0.2635590256082405, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.6477834353821573, 0.6477834353821573, 0.6477834353821573, 0.6021576039596931, 0.6021576039596931, 0.6021576039596931, 0.6049928364076806, 0.6049928364076806, 0.6049928364076806, 0.3235229812780588, 0.3235229812780588, 0.3235229812780588, 0.3622827272021052, 0.3622827272021052, 0.3622827272021052, 0.3620555317962637, 0.3620555317962637, 0.3620555317962637, 0.1016997695302373, 0.1016997695302373, 0.1016997695302373, 0.10962794433530376, 0.10962794433530376, 0.10962794433530376, 0.09713241516543947, 0.09713241516543947, 0.09713241516543947, 0.0896018927807194, 0.0896018927807194, 0.0896018927807194, 0.0932103110385668, 0.0932103110385668, 0.0932103110385668, 0.09115687298671615, 0.09115687298671615, 0.09115687298671615, 0.8952333747844959, 0.8952333747844959, 0.8952333747844959, 0.8524613182341654, 0.8524613182341654, 0.8524613182341654, 0.8746924903440666, 0.8746924903440666, 0.8746924903440666, 0.26064075057143, 0.26064075057143, 0.26064075057143, 0.2797501509579886, 0.2797501509579886, 0.2797501509579886, 0.24057650409731435, 0.24057650409731435, 0.24057650409731435, 0.6192497339931575, 0.6192497339931575, 0.6192497339931575, 0.5230956898437294, 0.5230956898437294, 0.5230956898437294, 0.5571787134710813, 0.5571787134710813, 0.5571787134710813, 0.13029943217211226, 0.13029943217211226, 0.13029943217211226, 0.1479727485153729, 0.1479727485153729, 0.1479727485153729, 0.16328548950693167, 0.16328548950693167, 0.16328548950693167, 0.1968521636384436, 0.1968521636384436, 0.1968521636384436, 0.13994929597953287, 0.13994929597953287, 0.13994929597953287, 0.17597666336500584, 0.17597666336500584, 0.17597666336500584, 0.09652218148751401, 0.09652218148751401, 0.09652218148751401, 0.12048575373770543, 0.12048575373770543, 0.12048575373770543, 0.1422571349823254, 0.1422571349823254, 0.1422571349823254, 0.24798392891660848, 0.24798392891660848, 0.24798392891660848, 0.2608397571400124, 0.2608397571400124, 0.2608397571400124, 0.3404350273879647, 0.3404350273879647, 0.3404350273879647, 0.01497012209917703, 0.01497012209917703, 0.01497012209917703, 0.06000688684857691, 0.06000688684857691, 0.06000688684857691, 0.04128638280177643, 0.04128638280177643, 0.04128638280177643, 0.1590314306321532, 0.1590314306321532, 0.1590314306321532, 0.18771996153896175, 0.18771996153896175, 0.18771996153896175, 0.14511801854858275, 0.14511801854858275, 0.14511801854858275, 0.4958545842013373, 0.4958545842013373, 0.4958545842013373, 0.47903700808497984, 0.47903700808497984, 0.47903700808497984, 0.47393419829888606, 0.47393419829888606, 0.47393419829888606, 0.08520911140650023, 0.08520911140650023, 0.08520911140650023, 0.09336447953809568, 0.09336447953809568, 0.09336447953809568, 0.08006320362512309, 0.08006320362512309, 0.08006320362512309, 0.16904115022468702, 0.16904115022468702, 0.16904115022468702, 0.13959438188025308, 0.13959438188025308, 0.13959438188025308, 0.20446957515716746, 0.20446957515716746, 0.20446957515716746, 0.32660526792397526, 0.32660526792397526, 0.32660526792397526, 0.3032298561894965, 0.3032298561894965, 0.3032298561894965, 0.2983743973483284, 0.2983743973483284, 0.2983743973483284, 0.2359023375343079, 0.2359023375343079, 0.2359023375343079, 0.23545041995523386, 0.23545041995523386, 0.23545041995523386, 0.2236468667775906, 0.2236468667775906, 0.2236468667775906, 0.1790517290747521, 0.1790517290747521, 0.1790517290747521, 0.18558840964742962, 0.18558840964742962, 0.18558840964742962, 0.20562333539146116, 0.20562333539146116, 0.20562333539146116, 0.17563437486904754, 0.17563437486904754, 0.17563437486904754, 0.17146089002445242, 0.17146089002445242, 0.17146089002445242, 0.18118552269063737, 0.18118552269063737, 0.18118552269063737, 0.570677056062332, 0.570677056062332, 0.570677056062332, 0.5915351742173838, 0.5915351742173838, 0.5915351742173838, 0.16374185427192245, 0.16374185427192245, 0.16374185427192245, 0.16345285071416438, 0.16345285071416438, 0.16345285071416438, 0.2598117848373581, 0.2598117848373581, 0.2598117848373581, 0.15204439967783656, 0.15204439967783656, 0.15204439967783656, 0.1883192281679943, 0.1883192281679943, 0.1883192281679943, 0.1828573594491163, 0.1828573594491163, 0.1828573594491163, 0.17870651866346765, 0.17870651866346765, 0.17870651866346765, 0.07512359685239822, 0.07512359685239822, 0.07512359685239822, 0.07280855249267337, 0.07280855249267337, 0.07280855249267337, 0.07575494108379843, 0.07575494108379843, 0.07575494108379843]}, "mutation_prompt": null}
{"id": "454fa789-5a8f-47e4-9b58-1dfec17d2181", "solution": "import numpy as np\n\nclass EnhancedDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.adaptive_F(evaluations) * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.adaptive_CR(evaluations)\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution\n\n    def adaptive_F(self, evaluations):\n        # Adapt F dynamically based on the current evaluation budget\n        return 0.5 + 0.5 * (evaluations / self.budget)\n\n    def adaptive_CR(self, evaluations):\n        # Adapt CR dynamically based on the current evaluation budget\n        return 0.9 - 0.8 * (evaluations / self.budget)", "name": "EnhancedDEALS", "description": "EnhancedDEALS: An enhanced variant of HybridDEALS integrating adaptive scaling and crossover probabilities for improved convergence.", "configspace": "", "generation": 11, "fitness": 0.25615489063942765, "feedback": "The algorithm EnhancedDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.6585909894940374, 0.6585909894940374, 0.6585909894940374, 0.692764544797161, 0.692764544797161, 0.692764544797161, 0.7092275329057541, 0.7092275329057541, 0.7092275329057541, 0.39421594665849136, 0.39421594665849136, 0.39421594665849136, 0.43429268463190784, 0.43429268463190784, 0.43429268463190784, 0.47186165296550586, 0.47186165296550586, 0.47186165296550586, 0.11193265996586377, 0.11193265996586377, 0.11193265996586377, 0.11429046451589642, 0.11429046451589642, 0.11429046451589642, 0.11126644262188368, 0.11126644262188368, 0.11126644262188368, 0.11553506437816263, 0.11553506437816263, 0.11553506437816263, 0.09796982787752839, 0.09796982787752839, 0.09796982787752839, 0.0955246589086306, 0.0955246589086306, 0.0955246589086306, 0.9330939747461345, 0.9330939747461345, 0.9330939747461345, 0.934581704479116, 0.934581704479116, 0.934581704479116, 0.9537520912987798, 0.9537520912987798, 0.9537520912987798, 0.31328469942725634, 0.31328469942725634, 0.31328469942725634, 0.34591996970212124, 0.34591996970212124, 0.34591996970212124, 0.2871819457817182, 0.2871819457817182, 0.2871819457817182, 0.3587857463746763, 0.3587857463746763, 0.3587857463746763, 0.4962412619540084, 0.4962412619540084, 0.4962412619540084, 0.5623463310043322, 0.5623463310043322, 0.5623463310043322, 0.14258858176173195, 0.14258858176173195, 0.14258858176173195, 0.17416044056944013, 0.17416044056944013, 0.17416044056944013, 0.1729363478570367, 0.1729363478570367, 0.1729363478570367, 0.12883249957767418, 0.12883249957767418, 0.12883249957767418, 0.15398852990074974, 0.15398852990074974, 0.15398852990074974, 0.16275308637018204, 0.16275308637018204, 0.16275308637018204, 0.04663801278561064, 0.04663801278561064, 0.04663801278561064, 0.03313384596770552, 0.03313384596770552, 0.03313384596770552, 0.07537260878512608, 0.07537260878512608, 0.07537260878512608, 0.16755246998994078, 0.16755246998994078, 0.16755246998994078, 0.1451885843275741, 0.1451885843275741, 0.1451885843275741, 0.20661394868970007, 0.20661394868970007, 0.20661394868970007, 0.03363873364422909, 0.03363873364422909, 0.03363873364422909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11893557826048129, 0.11893557826048129, 0.11893557826048129, 0.14943453797299222, 0.14943453797299222, 0.14943453797299222, 0.11875428207497718, 0.11875428207497718, 0.11875428207497718, 0.4665085974535579, 0.4665085974535579, 0.4665085974535579, 0.4580594539903806, 0.4580594539903806, 0.4580594539903806, 0.4537680254510019, 0.4537680254510019, 0.4537680254510019, 0.08996605772563904, 0.08996605772563904, 0.08996605772563904, 0.0829016420091595, 0.0829016420091595, 0.0829016420091595, 0.08635159714447072, 0.08635159714447072, 0.08635159714447072, 0.16851905361934005, 0.16851905361934005, 0.16851905361934005, 0.15670772177095738, 0.15670772177095738, 0.15670772177095738, 0.137372706634164, 0.137372706634164, 0.137372706634164, 0.2964391955848579, 0.2964391955848579, 0.2964391955848579, 0.30251920278087785, 0.30251920278087785, 0.30251920278087785, 0.3002930226387459, 0.3002930226387459, 0.3002930226387459, 0.2210408675940979, 0.2210408675940979, 0.2210408675940979, 0.2059777498447829, 0.2059777498447829, 0.2059777498447829, 0.19971878573586765, 0.19971878573586765, 0.19971878573586765, 0.18400307950852435, 0.18400307950852435, 0.18400307950852435, 0.20698508337190968, 0.20698508337190968, 0.20698508337190968, 0.1975344491277773, 0.1975344491277773, 0.1975344491277773, 0.17984948798618627, 0.17984948798618627, 0.17984948798618627, 0.18983955211056602, 0.18983955211056602, 0.18983955211056602, 0.17899108269538866, 0.17899108269538866, 0.17899108269538866, 0.2610661188375619, 0.2610661188375619, 0.2610661188375619, 0.19175172648020788, 0.19175172648020788, 0.19175172648020788, 0.24164442550731702, 0.24164442550731702, 0.24164442550731702, 0.3139136367337614, 0.3139136367337614, 0.3139136367337614, 0.18177658280616582, 0.18177658280616582, 0.18177658280616582, 0.4911583450974861, 0.4911583450974861, 0.4911583450974861, 0.17577210560012335, 0.17577210560012335, 0.17577210560012335, 0.18347743830440555, 0.18347743830440555, 0.18347743830440555, 0.18041607332891418, 0.18041607332891418, 0.18041607332891418, 0.07952020477994137, 0.07952020477994137, 0.07952020477994137, 0.08029433904433825, 0.08029433904433825, 0.08029433904433825, 0.07563243171619816, 0.07563243171619816, 0.07563243171619816]}, "mutation_prompt": null}
{"id": "d34849e5-682a-4430-a07b-7d8a2366d145", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.15:  # Adjusted to 15% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive parameter adjustment\n                if evaluations % (self.population_size * 5) == 0:\n                    self.F = np.random.uniform(0.4, 0.9)\n                    self.CR = np.random.uniform(0.8, 1.0)\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)  # Adjusted step size for local search\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(10):  # Perform more local steps for thorough refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Local Search and adaptive parameter adjustments for improved exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.22699852221453, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.18.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.5258150221118912, 0.5258150221118912, 0.5258150221118912, 0.5722808796613175, 0.5722808796613175, 0.5722808796613175, 0.539354884375445, 0.539354884375445, 0.539354884375445, 0.24609685932351477, 0.24609685932351477, 0.24609685932351477, 0.2438143790160615, 0.2438143790160615, 0.2438143790160615, 0.26195052877232206, 0.26195052877232206, 0.26195052877232206, 0.08344738466218127, 0.08344738466218127, 0.08344738466218127, 0.08990490131048101, 0.08990490131048101, 0.08990490131048101, 0.07886135895805513, 0.07886135895805513, 0.07886135895805513, 0.08156246468666795, 0.08156246468666795, 0.08156246468666795, 0.08538760755651997, 0.08538760755651997, 0.08538760755651997, 0.08045812508298644, 0.08045812508298644, 0.08045812508298644, 0.8947591553831484, 0.8947591553831484, 0.8947591553831484, 0.870399809154669, 0.870399809154669, 0.870399809154669, 0.8009623635897315, 0.8009623635897315, 0.8009623635897315, 0.24600315764824465, 0.24600315764824465, 0.24600315764824465, 0.23945388202810647, 0.23945388202810647, 0.23945388202810647, 0.291685231762817, 0.291685231762817, 0.291685231762817, 0.39766550163537984, 0.39766550163537984, 0.39766550163537984, 0.45421394595046727, 0.45421394595046727, 0.45421394595046727, 0.3831207795311029, 0.3831207795311029, 0.3831207795311029, 0.1650605112007102, 0.1650605112007102, 0.1650605112007102, 0.15211850726210197, 0.15211850726210197, 0.15211850726210197, 0.15274015955579812, 0.15274015955579812, 0.15274015955579812, 0.10486728859089056, 0.10486728859089056, 0.10486728859089056, 0.13997291748022145, 0.13997291748022145, 0.13997291748022145, 0.13094487943723687, 0.13094487943723687, 0.13094487943723687, 0.08542447103537976, 0.08542447103537976, 0.08542447103537976, 0.07482239123238144, 0.07482239123238144, 0.07482239123238144, 0.09970154331436043, 0.09970154331436043, 0.09970154331436043, 0.24576976599180167, 0.24576976599180167, 0.24576976599180167, 0.17930910791797072, 0.17930910791797072, 0.17930910791797072, 0.2624756563819999, 0.2624756563819999, 0.2624756563819999, 0.021254158525962907, 0.021254158525962907, 0.021254158525962907, 0.018480777167047546, 0.018480777167047546, 0.018480777167047546, 0.015677638193098753, 0.015677638193098753, 0.015677638193098753, 0.13529821760237315, 0.13529821760237315, 0.13529821760237315, 0.10683353124313144, 0.10683353124313144, 0.10683353124313144, 0.1432989882458925, 0.1432989882458925, 0.1432989882458925, 0.41912289662929647, 0.41912289662929647, 0.41912289662929647, 0.43995960012581625, 0.43995960012581625, 0.43995960012581625, 0.4230679694016014, 0.4230679694016014, 0.4230679694016014, 0.08497335568669973, 0.08497335568669973, 0.08497335568669973, 0.07077891584319373, 0.07077891584319373, 0.07077891584319373, 0.08946321333077178, 0.08946321333077178, 0.08946321333077178, 0.15181274715397408, 0.15181274715397408, 0.15181274715397408, 0.1251983952570992, 0.1251983952570992, 0.1251983952570992, 0.15599460148679467, 0.15599460148679467, 0.15599460148679467, 0.24620368886426325, 0.24620368886426325, 0.24620368886426325, 0.25108197553801215, 0.25108197553801215, 0.25108197553801215, 0.2573962674008121, 0.2573962674008121, 0.2573962674008121, 0.17236163996662113, 0.17236163996662113, 0.17236163996662113, 0.20288817399717318, 0.20288817399717318, 0.20288817399717318, 0.18954637696256482, 0.18954637696256482, 0.18954637696256482, 0.18545287377714625, 0.18545287377714625, 0.18545287377714625, 0.17630050399345765, 0.17630050399345765, 0.17630050399345765, 0.1742682221683446, 0.1742682221683446, 0.1742682221683446, 0.177972016426717, 0.177972016426717, 0.177972016426717, 0.18151865096382225, 0.18151865096382225, 0.18151865096382225, 0.18671204867732227, 0.18671204867732227, 0.18671204867732227, 0.3544960639683835, 0.3544960639683835, 0.3544960639683835, 0.1931922939527515, 0.1931922939527515, 0.1931922939527515, 0.25485591065073654, 0.25485591065073654, 0.25485591065073654, 0.3598628113940143, 0.3598628113940143, 0.3598628113940143, 0.19579737882617365, 0.19579737882617365, 0.19579737882617365, 0.1954136880087589, 0.1954136880087589, 0.1954136880087589, 0.18045615076867838, 0.18045615076867838, 0.18045615076867838, 0.17174887780401227, 0.17174887780401227, 0.17174887780401227, 0.16655696744957127, 0.16655696744957127, 0.16655696744957127, 0.07857256270392043, 0.07857256270392043, 0.07857256270392043, 0.06118084900875853, 0.06118084900875853, 0.06118084900875853, 0.06843717867942689, 0.06843717867942689, 0.06843717867942689]}, "mutation_prompt": null}
{"id": "e8b1ca8c-a3ba-4208-ba3a-79f818c6bec0", "solution": "import numpy as np\n\nclass DynamicHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Initial differential weight\n        self.CR = 0.9  # Initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        adaptation_interval = self.budget // 10  # Update every 10% of budget\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.local_search(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Dynamic Parameter Adaptation\n            if evaluations % adaptation_interval == 0:\n                self.adapt_parameters(fitness)\n\n        return population[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        # Adaptive local search: small perturbations in random directions\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution\n\n    def adapt_parameters(self, fitness):\n        # Adaptive tuning of F and CR based on population diversity\n        diversity = np.std(fitness)\n        self.F = 0.5 + 0.1 * (diversity / max(1, np.mean(fitness)))\n        self.CR = 0.7 + 0.2 * (diversity / max(1, np.mean(fitness)))\n        # Ensure parameters remain in valid range\n        self.F = np.clip(self.F, 0.4, 1.0)\n        self.CR = np.clip(self.CR, 0.5, 1.0)", "name": "DynamicHybridDEALS", "description": "A novel hybrid algorithm combining Differential Evolution and Adaptive Local Search with dynamic parameter adaptation to optimize diverse problem landscapes efficiently.", "configspace": "", "generation": 13, "fitness": 0.3270393588475144, "feedback": "The algorithm DynamicHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.7261951749981467, 0.7261951749981467, 0.7261951749981467, 0.7240109184586018, 0.7240109184586018, 0.7240109184586018, 0.7169494180888172, 0.7169494180888172, 0.7169494180888172, 0.49921554037507676, 0.49921554037507676, 0.49921554037507676, 0.5000410121067161, 0.5000410121067161, 0.5000410121067161, 0.5332064680180376, 0.5332064680180376, 0.5332064680180376, 0.11300722253273976, 0.11300722253273976, 0.11300722253273976, 0.1008609706090614, 0.1008609706090614, 0.1008609706090614, 0.10399046479165974, 0.10399046479165974, 0.10399046479165974, 0.09549110977242559, 0.09549110977242559, 0.09549110977242559, 0.09414934164953737, 0.09414934164953737, 0.09414934164953737, 0.08396562056464807, 0.08396562056464807, 0.08396562056464807, 0.9308902689300774, 0.9308902689300774, 0.9308902689300774, 0.9231587568129964, 0.9231587568129964, 0.9231587568129964, 0.8993839964329611, 0.8993839964329611, 0.8993839964329611, 0.3438203183702141, 0.3438203183702141, 0.3438203183702141, 0.3809689132598574, 0.3809689132598574, 0.3809689132598574, 0.36387926937432236, 0.36387926937432236, 0.36387926937432236, 0.7268826068557661, 0.7268826068557661, 0.7268826068557661, 0.6738557199470785, 0.6738557199470785, 0.6738557199470785, 0.6442769320881785, 0.6442769320881785, 0.6442769320881785, 0.21498980115526845, 0.21498980115526845, 0.21498980115526845, 0.16120910604541372, 0.16120910604541372, 0.16120910604541372, 0.20725891261838003, 0.20725891261838003, 0.20725891261838003, 0.1331505866165309, 0.1331505866165309, 0.1331505866165309, 0.1718750113769102, 0.1718750113769102, 0.1718750113769102, 0.16519084335204204, 0.16519084335204204, 0.16519084335204204, 0.2822335553977815, 0.2822335553977815, 0.2822335553977815, 0.20775509014771365, 0.20775509014771365, 0.20775509014771365, 0.2874206385533379, 0.2874206385533379, 0.2874206385533379, 0.36716807682308383, 0.36716807682308383, 0.36716807682308383, 0.3613979721725469, 0.3613979721725469, 0.3613979721725469, 0.4185987540661491, 0.4185987540661491, 0.4185987540661491, 0.05285778350116821, 0.05285778350116821, 0.05285778350116821, 0.14294495339506408, 0.14294495339506408, 0.14294495339506408, 0.11703567399867498, 0.11703567399867498, 0.11703567399867498, 0.23008732101231955, 0.23008732101231955, 0.23008732101231955, 0.23264280990423936, 0.23264280990423936, 0.23264280990423936, 0.21606864397101755, 0.21606864397101755, 0.21606864397101755, 0.6129374485886814, 0.6129374485886814, 0.6129374485886814, 0.61965410109342, 0.61965410109342, 0.61965410109342, 0.5646670209161818, 0.5646670209161818, 0.5646670209161818, 0.09264885081054386, 0.09264885081054386, 0.09264885081054386, 0.10973685817843448, 0.10973685817843448, 0.10973685817843448, 0.08527017268976855, 0.08527017268976855, 0.08527017268976855, 0.13258578052872527, 0.13258578052872527, 0.13258578052872527, 0.1396512130492129, 0.1396512130492129, 0.1396512130492129, 0.15324860454869627, 0.15324860454869627, 0.15324860454869627, 0.3624607833794218, 0.3624607833794218, 0.3624607833794218, 0.3368101085300508, 0.3368101085300508, 0.3368101085300508, 0.38302659435890674, 0.38302659435890674, 0.38302659435890674, 0.29249223978851335, 0.29249223978851335, 0.29249223978851335, 0.2735753831612662, 0.2735753831612662, 0.2735753831612662, 0.27132041837495713, 0.27132041837495713, 0.27132041837495713, 0.18651842461392631, 0.18651842461392631, 0.18651842461392631, 0.17926612378920348, 0.17926612378920348, 0.17926612378920348, 0.19982602425419838, 0.19982602425419838, 0.19982602425419838, 0.18609502193591632, 0.18609502193591632, 0.18609502193591632, 0.192740555196104, 0.192740555196104, 0.192740555196104, 0.1787376268126185, 0.1787376268126185, 0.1787376268126185, 0.7198691305379168, 0.7198691305379168, 0.7198691305379168, 0.6445916383241028, 0.6445916383241028, 0.6445916383241028, 0.5373982492724959, 0.5373982492724959, 0.5373982492724959, 0.20110899063036136, 0.20110899063036136, 0.20110899063036136, 0.19854322165272542, 0.19854322165272542, 0.19854322165272542, 0.7177835462349802, 0.7177835462349802, 0.7177835462349802, 0.18317825905690133, 0.18317825905690133, 0.18317825905690133, 0.19576416011375075, 0.19576416011375075, 0.19576416011375075, 0.19791987267330002, 0.19791987267330002, 0.19791987267330002, 0.09092589731754686, 0.09092589731754686, 0.09092589731754686, 0.07139375232882961, 0.07139375232882961, 0.07139375232882961, 0.0870021861348127, 0.0870021861348127, 0.0870021861348127]}, "mutation_prompt": null}
{"id": "c7201e6b-295f-4ee9-8740-bca0af11ed66", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def stochastic_local_search(self, solution, func, progress):\n        # Stochastic Time-Variant Local Search: perturbation size decreases over time\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Stochastic Time-Variant Local Search to efficiently balance exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.34277030555223037, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "b5953a9a-b355-480f-ac78-f1573d16645a", "metadata": {"aucs": [0.7926952167081353, 0.7926952167081353, 0.7926952167081353, 0.780827701008209, 0.780827701008209, 0.780827701008209, 0.7665116662432329, 0.7665116662432329, 0.7665116662432329, 0.607513167061259, 0.607513167061259, 0.607513167061259, 0.5801132427345603, 0.5801132427345603, 0.5801132427345603, 0.6013434283255288, 0.6013434283255288, 0.6013434283255288, 0.0960117376184153, 0.0960117376184153, 0.0960117376184153, 0.1065694104538707, 0.1065694104538707, 0.1065694104538707, 0.10989878279367526, 0.10989878279367526, 0.10989878279367526, 0.11137683086086714, 0.11137683086086714, 0.11137683086086714, 0.09501734528598538, 0.09501734528598538, 0.09501734528598538, 0.09872840093812263, 0.09872840093812263, 0.09872840093812263, 0.9062657826962348, 0.9062657826962348, 0.9062657826962348, 0.9218055677490917, 0.9218055677490917, 0.9218055677490917, 0.9084577551199313, 0.9084577551199313, 0.9084577551199313, 0.4255416106931208, 0.4255416106931208, 0.4255416106931208, 0.40520052303108445, 0.40520052303108445, 0.40520052303108445, 0.4289273500873779, 0.4289273500873779, 0.4289273500873779, 0.6721676172837423, 0.6721676172837423, 0.6721676172837423, 0.7222639430672908, 0.7222639430672908, 0.7222639430672908, 0.7830525455983589, 0.7830525455983589, 0.7830525455983589, 0.20842045825267952, 0.20842045825267952, 0.20842045825267952, 0.1500621245075623, 0.1500621245075623, 0.1500621245075623, 0.17373777744823526, 0.17373777744823526, 0.17373777744823526, 0.1659059962656263, 0.1659059962656263, 0.1659059962656263, 0.4263175809634966, 0.4263175809634966, 0.4263175809634966, 0.2601573307595221, 0.2601573307595221, 0.2601573307595221, 0.33207682938641214, 0.33207682938641214, 0.33207682938641214, 0.30074676076097706, 0.30074676076097706, 0.30074676076097706, 0.35592605592069304, 0.35592605592069304, 0.35592605592069304, 0.42934927670245937, 0.42934927670245937, 0.42934927670245937, 0.1507916176892431, 0.1507916176892431, 0.1507916176892431, 0.53553238201113, 0.53553238201113, 0.53553238201113, 0.13209338626846578, 0.13209338626846578, 0.13209338626846578, 0.15131802000391004, 0.15131802000391004, 0.15131802000391004, 0.09496392718447078, 0.09496392718447078, 0.09496392718447078, 0.27594943454545995, 0.27594943454545995, 0.27594943454545995, 0.31029371796352156, 0.31029371796352156, 0.31029371796352156, 0.2728860810026378, 0.2728860810026378, 0.2728860810026378, 0.6660310095543296, 0.6660310095543296, 0.6660310095543296, 0.6893024267838308, 0.6893024267838308, 0.6893024267838308, 0.6743448195787397, 0.6743448195787397, 0.6743448195787397, 0.09970062108204125, 0.09970062108204125, 0.09970062108204125, 0.08732203022308371, 0.08732203022308371, 0.08732203022308371, 0.09330566240017468, 0.09330566240017468, 0.09330566240017468, 0.1499655058281132, 0.1499655058281132, 0.1499655058281132, 0.12532564265434543, 0.12532564265434543, 0.12532564265434543, 0.2190629671137645, 0.2190629671137645, 0.2190629671137645, 0.346023493003367, 0.346023493003367, 0.346023493003367, 0.3556372564108444, 0.3556372564108444, 0.3556372564108444, 0.3726221288016788, 0.3726221288016788, 0.3726221288016788, 0.3131338609222808, 0.3131338609222808, 0.3131338609222808, 0.28631413888297963, 0.28631413888297963, 0.28631413888297963, 0.33615460282615406, 0.33615460282615406, 0.33615460282615406, 0.1869667124347547, 0.1869667124347547, 0.1869667124347547, 0.20857168039829121, 0.20857168039829121, 0.20857168039829121, 0.20046678769397763, 0.20046678769397763, 0.20046678769397763, 0.21267683183286712, 0.21267683183286712, 0.21267683183286712, 0.18374064361313935, 0.18374064361313935, 0.18374064361313935, 0.19339275250970223, 0.19339275250970223, 0.19339275250970223, 0.7436826117064205, 0.7436826117064205, 0.7436826117064205, 0.18833065510791458, 0.18833065510791458, 0.18833065510791458, 0.18945208594757856, 0.18945208594757856, 0.18945208594757856, 0.1677316385819726, 0.1677316385819726, 0.1677316385819726, 0.1948814774178722, 0.1948814774178722, 0.1948814774178722, 0.7485203413060296, 0.7485203413060296, 0.7485203413060296, 0.1794234951467144, 0.1794234951467144, 0.1794234951467144, 0.19337152529140111, 0.19337152529140111, 0.19337152529140111, 0.19202456810259416, 0.19202456810259416, 0.19202456810259416, 0.08365450709574085, 0.08365450709574085, 0.08365450709574085, 0.06875664142662319, 0.06875664142662319, 0.06875664142662319, 0.08275249508666527, 0.08275249508666527, 0.08275249508666527]}, "mutation_prompt": null}
{"id": "c42dd6f9-e7a8-4ff9-ba72-68676dabd06d", "solution": "import numpy as np\nimport concurrent.futures\n\nclass AdaptiveParallelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            futures = []\n            with concurrent.futures.ThreadPoolExecutor() as executor:\n                for i in range(self.population_size):\n                    if evaluations >= self.budget:\n                        break\n\n                    futures.append(executor.submit(self.evolve, population, fitness, i, func, evaluations))\n\n                for future in concurrent.futures.as_completed(futures):\n                    res = future.result()\n                    if res:\n                        population[res[0]], fitness[res[0]], evaluations = res[1], res[2], res[3]\n\n        return population[np.argmin(fitness)]\n\n    def evolve(self, population, fitness, i, func, evaluations):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        x0, x1, x2 = population[indices]\n        mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        trial = np.where(crossover_mask, mutant, population[i])\n\n        if np.random.rand() < 0.3:  # 30% chance to refine the trial solution\n            trial = self.dynamic_local_search(trial, func, evaluations / self.budget)\n\n        trial_fitness = func(trial)\n        evaluations += 1\n\n        if trial_fitness < fitness[i]:\n            return i, trial, trial_fitness, evaluations\n        else:\n            return None\n\n    def dynamic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.exp(-progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n\n        for _ in range(5):  # Perform a few more local steps\n            perturbation = np.random.normal(0, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveParallelDE", "description": "Adaptive Parallel Differential Evolution with Dynamic Local Search integrates parallel differential evolution and dynamic local search to enhance solution diversity and adaptability.", "configspace": "", "generation": 15, "fitness": 0.25930089190445044, "feedback": "The algorithm AdaptiveParallelDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "c7201e6b-295f-4ee9-8740-bca0af11ed66", "metadata": {"aucs": [0.5745110855276638, 0.5677563930127381, 0.6188129417356009, 0.6013043723941709, 0.594376756369056, 0.6256240378397935, 0.6169391463541725, 0.5981664396004966, 0.6223431482308427, 0.3260211216941924, 0.30845270413139114, 0.30925728774711425, 0.2797333125748006, 0.28549140227386394, 0.3206688708652664, 0.3101402709433403, 0.3049701106298547, 0.2991006271705764, 0.10188853738761627, 0.09152706028238156, 0.08700331343625944, 0.09126316685646907, 0.08471586050159108, 0.09463899006055165, 0.09397744964907873, 0.10053976380548535, 0.09862291221714892, 0.08949053789527373, 0.08720906150512542, 0.08909520932660764, 0.07686214002572811, 0.08270065446426322, 0.07420238013655378, 0.0803199619318582, 0.09628084322222763, 0.07692674284576828, 0.8581308175488549, 0.9108811085020871, 0.884709741650091, 0.9112569136088576, 0.8696322870767716, 0.8621210832514559, 0.867875656620452, 0.8822841987327714, 0.8868761324735248, 0.25877989159429604, 0.2531748688610794, 0.2689744216725397, 0.24230628453850933, 0.2219177029990851, 0.26683099530836185, 0.259385407282285, 0.28580115446705834, 0.3080822893299342, 0.47584958693913315, 0.3956561995339045, 0.5333760185025446, 0.5188843127186318, 0.6147931339159765, 0.6223909662299815, 0.6471753308934114, 0.6027151072501657, 0.6160601995949917, 0.24664671701656293, 0.18366482364348424, 0.13594861542370162, 0.18328592050979575, 0.17782212566695454, 0.1343925030238543, 0.17917852089595976, 0.13202129868368007, 0.1314796766225198, 0.15171682815613807, 0.17592404552437801, 0.1271869390209528, 0.16341528224535218, 0.16918953720202046, 0.17482249119743554, 0.140524981646453, 0.14510796338965515, 0.1393289018928131, 0.11940654190157407, 0.12904416224572668, 0.10252699762341488, 0.13972783499895436, 0.1470981543925347, 0.0931477903782818, 0.15022553386234627, 0.1682502487344425, 0.14349194347212157, 0.26575197418983854, 0.2713483188516078, 0.2814644429782065, 0.25353509255895723, 0.2525053205773632, 0.22363328899621226, 0.27913553446554706, 0.2288999252817926, 0.3192693615028608, 0.034504143052383696, 0.02051029763592338, 0.0653237247474655, 0.0556293216019349, 0.0725331325998202, 0.055202186617709925, 0.08145425947479001, 0.04568866148464601, 0.06867745751774235, 0.15094909573078807, 0.15822702625194995, 0.1620066008506521, 0.15985482312204946, 0.18592420845931312, 0.17302160131091548, 0.15310940075185553, 0.15203202795677062, 0.1767178451208954, 0.482825252934559, 0.520758419872331, 0.5110428212562073, 0.44882152471550396, 0.5055438715008245, 0.46925989766235565, 0.45957351371171795, 0.4812269418510372, 0.479674419951462, 0.08052972995129348, 0.08718412025910693, 0.0961692290818883, 0.08383703435052325, 0.08772490982458625, 0.07818124566528617, 0.09121924361776601, 0.09795833911240848, 0.09202169764836288, 0.1405796899629308, 0.1361060572785061, 0.1366444656791369, 0.12911760022029484, 0.13821090055712792, 0.14451705745817378, 0.14522430940778397, 0.14357066096616822, 0.1465813371490754, 0.27393497654388754, 0.2941550940066754, 0.2792000839466062, 0.27603288840257467, 0.28778812801198017, 0.2826815540570409, 0.29175299660787546, 0.30302060220254634, 0.2812666431080163, 0.22228617810280793, 0.20942306516847475, 0.24568636272414324, 0.23208839180080054, 0.20299588354213716, 0.23785827176615515, 0.22766027455370696, 0.2288035433270562, 0.23772706825935175, 0.18800996792995872, 0.19933415452483527, 0.20034894832429595, 0.18814785831360514, 0.1904824881432694, 0.17573886301544084, 0.18986136640667883, 0.22286627453735297, 0.1856644827422952, 0.1821732853434146, 0.18583635143032595, 0.17667435562170775, 0.17249179503835133, 0.16650550503576433, 0.19396687726048634, 0.17322748309305191, 0.17953444279091346, 0.1948875223582821, 0.6436846413948101, 0.5543955276317296, 0.5463160576169741, 0.1641864500707848, 0.5111012040451295, 0.37117140578291197, 0.39213919039289014, 0.3122925685808934, 0.3994403556450158, 0.19792166786898968, 0.35076509636147235, 0.19295722658744052, 0.1925508832151771, 0.21955221986456697, 0.19116738537429612, 0.1523390541185079, 0.19887494593597854, 0.15122193139030293, 0.18925836743340552, 0.20179119128114698, 0.17485490316871566, 0.18799732845675898, 0.1721516930718351, 0.18656183636575496, 0.20424879422614417, 0.19378524931992414, 0.19449992770024604, 0.06588379345520423, 0.0784135425638095, 0.06443593977462003, 0.07487475577248681, 0.07228748009423724, 0.06680420535045994, 0.07837058384546658, 0.07434838539572741, 0.07378666371641995]}, "mutation_prompt": null}
{"id": "5f00f1b3-72fd-43f5-8b7c-e8e0ca0493cf", "solution": "import numpy as np\n\nclass AdaptiveHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor_range = (0.5, 1.0)  # Adaptive range for F\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                F = np.random.uniform(*self.mutation_factor_range)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def stochastic_local_search(self, solution, func, progress):\n        # Stochastic Time-Variant Local Search: perturbation size decreases over time\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDEALS", "description": "A hybrid metaheuristic combining Adaptive Differential Evolution with Stochastic Time-Variant Local Search to effectively balance exploration and exploitation across varying problem landscapes.", "configspace": "", "generation": 16, "fitness": 0.26810824150379303, "feedback": "The algorithm AdaptiveHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "c7201e6b-295f-4ee9-8740-bca0af11ed66", "metadata": {"aucs": [0.6330043624365284, 0.6330043624365284, 0.6330043624365284, 0.6064618969546596, 0.6064618969546596, 0.6064618969546596, 0.63904077715234, 0.63904077715234, 0.63904077715234, 0.38354445867317877, 0.38354445867317877, 0.38354445867317877, 0.3453922766128871, 0.3453922766128871, 0.3453922766128871, 0.3587592345678605, 0.3587592345678605, 0.3587592345678605, 0.10246515036828985, 0.10246515036828985, 0.10246515036828985, 0.10365587149733113, 0.10365587149733113, 0.10365587149733113, 0.09308283924290861, 0.09308283924290861, 0.09308283924290861, 0.09574061915370113, 0.09574061915370113, 0.09574061915370113, 0.09511644749607517, 0.09511644749607517, 0.09511644749607517, 0.08437083550239188, 0.08437083550239188, 0.08437083550239188, 0.9216716500694078, 0.9216716500694078, 0.9216716500694078, 0.9485549634191228, 0.9485549634191228, 0.9485549634191228, 0.9117227705921912, 0.9117227705921912, 0.9117227705921912, 0.29831518239753885, 0.29831518239753885, 0.29831518239753885, 0.27103870969102584, 0.27103870969102584, 0.27103870969102584, 0.30327451338254174, 0.30327451338254174, 0.30327451338254174, 0.5283680104415766, 0.5283680104415766, 0.5283680104415766, 0.5590714518192341, 0.5590714518192341, 0.5590714518192341, 0.5688082128929342, 0.5688082128929342, 0.5688082128929342, 0.17622885447290915, 0.17622885447290915, 0.17622885447290915, 0.15918478872925768, 0.15918478872925768, 0.15918478872925768, 0.22736939788096078, 0.22736939788096078, 0.22736939788096078, 0.17551872425516246, 0.17551872425516246, 0.17551872425516246, 0.21322787203435256, 0.21322787203435256, 0.21322787203435256, 0.19243227014365816, 0.19243227014365816, 0.19243227014365816, 0.16921065930350176, 0.16921065930350176, 0.16921065930350176, 0.10945559738591581, 0.10945559738591581, 0.10945559738591581, 0.15949963585799054, 0.15949963585799054, 0.15949963585799054, 0.2857817773991579, 0.2857817773991579, 0.2857817773991579, 0.25069941363006454, 0.25069941363006454, 0.25069941363006454, 0.2847462245148412, 0.2847462245148412, 0.2847462245148412, 0.039400287078140694, 0.039400287078140694, 0.039400287078140694, 0.02217645251572775, 0.02217645251572775, 0.02217645251572775, 0.03429208231075531, 0.03429208231075531, 0.03429208231075531, 0.17491457244182207, 0.17491457244182207, 0.17491457244182207, 0.17189852990377963, 0.17189852990377963, 0.17189852990377963, 0.1622187409785334, 0.1622187409785334, 0.1622187409785334, 0.49011729220173106, 0.49011729220173106, 0.49011729220173106, 0.4854617220922778, 0.4854617220922778, 0.4854617220922778, 0.4786297410472383, 0.4786297410472383, 0.4786297410472383, 0.08317667577800225, 0.08317667577800225, 0.08317667577800225, 0.09660964345651768, 0.09660964345651768, 0.09660964345651768, 0.09797384694792599, 0.09797384694792599, 0.09797384694792599, 0.14488172283944822, 0.14488172283944822, 0.14488172283944822, 0.21401080797516403, 0.21401080797516403, 0.21401080797516403, 0.16067415786076744, 0.16067415786076744, 0.16067415786076744, 0.2645753300218441, 0.2645753300218441, 0.2645753300218441, 0.26669974155874665, 0.26669974155874665, 0.26669974155874665, 0.2759048978641764, 0.2759048978641764, 0.2759048978641764, 0.2116557507928084, 0.2116557507928084, 0.2116557507928084, 0.1924670016889718, 0.1924670016889718, 0.1924670016889718, 0.21392037200073666, 0.21392037200073666, 0.21392037200073666, 0.1760408231816042, 0.1760408231816042, 0.1760408231816042, 0.18254638516895272, 0.18254638516895272, 0.18254638516895272, 0.20211411654195222, 0.20211411654195222, 0.20211411654195222, 0.17696908768124575, 0.17696908768124575, 0.17696908768124575, 0.18349384530101553, 0.18349384530101553, 0.18349384530101553, 0.1820237354177351, 0.1820237354177351, 0.1820237354177351, 0.520259468328931, 0.520259468328931, 0.520259468328931, 0.18097433824178388, 0.18097433824178388, 0.18097433824178388, 0.18287482006000189, 0.18287482006000189, 0.18287482006000189, 0.4753741470942673, 0.4753741470942673, 0.4753741470942673, 0.3167118883244602, 0.3167118883244602, 0.3167118883244602, 0.19637575032154353, 0.19637575032154353, 0.19637575032154353, 0.19208223964599247, 0.19208223964599247, 0.19208223964599247, 0.20666616923686276, 0.20666616923686276, 0.20666616923686276, 0.19135154800647602, 0.19135154800647602, 0.19135154800647602, 0.07040664074206993, 0.07040664074206993, 0.07040664074206993, 0.06621408083886327, 0.06621408083886327, 0.06621408083886327, 0.06483948481272761, 0.06483948481272761, 0.06483948481272761]}, "mutation_prompt": null}
{"id": "070f39a7-db93-420b-960b-347c7a0d1fd5", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                F_adaptive = self.F + (0.3 * (np.random.rand() - 0.5))  # Small random adaptation\n                mutant = np.clip(x0 + F_adaptive * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Progressive Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.progressive_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def progressive_local_search(self, solution, func, progress):\n        # Progressive Time-Variant Local Search: perturbation size decreases and adapts with progress\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress)**2\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Perform a slightly larger number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "An enhanced hybrid metaheuristic that combines Adaptive Differential Evolution with Progressive Time-Variant Local Search to optimize balance between exploration and exploitation dynamically.", "configspace": "", "generation": 17, "fitness": 0.3106812820064776, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "c7201e6b-295f-4ee9-8740-bca0af11ed66", "metadata": {"aucs": [0.7237323767746155, 0.7237323767746155, 0.7237323767746155, 0.740426379110974, 0.740426379110974, 0.740426379110974, 0.7266333321870041, 0.7266333321870041, 0.7266333321870041, 0.4895135997074409, 0.4895135997074409, 0.4895135997074409, 0.5145954831411822, 0.5145954831411822, 0.5145954831411822, 0.5312214473852128, 0.5312214473852128, 0.5312214473852128, 0.10187282746682613, 0.10187282746682613, 0.10187282746682613, 0.13392059987156701, 0.13392059987156701, 0.13392059987156701, 0.10647103944012926, 0.10647103944012926, 0.10647103944012926, 0.08672410591659407, 0.08672410591659407, 0.08672410591659407, 0.09356014404270152, 0.09356014404270152, 0.09356014404270152, 0.09280760458658732, 0.09280760458658732, 0.09280760458658732, 0.9174929246179793, 0.9174929246179793, 0.9174929246179793, 0.8887633353948302, 0.8887633353948302, 0.8887633353948302, 0.9017529948243489, 0.9017529948243489, 0.9017529948243489, 0.3315537072425998, 0.3315537072425998, 0.3315537072425998, 0.3190367657794837, 0.3190367657794837, 0.3190367657794837, 0.3287736254913408, 0.3287736254913408, 0.3287736254913408, 0.7084591300078966, 0.7084591300078966, 0.7084591300078966, 0.6936179226375496, 0.6936179226375496, 0.6936179226375496, 0.669905326794916, 0.669905326794916, 0.669905326794916, 0.16038319983182192, 0.16038319983182192, 0.16038319983182192, 0.1475965035620893, 0.1475965035620893, 0.1475965035620893, 0.22636717168821263, 0.22636717168821263, 0.22636717168821263, 0.15430479458596802, 0.15430479458596802, 0.15430479458596802, 0.12758932412767732, 0.12758932412767732, 0.12758932412767732, 0.2078597269735818, 0.2078597269735818, 0.2078597269735818, 0.23588326927506886, 0.23588326927506886, 0.23588326927506886, 0.28189161864964485, 0.28189161864964485, 0.28189161864964485, 0.1778752465099882, 0.1778752465099882, 0.1778752465099882, 0.43600481459465834, 0.43600481459465834, 0.43600481459465834, 0.2684704343220441, 0.2684704343220441, 0.2684704343220441, 0.3726524508655984, 0.3726524508655984, 0.3726524508655984, 0.12914215346042346, 0.12914215346042346, 0.12914215346042346, 0.1430746590256825, 0.1430746590256825, 0.1430746590256825, 0.10793295656238389, 0.10793295656238389, 0.10793295656238389, 0.23464584324675786, 0.23464584324675786, 0.23464584324675786, 0.2300207870757487, 0.2300207870757487, 0.2300207870757487, 0.2302364042444055, 0.2302364042444055, 0.2302364042444055, 0.6469541657368063, 0.6469541657368063, 0.6469541657368063, 0.604316060047766, 0.604316060047766, 0.604316060047766, 0.5609753336613452, 0.5609753336613452, 0.5609753336613452, 0.09407468429531651, 0.09407468429531651, 0.09407468429531651, 0.0890175050091262, 0.0890175050091262, 0.0890175050091262, 0.09562972564106642, 0.09562972564106642, 0.09562972564106642, 0.13497373935509316, 0.13497373935509316, 0.13497373935509316, 0.12528800182599276, 0.12528800182599276, 0.12528800182599276, 0.13544704824987353, 0.13544704824987353, 0.13544704824987353, 0.34075168012730905, 0.34075168012730905, 0.34075168012730905, 0.3215050093684779, 0.3215050093684779, 0.3215050093684779, 0.366512155145435, 0.366512155145435, 0.366512155145435, 0.27233825113085863, 0.27233825113085863, 0.27233825113085863, 0.2609695743473962, 0.2609695743473962, 0.2609695743473962, 0.2995972823895978, 0.2995972823895978, 0.2995972823895978, 0.19228994241482855, 0.19228994241482855, 0.19228994241482855, 0.1857081302422352, 0.1857081302422352, 0.1857081302422352, 0.19025238337169958, 0.19025238337169958, 0.19025238337169958, 0.1835307457349702, 0.1835307457349702, 0.1835307457349702, 0.19713840322933573, 0.19713840322933573, 0.19713840322933573, 0.19985514206230792, 0.19985514206230792, 0.19985514206230792, 0.7559642529024037, 0.7559642529024037, 0.7559642529024037, 0.181714401228398, 0.181714401228398, 0.181714401228398, 0.38069748610287313, 0.38069748610287313, 0.38069748610287313, 0.20105061833618254, 0.20105061833618254, 0.20105061833618254, 0.19393302655341693, 0.19393302655341693, 0.19393302655341693, 0.3552386179300854, 0.3552386179300854, 0.3552386179300854, 0.1820102768126921, 0.1820102768126921, 0.1820102768126921, 0.19828448946913435, 0.19828448946913435, 0.19828448946913435, 0.20433358430407567, 0.20433358430407567, 0.20433358430407567, 0.07301837944933709, 0.07301837944933709, 0.07301837944933709, 0.09859481569945328, 0.09859481569945328, 0.09859481569945328, 0.07432136126796596, 0.07432136126796596, 0.07432136126796596]}, "mutation_prompt": null}
{"id": "96b18b23-d60e-4593-a1ab-3600c8728bb1", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Local Search\n                if np.random.rand() < 0.2:  # 20% chance to refine the trial solution\n                    trial = self.stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def stochastic_local_search(self, solution, func, progress):\n        # Stochastic Time-Variant Local Search: perturbation size decreases over time\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Stochastic Time-Variant Local Search to efficiently balance exploration and exploitation.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7201e6b-295f-4ee9-8740-bca0af11ed66", "metadata": {"aucs": [0.7926952167081353, 0.7926952167081353, 0.7926952167081353, 0.780827701008209, 0.780827701008209, 0.780827701008209, 0.7665116662432329, 0.7665116662432329, 0.7665116662432329, 0.607513167061259, 0.607513167061259, 0.607513167061259, 0.5801132427345603, 0.5801132427345603, 0.5801132427345603, 0.6013434283255288, 0.6013434283255288, 0.6013434283255288, 0.0960117376184153, 0.0960117376184153, 0.0960117376184153, 0.1065694104538707, 0.1065694104538707, 0.1065694104538707, 0.10989878279367526, 0.10989878279367526, 0.10989878279367526, 0.11137683086086714, 0.11137683086086714, 0.11137683086086714, 0.09501734528598538, 0.09501734528598538, 0.09501734528598538, 0.09872840093812263, 0.09872840093812263, 0.09872840093812263, 0.9062657826962348, 0.9062657826962348, 0.9062657826962348, 0.9218055677490917, 0.9218055677490917, 0.9218055677490917, 0.9084577551199313, 0.9084577551199313, 0.9084577551199313, 0.4255416106931208, 0.4255416106931208, 0.4255416106931208, 0.40520052303108445, 0.40520052303108445, 0.40520052303108445, 0.4289273500873779, 0.4289273500873779, 0.4289273500873779, 0.6721676172837423, 0.6721676172837423, 0.6721676172837423, 0.7222639430672908, 0.7222639430672908, 0.7222639430672908, 0.7830525455983589, 0.7830525455983589, 0.7830525455983589, 0.20842045825267952, 0.20842045825267952, 0.20842045825267952, 0.1500621245075623, 0.1500621245075623, 0.1500621245075623, 0.17373777744823526, 0.17373777744823526, 0.17373777744823526, 0.1659059962656263, 0.1659059962656263, 0.1659059962656263, 0.4263175809634966, 0.4263175809634966, 0.4263175809634966, 0.2601573307595221, 0.2601573307595221, 0.2601573307595221, 0.33207682938641214, 0.33207682938641214, 0.33207682938641214, 0.30074676076097706, 0.30074676076097706, 0.30074676076097706, 0.35592605592069304, 0.35592605592069304, 0.35592605592069304, 0.42934927670245937, 0.42934927670245937, 0.42934927670245937, 0.1507916176892431, 0.1507916176892431, 0.1507916176892431, 0.53553238201113, 0.53553238201113, 0.53553238201113, 0.13209338626846578, 0.13209338626846578, 0.13209338626846578, 0.15131802000391004, 0.15131802000391004, 0.15131802000391004, 0.09496392718447078, 0.09496392718447078, 0.09496392718447078, 0.27594943454545995, 0.27594943454545995, 0.27594943454545995, 0.31029371796352156, 0.31029371796352156, 0.31029371796352156, 0.2728860810026378, 0.2728860810026378, 0.2728860810026378, 0.6660310095543296, 0.6660310095543296, 0.6660310095543296, 0.6893024267838308, 0.6893024267838308, 0.6893024267838308, 0.6743448195787397, 0.6743448195787397, 0.6743448195787397, 0.09970062108204125, 0.09970062108204125, 0.09970062108204125, 0.08732203022308371, 0.08732203022308371, 0.08732203022308371, 0.09330566240017468, 0.09330566240017468, 0.09330566240017468, 0.1499655058281132, 0.1499655058281132, 0.1499655058281132, 0.12532564265434543, 0.12532564265434543, 0.12532564265434543, 0.2190629671137645, 0.2190629671137645, 0.2190629671137645, 0.346023493003367, 0.346023493003367, 0.346023493003367, 0.3556372564108444, 0.3556372564108444, 0.3556372564108444, 0.3726221288016788, 0.3726221288016788, 0.3726221288016788, 0.3131338609222808, 0.3131338609222808, 0.3131338609222808, 0.28631413888297963, 0.28631413888297963, 0.28631413888297963, 0.33615460282615406, 0.33615460282615406, 0.33615460282615406, 0.1869667124347547, 0.1869667124347547, 0.1869667124347547, 0.20857168039829121, 0.20857168039829121, 0.20857168039829121, 0.20046678769397763, 0.20046678769397763, 0.20046678769397763, 0.21267683183286712, 0.21267683183286712, 0.21267683183286712, 0.18374064361313935, 0.18374064361313935, 0.18374064361313935, 0.19339275250970223, 0.19339275250970223, 0.19339275250970223, 0.7436826117064205, 0.7436826117064205, 0.7436826117064205, 0.18833065510791458, 0.18833065510791458, 0.18833065510791458, 0.18945208594757856, 0.18945208594757856, 0.18945208594757856, 0.1677316385819726, 0.1677316385819726, 0.1677316385819726, 0.1948814774178722, 0.1948814774178722, 0.1948814774178722, 0.7485203413060296, 0.7485203413060296, 0.7485203413060296, 0.1794234951467144, 0.1794234951467144, 0.1794234951467144, 0.19337152529140111, 0.19337152529140111, 0.19337152529140111, 0.19202456810259416, 0.19202456810259416, 0.19202456810259416, 0.08365450709574085, 0.08365450709574085, 0.08365450709574085, 0.06875664142662319, 0.06875664142662319, 0.06875664142662319, 0.08275249508666527, 0.08275249508666527, 0.08275249508666527]}, "mutation_prompt": null}
{"id": "4348c67b-ec16-470d-b839-96f2590f54b2", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search to enhance convergence through dynamic perturbations.", "configspace": "", "generation": 19, "fitness": 0.34552308982426055, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "c7201e6b-295f-4ee9-8740-bca0af11ed66", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "ba73569f-ec64-4272-ab66-911a1599f6d8", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search to enhance convergence through dynamic perturbations.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "f890cfe3-4c7b-4f0a-8b65-7e2d4e30ee4f", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.diversity_threshold = 0.01  # Diversity threshold for population\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with diversity check\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                diff = x1 - x2\n                if np.linalg.norm(diff) < self.diversity_threshold:  # Increase mutation if low diversity\n                    diff = np.random.uniform(-1, 1, self.dim)\n                mutant = np.clip(x0 + self.F * diff, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # 30% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Perform a slightly larger number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "An enhanced hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search, incorporating diversity maintenance to avoid premature convergence.", "configspace": "", "generation": 21, "fitness": 0.28858401137165024, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.21.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.5793532284088105, 0.5793532284088105, 0.5793532284088105, 0.5953829161722741, 0.5953829161722741, 0.5953829161722741, 0.6024282682649628, 0.6024282682649628, 0.6024282682649628, 0.38510816665031233, 0.38510816665031233, 0.38510816665031233, 0.37960656125573944, 0.37960656125573944, 0.37960656125573944, 0.3958898378762269, 0.3958898378762269, 0.3958898378762269, 0.09467633543902643, 0.09467633543902643, 0.09467633543902643, 0.12303992016181531, 0.12303992016181531, 0.12303992016181531, 0.1139708151928025, 0.1139708151928025, 0.1139708151928025, 0.08820610788359773, 0.08820610788359773, 0.08820610788359773, 0.10011168759354927, 0.10011168759354927, 0.10011168759354927, 0.08751132936469896, 0.08751132936469896, 0.08751132936469896, 0.9136595766782452, 0.9136595766782452, 0.9136595766782452, 0.9032831382635351, 0.9032831382635351, 0.9032831382635351, 0.9108659550515726, 0.9108659550515726, 0.9108659550515726, 0.3277803720035034, 0.3277803720035034, 0.3277803720035034, 0.27624768529250776, 0.27624768529250776, 0.27624768529250776, 0.28500845640026473, 0.28500845640026473, 0.28500845640026473, 0.578365037760479, 0.578365037760479, 0.578365037760479, 0.6574483193554845, 0.6574483193554845, 0.6574483193554845, 0.641234805633335, 0.641234805633335, 0.641234805633335, 0.15472811361645689, 0.15472811361645689, 0.15472811361645689, 0.18034978488067122, 0.18034978488067122, 0.18034978488067122, 0.15930408682652597, 0.15930408682652597, 0.15930408682652597, 0.15042112636754934, 0.15042112636754934, 0.15042112636754934, 0.1780043420377737, 0.1780043420377737, 0.1780043420377737, 0.15442010453394361, 0.15442010453394361, 0.15442010453394361, 0.1751277093713186, 0.1751277093713186, 0.1751277093713186, 0.19466208146983077, 0.19466208146983077, 0.19466208146983077, 0.21306771829860793, 0.21306771829860793, 0.21306771829860793, 0.33609914964943965, 0.33609914964943965, 0.33609914964943965, 0.32556241600306, 0.32556241600306, 0.32556241600306, 0.3778168281669204, 0.3778168281669204, 0.3778168281669204, 0.030756851183507794, 0.030756851183507794, 0.030756851183507794, 0.10911419719759019, 0.10911419719759019, 0.10911419719759019, 0.08080743472118102, 0.08080743472118102, 0.08080743472118102, 0.221863133094389, 0.221863133094389, 0.221863133094389, 0.19265769879418793, 0.19265769879418793, 0.19265769879418793, 0.17939214387865465, 0.17939214387865465, 0.17939214387865465, 0.5436471548521526, 0.5436471548521526, 0.5436471548521526, 0.5251302748953857, 0.5251302748953857, 0.5251302748953857, 0.5311008141405336, 0.5311008141405336, 0.5311008141405336, 0.09200348091882549, 0.09200348091882549, 0.09200348091882549, 0.10675144872454534, 0.10675144872454534, 0.10675144872454534, 0.08963600794913218, 0.08963600794913218, 0.08963600794913218, 0.12610551376714652, 0.12610551376714652, 0.12610551376714652, 0.1362128773433302, 0.1362128773433302, 0.1362128773433302, 0.14793577596602425, 0.14793577596602425, 0.14793577596602425, 0.29733535998322513, 0.29733535998322513, 0.29733535998322513, 0.31707396525358367, 0.31707396525358367, 0.31707396525358367, 0.319098491825606, 0.319098491825606, 0.319098491825606, 0.2628719801909757, 0.2628719801909757, 0.2628719801909757, 0.2503686101647803, 0.2503686101647803, 0.2503686101647803, 0.23352343796478603, 0.23352343796478603, 0.23352343796478603, 0.19543064023257817, 0.19543064023257817, 0.19543064023257817, 0.1772185762495505, 0.1772185762495505, 0.1772185762495505, 0.174793899655317, 0.174793899655317, 0.174793899655317, 0.1804541069648059, 0.1804541069648059, 0.1804541069648059, 0.19467405924692371, 0.19467405924692371, 0.19467405924692371, 0.17773321153891208, 0.17773321153891208, 0.17773321153891208, 0.6175026029214546, 0.6175026029214546, 0.6175026029214546, 0.572850954883519, 0.572850954883519, 0.572850954883519, 0.5796435054654481, 0.5796435054654481, 0.5796435054654481, 0.20003415479376685, 0.20003415479376685, 0.20003415479376685, 0.1907369770765064, 0.1907369770765064, 0.1907369770765064, 0.3082135287263754, 0.3082135287263754, 0.3082135287263754, 0.19143732640866495, 0.19143732640866495, 0.19143732640866495, 0.17610096372443773, 0.17610096372443773, 0.17610096372443773, 0.18961558305582404, 0.18961558305582404, 0.18961558305582404, 0.07559751158493488, 0.07559751158493488, 0.07559751158493488, 0.06602292043409053, 0.06602292043409053, 0.06602292043409053, 0.07785966106132147, 0.07785966106132147, 0.07785966106132147]}, "mutation_prompt": null}
{"id": "33cbe2aa-6ad6-47f9-8ec6-ccb33c952b73", "solution": "import numpy as np\n\nclass QuantumHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Differential weight\n        self.CR = 0.85  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                quantum_state = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (quantum_state - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # 30% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "QuantumHybridDEALS", "description": "A novel metaheuristic utilizing a blend of Quantum-inspired Differential Evolution and Adaptive Stochastic Local Search to achieve superior convergence through quantum state exploration and dynamic perturbations.", "configspace": "", "generation": 22, "fitness": 0.15697894934822687, "feedback": "The algorithm QuantumHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.32557944019268104, 0.32557944019268104, 0.32557944019268104, 0.31828480327239794, 0.31828480327239794, 0.31828480327239794, 0.32966081092999355, 0.32966081092999355, 0.32966081092999355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004336529859638172, 0.004336529859638172, 0.004336529859638172, 0.007113804064340146, 0.007113804064340146, 0.007113804064340146, 0.10064539330860589, 0.10064539330860589, 0.10064539330860589, 0.1042542503925219, 0.1042542503925219, 0.1042542503925219, 0.09412868397223229, 0.09412868397223229, 0.09412868397223229, 0.07529752174247695, 0.07529752174247695, 0.07529752174247695, 0.09327910149145113, 0.09327910149145113, 0.09327910149145113, 0.08153926739907036, 0.08153926739907036, 0.08153926739907036, 0.5690698840487678, 0.5690698840487678, 0.5690698840487678, 0.18554218816139934, 0.18554218816139934, 0.18554218816139934, 0.3432130633114362, 0.3432130633114362, 0.3432130633114362, 0.17519573845758585, 0.17519573845758585, 0.17519573845758585, 0.16679433400438337, 0.16679433400438337, 0.16679433400438337, 0.1729293321838733, 0.1729293321838733, 0.1729293321838733, 0.2393177909325076, 0.2393177909325076, 0.2393177909325076, 0.23959507696951754, 0.23959507696951754, 0.23959507696951754, 0.22483780260606667, 0.22483780260606667, 0.22483780260606667, 0.13372709612071065, 0.13372709612071065, 0.13372709612071065, 0.12768121953565714, 0.12768121953565714, 0.12768121953565714, 0.129692964447783, 0.129692964447783, 0.129692964447783, 0.12216526694781338, 0.12216526694781338, 0.12216526694781338, 0.12014825206420898, 0.12014825206420898, 0.12014825206420898, 0.1215551150854568, 0.1215551150854568, 0.1215551150854568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15214431871243983, 0.15214431871243983, 0.15214431871243983, 0.057286407377444615, 0.057286407377444615, 0.057286407377444615, 0.11841809343801502, 0.11841809343801502, 0.11841809343801502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04785259408291653, 0.04785259408291653, 0.04785259408291653, 0.04509069884114436, 0.04509069884114436, 0.04509069884114436, 0.04364472234900896, 0.04364472234900896, 0.04364472234900896, 0.32516769602724893, 0.32516769602724893, 0.32516769602724893, 0.31189412844728936, 0.31189412844728936, 0.31189412844728936, 0.3308582847915815, 0.3308582847915815, 0.3308582847915815, 0.0804084829663827, 0.0804084829663827, 0.0804084829663827, 0.08878337106534506, 0.08878337106534506, 0.08878337106534506, 0.07843808122586016, 0.07843808122586016, 0.07843808122586016, 0.1387084086198993, 0.1387084086198993, 0.1387084086198993, 0.13749518390687843, 0.13749518390687843, 0.13749518390687843, 0.12663524929190484, 0.12663524929190484, 0.12663524929190484, 0.22765220781537276, 0.22765220781537276, 0.22765220781537276, 0.2359182239187979, 0.2359182239187979, 0.2359182239187979, 0.2312301274460138, 0.2312301274460138, 0.2312301274460138, 0.17444443122849862, 0.17444443122849862, 0.17444443122849862, 0.1766477948045505, 0.1766477948045505, 0.1766477948045505, 0.17003277911404824, 0.17003277911404824, 0.17003277911404824, 0.1880416187972911, 0.1880416187972911, 0.1880416187972911, 0.18735955895302636, 0.18735955895302636, 0.18735955895302636, 0.20248417984138345, 0.20248417984138345, 0.20248417984138345, 0.17072367841437297, 0.17072367841437297, 0.17072367841437297, 0.17114447421380774, 0.17114447421380774, 0.17114447421380774, 0.17024995637458906, 0.17024995637458906, 0.17024995637458906, 0.3736490686349958, 0.3736490686349958, 0.3736490686349958, 0.2726770153824123, 0.2726770153824123, 0.2726770153824123, 0.23759455526811002, 0.23759455526811002, 0.23759455526811002, 0.28915544826676065, 0.28915544826676065, 0.28915544826676065, 0.19462305120485357, 0.19462305120485357, 0.19462305120485357, 0.18303466969904325, 0.18303466969904325, 0.18303466969904325, 0.197054045903448, 0.197054045903448, 0.197054045903448, 0.1734422084113454, 0.1734422084113454, 0.1734422084113454, 0.17391537768493903, 0.17391537768493903, 0.17391537768493903, 0.07205620898419451, 0.07205620898419451, 0.07205620898419451, 0.07077232897390717, 0.07077232897390717, 0.07077232897390717, 0.06947089109063531, 0.06947089109063531, 0.06947089109063531]}, "mutation_prompt": null}
{"id": "d31c3e4c-1bf5-460f-b7ac-af55e822e84f", "solution": "import numpy as np\n\nclass QuantumInspiredDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Differential weight\n        self.CR = 0.8  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Quantum-inspired adaptive local search\n                if np.random.rand() < 0.3:  # 30% chance to refine the trial solution\n                    trial = self.quantum_adaptive_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def quantum_adaptive_local_search(self, solution, func, progress):\n        # Quantum-inspired Adaptive Local Search: utilizes superposition-based perturbations\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.exp(-progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "QuantumInspiredDEALS", "description": "Quantum-inspired Differential Evolution with adaptive local search for enhanced exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.2564723493766759, "feedback": "The algorithm QuantumInspiredDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6329345781083029, 0.6329345781083029, 0.6329345781083029, 0.6618376394480775, 0.6618376394480775, 0.6618376394480775, 0.650560339202344, 0.650560339202344, 0.650560339202344, 0.4003364563383701, 0.4003364563383701, 0.4003364563383701, 0.39998802470867023, 0.39998802470867023, 0.39998802470867023, 0.41663932074510757, 0.41663932074510757, 0.41663932074510757, 0.0964068111545403, 0.0964068111545403, 0.0964068111545403, 0.10842362606135414, 0.10842362606135414, 0.10842362606135414, 0.10673407197087692, 0.10673407197087692, 0.10673407197087692, 0.10056844855307756, 0.10056844855307756, 0.10056844855307756, 0.08459692006795771, 0.08459692006795771, 0.08459692006795771, 0.09903369861088795, 0.09903369861088795, 0.09903369861088795, 0.9166677133273667, 0.9166677133273667, 0.9166677133273667, 0.9534812892103082, 0.9534812892103082, 0.9534812892103082, 0.9201373429292864, 0.9201373429292864, 0.9201373429292864, 0.2753262030309672, 0.2753262030309672, 0.2753262030309672, 0.2865497885777719, 0.2865497885777719, 0.2865497885777719, 0.30230804060581506, 0.30230804060581506, 0.30230804060581506, 0.45392255812101234, 0.45392255812101234, 0.45392255812101234, 0.46961152689917063, 0.46961152689917063, 0.46961152689917063, 0.43331260828805374, 0.43331260828805374, 0.43331260828805374, 0.16339821183192782, 0.16339821183192782, 0.16339821183192782, 0.149970935291856, 0.149970935291856, 0.149970935291856, 0.1971634916064845, 0.1971634916064845, 0.1971634916064845, 0.12861784526782571, 0.12861784526782571, 0.12861784526782571, 0.15458894489837094, 0.15458894489837094, 0.15458894489837094, 0.17298902766937352, 0.17298902766937352, 0.17298902766937352, 0.06354156569637903, 0.06354156569637903, 0.06354156569637903, 0.08685565798243877, 0.08685565798243877, 0.08685565798243877, 0.05999175574155524, 0.05999175574155524, 0.05999175574155524, 0.17480543322054798, 0.17480543322054798, 0.17480543322054798, 0.1712200670566244, 0.1712200670566244, 0.1712200670566244, 0.22880031531462186, 0.22880031531462186, 0.22880031531462186, 0.020444478922396425, 0.020444478922396425, 0.020444478922396425, 0.008480380177147473, 0.008480380177147473, 0.008480380177147473, 0.027397739832554335, 0.027397739832554335, 0.027397739832554335, 0.11886309920771831, 0.11886309920771831, 0.11886309920771831, 0.1290738852756993, 0.1290738852756993, 0.1290738852756993, 0.11461038582020333, 0.11461038582020333, 0.11461038582020333, 0.4779821817521829, 0.4779821817521829, 0.4779821817521829, 0.4691422020589292, 0.4691422020589292, 0.4691422020589292, 0.4928565875570592, 0.4928565875570592, 0.4928565875570592, 0.12020936965694184, 0.12020936965694184, 0.12020936965694184, 0.09252837655570945, 0.09252837655570945, 0.09252837655570945, 0.08528441118285923, 0.08528441118285923, 0.08528441118285923, 0.13089808039463913, 0.13089808039463913, 0.13089808039463913, 0.12064137161867672, 0.12064137161867672, 0.12064137161867672, 0.12398261394134225, 0.12398261394134225, 0.12398261394134225, 0.2826760958081893, 0.2826760958081893, 0.2826760958081893, 0.2859623522899909, 0.2859623522899909, 0.2859623522899909, 0.28533299030738624, 0.28533299030738624, 0.28533299030738624, 0.21685273219012235, 0.21685273219012235, 0.21685273219012235, 0.18007224912268938, 0.18007224912268938, 0.18007224912268938, 0.21589285440726913, 0.21589285440726913, 0.21589285440726913, 0.17970100217959695, 0.17970100217959695, 0.17970100217959695, 0.1934678560161167, 0.1934678560161167, 0.1934678560161167, 0.1787385725189411, 0.1787385725189411, 0.1787385725189411, 0.17619558397265644, 0.17619558397265644, 0.17619558397265644, 0.176548861520179, 0.176548861520179, 0.176548861520179, 0.18219053588086254, 0.18219053588086254, 0.18219053588086254, 0.6122780570093317, 0.6122780570093317, 0.6122780570093317, 0.16292064650761262, 0.16292064650761262, 0.16292064650761262, 0.15964136495594716, 0.15964136495594716, 0.15964136495594716, 0.19410156994325045, 0.19410156994325045, 0.19410156994325045, 0.36016417923985167, 0.36016417923985167, 0.36016417923985167, 0.5695831223063959, 0.5695831223063959, 0.5695831223063959, 0.17648381244884026, 0.17648381244884026, 0.17648381244884026, 0.2223339535423, 0.2223339535423, 0.2223339535423, 0.184877030285453, 0.184877030285453, 0.184877030285453, 0.06658305063225323, 0.06658305063225323, 0.06658305063225323, 0.07636104698744717, 0.07636104698744717, 0.07636104698744717, 0.07333421355659686, 0.07333421355659686, 0.07333421355659686]}, "mutation_prompt": null}
{"id": "06b0def5-7ec3-4071-8375-d482bb87fc29", "solution": "import numpy as np\n\nclass HybridDEAPSLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Differential weight, slightly increased for exploration\n        self.CR = 0.85  # Crossover probability, slightly reduced for diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.progressive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def progressive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # Adjusted perturbation model\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEAPSLS", "description": "A hybrid strategy merging Adaptive Differential Evolution with Progressive Stochastic Local Search for balanced exploration and exploitation.", "configspace": "", "generation": 24, "fitness": 0.2396570710271251, "feedback": "The algorithm HybridDEAPSLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6302350390180405, 0.6302350390180405, 0.6302350390180405, 0.6598035364411121, 0.6598035364411121, 0.6598035364411121, 0.685178460848473, 0.685178460848473, 0.685178460848473, 0.2979818082089424, 0.2979818082089424, 0.2979818082089424, 0.3406435650783227, 0.3406435650783227, 0.3406435650783227, 0.29568950051982834, 0.29568950051982834, 0.29568950051982834, 0.11046197819120807, 0.11046197819120807, 0.11046197819120807, 0.1027064866567865, 0.1027064866567865, 0.1027064866567865, 0.10176898989707694, 0.10176898989707694, 0.10176898989707694, 0.07890570289023413, 0.07890570289023413, 0.07890570289023413, 0.08613738381521929, 0.08613738381521929, 0.08613738381521929, 0.08030072749449446, 0.08030072749449446, 0.08030072749449446, 0.9259829096289244, 0.9259829096289244, 0.9259829096289244, 0.9077404787597932, 0.9077404787597932, 0.9077404787597932, 0.8963932395248089, 0.8963932395248089, 0.8963932395248089, 0.24947912603345468, 0.24947912603345468, 0.24947912603345468, 0.2616576318363465, 0.2616576318363465, 0.2616576318363465, 0.26903483063212974, 0.26903483063212974, 0.26903483063212974, 0.4905161003443206, 0.4905161003443206, 0.4905161003443206, 0.5984602450220557, 0.5984602450220557, 0.5984602450220557, 0.5049890151590211, 0.5049890151590211, 0.5049890151590211, 0.16129093835104413, 0.16129093835104413, 0.16129093835104413, 0.1452589410572468, 0.1452589410572468, 0.1452589410572468, 0.12932859631889282, 0.12932859631889282, 0.12932859631889282, 0.09438039079088267, 0.09438039079088267, 0.09438039079088267, 0.13472741272499011, 0.13472741272499011, 0.13472741272499011, 0.15210973126656102, 0.15210973126656102, 0.15210973126656102, 0.055843605694906207, 0.055843605694906207, 0.055843605694906207, 0.08485398326708693, 0.08485398326708693, 0.08485398326708693, 0.08586812350269735, 0.08586812350269735, 0.08586812350269735, 0.23610329746288738, 0.23610329746288738, 0.23610329746288738, 0.1689672045949535, 0.1689672045949535, 0.1689672045949535, 0.2221781295537617, 0.2221781295537617, 0.2221781295537617, 0.003701731719324197, 0.003701731719324197, 0.003701731719324197, 0.024942009764406303, 0.024942009764406303, 0.024942009764406303, 0.04803506547661962, 0.04803506547661962, 0.04803506547661962, 0.1405899300447513, 0.1405899300447513, 0.1405899300447513, 0.13889478747781592, 0.13889478747781592, 0.13889478747781592, 0.13259949631485124, 0.13259949631485124, 0.13259949631485124, 0.48160171155404874, 0.48160171155404874, 0.48160171155404874, 0.45617292202059645, 0.45617292202059645, 0.45617292202059645, 0.4727815845552261, 0.4727815845552261, 0.4727815845552261, 0.07991975574548416, 0.07991975574548416, 0.07991975574548416, 0.08698936478695574, 0.08698936478695574, 0.08698936478695574, 0.08476345082251846, 0.08476345082251846, 0.08476345082251846, 0.12642644731528996, 0.12642644731528996, 0.12642644731528996, 0.12142443193538532, 0.12142443193538532, 0.12142443193538532, 0.14506533995754944, 0.14506533995754944, 0.14506533995754944, 0.26659439035590193, 0.26659439035590193, 0.26659439035590193, 0.262832343271731, 0.262832343271731, 0.262832343271731, 0.2599967734497106, 0.2599967734497106, 0.2599967734497106, 0.21546681427402514, 0.21546681427402514, 0.21546681427402514, 0.19581256032475203, 0.19581256032475203, 0.19581256032475203, 0.22481206157257883, 0.22481206157257883, 0.22481206157257883, 0.19159287766996058, 0.19159287766996058, 0.19159287766996058, 0.17334459147703185, 0.17334459147703185, 0.17334459147703185, 0.17273966026271215, 0.17273966026271215, 0.17273966026271215, 0.17233415487843395, 0.17233415487843395, 0.17233415487843395, 0.1821591112531057, 0.1821591112531057, 0.1821591112531057, 0.17741429875031156, 0.17741429875031156, 0.17741429875031156, 0.2936881508329544, 0.2936881508329544, 0.2936881508329544, 0.1766971308923978, 0.1766971308923978, 0.1766971308923978, 0.15855365074133754, 0.15855365074133754, 0.15855365074133754, 0.18732791126331805, 0.18732791126331805, 0.18732791126331805, 0.177350063383518, 0.177350063383518, 0.177350063383518, 0.19572997859443286, 0.19572997859443286, 0.19572997859443286, 0.17588259039765164, 0.17588259039765164, 0.17588259039765164, 0.1991886984603667, 0.1991886984603667, 0.1991886984603667, 0.1845111305458147, 0.1845111305458147, 0.1845111305458147, 0.06635994993397965, 0.06635994993397965, 0.06635994993397965, 0.06734877834125563, 0.06734877834125563, 0.06734877834125563, 0.08868630294839874, 0.08868630294839874, 0.08868630294839874]}, "mutation_prompt": null}
{"id": "00c4648f-746e-42d5-a8ac-f199d824d93d", "solution": "import numpy as np\n\nclass HybridMSDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15 + 7 * self.dim\n        self.F1 = 0.6  # Differential weight for first strategy\n        self.F2 = 0.8  # Differential weight for second strategy\n        self.CR = 0.85  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Multi-Strategy Differential Evolution Mutation\n                if np.random.rand() < 0.5:  # Choose strategy\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    x0, x1, x2 = population[indices]\n                    mutant = np.clip(x0 + self.F1 * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.population_size, 4, replace=False)\n                    x0, x1, x2, x3 = population[indices]\n                    mutant = np.clip(x0 + self.F2 * (x1 - x2 + x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Dynamic Local Search\n                if np.random.rand() < 0.3:  # 30% chance to refine the trial solution\n                    trial = self.dynamic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def dynamic_local_search(self, solution, func, progress):\n        # Dynamic Local Search: modifies perturbation adaptively\n        step_size = 0.05 * (self.upper_bound - self.lower_bound) * np.exp(-progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridMSDE", "description": "A novel hybrid metaheuristic combining Multi-Strategy Differential Evolution with Dynamic Local Search to balance exploration and exploitation dynamically.", "configspace": "", "generation": 25, "fitness": 0.16978812386104064, "feedback": "The algorithm HybridMSDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.37388716339306727, 0.37388716339306727, 0.37388716339306727, 0.3479739814902414, 0.3479739814902414, 0.3479739814902414, 0.3460866912765398, 0.3460866912765398, 0.3460866912765398, 0.0544730556402897, 0.0544730556402897, 0.0544730556402897, 0.08103800219504009, 0.08103800219504009, 0.08103800219504009, 0.057077263496944974, 0.057077263496944974, 0.057077263496944974, 0.07804863370648651, 0.07804863370648651, 0.07804863370648651, 0.07645486468136153, 0.07645486468136153, 0.07645486468136153, 0.08095219872224968, 0.08095219872224968, 0.08095219872224968, 0.0739898535408724, 0.0739898535408724, 0.0739898535408724, 0.07457664286782417, 0.07457664286782417, 0.07457664286782417, 0.09126080990559582, 0.09126080990559582, 0.09126080990559582, 0.957502514421479, 0.957502514421479, 0.957502514421479, 0.9556463553353647, 0.9556463553353647, 0.9556463553353647, 0.9679578526563094, 0.9679578526563094, 0.9679578526563094, 0.13407077398406686, 0.13407077398406686, 0.13407077398406686, 0.14764117015595368, 0.14764117015595368, 0.14764117015595368, 0.12820477438389422, 0.12820477438389422, 0.12820477438389422, 0.19062130842869351, 0.19062130842869351, 0.19062130842869351, 0.21612512945910722, 0.21612512945910722, 0.21612512945910722, 0.20862975090750058, 0.20862975090750058, 0.20862975090750058, 0.08329210321119829, 0.08329210321119829, 0.08329210321119829, 0.0948254977223354, 0.0948254977223354, 0.0948254977223354, 0.07316343830359529, 0.07316343830359529, 0.07316343830359529, 0.08785877040389911, 0.08785877040389911, 0.08785877040389911, 0.09168375525975048, 0.09168375525975048, 0.09168375525975048, 0.09229780583588532, 0.09229780583588532, 0.09229780583588532, 0.0016514305940329432, 0.0016514305940329432, 0.0016514305940329432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07846345866004867, 0.07846345866004867, 0.07846345866004867, 0.09682882128235815, 0.09682882128235815, 0.09682882128235815, 0.09763462052949035, 0.09763462052949035, 0.09763462052949035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04047679978091678, 0.04047679978091678, 0.04047679978091678, 0.05844774419321597, 0.05844774419321597, 0.05844774419321597, 0.05236532657341231, 0.05236532657341231, 0.05236532657341231, 0.31178732705889456, 0.31178732705889456, 0.31178732705889456, 0.31838772284265093, 0.31838772284265093, 0.31838772284265093, 0.3218775324247709, 0.3218775324247709, 0.3218775324247709, 0.08313567760706497, 0.08313567760706497, 0.08313567760706497, 0.07460274907059006, 0.07460274907059006, 0.07460274907059006, 0.07472068564980505, 0.07472068564980505, 0.07472068564980505, 0.15476428655261354, 0.15476428655261354, 0.15476428655261354, 0.14432770049934096, 0.14432770049934096, 0.14432770049934096, 0.15674653231151847, 0.15674653231151847, 0.15674653231151847, 0.20703716055880728, 0.20703716055880728, 0.20703716055880728, 0.19807172311953025, 0.19807172311953025, 0.19807172311953025, 0.21159791016482965, 0.21159791016482965, 0.21159791016482965, 0.14918957243973419, 0.14918957243973419, 0.14918957243973419, 0.13253107508636186, 0.13253107508636186, 0.13253107508636186, 0.15467431224040606, 0.15467431224040606, 0.15467431224040606, 0.18083435104720813, 0.18083435104720813, 0.18083435104720813, 0.19275220625558276, 0.19275220625558276, 0.19275220625558276, 0.17062261808084167, 0.17062261808084167, 0.17062261808084167, 0.18103395583056703, 0.18103395583056703, 0.18103395583056703, 0.1721640785868216, 0.1721640785868216, 0.1721640785868216, 0.1619603086155188, 0.1619603086155188, 0.1619603086155188, 0.26061405262369264, 0.26061405262369264, 0.26061405262369264, 0.15629887672616805, 0.15629887672616805, 0.15629887672616805, 0.1184575544590758, 0.1184575544590758, 0.1184575544590758, 0.15068706185855518, 0.15068706185855518, 0.15068706185855518, 0.14524053934035253, 0.14524053934035253, 0.14524053934035253, 0.3163633014796471, 0.3163633014796471, 0.3163633014796471, 0.18266549011102784, 0.18266549011102784, 0.18266549011102784, 0.178926428715652, 0.178926428715652, 0.178926428715652, 0.1778291955417759, 0.1778291955417759, 0.1778291955417759, 0.06487287908212258, 0.06487287908212258, 0.06487287908212258, 0.06401364350273075, 0.06401364350273075, 0.06401364350273075, 0.06424804551164509, 0.06424804551164509, 0.06424804551164509]}, "mutation_prompt": null}
{"id": "5e395330-d893-4b2b-a37e-4d264c9e0eaa", "solution": "import numpy as np\n\nclass ChaoticHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        chaotic_seq = self.chaotic_map(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with chaotic influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = chaotic_seq[evaluations % len(chaotic_seq)]\n                mutant = np.clip(x0 + self.F * chaotic_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # Chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution\n\n    def chaotic_map(self, size):\n        # Generate a chaotic sequence using Logistic map\n        x = 0.7\n        chaotic_sequence = []\n        for _ in range(size):\n            x = 3.7 * x * (1 - x)\n            chaotic_sequence.append(x)\n        return chaotic_sequence", "name": "ChaoticHybridDEALS", "description": "A novel hybrid strategy integrating Chaotic maps with Differential Evolution and Adaptive Local Search to improve exploration-exploitation balance.", "configspace": "", "generation": 26, "fitness": 0.3213141846623542, "feedback": "The algorithm ChaoticHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.8235679786249686, 0.8235679786249686, 0.8235679786249686, 0.800210152425257, 0.800210152425257, 0.800210152425257, 0.8057956572603651, 0.8057956572603651, 0.8057956572603651, 0.5421409679992967, 0.5421409679992967, 0.5421409679992967, 0.6682155016522515, 0.6682155016522515, 0.6682155016522515, 0.6279462564831888, 0.6279462564831888, 0.6279462564831888, 0.12803788387466408, 0.12803788387466408, 0.12803788387466408, 0.13043045668544528, 0.13043045668544528, 0.13043045668544528, 0.11599425286310072, 0.11599425286310072, 0.11599425286310072, 0.13151762126977806, 0.13151762126977806, 0.13151762126977806, 0.11124752447571884, 0.11124752447571884, 0.11124752447571884, 0.13389302139401282, 0.13389302139401282, 0.13389302139401282, 0.9035860853985663, 0.9035860853985663, 0.9035860853985663, 0.8682416443791033, 0.8682416443791033, 0.8682416443791033, 0.9432225999373333, 0.9432225999373333, 0.9432225999373333, 0.3165525750120365, 0.3165525750120365, 0.3165525750120365, 0.2603620660740902, 0.2603620660740902, 0.2603620660740902, 0.27621713356507305, 0.27621713356507305, 0.27621713356507305, 0.7447672361914486, 0.7447672361914486, 0.7447672361914486, 0.7988196099299887, 0.7988196099299887, 0.7988196099299887, 0.2789694965005861, 0.2789694965005861, 0.2789694965005861, 0.2055756073949545, 0.2055756073949545, 0.2055756073949545, 0.2415054151993138, 0.2415054151993138, 0.2415054151993138, 0.16146971189085324, 0.16146971189085324, 0.16146971189085324, 0.155687371923234, 0.155687371923234, 0.155687371923234, 0.12986776904271013, 0.12986776904271013, 0.12986776904271013, 0.14132015855364788, 0.14132015855364788, 0.14132015855364788, 0.15151708054427493, 0.15151708054427493, 0.15151708054427493, 0.09189459003586853, 0.09189459003586853, 0.09189459003586853, 0.18828192328446292, 0.18828192328446292, 0.18828192328446292, 0.10416847046390632, 0.10416847046390632, 0.10416847046390632, 0.17477231060539344, 0.17477231060539344, 0.17477231060539344, 0.16498950130914947, 0.16498950130914947, 0.16498950130914947, 0.12344251393724115, 0.12344251393724115, 0.12344251393724115, 0.1452128219104426, 0.1452128219104426, 0.1452128219104426, 0.0897955834277896, 0.0897955834277896, 0.0897955834277896, 0.1737746225397062, 0.1737746225397062, 0.1737746225397062, 0.21869719119666742, 0.21869719119666742, 0.21869719119666742, 0.14176144320584372, 0.14176144320584372, 0.14176144320584372, 0.5947575570574962, 0.5947575570574962, 0.5947575570574962, 0.5000075222875201, 0.5000075222875201, 0.5000075222875201, 0.6244394733973558, 0.6244394733973558, 0.6244394733973558, 0.09309297669718197, 0.09309297669718197, 0.09309297669718197, 0.11705135921518706, 0.11705135921518706, 0.11705135921518706, 0.08515807846059109, 0.08515807846059109, 0.08515807846059109, 0.14589526479087744, 0.14589526479087744, 0.14589526479087744, 0.18997177264109766, 0.18997177264109766, 0.18997177264109766, 0.15233882196900594, 0.15233882196900594, 0.15233882196900594, 0.4363346960347799, 0.4363346960347799, 0.4363346960347799, 0.40102893877566337, 0.40102893877566337, 0.40102893877566337, 0.4318163594850841, 0.4318163594850841, 0.4318163594850841, 0.3816941772863207, 0.3816941772863207, 0.3816941772863207, 0.3188096066452728, 0.3188096066452728, 0.3188096066452728, 0.321939088630421, 0.321939088630421, 0.321939088630421, 0.22602081835468024, 0.22602081835468024, 0.22602081835468024, 0.24100286599637544, 0.24100286599637544, 0.24100286599637544, 0.20536533740499574, 0.20536533740499574, 0.20536533740499574, 0.22654953693034252, 0.22654953693034252, 0.22654953693034252, 0.39434255148741215, 0.39434255148741215, 0.39434255148741215, 0.2326629713262517, 0.2326629713262517, 0.2326629713262517, 0.7618461674960268, 0.7618461674960268, 0.7618461674960268, 0.7408397988884208, 0.7408397988884208, 0.7408397988884208, 0.19280344963462126, 0.19280344963462126, 0.19280344963462126, 0.1665101310517304, 0.1665101310517304, 0.1665101310517304, 0.7762274467541003, 0.7762274467541003, 0.7762274467541003, 0.15175531131565, 0.15175531131565, 0.15175531131565, 0.20769634908435952, 0.20769634908435952, 0.20769634908435952, 0.18380327294473497, 0.18380327294473497, 0.18380327294473497, 0.17613462550573789, 0.17613462550573789, 0.17613462550573789, 0.07448716380289166, 0.07448716380289166, 0.07448716380289166, 0.07960807158846617, 0.07960807158846617, 0.07960807158846617, 0.08915992428711028, 0.08915992428711028, 0.08915992428711028]}, "mutation_prompt": null}
{"id": "c8fc2a06-ed7c-4f78-b1dd-f451fec40378", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update the global best solution\n                if trial_fitness < best_fitness:\n                    best_solution = trial.copy()\n                    best_fitness = trial_fitness\n\n        return best_solution\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic integrating Differential Evolution with Adaptive Stochastic Local Search using dynamic progress-based perturbation and elite preservation.", "configspace": "", "generation": 27, "fitness": 0.34552308982426055, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "e6f2f2fc-0684-4f74-bb11-cf1acedac47f", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Randomized Adaptive Gradient-based Local Search\n                if np.random.rand() < 0.35:  # 35% chance to refine the trial solution\n                    trial = self.randomized_adaptive_gradient_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def randomized_adaptive_gradient_search(self, solution, func, progress):\n        # Randomized Adaptive Gradient-based Local Search: Uses randomized gradient steps\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n\n        for _ in range(4):  # Perform a small number of local steps\n            perturbation = np.random.normal(0, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Randomized Adaptive Gradient-based Local Search for enhanced convergence and exploitation.", "configspace": "", "generation": 28, "fitness": 0.282445421531907, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6451285464213277, 0.6451285464213277, 0.6451285464213277, 0.6716877005954675, 0.6716877005954675, 0.6716877005954675, 0.6955042181444977, 0.6955042181444977, 0.6955042181444977, 0.35152976059199603, 0.35152976059199603, 0.35152976059199603, 0.349905050956255, 0.349905050956255, 0.349905050956255, 0.4040246587172541, 0.4040246587172541, 0.4040246587172541, 0.09807345112644505, 0.09807345112644505, 0.09807345112644505, 0.10518102792508566, 0.10518102792508566, 0.10518102792508566, 0.11578397792079176, 0.11578397792079176, 0.11578397792079176, 0.07935615738907431, 0.07935615738907431, 0.07935615738907431, 0.1002717373676032, 0.1002717373676032, 0.1002717373676032, 0.09913818796258111, 0.09913818796258111, 0.09913818796258111, 0.9209687568757131, 0.9209687568757131, 0.9209687568757131, 0.8769699594464984, 0.8769699594464984, 0.8769699594464984, 0.846483844632016, 0.846483844632016, 0.846483844632016, 0.27746864880929256, 0.27746864880929256, 0.27746864880929256, 0.27317067258911576, 0.27317067258911576, 0.27317067258911576, 0.30718521822807354, 0.30718521822807354, 0.30718521822807354, 0.5770327017388202, 0.5770327017388202, 0.5770327017388202, 0.6527562155131195, 0.6527562155131195, 0.6527562155131195, 0.6325876211554717, 0.6325876211554717, 0.6325876211554717, 0.14590477914478328, 0.14590477914478328, 0.14590477914478328, 0.17430307654033894, 0.17430307654033894, 0.17430307654033894, 0.15524376751707658, 0.15524376751707658, 0.15524376751707658, 0.20335979460897158, 0.20335979460897158, 0.20335979460897158, 0.17176716947011406, 0.17176716947011406, 0.17176716947011406, 0.1575707802751134, 0.1575707802751134, 0.1575707802751134, 0.13721427173317569, 0.13721427173317569, 0.13721427173317569, 0.19671283629266334, 0.19671283629266334, 0.19671283629266334, 0.14163543329903683, 0.14163543329903683, 0.14163543329903683, 0.33316528706807713, 0.33316528706807713, 0.33316528706807713, 0.31622743930935926, 0.31622743930935926, 0.31622743930935926, 0.3544436647454232, 0.3544436647454232, 0.3544436647454232, 0.046412961035785516, 0.046412961035785516, 0.046412961035785516, 0.09830250263861595, 0.09830250263861595, 0.09830250263861595, 0.08274685965762552, 0.08274685965762552, 0.08274685965762552, 0.19749363843898815, 0.19749363843898815, 0.19749363843898815, 0.20706274589275997, 0.20706274589275997, 0.20706274589275997, 0.1771382817112711, 0.1771382817112711, 0.1771382817112711, 0.5361225044613925, 0.5361225044613925, 0.5361225044613925, 0.5199899249923079, 0.5199899249923079, 0.5199899249923079, 0.5402961929051906, 0.5402961929051906, 0.5402961929051906, 0.08333866080340979, 0.08333866080340979, 0.08333866080340979, 0.09484219158853635, 0.09484219158853635, 0.09484219158853635, 0.09916343163508123, 0.09916343163508123, 0.09916343163508123, 0.13256386147825783, 0.13256386147825783, 0.13256386147825783, 0.14034620121704322, 0.14034620121704322, 0.14034620121704322, 0.12761265870731153, 0.12761265870731153, 0.12761265870731153, 0.3061922159474385, 0.3061922159474385, 0.3061922159474385, 0.2958333979688056, 0.2958333979688056, 0.2958333979688056, 0.3148864570468214, 0.3148864570468214, 0.3148864570468214, 0.23772563199820929, 0.23772563199820929, 0.23772563199820929, 0.23821589216239625, 0.23821589216239625, 0.23821589216239625, 0.253158000085808, 0.253158000085808, 0.253158000085808, 0.18698138386856367, 0.18698138386856367, 0.18698138386856367, 0.2028108959683661, 0.2028108959683661, 0.2028108959683661, 0.2005415056402442, 0.2005415056402442, 0.2005415056402442, 0.19102700277657658, 0.19102700277657658, 0.19102700277657658, 0.18180592124831507, 0.18180592124831507, 0.18180592124831507, 0.17868869012858613, 0.17868869012858613, 0.17868869012858613, 0.6312943488973589, 0.6312943488973589, 0.6312943488973589, 0.5384589454359285, 0.5384589454359285, 0.5384589454359285, 0.16874359758190605, 0.16874359758190605, 0.16874359758190605, 0.3460266256161524, 0.3460266256161524, 0.3460266256161524, 0.19946371230698834, 0.19946371230698834, 0.19946371230698834, 0.19115024656959156, 0.19115024656959156, 0.19115024656959156, 0.19680937172024793, 0.19680937172024793, 0.19680937172024793, 0.18271030462098137, 0.18271030462098137, 0.18271030462098137, 0.1825685113213975, 0.1825685113213975, 0.1825685113213975, 0.07922140004348188, 0.07922140004348188, 0.07922140004348188, 0.09891829709227618, 0.09891829709227618, 0.09891829709227618, 0.08164896297665525, 0.08164896297665525, 0.08164896297665525]}, "mutation_prompt": null}
{"id": "8db635a0-f561-49f8-994d-29a3b3725153", "solution": "import numpy as np\n\nclass HybridPSOALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.inertia_weight = 0.7298\n        self.c1 = 1.49618\n        self.c2 = 1.49618\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.array([func(ind) for ind in personal_best])\n        global_best = personal_best[np.argmin(personal_best_fitness)]\n        global_best_fitness = np.min(personal_best_fitness)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Update Velocities\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - population[i]) +\n                                 self.c2 * r2 * (global_best - population[i]))\n                # Update Positions\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                fitness = func(population[i])\n                evaluations += 1\n\n                # Update Personal and Global Bests\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                    if fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = fitness\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # 30% chance to refine the solution\n                    population[i] = self.adaptive_stochastic_local_search(population[i], func, evaluations / self.budget)\n                    fitness = func(population[i])\n                    evaluations += 1\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.05 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridPSOALS", "description": "A hybrid algorithm combining Particle Swarm Optimization with Adaptive Stochastic Local Search to enhance exploration and convergence through dynamic perturbations.", "configspace": "", "generation": 29, "fitness": 0.18120182776042798, "feedback": "The algorithm HybridPSOALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.4413423120411897, 0.4413423120411897, 0.4413423120411897, 0.35184908456744, 0.35184908456744, 0.35184908456744, 0.4193169792200383, 0.4193169792200383, 0.4193169792200383, 0.018294527883869205, 0.018294527883869205, 0.018294527883869205, 0.01659617704562044, 0.01659617704562044, 0.01659617704562044, 0.0025600956722929835, 0.0025600956722929835, 0.0025600956722929835, 0.12823386642622714, 0.12823386642622714, 0.12823386642622714, 0.09794745199402677, 0.09794745199402677, 0.09794745199402677, 0.08339808151821237, 0.08339808151821237, 0.08339808151821237, 0.07889347043059514, 0.07889347043059514, 0.07889347043059514, 0.08807294240604424, 0.08807294240604424, 0.08807294240604424, 0.08190844088103444, 0.08190844088103444, 0.08190844088103444, 0.9634305228531022, 0.9634305228531022, 0.9634305228531022, 0.9831244905582236, 0.9831244905582236, 0.9831244905582236, 0.975410360717238, 0.975410360717238, 0.975410360717238, 0.1958813691569069, 0.1958813691569069, 0.1958813691569069, 0.2150324176985574, 0.2150324176985574, 0.2150324176985574, 0.1370811383562004, 0.1370811383562004, 0.1370811383562004, 0.20533111302712415, 0.20533111302712415, 0.20533111302712415, 0.1852245405421693, 0.1852245405421693, 0.1852245405421693, 0.11432222822990057, 0.11432222822990057, 0.11432222822990057, 0.13626560698454582, 0.13626560698454582, 0.13626560698454582, 0.07977097666392874, 0.07977097666392874, 0.07977097666392874, 0.10548238510034247, 0.10548238510034247, 0.10548238510034247, 0.12762024295548124, 0.12762024295548124, 0.12762024295548124, 0.18045569515562143, 0.18045569515562143, 0.18045569515562143, 0.12357268717733749, 0.12357268717733749, 0.12357268717733749, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09175675351304602, 0.09175675351304602, 0.09175675351304602, 0.06612162098037766, 0.06612162098037766, 0.06612162098037766, 0.03921850333818944, 0.03921850333818944, 0.03921850333818944, 0.0034307586078903274, 0.0034307586078903274, 0.0034307586078903274, 0.014820958505445181, 0.014820958505445181, 0.014820958505445181, 0.0002756799329879378, 0.0002756799329879378, 0.0002756799329879378, 0.05638259233623666, 0.05638259233623666, 0.05638259233623666, 0.07978953544969447, 0.07978953544969447, 0.07978953544969447, 0.04446405464395542, 0.04446405464395542, 0.04446405464395542, 0.3903594116151121, 0.3903594116151121, 0.3903594116151121, 0.3076055196249501, 0.3076055196249501, 0.3076055196249501, 0.3532073358961556, 0.3532073358961556, 0.3532073358961556, 0.08899744117519426, 0.08899744117519426, 0.08899744117519426, 0.07613600626033845, 0.07613600626033845, 0.07613600626033845, 0.07668252170280498, 0.07668252170280498, 0.07668252170280498, 0.17160296403550312, 0.17160296403550312, 0.17160296403550312, 0.1405147674580075, 0.1405147674580075, 0.1405147674580075, 0.1576305364342252, 0.1576305364342252, 0.1576305364342252, 0.23200966634372122, 0.23200966634372122, 0.23200966634372122, 0.22472503693394896, 0.22472503693394896, 0.22472503693394896, 0.24728247986770202, 0.24728247986770202, 0.24728247986770202, 0.14774839556535768, 0.14774839556535768, 0.14774839556535768, 0.14551078957641272, 0.14551078957641272, 0.14551078957641272, 0.16340270186157746, 0.16340270186157746, 0.16340270186157746, 0.19023881880106175, 0.19023881880106175, 0.19023881880106175, 0.16245183986215594, 0.16245183986215594, 0.16245183986215594, 0.18171802999603814, 0.18171802999603814, 0.18171802999603814, 0.1766511635818604, 0.1766511635818604, 0.1766511635818604, 0.1863130305279247, 0.1863130305279247, 0.1863130305279247, 0.181701216481446, 0.181701216481446, 0.181701216481446, 0.5345272132000993, 0.5345272132000993, 0.5345272132000993, 0.15199737153232384, 0.15199737153232384, 0.15199737153232384, 0.1664173552691074, 0.1664173552691074, 0.1664173552691074, 0.16890725153490727, 0.16890725153490727, 0.16890725153490727, 0.20166799503110378, 0.20166799503110378, 0.20166799503110378, 0.1527730986204735, 0.1527730986204735, 0.1527730986204735, 0.17173221062053035, 0.17173221062053035, 0.17173221062053035, 0.17682549393840052, 0.17682549393840052, 0.17682549393840052, 0.17891711738992577, 0.17891711738992577, 0.17891711738992577, 0.08159120888181404, 0.08159120888181404, 0.08159120888181404, 0.06318099790012444, 0.06318099790012444, 0.06318099790012444, 0.06252494865941516, 0.06252494865941516, 0.06252494865941516]}, "mutation_prompt": null}
{"id": "57122e75-19f8-42b9-99f7-6ed1e75231b7", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly modified differential weight for enhanced exploration\n        self.CR = 0.8  # Adjusted crossover probability for balanced diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        elite = population[np.argmin(fitness)].copy()  # Elite preservation\n        elite_fitness = np.min(fitness)\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Incorporate elite in search process\n                if np.random.rand() < 0.05:  # Small probability to use elite in mutation\n                    trial = np.clip(elite + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < elite_fitness:  # Update elite if a better solution is found\n                        elite = trial.copy()\n                        elite_fitness = trial_fitness\n\n        return elite\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A novel hybrid approach integrating Differential Evolution with a dynamic Adaptive Stochastic Local Search strategy and an elite preservation mechanism for improved convergence.", "configspace": "", "generation": 30, "fitness": 0.30323117196652516, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7220165644351363, 0.7220165644351363, 0.7220165644351363, 0.7336706020677679, 0.7336706020677679, 0.7336706020677679, 0.7672820042855538, 0.7672820042855538, 0.7672820042855538, 0.5125815520771337, 0.5125815520771337, 0.5125815520771337, 0.5079162518917741, 0.5079162518917741, 0.5079162518917741, 0.5330774806783491, 0.5330774806783491, 0.5330774806783491, 0.11693864162275547, 0.11693864162275547, 0.11693864162275547, 0.1017283610485703, 0.1017283610485703, 0.1017283610485703, 0.09933138725494683, 0.09933138725494683, 0.09933138725494683, 0.09035737801513821, 0.09035737801513821, 0.09035737801513821, 0.09392530932845089, 0.09392530932845089, 0.09392530932845089, 0.11230916594648666, 0.11230916594648666, 0.11230916594648666, 0.94194922152014, 0.94194922152014, 0.94194922152014, 0.9350487271709558, 0.9350487271709558, 0.9350487271709558, 0.9472323618587077, 0.9472323618587077, 0.9472323618587077, 0.3600789480827262, 0.3600789480827262, 0.3600789480827262, 0.32998832550040624, 0.32998832550040624, 0.32998832550040624, 0.34945773339613617, 0.34945773339613617, 0.34945773339613617, 0.5214301108980437, 0.5214301108980437, 0.5214301108980437, 0.6949445294473457, 0.6949445294473457, 0.6949445294473457, 0.6570375701422925, 0.6570375701422925, 0.6570375701422925, 0.16570115868901336, 0.16570115868901336, 0.16570115868901336, 0.22966747710894564, 0.22966747710894564, 0.22966747710894564, 0.20497427428934878, 0.20497427428934878, 0.20497427428934878, 0.1892562779611292, 0.1892562779611292, 0.1892562779611292, 0.18065875751718719, 0.18065875751718719, 0.18065875751718719, 0.25875485002824505, 0.25875485002824505, 0.25875485002824505, 0.14550156111135326, 0.14550156111135326, 0.14550156111135326, 0.1692160620442481, 0.1692160620442481, 0.1692160620442481, 0.1424570834319293, 0.1424570834319293, 0.1424570834319293, 0.24156477787394637, 0.24156477787394637, 0.24156477787394637, 0.29488724767900965, 0.29488724767900965, 0.29488724767900965, 0.29484862305938464, 0.29484862305938464, 0.29484862305938464, 0.09723807258099737, 0.09723807258099737, 0.09723807258099737, 0.08302199875250516, 0.08302199875250516, 0.08302199875250516, 0.1228066532408324, 0.1228066532408324, 0.1228066532408324, 0.17682663817120114, 0.17682663817120114, 0.17682663817120114, 0.20068974173278697, 0.20068974173278697, 0.20068974173278697, 0.17849972052218477, 0.17849972052218477, 0.17849972052218477, 0.5644004065157976, 0.5644004065157976, 0.5644004065157976, 0.5372649948475056, 0.5372649948475056, 0.5372649948475056, 0.5077102893806613, 0.5077102893806613, 0.5077102893806613, 0.09627266423857961, 0.09627266423857961, 0.09627266423857961, 0.08701873902944957, 0.08701873902944957, 0.08701873902944957, 0.09005691628866275, 0.09005691628866275, 0.09005691628866275, 0.12018078969469825, 0.12018078969469825, 0.12018078969469825, 0.1519184487615738, 0.1519184487615738, 0.1519184487615738, 0.13244599705792948, 0.13244599705792948, 0.13244599705792948, 0.3077668678164365, 0.3077668678164365, 0.3077668678164365, 0.32653985612150904, 0.32653985612150904, 0.32653985612150904, 0.3218277499860589, 0.3218277499860589, 0.3218277499860589, 0.2352871060628844, 0.2352871060628844, 0.2352871060628844, 0.23441806255604847, 0.23441806255604847, 0.23441806255604847, 0.2427814625792476, 0.2427814625792476, 0.2427814625792476, 0.18471821583222736, 0.18471821583222736, 0.18471821583222736, 0.2324812470055102, 0.2324812470055102, 0.2324812470055102, 0.26494222052246696, 0.26494222052246696, 0.26494222052246696, 0.17712710323466052, 0.17712710323466052, 0.17712710323466052, 0.18758568552540789, 0.18758568552540789, 0.18758568552540789, 0.1883427359809523, 0.1883427359809523, 0.1883427359809523, 0.6722030966009012, 0.6722030966009012, 0.6722030966009012, 0.17310861478361783, 0.17310861478361783, 0.17310861478361783, 0.5310003250673057, 0.5310003250673057, 0.5310003250673057, 0.5453427542330419, 0.5453427542330419, 0.5453427542330419, 0.19597122577612358, 0.19597122577612358, 0.19597122577612358, 0.19713773045486926, 0.19713773045486926, 0.19713773045486926, 0.1800505084994748, 0.1800505084994748, 0.1800505084994748, 0.20707712320977223, 0.20707712320977223, 0.20707712320977223, 0.20040875523065493, 0.20040875523065493, 0.20040875523065493, 0.07220109140982822, 0.07220109140982822, 0.07220109140982822, 0.0803907661876554, 0.0803907661876554, 0.0803907661876554, 0.08179162863523581, 0.08179162863523581, 0.08179162863523581]}, "mutation_prompt": null}
{"id": "f079cad6-6c99-4de6-a661-7b092b330030", "solution": "import numpy as np\n\nclass QuantumHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Differential weight slightly adjusted for exploration\n        self.CR = 0.85  # Crossover probability adjusted for better diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Quantum-Inspired Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (np.sin(x1) - np.cos(x2)), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search Refinement\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Local Search: dynamically adjusts perturbation size\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Perform more local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "QuantumHybridDEALS", "description": "Adaptive Quantum-Inspired Differential Evolution with Local Search Refinement for Efficient Convergence.", "configspace": "", "generation": 31, "fitness": 0.157703728354574, "feedback": "The algorithm QuantumHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.14.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.28365316191097967, 0.28365316191097967, 0.28365316191097967, 0.28203056528439563, 0.28203056528439563, 0.28203056528439563, 0.28208186846176775, 0.28208186846176775, 0.28208186846176775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07815762714302366, 0.07815762714302366, 0.07815762714302366, 0.09389333545265122, 0.09389333545265122, 0.09389333545265122, 0.09061662204610843, 0.09061662204610843, 0.09061662204610843, 0.07895492269313709, 0.07895492269313709, 0.07895492269313709, 0.06589867843978214, 0.06589867843978214, 0.06589867843978214, 0.07471167038348936, 0.07471167038348936, 0.07471167038348936, 0.5897229832222888, 0.5897229832222888, 0.5897229832222888, 0.7113971556066437, 0.7113971556066437, 0.7113971556066437, 0.5538711955501352, 0.5538711955501352, 0.5538711955501352, 0.15560465813095492, 0.15560465813095492, 0.15560465813095492, 0.14407721313831312, 0.14407721313831312, 0.14407721313831312, 0.151234572565778, 0.151234572565778, 0.151234572565778, 0.1271896593801488, 0.1271896593801488, 0.1271896593801488, 0.21962438228121217, 0.21962438228121217, 0.21962438228121217, 0.24859245758632764, 0.24859245758632764, 0.24859245758632764, 0.06048332167403514, 0.06048332167403514, 0.06048332167403514, 0.10196928176150066, 0.10196928176150066, 0.10196928176150066, 0.09252316787009718, 0.09252316787009718, 0.09252316787009718, 0.08065140578956254, 0.08065140578956254, 0.08065140578956254, 0.09558352072757192, 0.09558352072757192, 0.09558352072757192, 0.08938662179091661, 0.08938662179091661, 0.08938662179091661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1236747183855561, 0.1236747183855561, 0.1236747183855561, 0.06637569508882712, 0.06637569508882712, 0.06637569508882712, 0.055221407289787194, 0.055221407289787194, 0.055221407289787194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05042097856225114, 0.05042097856225114, 0.05042097856225114, 0.026540404305924525, 0.026540404305924525, 0.026540404305924525, 0.017292803902443254, 0.017292803902443254, 0.017292803902443254, 0.2654820182382305, 0.2654820182382305, 0.2654820182382305, 0.29665941798111284, 0.29665941798111284, 0.29665941798111284, 0.31416097627117134, 0.31416097627117134, 0.31416097627117134, 0.08939272475911353, 0.08939272475911353, 0.08939272475911353, 0.07922123001065062, 0.07922123001065062, 0.07922123001065062, 0.0801879263301647, 0.0801879263301647, 0.0801879263301647, 0.1425707349605676, 0.1425707349605676, 0.1425707349605676, 0.15614656814601713, 0.15614656814601713, 0.15614656814601713, 0.14120578509855153, 0.14120578509855153, 0.14120578509855153, 0.2090030116471039, 0.2090030116471039, 0.2090030116471039, 0.20536020480087736, 0.20536020480087736, 0.20536020480087736, 0.20510917664293216, 0.20510917664293216, 0.20510917664293216, 0.15556447986333677, 0.15556447986333677, 0.15556447986333677, 0.17205906143771044, 0.17205906143771044, 0.17205906143771044, 0.15275679985990587, 0.15275679985990587, 0.15275679985990587, 0.20798024548401173, 0.20798024548401173, 0.20798024548401173, 0.18701228640467593, 0.18701228640467593, 0.18701228640467593, 0.17627665292986328, 0.17627665292986328, 0.17627665292986328, 0.17600031918026893, 0.17600031918026893, 0.17600031918026893, 0.18246645767646819, 0.18246645767646819, 0.18246645767646819, 0.17644380472100707, 0.17644380472100707, 0.17644380472100707, 0.41112366397566646, 0.41112366397566646, 0.41112366397566646, 0.18975045999942908, 0.18975045999942908, 0.18975045999942908, 0.35850650657395955, 0.35850650657395955, 0.35850650657395955, 0.19550663537556234, 0.19550663537556234, 0.19550663537556234, 0.18227553841942412, 0.18227553841942412, 0.18227553841942412, 0.36749140873045827, 0.36749140873045827, 0.36749140873045827, 0.18164688335491308, 0.18164688335491308, 0.18164688335491308, 0.19021386544619168, 0.19021386544619168, 0.19021386544619168, 0.19130544722990506, 0.19130544722990506, 0.19130544722990506, 0.06482452813429995, 0.06482452813429995, 0.06482452813429995, 0.0788023713085082, 0.0788023713085082, 0.0788023713085082, 0.07982519411165645, 0.07982519411165645, 0.07982519411165645]}, "mutation_prompt": null}
{"id": "4966ae4c-54bf-438c-b548-10a85b3ec366", "solution": "import numpy as np\n\nclass HybridParticleAdaptiveSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 + 5 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = swarm.copy()\n        personal_best_fitness = np.array([func(ind) for ind in swarm])\n        global_best_position = personal_best_positions[np.argmin(personal_best_fitness)]\n        global_best_fitness = min(personal_best_fitness)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Update velocities and positions\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (\n                    self.w * velocities[i]\n                    + self.c1 * r1 * (personal_best_positions[i] - swarm[i])\n                    + self.c2 * r2 * (global_best_position - swarm[i])\n                )\n                swarm[i] = np.clip(swarm[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the solution\n                    swarm[i] = self.adaptive_stochastic_local_search(swarm[i], func, evaluations / self.budget)\n\n                # Evaluate particle\n                fitness = func(swarm[i])\n                evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = swarm[i]\n                    personal_best_fitness[i] = fitness\n\n                # Update global best\n                if fitness < global_best_fitness:\n                    global_best_position = swarm[i]\n                    global_best_fitness = fitness\n\n        return global_best_position\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridParticleAdaptiveSearch", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Stochastic Local Search for enhanced global and local convergence through dynamic adaptation.", "configspace": "", "generation": 32, "fitness": 0.23586453073412023, "feedback": "The algorithm HybridParticleAdaptiveSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6311722533152062, 0.6311722533152062, 0.6311722533152062, 0.6422561906063087, 0.6422561906063087, 0.6422561906063087, 0.643746156518769, 0.643746156518769, 0.643746156518769, 0.017272519194529212, 0.017272519194529212, 0.017272519194529212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030509889536908474, 0.030509889536908474, 0.030509889536908474, 0.08867345071527488, 0.08867345071527488, 0.08867345071527488, 0.09661080439727743, 0.09661080439727743, 0.09661080439727743, 0.11957441981819006, 0.11957441981819006, 0.11957441981819006, 0.08531728103692804, 0.08531728103692804, 0.08531728103692804, 0.08657749541494164, 0.08657749541494164, 0.08657749541494164, 0.0816426015095234, 0.0816426015095234, 0.0816426015095234, 0.9756996029433462, 0.9756996029433462, 0.9756996029433462, 0.9940639396509481, 0.9940639396509481, 0.9940639396509481, 0.9918550862303166, 0.9918550862303166, 0.9918550862303166, 0.2356691080415888, 0.2356691080415888, 0.2356691080415888, 0.3188889704145743, 0.3188889704145743, 0.3188889704145743, 0.30542057680944523, 0.30542057680944523, 0.30542057680944523, 0.544023658364426, 0.544023658364426, 0.544023658364426, 0.19037620482514317, 0.19037620482514317, 0.19037620482514317, 0.581198517407318, 0.581198517407318, 0.581198517407318, 0.1702301241037265, 0.1702301241037265, 0.1702301241037265, 0.11806179589082566, 0.11806179589082566, 0.11806179589082566, 0.14910131828176998, 0.14910131828176998, 0.14910131828176998, 0.18094661362922093, 0.18094661362922093, 0.18094661362922093, 0.14966335660708663, 0.14966335660708663, 0.14966335660708663, 0.15699941870610123, 0.15699941870610123, 0.15699941870610123, 0.0006826788886986623, 0.0006826788886986623, 0.0006826788886986623, 0.028625098126763282, 0.028625098126763282, 0.028625098126763282, 0.03597617210616788, 0.03597617210616788, 0.03597617210616788, 0.2277358101587722, 0.2277358101587722, 0.2277358101587722, 0.022732933216095264, 0.022732933216095264, 0.022732933216095264, 0.11338466691102822, 0.11338466691102822, 0.11338466691102822, 0.018925616845948623, 0.018925616845948623, 0.018925616845948623, 0.0742323961548309, 0.0742323961548309, 0.0742323961548309, 0.035792429419815974, 0.035792429419815974, 0.035792429419815974, 0.13918956851674336, 0.13918956851674336, 0.13918956851674336, 0.17513673060446255, 0.17513673060446255, 0.17513673060446255, 0.05492176897355783, 0.05492176897355783, 0.05492176897355783, 0.4572850093005639, 0.4572850093005639, 0.4572850093005639, 0.41449391510617584, 0.41449391510617584, 0.41449391510617584, 0.409935642410424, 0.409935642410424, 0.409935642410424, 0.1332637038322957, 0.1332637038322957, 0.1332637038322957, 0.11099013210471564, 0.11099013210471564, 0.11099013210471564, 0.1283812192949968, 0.1283812192949968, 0.1283812192949968, 0.22886652413505149, 0.22886652413505149, 0.22886652413505149, 0.2837276297414989, 0.2837276297414989, 0.2837276297414989, 0.16587421234803246, 0.16587421234803246, 0.16587421234803246, 0.3028285399985029, 0.3028285399985029, 0.3028285399985029, 0.33119028601394285, 0.33119028601394285, 0.33119028601394285, 0.22008266145700428, 0.22008266145700428, 0.22008266145700428, 0.18494197932827494, 0.18494197932827494, 0.18494197932827494, 0.177834367329047, 0.177834367329047, 0.177834367329047, 0.23069746360410337, 0.23069746360410337, 0.23069746360410337, 0.1896702259578471, 0.1896702259578471, 0.1896702259578471, 0.2193859257435069, 0.2193859257435069, 0.2193859257435069, 0.21294129382236648, 0.21294129382236648, 0.21294129382236648, 0.22689298641446254, 0.22689298641446254, 0.22689298641446254, 0.19041636400751372, 0.19041636400751372, 0.19041636400751372, 0.1959882092414328, 0.1959882092414328, 0.1959882092414328, 0.790557796564054, 0.790557796564054, 0.790557796564054, 0.1568880802517788, 0.1568880802517788, 0.1568880802517788, 0.1697769976629765, 0.1697769976629765, 0.1697769976629765, 0.16931199700118216, 0.16931199700118216, 0.16931199700118216, 0.2060564707243896, 0.2060564707243896, 0.2060564707243896, 0.15629258762709575, 0.15629258762709575, 0.15629258762709575, 0.18064852948461319, 0.18064852948461319, 0.18064852948461319, 0.2037394048537866, 0.2037394048537866, 0.2037394048537866, 0.1821295361786225, 0.1821295361786225, 0.1821295361786225, 0.08049043775208553, 0.08049043775208553, 0.08049043775208553, 0.08247519803539394, 0.08247519803539394, 0.08247519803539394, 0.07520366163634118, 0.07520366163634118, 0.07520366163634118]}, "mutation_prompt": null}
{"id": "26293f98-0fc4-4e14-82ed-2fcc97c23e94", "solution": "import numpy as np\n\nclass HybridPSOALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 + 5 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_weight = 0.7\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = swarm.copy()\n        personal_best_fitness = np.array([func(ind) for ind in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_fitness)]\n        global_best_fitness = np.min(personal_best_fitness)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Update Velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 self.c2 * r2 * (global_best_position - swarm[i]))\n\n                # Update Position\n                swarm[i] = np.clip(swarm[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate New Position\n                fitness = func(swarm[i])\n                evaluations += 1\n\n                # Update Personal Best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = swarm[i]\n                    personal_best_fitness[i] = fitness\n\n                # Update Global Best\n                if fitness < global_best_fitness:\n                    global_best_position = swarm[i]\n                    global_best_fitness = fitness\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # 30% chance to refine the solution\n                    swarm[i] = self.adaptive_stochastic_local_search(swarm[i], func, evaluations / self.budget)\n\n        return global_best_position\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridPSOALS", "description": "A novel hybrid metaheuristic integrating Particle Swarm Optimization with Adaptive Stochastic Local Search to improve convergence rates through collective intelligence and adaptive local refinements.", "configspace": "", "generation": 33, "fitness": 0.18357605653488884, "feedback": "The algorithm HybridPSOALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.4049370141791647, 0.4049370141791647, 0.4049370141791647, 0.4602850860135652, 0.4602850860135652, 0.4602850860135652, 0.3689224472787197, 0.3689224472787197, 0.3689224472787197, 0.02232974198950377, 0.02232974198950377, 0.02232974198950377, 0.02261967436341583, 0.02261967436341583, 0.02261967436341583, 0.03226872056778851, 0.03226872056778851, 0.03226872056778851, 0.0782869671668519, 0.0782869671668519, 0.0782869671668519, 0.09464009652249572, 0.09464009652249572, 0.09464009652249572, 0.08142427492887439, 0.08142427492887439, 0.08142427492887439, 0.06509838798617384, 0.06509838798617384, 0.06509838798617384, 0.0694852822612303, 0.0694852822612303, 0.0694852822612303, 0.06849028020978987, 0.06849028020978987, 0.06849028020978987, 0.9855458232714066, 0.9855458232714066, 0.9855458232714066, 0.9808101685577485, 0.9808101685577485, 0.9808101685577485, 0.9772102786838811, 0.9772102786838811, 0.9772102786838811, 0.17325371010886315, 0.17325371010886315, 0.17325371010886315, 0.19081904220565793, 0.19081904220565793, 0.19081904220565793, 0.271930702999585, 0.271930702999585, 0.271930702999585, 0.1770762584655784, 0.1770762584655784, 0.1770762584655784, 0.1859444883995508, 0.1859444883995508, 0.1859444883995508, 0.13878278203284022, 0.13878278203284022, 0.13878278203284022, 0.13423416376033126, 0.13423416376033126, 0.13423416376033126, 0.11759329053099787, 0.11759329053099787, 0.11759329053099787, 0.11280644510495896, 0.11280644510495896, 0.11280644510495896, 0.04814965248283953, 0.04814965248283953, 0.04814965248283953, 0.12287819377803877, 0.12287819377803877, 0.12287819377803877, 0.10446208342882513, 0.10446208342882513, 0.10446208342882513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02391876091220324, 0.02391876091220324, 0.02391876091220324, 0.06042896384005758, 0.06042896384005758, 0.06042896384005758, 0.011379894336164043, 0.011379894336164043, 0.011379894336164043, 0.0018909635064061625, 0.0018909635064061625, 0.0018909635064061625, 0.006419670148092305, 0.006419670148092305, 0.006419670148092305, 0.018277652151527435, 0.018277652151527435, 0.018277652151527435, 0.06026122377163101, 0.06026122377163101, 0.06026122377163101, 0.033027575395305986, 0.033027575395305986, 0.033027575395305986, 0.06603946672052119, 0.06603946672052119, 0.06603946672052119, 0.36098884635478157, 0.36098884635478157, 0.36098884635478157, 0.3608595432791648, 0.3608595432791648, 0.3608595432791648, 0.3558910127900762, 0.3558910127900762, 0.3558910127900762, 0.08922725568343881, 0.08922725568343881, 0.08922725568343881, 0.08611468046763804, 0.08611468046763804, 0.08611468046763804, 0.0703374427392589, 0.0703374427392589, 0.0703374427392589, 0.210044555093299, 0.210044555093299, 0.210044555093299, 0.1451032564353436, 0.1451032564353436, 0.1451032564353436, 0.1674228689406122, 0.1674228689406122, 0.1674228689406122, 0.26742397780748484, 0.26742397780748484, 0.26742397780748484, 0.18878256839426488, 0.18878256839426488, 0.18878256839426488, 0.26031673072182404, 0.26031673072182404, 0.26031673072182404, 0.15569122362768117, 0.15569122362768117, 0.15569122362768117, 0.15196679536595603, 0.15196679536595603, 0.15196679536595603, 0.11391268748523886, 0.11391268748523886, 0.11391268748523886, 0.185501817141012, 0.185501817141012, 0.185501817141012, 0.17040959061829675, 0.17040959061829675, 0.17040959061829675, 0.17962702336263714, 0.17962702336263714, 0.17962702336263714, 0.1795051610349434, 0.1795051610349434, 0.1795051610349434, 0.18567094206573242, 0.18567094206573242, 0.18567094206573242, 0.17680667657019988, 0.17680667657019988, 0.17680667657019988, 0.6342992948519253, 0.6342992948519253, 0.6342992948519253, 0.15219127037167834, 0.15219127037167834, 0.15219127037167834, 0.1766666842884067, 0.1766666842884067, 0.1766666842884067, 0.1678222768271207, 0.1678222768271207, 0.1678222768271207, 0.20395634635641768, 0.20395634635641768, 0.20395634635641768, 0.20901278817928004, 0.20901278817928004, 0.20901278817928004, 0.204334079818695, 0.204334079818695, 0.204334079818695, 0.2119478974605249, 0.2119478974605249, 0.2119478974605249, 0.19381705528859594, 0.19381705528859594, 0.19381705528859594, 0.0766659853588122, 0.0766659853588122, 0.0766659853588122, 0.0764891128419749, 0.0764891128419749, 0.0764891128419749, 0.07643939482909479, 0.07643939482909479, 0.07643939482909479]}, "mutation_prompt": null}
{"id": "17239f86-8e94-4dd1-9dfa-2f0a391ad51c", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search to enhance convergence through dynamic perturbations.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "f5f77541-7e61-40f5-b057-8467630b6e04", "solution": "import numpy as np\n\nclass DualPhaseHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15 + 7 * self.dim  # Adjusted population size\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.85  # Adjusted crossover probability for diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Local Search with Dynamic Local Perturbations\n                if np.random.rand() < 0.30:  # Increased chance to refine the trial solution\n                    trial = self.dynamic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def dynamic_local_search(self, solution, func, progress):\n        # Enhanced Local Search with dynamic adaptation to problem landscape\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # More local steps for thorough exploration\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "DualPhaseHybridOptimizer", "description": "A Dual-Phase Hybrid Optimizer combining improved Differential Evolution with Local Search that adapts dynamically based on problem landscape.", "configspace": "", "generation": 35, "fitness": 0.19435747469952108, "feedback": "The algorithm DualPhaseHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.4511506686802691, 0.4511506686802691, 0.4511506686802691, 0.3879457405409096, 0.3879457405409096, 0.3879457405409096, 0.4456104653449373, 0.4456104653449373, 0.4456104653449373, 0.15304051932100504, 0.15304051932100504, 0.15304051932100504, 0.16325949122994277, 0.16325949122994277, 0.16325949122994277, 0.1859782230767253, 0.1859782230767253, 0.1859782230767253, 0.08647008413845836, 0.08647008413845836, 0.08647008413845836, 0.10682939232950484, 0.10682939232950484, 0.10682939232950484, 0.09348611035940435, 0.09348611035940435, 0.09348611035940435, 0.06860020852247439, 0.06860020852247439, 0.06860020852247439, 0.0861555898831664, 0.0861555898831664, 0.0861555898831664, 0.08116193002335781, 0.08116193002335781, 0.08116193002335781, 0.8946220111256888, 0.8946220111256888, 0.8946220111256888, 0.8892053265259857, 0.8892053265259857, 0.8892053265259857, 0.8559042448806495, 0.8559042448806495, 0.8559042448806495, 0.1935128802117313, 0.1935128802117313, 0.1935128802117313, 0.1787407914207244, 0.1787407914207244, 0.1787407914207244, 0.18855755605914493, 0.18855755605914493, 0.18855755605914493, 0.2433181679925287, 0.2433181679925287, 0.2433181679925287, 0.2884047365806598, 0.2884047365806598, 0.2884047365806598, 0.2430559756170333, 0.2430559756170333, 0.2430559756170333, 0.12742791906423223, 0.12742791906423223, 0.12742791906423223, 0.13333515405121033, 0.13333515405121033, 0.13333515405121033, 0.09938525818662602, 0.09938525818662602, 0.09938525818662602, 0.12825278961799302, 0.12825278961799302, 0.12825278961799302, 0.10915605378925453, 0.10915605378925453, 0.10915605378925453, 0.13522958741131985, 0.13522958741131985, 0.13522958741131985, 0.0111871074078852, 0.0111871074078852, 0.0111871074078852, 0.021726235514027192, 0.021726235514027192, 0.021726235514027192, 0.011733820859303856, 0.011733820859303856, 0.011733820859303856, 0.14649311124350173, 0.14649311124350173, 0.14649311124350173, 0.13530792165968852, 0.13530792165968852, 0.13530792165968852, 0.15388271020930588, 0.15388271020930588, 0.15388271020930588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08747971370578922, 0.08747971370578922, 0.08747971370578922, 0.08506992022217141, 0.08506992022217141, 0.08506992022217141, 0.07797934874718138, 0.07797934874718138, 0.07797934874718138, 0.36332833654580077, 0.36332833654580077, 0.36332833654580077, 0.3898441392938564, 0.3898441392938564, 0.3898441392938564, 0.38367803818038615, 0.38367803818038615, 0.38367803818038615, 0.09273648113907895, 0.09273648113907895, 0.09273648113907895, 0.0730794633340438, 0.0730794633340438, 0.0730794633340438, 0.07963418084154417, 0.07963418084154417, 0.07963418084154417, 0.12586410406235882, 0.12586410406235882, 0.12586410406235882, 0.14040791078032688, 0.14040791078032688, 0.14040791078032688, 0.15848651414152704, 0.15848651414152704, 0.15848651414152704, 0.23671410652548153, 0.23671410652548153, 0.23671410652548153, 0.2424700957358753, 0.2424700957358753, 0.2424700957358753, 0.24668433485087937, 0.24668433485087937, 0.24668433485087937, 0.16873547665034982, 0.16873547665034982, 0.16873547665034982, 0.16583918359026595, 0.16583918359026595, 0.16583918359026595, 0.1796139156113391, 0.1796139156113391, 0.1796139156113391, 0.18712651140627845, 0.18712651140627845, 0.18712651140627845, 0.19172444195455995, 0.19172444195455995, 0.19172444195455995, 0.1982841344848737, 0.1982841344848737, 0.1982841344848737, 0.16028727798263587, 0.16028727798263587, 0.16028727798263587, 0.17499323157850177, 0.17499323157850177, 0.17499323157850177, 0.17706398541010782, 0.17706398541010782, 0.17706398541010782, 0.3274008068981661, 0.3274008068981661, 0.3274008068981661, 0.2050650978008236, 0.2050650978008236, 0.2050650978008236, 0.20292046562965105, 0.20292046562965105, 0.20292046562965105, 0.18272873271738954, 0.18272873271738954, 0.18272873271738954, 0.2563288551256313, 0.2563288551256313, 0.2563288551256313, 0.18675613608943087, 0.18675613608943087, 0.18675613608943087, 0.1825417233355151, 0.1825417233355151, 0.1825417233355151, 0.1878143667777048, 0.1878143667777048, 0.1878143667777048, 0.17667259919498735, 0.17667259919498735, 0.17667259919498735, 0.06465920001249637, 0.06465920001249637, 0.06465920001249637, 0.06489980829947695, 0.06489980829947695, 0.06489980829947695, 0.07039775683038496, 0.07039775683038496, 0.07039775683038496]}, "mutation_prompt": null}
{"id": "f4f2a2ce-936a-466e-a9b8-d9017dcabbf2", "solution": "import numpy as np\n\nclass HybridDEALSPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with occasional global exploration\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.05:  # 5% chance to perform global random exploration\n                    mutant = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search with dynamic exploration\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALSPlus", "description": "A blend of Differential Evolution with Adaptive Stochastic Local Search enhanced by dynamic exploration intensities based on progress.", "configspace": "", "generation": 36, "fitness": 0.3198571380100563, "feedback": "The algorithm HybridDEALSPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7125868099228707, 0.7125868099228707, 0.7125868099228707, 0.7436179560260621, 0.7436179560260621, 0.7436179560260621, 0.75457441086425, 0.75457441086425, 0.75457441086425, 0.549590749266043, 0.549590749266043, 0.549590749266043, 0.5074888399704872, 0.5074888399704872, 0.5074888399704872, 0.5772672927268993, 0.5772672927268993, 0.5772672927268993, 0.10494566591297316, 0.10494566591297316, 0.10494566591297316, 0.09357060423504548, 0.09357060423504548, 0.09357060423504548, 0.0898627760013645, 0.0898627760013645, 0.0898627760013645, 0.09299073150296122, 0.09299073150296122, 0.09299073150296122, 0.11769066935167971, 0.11769066935167971, 0.11769066935167971, 0.08856549853427109, 0.08856549853427109, 0.08856549853427109, 0.9107134549397804, 0.9107134549397804, 0.9107134549397804, 0.8890862308399896, 0.8890862308399896, 0.8890862308399896, 0.896183283198783, 0.896183283198783, 0.896183283198783, 0.3270558166649542, 0.3270558166649542, 0.3270558166649542, 0.3330648888925867, 0.3330648888925867, 0.3330648888925867, 0.3622920063597511, 0.3622920063597511, 0.3622920063597511, 0.6717415035831815, 0.6717415035831815, 0.6717415035831815, 0.6630888008776449, 0.6630888008776449, 0.6630888008776449, 0.684442759816914, 0.684442759816914, 0.684442759816914, 0.1537093437098227, 0.1537093437098227, 0.1537093437098227, 0.16725634387772537, 0.16725634387772537, 0.16725634387772537, 0.17026964128622935, 0.17026964128622935, 0.17026964128622935, 0.21365265333849937, 0.21365265333849937, 0.21365265333849937, 0.1505983110823188, 0.1505983110823188, 0.1505983110823188, 0.14294090164037876, 0.14294090164037876, 0.14294090164037876, 0.2684716977957785, 0.2684716977957785, 0.2684716977957785, 0.27452722679929975, 0.27452722679929975, 0.27452722679929975, 0.27222355820773636, 0.27222355820773636, 0.27222355820773636, 0.12800188155340364, 0.12800188155340364, 0.12800188155340364, 0.40464391363917707, 0.40464391363917707, 0.40464391363917707, 0.44318409658699087, 0.44318409658699087, 0.44318409658699087, 0.08642499470982878, 0.08642499470982878, 0.08642499470982878, 0.1632175827649327, 0.1632175827649327, 0.1632175827649327, 0.1007700297587768, 0.1007700297587768, 0.1007700297587768, 0.20690542516836397, 0.20690542516836397, 0.20690542516836397, 0.2394328226930238, 0.2394328226930238, 0.2394328226930238, 0.2284803215492155, 0.2284803215492155, 0.2284803215492155, 0.6000490751869869, 0.6000490751869869, 0.6000490751869869, 0.5878458965996955, 0.5878458965996955, 0.5878458965996955, 0.6359998435585477, 0.6359998435585477, 0.6359998435585477, 0.09657760719162034, 0.09657760719162034, 0.09657760719162034, 0.09421517507725152, 0.09421517507725152, 0.09421517507725152, 0.08228757271489595, 0.08228757271489595, 0.08228757271489595, 0.14272241447683442, 0.14272241447683442, 0.14272241447683442, 0.14312015028953862, 0.14312015028953862, 0.14312015028953862, 0.13872230524434614, 0.13872230524434614, 0.13872230524434614, 0.35645739453577485, 0.35645739453577485, 0.35645739453577485, 0.3426924347460091, 0.3426924347460091, 0.3426924347460091, 0.35845850029047455, 0.35845850029047455, 0.35845850029047455, 0.2708178468170286, 0.2708178468170286, 0.2708178468170286, 0.27130607159661135, 0.27130607159661135, 0.27130607159661135, 0.25091043880450714, 0.25091043880450714, 0.25091043880450714, 0.19951431237333828, 0.19951431237333828, 0.19951431237333828, 0.18922070387100887, 0.18922070387100887, 0.18922070387100887, 0.17864360699494464, 0.17864360699494464, 0.17864360699494464, 0.2031455177178444, 0.2031455177178444, 0.2031455177178444, 0.18389022593824755, 0.18389022593824755, 0.18389022593824755, 0.18690256200235855, 0.18690256200235855, 0.18690256200235855, 0.6643023195284368, 0.6643023195284368, 0.6643023195284368, 0.6277693157567864, 0.6277693157567864, 0.6277693157567864, 0.16989504946909018, 0.16989504946909018, 0.16989504946909018, 0.5692432046158564, 0.5692432046158564, 0.5692432046158564, 0.36772584997930435, 0.36772584997930435, 0.36772584997930435, 0.3347405816767923, 0.3347405816767923, 0.3347405816767923, 0.1817478963509468, 0.1817478963509468, 0.1817478963509468, 0.1827596759047878, 0.1827596759047878, 0.1827596759047878, 0.17649625787165424, 0.17649625787165424, 0.17649625787165424, 0.08264256766338562, 0.08264256766338562, 0.08264256766338562, 0.09900719935922353, 0.09900719935922353, 0.09900719935922353, 0.07475286686992966, 0.07475286686992966, 0.07475286686992966]}, "mutation_prompt": null}
{"id": "1b5129d0-da67-41ab-838b-26c4a5ecb106", "solution": "import numpy as np\n\nclass RefinedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly increased differential weight\n        self.CR = 0.85  # Adjusted crossover probability for diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine trial solutions\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection with elitism\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                elif np.random.rand() < 0.1:  # Chance to replace worse solutions\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 3)  # Adjusted perturbation scaling\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "RefinedHybridDEALS", "description": "A refined hybrid strategy integrating Differential Evolution with Adaptive Stochastic Local Search augmented by dynamic perturbation scaling and selection strategies.", "configspace": "", "generation": 37, "fitness": 0.2022003209616805, "feedback": "The algorithm RefinedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.5285962427458453, 0.5285962427458453, 0.5285962427458453, 0.536869018302005, 0.536869018302005, 0.536869018302005, 0.5647952181419589, 0.5647952181419589, 0.5647952181419589, 0.2464370944201454, 0.2464370944201454, 0.2464370944201454, 0.27503596815633546, 0.27503596815633546, 0.27503596815633546, 0.2503244058439643, 0.2503244058439643, 0.2503244058439643, 0.08359700903407996, 0.08359700903407996, 0.08359700903407996, 0.08763572906472872, 0.08763572906472872, 0.08763572906472872, 0.07810866207798794, 0.07810866207798794, 0.07810866207798794, 0.08058991550632622, 0.08058991550632622, 0.08058991550632622, 0.0750446841326462, 0.0750446841326462, 0.0750446841326462, 0.07377656554206802, 0.07377656554206802, 0.07377656554206802, 0.9138035553557591, 0.9138035553557591, 0.9138035553557591, 0.9391137905588272, 0.9391137905588272, 0.9391137905588272, 0.8933672290351511, 0.8933672290351511, 0.8933672290351511, 0.19081959489515, 0.19081959489515, 0.19081959489515, 0.17881569164024347, 0.17881569164024347, 0.17881569164024347, 0.22955890907492804, 0.22955890907492804, 0.22955890907492804, 0.21696347102905178, 0.21696347102905178, 0.21696347102905178, 0.27074886635932893, 0.27074886635932893, 0.27074886635932893, 0.24538856498158668, 0.24538856498158668, 0.24538856498158668, 0.12263389221130294, 0.12263389221130294, 0.12263389221130294, 0.13918246442504167, 0.13918246442504167, 0.13918246442504167, 0.14216115094332837, 0.14216115094332837, 0.14216115094332837, 0.10343162123588723, 0.10343162123588723, 0.10343162123588723, 0.1578320654044041, 0.1578320654044041, 0.1578320654044041, 0.1225332769424392, 0.1225332769424392, 0.1225332769424392, 0.0007349978411670399, 0.0007349978411670399, 0.0007349978411670399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05423486853146531, 0.05423486853146531, 0.05423486853146531, 0.038536655401037234, 0.038536655401037234, 0.038536655401037234, 0.06628762229813523, 0.06628762229813523, 0.06628762229813523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09054985412324945, 0.09054985412324945, 0.09054985412324945, 0.08304679322065855, 0.08304679322065855, 0.08304679322065855, 0.06784850011508647, 0.06784850011508647, 0.06784850011508647, 0.4339265658802406, 0.4339265658802406, 0.4339265658802406, 0.3751083115413777, 0.3751083115413777, 0.3751083115413777, 0.40733751329154677, 0.40733751329154677, 0.40733751329154677, 0.07910283322245248, 0.07910283322245248, 0.07910283322245248, 0.08310818925345687, 0.08310818925345687, 0.08310818925345687, 0.06810412344060546, 0.06810412344060546, 0.06810412344060546, 0.15082752458355886, 0.15082752458355886, 0.15082752458355886, 0.1424540979460942, 0.1424540979460942, 0.1424540979460942, 0.1362659224667514, 0.1362659224667514, 0.1362659224667514, 0.23836965962884982, 0.23836965962884982, 0.23836965962884982, 0.20905903723729402, 0.20905903723729402, 0.20905903723729402, 0.24893323569004167, 0.24893323569004167, 0.24893323569004167, 0.1827864573716803, 0.1827864573716803, 0.1827864573716803, 0.15250055957834796, 0.15250055957834796, 0.15250055957834796, 0.1743032223678661, 0.1743032223678661, 0.1743032223678661, 0.17514523739705878, 0.17514523739705878, 0.17514523739705878, 0.1888363965376254, 0.1888363965376254, 0.1888363965376254, 0.22202175321570017, 0.22202175321570017, 0.22202175321570017, 0.1675887275055309, 0.1675887275055309, 0.1675887275055309, 0.16914078813982847, 0.16914078813982847, 0.16914078813982847, 0.17424909099407104, 0.17424909099407104, 0.17424909099407104, 0.5045742510955422, 0.5045742510955422, 0.5045742510955422, 0.17306208607550666, 0.17306208607550666, 0.17306208607550666, 0.17560556548437523, 0.17560556548437523, 0.17560556548437523, 0.19419181217375614, 0.19419181217375614, 0.19419181217375614, 0.2268410406820902, 0.2268410406820902, 0.2268410406820902, 0.19810714887361636, 0.19810714887361636, 0.19810714887361636, 0.18234949469940243, 0.18234949469940243, 0.18234949469940243, 0.18669182456964029, 0.18669182456964029, 0.18669182456964029, 0.1747741506231678, 0.1747741506231678, 0.1747741506231678, 0.061208930561503117, 0.061208930561503117, 0.061208930561503117, 0.07267072918638073, 0.07267072918638073, 0.07267072918638073, 0.08027287933471416, 0.08027287933471416, 0.08027287933471416]}, "mutation_prompt": null}
{"id": "94ea7a1b-d130-45ad-b981-97fc7c635a0f", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Bayesian Adaptive Sampling for Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.bayesian_adaptive_sampling(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def bayesian_adaptive_sampling(self, solution, func, progress):\n        # Bayesian Adaptive Sampling: dynamically adjusts exploration based on Gaussian noise\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.exp(-progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Perform a moderate number of local steps\n            perturbation = np.random.normal(0, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "An improved hybrid metaheuristic incorporating Bayesian Adaptive Sampling with Differential Evolution to enhance exploration and convergence.", "configspace": "", "generation": 38, "fitness": 0.2967727507579192, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6973320083096386, 0.6973320083096386, 0.6973320083096386, 0.646596003309349, 0.646596003309349, 0.646596003309349, 0.7172048455337708, 0.7172048455337708, 0.7172048455337708, 0.4424883802870654, 0.4424883802870654, 0.4424883802870654, 0.36826427817454976, 0.36826427817454976, 0.36826427817454976, 0.39558522369743543, 0.39558522369743543, 0.39558522369743543, 0.1126539141530799, 0.1126539141530799, 0.1126539141530799, 0.10067308123765162, 0.10067308123765162, 0.10067308123765162, 0.10965951135961272, 0.10965951135961272, 0.10965951135961272, 0.10023346680096601, 0.10023346680096601, 0.10023346680096601, 0.083859055925255, 0.083859055925255, 0.083859055925255, 0.08043616620826577, 0.08043616620826577, 0.08043616620826577, 0.903666117078767, 0.903666117078767, 0.903666117078767, 0.9453986229096715, 0.9453986229096715, 0.9453986229096715, 0.8727381995051394, 0.8727381995051394, 0.8727381995051394, 0.3123687696444897, 0.3123687696444897, 0.3123687696444897, 0.30188948151908135, 0.30188948151908135, 0.30188948151908135, 0.30929198214157405, 0.30929198214157405, 0.30929198214157405, 0.5580686603955265, 0.5580686603955265, 0.5580686603955265, 0.6691157710135487, 0.6691157710135487, 0.6691157710135487, 0.702568941942582, 0.702568941942582, 0.702568941942582, 0.20175668441797778, 0.20175668441797778, 0.20175668441797778, 0.18441118403671197, 0.18441118403671197, 0.18441118403671197, 0.24174208718149204, 0.24174208718149204, 0.24174208718149204, 0.13985188298865636, 0.13985188298865636, 0.13985188298865636, 0.15565690284039868, 0.15565690284039868, 0.15565690284039868, 0.21819116837467922, 0.21819116837467922, 0.21819116837467922, 0.20663299988259753, 0.20663299988259753, 0.20663299988259753, 0.1895392739140257, 0.1895392739140257, 0.1895392739140257, 0.19760127321833165, 0.19760127321833165, 0.19760127321833165, 0.36175414156707586, 0.36175414156707586, 0.36175414156707586, 0.2043851995260707, 0.2043851995260707, 0.2043851995260707, 0.35293150194379574, 0.35293150194379574, 0.35293150194379574, 0.0691569103351296, 0.0691569103351296, 0.0691569103351296, 0.08989414000247764, 0.08989414000247764, 0.08989414000247764, 0.07589979327579799, 0.07589979327579799, 0.07589979327579799, 0.20002837228697035, 0.20002837228697035, 0.20002837228697035, 0.23921458360684156, 0.23921458360684156, 0.23921458360684156, 0.1887320291653949, 0.1887320291653949, 0.1887320291653949, 0.5613558348808718, 0.5613558348808718, 0.5613558348808718, 0.5628508637043861, 0.5628508637043861, 0.5628508637043861, 0.5731858258357805, 0.5731858258357805, 0.5731858258357805, 0.0831765448189048, 0.0831765448189048, 0.0831765448189048, 0.08816024424416724, 0.08816024424416724, 0.08816024424416724, 0.08244627429185325, 0.08244627429185325, 0.08244627429185325, 0.16524102832803433, 0.16524102832803433, 0.16524102832803433, 0.1396328372012644, 0.1396328372012644, 0.1396328372012644, 0.14873636514846889, 0.14873636514846889, 0.14873636514846889, 0.30585728607923934, 0.30585728607923934, 0.30585728607923934, 0.3201335932491748, 0.3201335932491748, 0.3201335932491748, 0.32385834335397734, 0.32385834335397734, 0.32385834335397734, 0.2457393426071789, 0.2457393426071789, 0.2457393426071789, 0.2074703852775801, 0.2074703852775801, 0.2074703852775801, 0.26746849651481763, 0.26746849651481763, 0.26746849651481763, 0.19688772766799834, 0.19688772766799834, 0.19688772766799834, 0.2248573479268663, 0.2248573479268663, 0.2248573479268663, 0.19038250493466646, 0.19038250493466646, 0.19038250493466646, 0.17732480936883932, 0.17732480936883932, 0.17732480936883932, 0.1878665078840681, 0.1878665078840681, 0.1878665078840681, 0.17819699130335354, 0.17819699130335354, 0.17819699130335354, 0.7065553947406369, 0.7065553947406369, 0.7065553947406369, 0.46404140659697546, 0.46404140659697546, 0.46404140659697546, 0.5903794510459393, 0.5903794510459393, 0.5903794510459393, 0.20135640529555532, 0.20135640529555532, 0.20135640529555532, 0.20173960517284162, 0.20173960517284162, 0.20173960517284162, 0.20516642188848488, 0.20516642188848488, 0.20516642188848488, 0.18863991736308583, 0.18863991736308583, 0.18863991736308583, 0.19089266919309988, 0.19089266919309988, 0.19089266919309988, 0.2155146952676602, 0.2155146952676602, 0.2155146952676602, 0.07511109513205849, 0.07511109513205849, 0.07511109513205849, 0.07383112253641888, 0.07383112253641888, 0.07383112253641888, 0.0761081060044917, 0.0761081060044917, 0.0761081060044917]}, "mutation_prompt": null}
{"id": "76b6c33b-29d4-49af-abf6-b86ff87c8255", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.restart_threshold = 0.2\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Randomized Restart Strategy\n            if np.random.rand() < self.restart_threshold:\n                self.randomized_restart(population)\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution\n\n    def randomized_restart(self, population):\n        # Reinitialize a subset of the population\n        num_restarts = int(self.population_size * 0.1)\n        for _ in range(num_restarts):\n            idx = np.random.randint(0, self.population_size)\n            population[idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)", "name": "EnhancedHybridDEALS", "description": "An enhanced hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search and Randomized Restart Strategy for circumventing local optima.", "configspace": "", "generation": 39, "fitness": 0.2928062987094983, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.22.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7017276689119246, 0.7017276689119246, 0.7017276689119246, 0.7278631529592481, 0.7278631529592481, 0.7278631529592481, 0.735511610812132, 0.735511610812132, 0.735511610812132, 0.5220500459313854, 0.5220500459313854, 0.5220500459313854, 0.46186434553717004, 0.46186434553717004, 0.46186434553717004, 0.4370224413321194, 0.4370224413321194, 0.4370224413321194, 0.09003790756978702, 0.09003790756978702, 0.09003790756978702, 0.09311086761666498, 0.09311086761666498, 0.09311086761666498, 0.09935791596306376, 0.09935791596306376, 0.09935791596306376, 0.08364503576348703, 0.08364503576348703, 0.08364503576348703, 0.0763608643291731, 0.0763608643291731, 0.0763608643291731, 0.07186254175474571, 0.07186254175474571, 0.07186254175474571, 0.9321374572297335, 0.9321374572297335, 0.9321374572297335, 0.8700874224436947, 0.8700874224436947, 0.8700874224436947, 0.9189904969598695, 0.9189904969598695, 0.9189904969598695, 0.3115603272824693, 0.3115603272824693, 0.3115603272824693, 0.29460692933158517, 0.29460692933158517, 0.29460692933158517, 0.3781762320232931, 0.3781762320232931, 0.3781762320232931, 0.37323530884333767, 0.37323530884333767, 0.37323530884333767, 0.6704638178166357, 0.6704638178166357, 0.6704638178166357, 0.6533386302862656, 0.6533386302862656, 0.6533386302862656, 0.13426223199828546, 0.13426223199828546, 0.13426223199828546, 0.21391498489037541, 0.21391498489037541, 0.21391498489037541, 0.16906465686630945, 0.16906465686630945, 0.16906465686630945, 0.17128677797250436, 0.17128677797250436, 0.17128677797250436, 0.15863332211413694, 0.15863332211413694, 0.15863332211413694, 0.15846078955801568, 0.15846078955801568, 0.15846078955801568, 0.17652182965660124, 0.17652182965660124, 0.17652182965660124, 0.25271627563873067, 0.25271627563873067, 0.25271627563873067, 0.23491260035211947, 0.23491260035211947, 0.23491260035211947, 0.40696181228479145, 0.40696181228479145, 0.40696181228479145, 0.19095893288543042, 0.19095893288543042, 0.19095893288543042, 0.40095526715124774, 0.40095526715124774, 0.40095526715124774, 0.06472927595721645, 0.06472927595721645, 0.06472927595721645, 0.13764657512220235, 0.13764657512220235, 0.13764657512220235, 0.11154636921300276, 0.11154636921300276, 0.11154636921300276, 0.23022951858533902, 0.23022951858533902, 0.23022951858533902, 0.2567088570218179, 0.2567088570218179, 0.2567088570218179, 0.2052070507155226, 0.2052070507155226, 0.2052070507155226, 0.5216277610750066, 0.5216277610750066, 0.5216277610750066, 0.5723356081087299, 0.5723356081087299, 0.5723356081087299, 0.5422075012629368, 0.5422075012629368, 0.5422075012629368, 0.07845636221815289, 0.07845636221815289, 0.07845636221815289, 0.09938019522906794, 0.09938019522906794, 0.09938019522906794, 0.08961614655596273, 0.08961614655596273, 0.08961614655596273, 0.1525347138749823, 0.1525347138749823, 0.1525347138749823, 0.13878064508012755, 0.13878064508012755, 0.13878064508012755, 0.148360969740713, 0.148360969740713, 0.148360969740713, 0.29835998233058836, 0.29835998233058836, 0.29835998233058836, 0.3214700485073755, 0.3214700485073755, 0.3214700485073755, 0.3381210049140233, 0.3381210049140233, 0.3381210049140233, 0.23866126344076788, 0.23866126344076788, 0.23866126344076788, 0.217368338070684, 0.217368338070684, 0.217368338070684, 0.24876292156231716, 0.24876292156231716, 0.24876292156231716, 0.20600697193803197, 0.20600697193803197, 0.20600697193803197, 0.17650516062065003, 0.17650516062065003, 0.17650516062065003, 0.18909403275913605, 0.18909403275913605, 0.18909403275913605, 0.18360690325195428, 0.18360690325195428, 0.18360690325195428, 0.17500622399659838, 0.17500622399659838, 0.17500622399659838, 0.17436110917428593, 0.17436110917428593, 0.17436110917428593, 0.4932584812812266, 0.4932584812812266, 0.4932584812812266, 0.17705617508173, 0.17705617508173, 0.17705617508173, 0.32197965510185644, 0.32197965510185644, 0.32197965510185644, 0.20776607903999755, 0.20776607903999755, 0.20776607903999755, 0.16535501701915623, 0.16535501701915623, 0.16535501701915623, 0.6605428506855899, 0.6605428506855899, 0.6605428506855899, 0.1723674138800272, 0.1723674138800272, 0.1723674138800272, 0.18252904618823163, 0.18252904618823163, 0.18252904618823163, 0.1882810248609592, 0.1882810248609592, 0.1882810248609592, 0.06666411475317324, 0.06666411475317324, 0.06666411475317324, 0.06900662287333892, 0.06900662287333892, 0.06900662287333892, 0.08889501392506538, 0.08889501392506538, 0.08889501392506538]}, "mutation_prompt": null}
{"id": "5777813d-a2d8-4af0-acb8-77b9096500a3", "solution": "import numpy as np\n\nclass HybridGeneticDiversityLES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Increased differential weight for diversity\n        self.CR = 0.85  # Slightly reduced crossover probability for exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Modified DE Mutation for diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * np.random.randn(self.dim), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Enhanced Local Exploration Strategy\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.enhanced_local_exploration(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def enhanced_local_exploration(self, solution, func, progress):\n        # Enhanced Local Exploration Strategy: adjusts with a more pronounced perturbation decay\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 3)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridGeneticDiversityLES", "description": "A hybrid genetic algorithm incorporating adaptive local search with a diversity-enhancing mutation strategy to improve global exploration and local exploitation.", "configspace": "", "generation": 40, "fitness": 0.19483149871411262, "feedback": "The algorithm HybridGeneticDiversityLES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.43242479322326266, 0.43242479322326266, 0.43242479322326266, 0.4146620343903171, 0.4146620343903171, 0.4146620343903171, 0.3980673141153612, 0.3980673141153612, 0.3980673141153612, 0.03900917218836819, 0.03900917218836819, 0.03900917218836819, 0.04687884097830486, 0.04687884097830486, 0.04687884097830486, 0.06511919436578373, 0.06511919436578373, 0.06511919436578373, 0.08790069404210876, 0.08790069404210876, 0.08790069404210876, 0.09934800282117306, 0.09934800282117306, 0.09934800282117306, 0.08856866531569252, 0.08856866531569252, 0.08856866531569252, 0.07940478432190923, 0.07940478432190923, 0.07940478432190923, 0.07840009971749629, 0.07840009971749629, 0.07840009971749629, 0.08137916820959035, 0.08137916820959035, 0.08137916820959035, 0.8866688685183336, 0.8866688685183336, 0.8866688685183336, 0.9271619008471973, 0.9271619008471973, 0.9271619008471973, 0.9290212438789706, 0.9290212438789706, 0.9290212438789706, 0.20950355927226172, 0.20950355927226172, 0.20950355927226172, 0.2257971216906809, 0.2257971216906809, 0.2257971216906809, 0.23941616873152294, 0.23941616873152294, 0.23941616873152294, 0.2567145139687035, 0.2567145139687035, 0.2567145139687035, 0.2907825005471336, 0.2907825005471336, 0.2907825005471336, 0.27576875507930765, 0.27576875507930765, 0.27576875507930765, 0.15850933695533964, 0.15850933695533964, 0.15850933695533964, 0.1294633485577673, 0.1294633485577673, 0.1294633485577673, 0.14531953719456137, 0.14531953719456137, 0.14531953719456137, 0.11989102035022514, 0.11989102035022514, 0.11989102035022514, 0.10134904016991331, 0.10134904016991331, 0.10134904016991331, 0.11534316786129817, 0.11534316786129817, 0.11534316786129817, 0.0003020035441014812, 0.0003020035441014812, 0.0003020035441014812, 0.0005821773767462624, 0.0005821773767462624, 0.0005821773767462624, 0.012521526921178028, 0.012521526921178028, 0.012521526921178028, 0.08966135443453949, 0.08966135443453949, 0.08966135443453949, 0.053400435153488024, 0.053400435153488024, 0.053400435153488024, 0.12855862700111043, 0.12855862700111043, 0.12855862700111043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0843118900235007, 0.0843118900235007, 0.0843118900235007, 0.08284914973647506, 0.08284914973647506, 0.08284914973647506, 0.09618970632257495, 0.09618970632257495, 0.09618970632257495, 0.36568836728209353, 0.36568836728209353, 0.36568836728209353, 0.3730547500978776, 0.3730547500978776, 0.3730547500978776, 0.38285820614436916, 0.38285820614436916, 0.38285820614436916, 0.09472988586031517, 0.09472988586031517, 0.09472988586031517, 0.07668426959773755, 0.07668426959773755, 0.07668426959773755, 0.07768963771164705, 0.07768963771164705, 0.07768963771164705, 0.15611938828159477, 0.15611938828159477, 0.15611938828159477, 0.13302596024958435, 0.13302596024958435, 0.13302596024958435, 0.14707315534452614, 0.14707315534452614, 0.14707315534452614, 0.26090209814744736, 0.26090209814744736, 0.26090209814744736, 0.250844262897543, 0.250844262897543, 0.250844262897543, 0.24168368626890313, 0.24168368626890313, 0.24168368626890313, 0.18657364718349556, 0.18657364718349556, 0.18657364718349556, 0.16929285222311208, 0.16929285222311208, 0.16929285222311208, 0.1909116006655327, 0.1909116006655327, 0.1909116006655327, 0.20554401372289544, 0.20554401372289544, 0.20554401372289544, 0.18540127333416223, 0.18540127333416223, 0.18540127333416223, 0.18380028251439195, 0.18380028251439195, 0.18380028251439195, 0.17871070705134573, 0.17871070705134573, 0.17871070705134573, 0.1712585300134135, 0.1712585300134135, 0.1712585300134135, 0.17977955563538328, 0.17977955563538328, 0.17977955563538328, 0.43558102920749886, 0.43558102920749886, 0.43558102920749886, 0.2507246479668289, 0.2507246479668289, 0.2507246479668289, 0.2163158138716903, 0.2163158138716903, 0.2163158138716903, 0.188988030384879, 0.188988030384879, 0.188988030384879, 0.1811160533089362, 0.1811160533089362, 0.1811160533089362, 0.32458722388647987, 0.32458722388647987, 0.32458722388647987, 0.16886981548318403, 0.16886981548318403, 0.16886981548318403, 0.1688693077089376, 0.1688693077089376, 0.1688693077089376, 0.19212442451828982, 0.19212442451828982, 0.19212442451828982, 0.07245533503798995, 0.07245533503798995, 0.07245533503798995, 0.07311010716852251, 0.07311010716852251, 0.07311010716852251, 0.07295027081920047, 0.07295027081920047, 0.07295027081920047]}, "mutation_prompt": null}
{"id": "9f346356-1cde-4ff9-8361-bf127306a9d1", "solution": "import numpy as np\n\nclass RefinedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Crossover Probability\n                current_CR = self.CR * (1 - evaluations / self.budget)\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                crossover_mask = np.random.rand(self.dim) < current_CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "RefinedHybridDEALS", "description": "A refined HybridDEALS algorithm leveraging adaptive crossover rates and perturbation scaling to optimize convergence on diverse problem landscapes.", "configspace": "", "generation": 41, "fitness": 0.27646938201955085, "feedback": "The algorithm RefinedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7618198197442846, 0.7618198197442846, 0.7618198197442846, 0.7321788517194279, 0.7321788517194279, 0.7321788517194279, 0.7610679399900679, 0.7610679399900679, 0.7610679399900679, 0.5240950957802395, 0.5240950957802395, 0.5240950957802395, 0.5023523830301574, 0.5023523830301574, 0.5023523830301574, 0.5109843987855693, 0.5109843987855693, 0.5109843987855693, 0.11206503331315165, 0.11206503331315165, 0.11206503331315165, 0.12770003973363941, 0.12770003973363941, 0.12770003973363941, 0.13603757205672595, 0.13603757205672595, 0.13603757205672595, 0.11552504291640908, 0.11552504291640908, 0.11552504291640908, 0.10027382689397346, 0.10027382689397346, 0.10027382689397346, 0.11789570985490117, 0.11789570985490117, 0.11789570985490117, 0.8841981188478517, 0.8841981188478517, 0.8841981188478517, 0.8834696552658934, 0.8834696552658934, 0.8834696552658934, 0.921374921571506, 0.921374921571506, 0.921374921571506, 0.31176019927818766, 0.31176019927818766, 0.31176019927818766, 0.3376713101991665, 0.3376713101991665, 0.3376713101991665, 0.3519812547122474, 0.3519812547122474, 0.3519812547122474, 0.6544388850895146, 0.6544388850895146, 0.6544388850895146, 0.6543161485091519, 0.6543161485091519, 0.6543161485091519, 0.5590039847739594, 0.5590039847739594, 0.5590039847739594, 0.18969202007096841, 0.18969202007096841, 0.18969202007096841, 0.15710347181234097, 0.15710347181234097, 0.15710347181234097, 0.16173871166645748, 0.16173871166645748, 0.16173871166645748, 0.14211886201108137, 0.14211886201108137, 0.14211886201108137, 0.14969090203519586, 0.14969090203519586, 0.14969090203519586, 0.211178100861649, 0.211178100861649, 0.211178100861649, 0.06534063296081327, 0.06534063296081327, 0.06534063296081327, 0.04741665336597689, 0.04741665336597689, 0.04741665336597689, 0.0712556307633384, 0.0712556307633384, 0.0712556307633384, 0.23742075640970528, 0.23742075640970528, 0.23742075640970528, 0.1815615603567936, 0.1815615603567936, 0.1815615603567936, 0.25119194822718993, 0.25119194822718993, 0.25119194822718993, 0.028769006863877955, 0.028769006863877955, 0.028769006863877955, 0.027222310673482575, 0.027222310673482575, 0.027222310673482575, 0.019826059831346665, 0.019826059831346665, 0.019826059831346665, 0.1373067502163432, 0.1373067502163432, 0.1373067502163432, 0.17825855600662577, 0.17825855600662577, 0.17825855600662577, 0.14911737241789214, 0.14911737241789214, 0.14911737241789214, 0.46705270939121624, 0.46705270939121624, 0.46705270939121624, 0.4763256931924108, 0.4763256931924108, 0.4763256931924108, 0.4966846115972626, 0.4966846115972626, 0.4966846115972626, 0.10020209901255261, 0.10020209901255261, 0.10020209901255261, 0.09784652735376698, 0.09784652735376698, 0.09784652735376698, 0.1075963102673475, 0.1075963102673475, 0.1075963102673475, 0.15034253893473049, 0.15034253893473049, 0.15034253893473049, 0.15424836320936552, 0.15424836320936552, 0.15424836320936552, 0.13602776939616001, 0.13602776939616001, 0.13602776939616001, 0.31781988004883877, 0.31781988004883877, 0.31781988004883877, 0.2950165760082779, 0.2950165760082779, 0.2950165760082779, 0.3469976297651727, 0.3469976297651727, 0.3469976297651727, 0.23216634169537598, 0.23216634169537598, 0.23216634169537598, 0.21456642843926288, 0.21456642843926288, 0.21456642843926288, 0.23906863442014503, 0.23906863442014503, 0.23906863442014503, 0.19832081757700848, 0.19832081757700848, 0.19832081757700848, 0.18531186648567755, 0.18531186648567755, 0.18531186648567755, 0.19051726409505798, 0.19051726409505798, 0.19051726409505798, 0.21663972715889457, 0.21663972715889457, 0.21663972715889457, 0.18998675311904611, 0.18998675311904611, 0.18998675311904611, 0.18523885465753087, 0.18523885465753087, 0.18523885465753087, 0.7230243429816737, 0.7230243429816737, 0.7230243429816737, 0.18921817498149218, 0.18921817498149218, 0.18921817498149218, 0.1945169722265253, 0.1945169722265253, 0.1945169722265253, 0.16392902470797832, 0.16392902470797832, 0.16392902470797832, 0.1986741888654966, 0.1986741888654966, 0.1986741888654966, 0.2006602083490131, 0.2006602083490131, 0.2006602083490131, 0.1812857632219479, 0.1812857632219479, 0.1812857632219479, 0.1721297364945401, 0.1721297364945401, 0.1721297364945401, 0.1879027727911462, 0.1879027727911462, 0.1879027727911462, 0.08100033288230968, 0.08100033288230968, 0.08100033288230968, 0.07661813640420057, 0.07661813640420057, 0.07661813640420057, 0.07243895705913306, 0.07243895705913306, 0.07243895705913306]}, "mutation_prompt": null}
{"id": "8a56767b-6191-470e-bf10-4f9902a27082", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search to enhance convergence through dynamic perturbations.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "d0b6a67f-2685-4e60-894f-dd467f3ef559", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search to enhance convergence through dynamic perturbations.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "5fafe3be-2ae6-4536-ba6e-3c8f2c0b117c", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with dynamic feedback control\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                progress = evaluations / self.budget\n                adaptive_F = self.F * (1 - progress) + 0.1 * progress\n                mutant = np.clip(x0 + adaptive_F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search with increased adaptive perturbation\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, progress)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (2 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Slightly increase local steps to enhance search precision\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "Enhanced HybridDEALS with Adaptive Control of Exploration-Exploitation Balance using Feedback from Progress.", "configspace": "", "generation": 44, "fitness": 0.31642144273834216, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7272825935510014, 0.7272825935510014, 0.7272825935510014, 0.7385125724499955, 0.7385125724499955, 0.7385125724499955, 0.7661928746859252, 0.7661928746859252, 0.7661928746859252, 0.48346956550559284, 0.48346956550559284, 0.48346956550559284, 0.5168692926177878, 0.5168692926177878, 0.5168692926177878, 0.5395682617743036, 0.5395682617743036, 0.5395682617743036, 0.10419793210324257, 0.10419793210324257, 0.10419793210324257, 0.12757663626170257, 0.12757663626170257, 0.12757663626170257, 0.1016467249429085, 0.1016467249429085, 0.1016467249429085, 0.08556800071424042, 0.08556800071424042, 0.08556800071424042, 0.09976256345906898, 0.09976256345906898, 0.09976256345906898, 0.09624113745837837, 0.09624113745837837, 0.09624113745837837, 0.9406681875388755, 0.9406681875388755, 0.9406681875388755, 0.911029356712696, 0.911029356712696, 0.911029356712696, 0.9214808147722148, 0.9214808147722148, 0.9214808147722148, 0.22556454552411775, 0.22556454552411775, 0.22556454552411775, 0.3565445050516777, 0.3565445050516777, 0.3565445050516777, 0.2609220143456046, 0.2609220143456046, 0.2609220143456046, 0.6779379052512278, 0.6779379052512278, 0.6779379052512278, 0.6785232177287301, 0.6785232177287301, 0.6785232177287301, 0.680477722180575, 0.680477722180575, 0.680477722180575, 0.13346826732510475, 0.13346826732510475, 0.13346826732510475, 0.15314134926822265, 0.15314134926822265, 0.15314134926822265, 0.16406040723843052, 0.16406040723843052, 0.16406040723843052, 0.1095796423994776, 0.1095796423994776, 0.1095796423994776, 0.1897267286122194, 0.1897267286122194, 0.1897267286122194, 0.18090984557155143, 0.18090984557155143, 0.18090984557155143, 0.23516315618303185, 0.23516315618303185, 0.23516315618303185, 0.18625246819125518, 0.18625246819125518, 0.18625246819125518, 0.24560284566826185, 0.24560284566826185, 0.24560284566826185, 0.36730003204801076, 0.36730003204801076, 0.36730003204801076, 0.39986057206438685, 0.39986057206438685, 0.39986057206438685, 0.3947956763644287, 0.3947956763644287, 0.3947956763644287, 0.04102200382747356, 0.04102200382747356, 0.04102200382747356, 0.08084476636874005, 0.08084476636874005, 0.08084476636874005, 0.18518882559246652, 0.18518882559246652, 0.18518882559246652, 0.22953615729342636, 0.22953615729342636, 0.22953615729342636, 0.2738663416579027, 0.2738663416579027, 0.2738663416579027, 0.27148173303708534, 0.27148173303708534, 0.27148173303708534, 0.5388702440423764, 0.5388702440423764, 0.5388702440423764, 0.5924922745985737, 0.5924922745985737, 0.5924922745985737, 0.6109376918292687, 0.6109376918292687, 0.6109376918292687, 0.08349538924481581, 0.08349538924481581, 0.08349538924481581, 0.09070586524496715, 0.09070586524496715, 0.09070586524496715, 0.09645811270348603, 0.09645811270348603, 0.09645811270348603, 0.16429966222245207, 0.16429966222245207, 0.16429966222245207, 0.21117762817899333, 0.21117762817899333, 0.21117762817899333, 0.16556488645700485, 0.16556488645700485, 0.16556488645700485, 0.389539758613621, 0.389539758613621, 0.389539758613621, 0.3320442008353398, 0.3320442008353398, 0.3320442008353398, 0.39823229835515206, 0.39823229835515206, 0.39823229835515206, 0.2910247824542045, 0.2910247824542045, 0.2910247824542045, 0.3013307937498654, 0.3013307937498654, 0.3013307937498654, 0.2963581117025157, 0.2963581117025157, 0.2963581117025157, 0.1930876187866808, 0.1930876187866808, 0.1930876187866808, 0.18706221658153344, 0.18706221658153344, 0.18706221658153344, 0.18843773033859035, 0.18843773033859035, 0.18843773033859035, 0.19261965365611045, 0.19261965365611045, 0.19261965365611045, 0.17984141525538855, 0.17984141525538855, 0.17984141525538855, 0.23612882845423688, 0.23612882845423688, 0.23612882845423688, 0.6988359761202247, 0.6988359761202247, 0.6988359761202247, 0.180018687563684, 0.180018687563684, 0.180018687563684, 0.6412550268872856, 0.6412550268872856, 0.6412550268872856, 0.4752366295794208, 0.4752366295794208, 0.4752366295794208, 0.20594938285340314, 0.20594938285340314, 0.20594938285340314, 0.20288358691925312, 0.20288358691925312, 0.20288358691925312, 0.17387674062775205, 0.17387674062775205, 0.17387674062775205, 0.17364433603829343, 0.17364433603829343, 0.17364433603829343, 0.18385902506079943, 0.18385902506079943, 0.18385902506079943, 0.07031476662955771, 0.07031476662955771, 0.07031476662955771, 0.07329116745326136, 0.07329116745326136, 0.07329116745326136, 0.08163214478118386, 0.08163214478118386, 0.08163214478118386]}, "mutation_prompt": null}
{"id": "caa2ce3a-39d0-4f5b-a90d-bd3506cf34a5", "solution": "import numpy as np\n\nclass HybridDEALSModified:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.8  # Increased differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Enhanced Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.enhanced_adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def enhanced_adaptive_stochastic_local_search(self, solution, func, progress):\n        # Enhanced Stochastic Local Search: utilizes larger perturbation early on\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increase the number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALSModified", "description": "A hybrid metaheuristic combining Differential Evolution with Enhanced Adaptive Stochastic Local Search to improve convergence through diversified exploration and exploitation.", "configspace": "", "generation": 45, "fitness": 0.19692767921132337, "feedback": "The algorithm HybridDEALSModified got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.44572828235301154, 0.44572828235301154, 0.44572828235301154, 0.4694182136722964, 0.4694182136722964, 0.4694182136722964, 0.46233089221834056, 0.46233089221834056, 0.46233089221834056, 0.1874799305049326, 0.1874799305049326, 0.1874799305049326, 0.20723698061196316, 0.20723698061196316, 0.20723698061196316, 0.18486520227765602, 0.18486520227765602, 0.18486520227765602, 0.0823499929563164, 0.0823499929563164, 0.0823499929563164, 0.08682317508084203, 0.08682317508084203, 0.08682317508084203, 0.07844234507556325, 0.07844234507556325, 0.07844234507556325, 0.08653230372579968, 0.08653230372579968, 0.08653230372579968, 0.07913565395230815, 0.07913565395230815, 0.07913565395230815, 0.07713016781432491, 0.07713016781432491, 0.07713016781432491, 0.9259910588566855, 0.9259910588566855, 0.9259910588566855, 0.911838735638327, 0.911838735638327, 0.911838735638327, 0.9292115034949903, 0.9292115034949903, 0.9292115034949903, 0.21999035657961818, 0.21999035657961818, 0.21999035657961818, 0.17818051330569507, 0.17818051330569507, 0.17818051330569507, 0.21178390046162887, 0.21178390046162887, 0.21178390046162887, 0.25987074841463653, 0.25987074841463653, 0.25987074841463653, 0.26177215300942636, 0.26177215300942636, 0.26177215300942636, 0.24323404272169502, 0.24323404272169502, 0.24323404272169502, 0.1310323017682805, 0.1310323017682805, 0.1310323017682805, 0.1250636242023191, 0.1250636242023191, 0.1250636242023191, 0.1138561526253139, 0.1138561526253139, 0.1138561526253139, 0.09466788387642555, 0.09466788387642555, 0.09466788387642555, 0.10617905698424168, 0.10617905698424168, 0.10617905698424168, 0.09689599377841118, 0.09689599377841118, 0.09689599377841118, 0.05227618435525161, 0.05227618435525161, 0.05227618435525161, 0.05388391092024725, 0.05388391092024725, 0.05388391092024725, 0.031359714143560646, 0.031359714143560646, 0.031359714143560646, 0.1363679780317476, 0.1363679780317476, 0.1363679780317476, 0.15272641912844642, 0.15272641912844642, 0.15272641912844642, 0.18902589032811845, 0.18902589032811845, 0.18902589032811845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003121759098272059, 0.003121759098272059, 0.003121759098272059, 0.002034884662914016, 0.002034884662914016, 0.002034884662914016, 0.09865293774792683, 0.09865293774792683, 0.09865293774792683, 0.09920365477007109, 0.09920365477007109, 0.09920365477007109, 0.09757386587189576, 0.09757386587189576, 0.09757386587189576, 0.3724376342802487, 0.3724376342802487, 0.3724376342802487, 0.3759136607827427, 0.3759136607827427, 0.3759136607827427, 0.3931925447937935, 0.3931925447937935, 0.3931925447937935, 0.08623698136814606, 0.08623698136814606, 0.08623698136814606, 0.06605929270076372, 0.06605929270076372, 0.06605929270076372, 0.07679996821220214, 0.07679996821220214, 0.07679996821220214, 0.12697272007878002, 0.12697272007878002, 0.12697272007878002, 0.12353444893951404, 0.12353444893951404, 0.12353444893951404, 0.14440719435058513, 0.14440719435058513, 0.14440719435058513, 0.23283320411956787, 0.23283320411956787, 0.23283320411956787, 0.2271475153022785, 0.2271475153022785, 0.2271475153022785, 0.24797783380810057, 0.24797783380810057, 0.24797783380810057, 0.17466141736676777, 0.17466141736676777, 0.17466141736676777, 0.16258592111471548, 0.16258592111471548, 0.16258592111471548, 0.15831644396463052, 0.15831644396463052, 0.15831644396463052, 0.16969550308696157, 0.16969550308696157, 0.16969550308696157, 0.17397416543861488, 0.17397416543861488, 0.17397416543861488, 0.16555175286015422, 0.16555175286015422, 0.16555175286015422, 0.1659380354581057, 0.1659380354581057, 0.1659380354581057, 0.16225644714920306, 0.16225644714920306, 0.16225644714920306, 0.17080229244938072, 0.17080229244938072, 0.17080229244938072, 0.3849446046123768, 0.3849446046123768, 0.3849446046123768, 0.15323349327241687, 0.15323349327241687, 0.15323349327241687, 0.193809098883861, 0.193809098883861, 0.193809098883861, 0.20304025913468426, 0.20304025913468426, 0.20304025913468426, 0.1398421133518375, 0.1398421133518375, 0.1398421133518375, 0.20277558805595275, 0.20277558805595275, 0.20277558805595275, 0.1735178974020699, 0.1735178974020699, 0.1735178974020699, 0.18996124751066412, 0.18996124751066412, 0.18996124751066412, 0.19253715154902218, 0.19253715154902218, 0.19253715154902218, 0.0570172129030605, 0.0570172129030605, 0.0570172129030605, 0.07307427840716496, 0.07307427840716496, 0.07307427840716496, 0.06437661548741458, 0.06437661548741458, 0.06437661548741458]}, "mutation_prompt": null}
{"id": "65bbb076-d1c3-4b78-84fa-5934b1fe8d02", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly increased differential weight\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # Ensuring deterministic behavior\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Strategic Adaptive Local Search\n                if np.random.rand() < 0.2:  # Updated to 20% chance to refine the trial solution\n                    trial = self.strategic_adaptive_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def strategic_adaptive_local_search(self, solution, func, progress):\n        # Strategic Adaptive Local Search: enhanced perturbation strategy\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 3)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "Enhanced Hybrid Metaheuristic integrating Differential Evolution with Strategic Adaptive Local Search for improved convergence stability.", "configspace": "", "generation": 46, "fitness": 0.2808561365523883, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6991174275003786, 0.6991174275003786, 0.6991174275003786, 0.711613027559983, 0.711613027559983, 0.711613027559983, 0.711461871825059, 0.711461871825059, 0.711461871825059, 0.4734570098348885, 0.4734570098348885, 0.4734570098348885, 0.4420602206611226, 0.4420602206611226, 0.4420602206611226, 0.423868670695278, 0.423868670695278, 0.423868670695278, 0.09961182586280792, 0.09961182586280792, 0.09961182586280792, 0.10550150644148582, 0.10550150644148582, 0.10550150644148582, 0.088663779065561, 0.088663779065561, 0.088663779065561, 0.1081451716415801, 0.1081451716415801, 0.1081451716415801, 0.10962135987208987, 0.10962135987208987, 0.10962135987208987, 0.09099207472105608, 0.09099207472105608, 0.09099207472105608, 0.888998693845476, 0.888998693845476, 0.888998693845476, 0.963721892275149, 0.963721892275149, 0.963721892275149, 0.9257817939152044, 0.9257817939152044, 0.9257817939152044, 0.31021895294982493, 0.31021895294982493, 0.31021895294982493, 0.28804713346792377, 0.28804713346792377, 0.28804713346792377, 0.3560383133468604, 0.3560383133468604, 0.3560383133468604, 0.4746575731344571, 0.4746575731344571, 0.4746575731344571, 0.6453687427036422, 0.6453687427036422, 0.6453687427036422, 0.560707545993656, 0.560707545993656, 0.560707545993656, 0.16297628650570528, 0.16297628650570528, 0.16297628650570528, 0.16169846176496416, 0.16169846176496416, 0.16169846176496416, 0.23990928852571392, 0.23990928852571392, 0.23990928852571392, 0.23327656475062553, 0.23327656475062553, 0.23327656475062553, 0.16655537958880517, 0.16655537958880517, 0.16655537958880517, 0.15705399235819517, 0.15705399235819517, 0.15705399235819517, 0.13238226203770465, 0.13238226203770465, 0.13238226203770465, 0.11081020864137103, 0.11081020864137103, 0.11081020864137103, 0.1158497900623725, 0.1158497900623725, 0.1158497900623725, 0.29490186268994045, 0.29490186268994045, 0.29490186268994045, 0.2725709903788718, 0.2725709903788718, 0.2725709903788718, 0.2680754057385967, 0.2680754057385967, 0.2680754057385967, 0.03069389767482844, 0.03069389767482844, 0.03069389767482844, 0.02584689372914295, 0.02584689372914295, 0.02584689372914295, 0.027109602386575893, 0.027109602386575893, 0.027109602386575893, 0.1827975073668685, 0.1827975073668685, 0.1827975073668685, 0.18105668983140144, 0.18105668983140144, 0.18105668983140144, 0.16037135427072657, 0.16037135427072657, 0.16037135427072657, 0.4929942778959695, 0.4929942778959695, 0.4929942778959695, 0.5255162896735903, 0.5255162896735903, 0.5255162896735903, 0.550219290905126, 0.550219290905126, 0.550219290905126, 0.09842752587681969, 0.09842752587681969, 0.09842752587681969, 0.08552428360669961, 0.08552428360669961, 0.08552428360669961, 0.09211656428894388, 0.09211656428894388, 0.09211656428894388, 0.12776270494852981, 0.12776270494852981, 0.12776270494852981, 0.13907935859598308, 0.13907935859598308, 0.13907935859598308, 0.12726536610228045, 0.12726536610228045, 0.12726536610228045, 0.3140481105867061, 0.3140481105867061, 0.3140481105867061, 0.3097736562955019, 0.3097736562955019, 0.3097736562955019, 0.3262197087393164, 0.3262197087393164, 0.3262197087393164, 0.25557225290861885, 0.25557225290861885, 0.25557225290861885, 0.20598162127639263, 0.20598162127639263, 0.20598162127639263, 0.22158376437839733, 0.22158376437839733, 0.22158376437839733, 0.19613147911202733, 0.19613147911202733, 0.19613147911202733, 0.18569784943556833, 0.18569784943556833, 0.18569784943556833, 0.18482012584827845, 0.18482012584827845, 0.18482012584827845, 0.17767035402568088, 0.17767035402568088, 0.17767035402568088, 0.17020375197546944, 0.17020375197546944, 0.17020375197546944, 0.1853378479258353, 0.1853378479258353, 0.1853378479258353, 0.15973687881355947, 0.15973687881355947, 0.15973687881355947, 0.4280600006568033, 0.4280600006568033, 0.4280600006568033, 0.35046837504347284, 0.35046837504347284, 0.35046837504347284, 0.49126153670360273, 0.49126153670360273, 0.49126153670360273, 0.20463291923704796, 0.20463291923704796, 0.20463291923704796, 0.4418441725936316, 0.4418441725936316, 0.4418441725936316, 0.17574452577092048, 0.17574452577092048, 0.17574452577092048, 0.19150655801631689, 0.19150655801631689, 0.19150655801631689, 0.17984602207937517, 0.17984602207937517, 0.17984602207937517, 0.07266988007015973, 0.07266988007015973, 0.07266988007015973, 0.0771588806916319, 0.0771588806916319, 0.0771588806916319, 0.07517487207780615, 0.07517487207780615, 0.07517487207780615]}, "mutation_prompt": null}
{"id": "dedd95f4-a31e-48c3-9220-7e3c9c77969f", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Dynamic Population Resizing\n            if evaluations % (self.budget // 10) == 0:\n                self.population_size = max(4, self.population_size // 2)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "EnhancedHybridDEALS", "description": "An enhanced hybrid algorithm combining Differential Evolution with Adaptive Stochastic Local Search and Dynamic Population Resizing to balance exploration and exploitation.", "configspace": "", "generation": 47, "fitness": 0.34552308982426055, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "63c9832d-5e6a-4bdf-ad2d-03974828950e", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # 25% chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        # Adaptive Stochastic Local Search: dynamically adjusts perturbation size\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Perform a small number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Stochastic Local Search to enhance convergence through dynamic perturbations.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.7381760413363387, 0.7381760413363387, 0.7381760413363387, 0.753223866343199, 0.753223866343199, 0.753223866343199, 0.7687757080036598, 0.7687757080036598, 0.7687757080036598, 0.5338008143188309, 0.5338008143188309, 0.5338008143188309, 0.506598633728115, 0.506598633728115, 0.506598633728115, 0.5601292712128758, 0.5601292712128758, 0.5601292712128758, 0.10624961346808104, 0.10624961346808104, 0.10624961346808104, 0.09924504679786239, 0.09924504679786239, 0.09924504679786239, 0.14777007891953797, 0.14777007891953797, 0.14777007891953797, 0.10325626320293901, 0.10325626320293901, 0.10325626320293901, 0.09309387453153017, 0.09309387453153017, 0.09309387453153017, 0.09281382347885225, 0.09281382347885225, 0.09281382347885225, 0.9258451416041793, 0.9258451416041793, 0.9258451416041793, 0.8788679576419074, 0.8788679576419074, 0.8788679576419074, 0.93871677730578, 0.93871677730578, 0.93871677730578, 0.38278316963671455, 0.38278316963671455, 0.38278316963671455, 0.41674071576369476, 0.41674071576369476, 0.41674071576369476, 0.41481621435995186, 0.41481621435995186, 0.41481621435995186, 0.6179299236301515, 0.6179299236301515, 0.6179299236301515, 0.741750784987383, 0.741750784987383, 0.741750784987383, 0.7124999592070426, 0.7124999592070426, 0.7124999592070426, 0.17081530312507043, 0.17081530312507043, 0.17081530312507043, 0.1624447610411346, 0.1624447610411346, 0.1624447610411346, 0.1767493254805137, 0.1767493254805137, 0.1767493254805137, 0.15727058520712345, 0.15727058520712345, 0.15727058520712345, 0.21168191667269798, 0.21168191667269798, 0.21168191667269798, 0.1757651078081719, 0.1757651078081719, 0.1757651078081719, 0.3468288492597993, 0.3468288492597993, 0.3468288492597993, 0.27152445624798016, 0.27152445624798016, 0.27152445624798016, 0.36814801956468945, 0.36814801956468945, 0.36814801956468945, 0.43259082107360813, 0.43259082107360813, 0.43259082107360813, 0.37883393741074345, 0.37883393741074345, 0.37883393741074345, 0.4998098408486428, 0.4998098408486428, 0.4998098408486428, 0.13537037323567436, 0.13537037323567436, 0.13537037323567436, 0.16917790835167978, 0.16917790835167978, 0.16917790835167978, 0.1438554854999884, 0.1438554854999884, 0.1438554854999884, 0.24792115713228136, 0.24792115713228136, 0.24792115713228136, 0.2519298426541896, 0.2519298426541896, 0.2519298426541896, 0.23768534836533095, 0.23768534836533095, 0.23768534836533095, 0.6645019682973732, 0.6645019682973732, 0.6645019682973732, 0.6574867683243582, 0.6574867683243582, 0.6574867683243582, 0.6266749750998175, 0.6266749750998175, 0.6266749750998175, 0.09841551609827415, 0.09841551609827415, 0.09841551609827415, 0.08902543612984481, 0.08902543612984481, 0.08902543612984481, 0.105370565742406, 0.105370565742406, 0.105370565742406, 0.14213379339736243, 0.14213379339736243, 0.14213379339736243, 0.1620477681975302, 0.1620477681975302, 0.1620477681975302, 0.14728105801767655, 0.14728105801767655, 0.14728105801767655, 0.345598783800493, 0.345598783800493, 0.345598783800493, 0.3780441199293366, 0.3780441199293366, 0.3780441199293366, 0.3744453110042355, 0.3744453110042355, 0.3744453110042355, 0.2877976586957921, 0.2877976586957921, 0.2877976586957921, 0.2707050088309533, 0.2707050088309533, 0.2707050088309533, 0.3112789114841701, 0.3112789114841701, 0.3112789114841701, 0.21009425324920217, 0.21009425324920217, 0.21009425324920217, 0.1872475688485743, 0.1872475688485743, 0.1872475688485743, 0.20806929674944763, 0.20806929674944763, 0.20806929674944763, 0.18395035410191918, 0.18395035410191918, 0.18395035410191918, 0.19518169347238856, 0.19518169347238856, 0.19518169347238856, 0.20765040121582268, 0.20765040121582268, 0.20765040121582268, 0.6142322431119526, 0.6142322431119526, 0.6142322431119526, 0.5827523890911432, 0.5827523890911432, 0.5827523890911432, 0.6380850701469196, 0.6380850701469196, 0.6380850701469196, 0.4199320734568427, 0.4199320734568427, 0.4199320734568427, 0.19795786025538187, 0.19795786025538187, 0.19795786025538187, 0.7149117062857642, 0.7149117062857642, 0.7149117062857642, 0.1913549427595016, 0.1913549427595016, 0.1913549427595016, 0.18380853651855322, 0.18380853651855322, 0.18380853651855322, 0.18515069130043627, 0.18515069130043627, 0.18515069130043627, 0.07598809368371662, 0.07598809368371662, 0.07598809368371662, 0.0701569219929935, 0.0701569219929935, 0.0701569219929935, 0.07884400959863125, 0.07884400959863125, 0.07884400959863125]}, "mutation_prompt": null}
{"id": "84e2c0d3-0b62-4065-95ed-29aa67b037d3", "solution": "import numpy as np\n\nclass AdvancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Adjusted differential weight\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                if np.random.rand() < 0.3:  # Increased chance to refine\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)]\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local steps\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n        \n        return best_solution", "name": "AdvancedHybridDEALS", "description": "An advanced adaptive hybrid algorithm integrating Differential Evolution with Stochastic Local Search, enhanced by dynamic mutation and selective refinement for global optimization.", "configspace": "", "generation": 49, "fitness": 0.24520300771447928, "feedback": "The algorithm AdvancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.6017217802131103, 0.6017217802131103, 0.6017217802131103, 0.588171753630181, 0.588171753630181, 0.588171753630181, 0.643685908741695, 0.643685908741695, 0.643685908741695, 0.3366603464349761, 0.3366603464349761, 0.3366603464349761, 0.3840790151003832, 0.3840790151003832, 0.3840790151003832, 0.3024119748313433, 0.3024119748313433, 0.3024119748313433, 0.10403607718679664, 0.10403607718679664, 0.10403607718679664, 0.09185894819609297, 0.09185894819609297, 0.09185894819609297, 0.08930250528828843, 0.08930250528828843, 0.08930250528828843, 0.07816825168998787, 0.07816825168998787, 0.07816825168998787, 0.0956125051478246, 0.0956125051478246, 0.0956125051478246, 0.08352838278662034, 0.08352838278662034, 0.08352838278662034, 0.9259797928025744, 0.9259797928025744, 0.9259797928025744, 0.907787629587127, 0.907787629587127, 0.907787629587127, 0.9074884589141943, 0.9074884589141943, 0.9074884589141943, 0.2502291276799178, 0.2502291276799178, 0.2502291276799178, 0.24723177067537072, 0.24723177067537072, 0.24723177067537072, 0.26680530357092724, 0.26680530357092724, 0.26680530357092724, 0.4349889858871603, 0.4349889858871603, 0.4349889858871603, 0.425908727785128, 0.425908727785128, 0.425908727785128, 0.5072416441069413, 0.5072416441069413, 0.5072416441069413, 0.19043389490138118, 0.19043389490138118, 0.19043389490138118, 0.16913148456447502, 0.16913148456447502, 0.16913148456447502, 0.12581136472352805, 0.12581136472352805, 0.12581136472352805, 0.1344846140783651, 0.1344846140783651, 0.1344846140783651, 0.14222829194995135, 0.14222829194995135, 0.14222829194995135, 0.14528073601460323, 0.14528073601460323, 0.14528073601460323, 0.06768976750436051, 0.06768976750436051, 0.06768976750436051, 0.08001208855706665, 0.08001208855706665, 0.08001208855706665, 0.10526947125723296, 0.10526947125723296, 0.10526947125723296, 0.21814011611706097, 0.21814011611706097, 0.21814011611706097, 0.1852014051029478, 0.1852014051029478, 0.1852014051029478, 0.23006132714289473, 0.23006132714289473, 0.23006132714289473, 0.004813913840485795, 0.004813913840485795, 0.004813913840485795, 0.032550031289610315, 0.032550031289610315, 0.032550031289610315, 0.02097613726751224, 0.02097613726751224, 0.02097613726751224, 0.129209111220412, 0.129209111220412, 0.129209111220412, 0.1543702478712745, 0.1543702478712745, 0.1543702478712745, 0.14887903145793135, 0.14887903145793135, 0.14887903145793135, 0.45787961464463245, 0.45787961464463245, 0.45787961464463245, 0.4734381541551489, 0.4734381541551489, 0.4734381541551489, 0.4988004451386264, 0.4988004451386264, 0.4988004451386264, 0.08904959295309367, 0.08904959295309367, 0.08904959295309367, 0.09632423517906497, 0.09632423517906497, 0.09632423517906497, 0.076864811065818, 0.076864811065818, 0.076864811065818, 0.15077699818551993, 0.15077699818551993, 0.15077699818551993, 0.2559951332079753, 0.2559951332079753, 0.2559951332079753, 0.14638334913948214, 0.14638334913948214, 0.14638334913948214, 0.3010914972192499, 0.3010914972192499, 0.3010914972192499, 0.2632889530024429, 0.2632889530024429, 0.2632889530024429, 0.2696987016947483, 0.2696987016947483, 0.2696987016947483, 0.21214745168289262, 0.21214745168289262, 0.21214745168289262, 0.1961206748532197, 0.1961206748532197, 0.1961206748532197, 0.21130484060131816, 0.21130484060131816, 0.21130484060131816, 0.17687029592174308, 0.17687029592174308, 0.17687029592174308, 0.18477610593061322, 0.18477610593061322, 0.18477610593061322, 0.19215686931391152, 0.19215686931391152, 0.19215686931391152, 0.1705916208068302, 0.1705916208068302, 0.1705916208068302, 0.17257543326062819, 0.17257543326062819, 0.17257543326062819, 0.16887854078496234, 0.16887854078496234, 0.16887854078496234, 0.33997301994694606, 0.33997301994694606, 0.33997301994694606, 0.4690805415907747, 0.4690805415907747, 0.4690805415907747, 0.15782267146941742, 0.15782267146941742, 0.15782267146941742, 0.18884103265376995, 0.18884103265376995, 0.18884103265376995, 0.19713897732023522, 0.19713897732023522, 0.19713897732023522, 0.19565735131583173, 0.19565735131583173, 0.19565735131583173, 0.19086839056194393, 0.19086839056194393, 0.19086839056194393, 0.19342174212708774, 0.19342174212708774, 0.19342174212708774, 0.18099945605272227, 0.18099945605272227, 0.18099945605272227, 0.08760871698887218, 0.08760871698887218, 0.08760871698887218, 0.06569795920093946, 0.06569795920093946, 0.06569795920093946, 0.06505145235431287, 0.06505145235431287, 0.06505145235431287]}, "mutation_prompt": null}
{"id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic leveraging swarm intelligence and adaptive local search to balance exploration and exploitation.", "configspace": "", "generation": 50, "fitness": 0.3519275931767352, "feedback": "The algorithm SwarmAdaptiveHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "4348c67b-ec16-470d-b839-96f2590f54b2", "metadata": {"aucs": [0.771638200021932, 0.771638200021932, 0.771638200021932, 0.7648766299650566, 0.7648766299650566, 0.7648766299650566, 0.7731447902517012, 0.7731447902517012, 0.7731447902517012, 0.5711651907207884, 0.5711651907207884, 0.5711651907207884, 0.5266702695695717, 0.5266702695695717, 0.5266702695695717, 0.5793714529246292, 0.5793714529246292, 0.5793714529246292, 0.09426025850353748, 0.09426025850353748, 0.09426025850353748, 0.1209344091838559, 0.1209344091838559, 0.1209344091838559, 0.11045037791968149, 0.11045037791968149, 0.11045037791968149, 0.08837695463172457, 0.08837695463172457, 0.08837695463172457, 0.10326590952862247, 0.10326590952862247, 0.10326590952862247, 0.09683329501033544, 0.09683329501033544, 0.09683329501033544, 0.895738944338633, 0.895738944338633, 0.895738944338633, 0.8917770037087476, 0.8917770037087476, 0.8917770037087476, 0.9145326164067068, 0.9145326164067068, 0.9145326164067068, 0.4688501859053531, 0.4688501859053531, 0.4688501859053531, 0.45983335593443275, 0.45983335593443275, 0.45983335593443275, 0.40867727069217763, 0.40867727069217763, 0.40867727069217763, 0.7654793168243633, 0.7654793168243633, 0.7654793168243633, 0.7560276720542308, 0.7560276720542308, 0.7560276720542308, 0.7036901543434041, 0.7036901543434041, 0.7036901543434041, 0.1628888567634862, 0.1628888567634862, 0.1628888567634862, 0.161002282282381, 0.161002282282381, 0.161002282282381, 0.18035241189768747, 0.18035241189768747, 0.18035241189768747, 0.16934337741180427, 0.16934337741180427, 0.16934337741180427, 0.20780867522808477, 0.20780867522808477, 0.20780867522808477, 0.14441000290593708, 0.14441000290593708, 0.14441000290593708, 0.15756953607549362, 0.15756953607549362, 0.15756953607549362, 0.3489063893559603, 0.3489063893559603, 0.3489063893559603, 0.3308984861886214, 0.3308984861886214, 0.3308984861886214, 0.5039173446833142, 0.5039173446833142, 0.5039173446833142, 0.4888383349417218, 0.4888383349417218, 0.4888383349417218, 0.554808799388522, 0.554808799388522, 0.554808799388522, 0.14287524518293826, 0.14287524518293826, 0.14287524518293826, 0.20516321154082018, 0.20516321154082018, 0.20516321154082018, 0.10382773206804974, 0.10382773206804974, 0.10382773206804974, 0.28562998116637495, 0.28562998116637495, 0.28562998116637495, 0.289290487591626, 0.289290487591626, 0.289290487591626, 0.281098535694695, 0.281098535694695, 0.281098535694695, 0.6968476617017497, 0.6968476617017497, 0.6968476617017497, 0.6934063214483777, 0.6934063214483777, 0.6934063214483777, 0.6609774866471144, 0.6609774866471144, 0.6609774866471144, 0.09439383787696365, 0.09439383787696365, 0.09439383787696365, 0.08566929525444633, 0.08566929525444633, 0.08566929525444633, 0.08544510726738042, 0.08544510726738042, 0.08544510726738042, 0.14437616422978083, 0.14437616422978083, 0.14437616422978083, 0.13062773679384376, 0.13062773679384376, 0.13062773679384376, 0.14453251847514326, 0.14453251847514326, 0.14453251847514326, 0.40240103163746166, 0.40240103163746166, 0.40240103163746166, 0.4122230450774683, 0.4122230450774683, 0.4122230450774683, 0.4028840369177482, 0.4028840369177482, 0.4028840369177482, 0.275876078076261, 0.275876078076261, 0.275876078076261, 0.3148536540264596, 0.3148536540264596, 0.3148536540264596, 0.27055172623133505, 0.27055172623133505, 0.27055172623133505, 0.2594874317810755, 0.2594874317810755, 0.2594874317810755, 0.19086167079757232, 0.19086167079757232, 0.19086167079757232, 0.19834879527060334, 0.19834879527060334, 0.19834879527060334, 0.1910115276731924, 0.1910115276731924, 0.1910115276731924, 0.23024655407638617, 0.23024655407638617, 0.23024655407638617, 0.2015613233896547, 0.2015613233896547, 0.2015613233896547, 0.6073771781843635, 0.6073771781843635, 0.6073771781843635, 0.4338842529669802, 0.4338842529669802, 0.4338842529669802, 0.16255189171738693, 0.16255189171738693, 0.16255189171738693, 0.36222768544964756, 0.36222768544964756, 0.36222768544964756, 0.6775336484381649, 0.6775336484381649, 0.6775336484381649, 0.5960122941215279, 0.5960122941215279, 0.5960122941215279, 0.1963765435454764, 0.1963765435454764, 0.1963765435454764, 0.1866656219652132, 0.1866656219652132, 0.1866656219652132, 0.19182058819424963, 0.19182058819424963, 0.19182058819424963, 0.09040366605166528, 0.09040366605166528, 0.09040366605166528, 0.08462964671390905, 0.08462964671390905, 0.08462964671390905, 0.07849673791932832, 0.07849673791932832, 0.07849673791932832]}, "mutation_prompt": null}
{"id": "054fd63b-22d9-4fcd-91ca-7348437db211", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.initial_F = 0.5\n        self.initial_CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Dynamic Parameter Tuning\n                progress = evaluations / self.budget\n                F = self.initial_F * (1 - progress)\n                CR = self.initial_CR * (1 - progress / 2)\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, progress)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic using dynamic parameter tuning with swarm intelligence and adaptive local search to improve convergence.", "configspace": "", "generation": 51, "fitness": 0.317360478240134, "feedback": "The algorithm SwarmAdaptiveHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.7708419534484775, 0.7708419534484775, 0.7708419534484775, 0.8071124190466559, 0.8071124190466559, 0.8071124190466559, 0.7961475319101801, 0.7961475319101801, 0.7961475319101801, 0.6410912077024151, 0.6410912077024151, 0.6410912077024151, 0.6382914590344839, 0.6382914590344839, 0.6382914590344839, 0.5923633781487944, 0.5923633781487944, 0.5923633781487944, 0.1205249586733882, 0.1205249586733882, 0.1205249586733882, 0.1111073344107103, 0.1111073344107103, 0.1111073344107103, 0.11852404192957511, 0.11852404192957511, 0.11852404192957511, 0.1037447627009902, 0.1037447627009902, 0.1037447627009902, 0.10473705736737215, 0.10473705736737215, 0.10473705736737215, 0.11770473734215814, 0.11770473734215814, 0.11770473734215814, 0.9131942785921056, 0.9131942785921056, 0.9131942785921056, 0.8588009512296492, 0.8588009512296492, 0.8588009512296492, 0.9070508877220506, 0.9070508877220506, 0.9070508877220506, 0.44451413420242514, 0.44451413420242514, 0.44451413420242514, 0.2823322279862014, 0.2823322279862014, 0.2823322279862014, 0.27073194924950406, 0.27073194924950406, 0.27073194924950406, 0.7407045582329556, 0.7407045582329556, 0.7407045582329556, 0.6914998453503867, 0.6914998453503867, 0.6914998453503867, 0.730001659903779, 0.730001659903779, 0.730001659903779, 0.14495718600692165, 0.14495718600692165, 0.14495718600692165, 0.14683819991934033, 0.14683819991934033, 0.14683819991934033, 0.1606305915370254, 0.1606305915370254, 0.1606305915370254, 0.23966055214263315, 0.23966055214263315, 0.23966055214263315, 0.21228354344717304, 0.21228354344717304, 0.21228354344717304, 0.14784108414277508, 0.14784108414277508, 0.14784108414277508, 0.22407208414190183, 0.22407208414190183, 0.22407208414190183, 0.2016317333769938, 0.2016317333769938, 0.2016317333769938, 0.1539933382459331, 0.1539933382459331, 0.1539933382459331, 0.37382759709869506, 0.37382759709869506, 0.37382759709869506, 0.2026128200614763, 0.2026128200614763, 0.2026128200614763, 0.3573730949848116, 0.3573730949848116, 0.3573730949848116, 0.11378417704966193, 0.11378417704966193, 0.11378417704966193, 0.08143636166235024, 0.08143636166235024, 0.08143636166235024, 0.17843068706112641, 0.17843068706112641, 0.17843068706112641, 0.22557214375745782, 0.22557214375745782, 0.22557214375745782, 0.22588066733720458, 0.22588066733720458, 0.22588066733720458, 0.22874933698455802, 0.22874933698455802, 0.22874933698455802, 0.5835366852836552, 0.5835366852836552, 0.5835366852836552, 0.5993879257657431, 0.5993879257657431, 0.5993879257657431, 0.586103971943364, 0.586103971943364, 0.586103971943364, 0.09896148018386974, 0.09896148018386974, 0.09896148018386974, 0.12172205233512634, 0.12172205233512634, 0.12172205233512634, 0.1263240487823768, 0.1263240487823768, 0.1263240487823768, 0.145740641393988, 0.145740641393988, 0.145740641393988, 0.1352978636425567, 0.1352978636425567, 0.1352978636425567, 0.1744433677029139, 0.1744433677029139, 0.1744433677029139, 0.41456236793546963, 0.41456236793546963, 0.41456236793546963, 0.4007876158930639, 0.4007876158930639, 0.4007876158930639, 0.436687946740139, 0.436687946740139, 0.436687946740139, 0.28928469413125457, 0.28928469413125457, 0.28928469413125457, 0.2544804392215051, 0.2544804392215051, 0.2544804392215051, 0.3126236731370937, 0.3126236731370937, 0.3126236731370937, 0.22726666230581027, 0.22726666230581027, 0.22726666230581027, 0.19806606429520046, 0.19806606429520046, 0.19806606429520046, 0.193395659743556, 0.193395659743556, 0.193395659743556, 0.22489828344544116, 0.22489828344544116, 0.22489828344544116, 0.24866616321556945, 0.24866616321556945, 0.24866616321556945, 0.23399807131652706, 0.23399807131652706, 0.23399807131652706, 0.4239011423671747, 0.4239011423671747, 0.4239011423671747, 0.1766221506567145, 0.1766221506567145, 0.1766221506567145, 0.15624246719014645, 0.15624246719014645, 0.15624246719014645, 0.1646821708336007, 0.1646821708336007, 0.1646821708336007, 0.38287799192777894, 0.38287799192777894, 0.38287799192777894, 0.3486036953817726, 0.3486036953817726, 0.3486036953817726, 0.1972401472471086, 0.1972401472471086, 0.1972401472471086, 0.17861014157624855, 0.17861014157624855, 0.17861014157624855, 0.18804004224834714, 0.18804004224834714, 0.18804004224834714, 0.08568320172603394, 0.08568320172603394, 0.08568320172603394, 0.07813970456137664, 0.07813970456137664, 0.07813970456137664, 0.08247936601682726, 0.08247936601682726, 0.08247936601682726]}, "mutation_prompt": null}
{"id": "af883337-0856-49a7-85f5-28b088f76055", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic leveraging swarm intelligence and adaptive local search to balance exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.771638200021932, 0.771638200021932, 0.771638200021932, 0.7648766299650566, 0.7648766299650566, 0.7648766299650566, 0.7731447902517012, 0.7731447902517012, 0.7731447902517012, 0.5711651907207884, 0.5711651907207884, 0.5711651907207884, 0.5266702695695717, 0.5266702695695717, 0.5266702695695717, 0.5793714529246292, 0.5793714529246292, 0.5793714529246292, 0.09426025850353748, 0.09426025850353748, 0.09426025850353748, 0.1209344091838559, 0.1209344091838559, 0.1209344091838559, 0.11045037791968149, 0.11045037791968149, 0.11045037791968149, 0.08837695463172457, 0.08837695463172457, 0.08837695463172457, 0.10326590952862247, 0.10326590952862247, 0.10326590952862247, 0.09683329501033544, 0.09683329501033544, 0.09683329501033544, 0.895738944338633, 0.895738944338633, 0.895738944338633, 0.8917770037087476, 0.8917770037087476, 0.8917770037087476, 0.9145326164067068, 0.9145326164067068, 0.9145326164067068, 0.4688501859053531, 0.4688501859053531, 0.4688501859053531, 0.45983335593443275, 0.45983335593443275, 0.45983335593443275, 0.40867727069217763, 0.40867727069217763, 0.40867727069217763, 0.7654793168243633, 0.7654793168243633, 0.7654793168243633, 0.7560276720542308, 0.7560276720542308, 0.7560276720542308, 0.7036901543434041, 0.7036901543434041, 0.7036901543434041, 0.1628888567634862, 0.1628888567634862, 0.1628888567634862, 0.161002282282381, 0.161002282282381, 0.161002282282381, 0.18035241189768747, 0.18035241189768747, 0.18035241189768747, 0.16934337741180427, 0.16934337741180427, 0.16934337741180427, 0.20780867522808477, 0.20780867522808477, 0.20780867522808477, 0.14441000290593708, 0.14441000290593708, 0.14441000290593708, 0.15756953607549362, 0.15756953607549362, 0.15756953607549362, 0.3489063893559603, 0.3489063893559603, 0.3489063893559603, 0.3308984861886214, 0.3308984861886214, 0.3308984861886214, 0.5039173446833142, 0.5039173446833142, 0.5039173446833142, 0.4888383349417218, 0.4888383349417218, 0.4888383349417218, 0.554808799388522, 0.554808799388522, 0.554808799388522, 0.14287524518293826, 0.14287524518293826, 0.14287524518293826, 0.20516321154082018, 0.20516321154082018, 0.20516321154082018, 0.10382773206804974, 0.10382773206804974, 0.10382773206804974, 0.28562998116637495, 0.28562998116637495, 0.28562998116637495, 0.289290487591626, 0.289290487591626, 0.289290487591626, 0.281098535694695, 0.281098535694695, 0.281098535694695, 0.6968476617017497, 0.6968476617017497, 0.6968476617017497, 0.6934063214483777, 0.6934063214483777, 0.6934063214483777, 0.6609774866471144, 0.6609774866471144, 0.6609774866471144, 0.09439383787696365, 0.09439383787696365, 0.09439383787696365, 0.08566929525444633, 0.08566929525444633, 0.08566929525444633, 0.08544510726738042, 0.08544510726738042, 0.08544510726738042, 0.14437616422978083, 0.14437616422978083, 0.14437616422978083, 0.13062773679384376, 0.13062773679384376, 0.13062773679384376, 0.14453251847514326, 0.14453251847514326, 0.14453251847514326, 0.40240103163746166, 0.40240103163746166, 0.40240103163746166, 0.4122230450774683, 0.4122230450774683, 0.4122230450774683, 0.4028840369177482, 0.4028840369177482, 0.4028840369177482, 0.275876078076261, 0.275876078076261, 0.275876078076261, 0.3148536540264596, 0.3148536540264596, 0.3148536540264596, 0.27055172623133505, 0.27055172623133505, 0.27055172623133505, 0.2594874317810755, 0.2594874317810755, 0.2594874317810755, 0.19086167079757232, 0.19086167079757232, 0.19086167079757232, 0.19834879527060334, 0.19834879527060334, 0.19834879527060334, 0.1910115276731924, 0.1910115276731924, 0.1910115276731924, 0.23024655407638617, 0.23024655407638617, 0.23024655407638617, 0.2015613233896547, 0.2015613233896547, 0.2015613233896547, 0.6073771781843635, 0.6073771781843635, 0.6073771781843635, 0.4338842529669802, 0.4338842529669802, 0.4338842529669802, 0.16255189171738693, 0.16255189171738693, 0.16255189171738693, 0.36222768544964756, 0.36222768544964756, 0.36222768544964756, 0.6775336484381649, 0.6775336484381649, 0.6775336484381649, 0.5960122941215279, 0.5960122941215279, 0.5960122941215279, 0.1963765435454764, 0.1963765435454764, 0.1963765435454764, 0.1866656219652132, 0.1866656219652132, 0.1866656219652132, 0.19182058819424963, 0.19182058819424963, 0.19182058819424963, 0.09040366605166528, 0.09040366605166528, 0.09040366605166528, 0.08462964671390905, 0.08462964671390905, 0.08462964671390905, 0.07849673791932832, 0.07849673791932832, 0.07849673791932832]}, "mutation_prompt": null}
{"id": "159bc3a1-d07e-47b2-8b4f-4a96e4f1a5ec", "solution": "import numpy as np\n\nclass DynamicSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 12 + 4 * self.dim\n        self.F = 0.6\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                swarm_influence = 0.05 * (global_best - x0)\n                mutant = np.clip(x0 + self.F * (x1 - x2) + swarm_influence, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Dynamic Adaptive Local Search\n                if np.random.rand() < 0.25:\n                    trial = self.dynamic_adaptive_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def dynamic_adaptive_local_search(self, solution, func, progress):\n        step_size = 0.12 * (self.upper_bound - self.lower_bound) * (1 - progress ** 3)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "DynamicSwarmHybrid", "description": "A novel metaheuristic combining differential evolution with swarm-influenced mutation and dynamic local search for efficient exploration and exploitation.", "configspace": "", "generation": 53, "fitness": 0.28240362248091616, "feedback": "The algorithm DynamicSwarmHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.6646751046804782, 0.6646751046804782, 0.6646751046804782, 0.7126884149806856, 0.7126884149806856, 0.7126884149806856, 0.7389196326409242, 0.7389196326409242, 0.7389196326409242, 0.48393570960279153, 0.48393570960279153, 0.48393570960279153, 0.49117743386057944, 0.49117743386057944, 0.49117743386057944, 0.47760056951832963, 0.47760056951832963, 0.47760056951832963, 0.09882065208189139, 0.09882065208189139, 0.09882065208189139, 0.09233260004144739, 0.09233260004144739, 0.09233260004144739, 0.09873951741043197, 0.09873951741043197, 0.09873951741043197, 0.0905229900951845, 0.0905229900951845, 0.0905229900951845, 0.09172750500071758, 0.09172750500071758, 0.09172750500071758, 0.07827801075823393, 0.07827801075823393, 0.07827801075823393, 0.9129369489337564, 0.9129369489337564, 0.9129369489337564, 0.93934312000686, 0.93934312000686, 0.93934312000686, 0.9426078470212365, 0.9426078470212365, 0.9426078470212365, 0.3188477656169061, 0.3188477656169061, 0.3188477656169061, 0.3415751500575708, 0.3415751500575708, 0.3415751500575708, 0.3435836744930101, 0.3435836744930101, 0.3435836744930101, 0.4783409311572131, 0.4783409311572131, 0.4783409311572131, 0.5539518587557131, 0.5539518587557131, 0.5539518587557131, 0.5873142618939765, 0.5873142618939765, 0.5873142618939765, 0.19141769697719646, 0.19141769697719646, 0.19141769697719646, 0.15699529100151066, 0.15699529100151066, 0.15699529100151066, 0.19852049121889226, 0.19852049121889226, 0.19852049121889226, 0.1715170548391527, 0.1715170548391527, 0.1715170548391527, 0.19764906219074496, 0.19764906219074496, 0.19764906219074496, 0.1525012263906832, 0.1525012263906832, 0.1525012263906832, 0.1508004913159171, 0.1508004913159171, 0.1508004913159171, 0.1481868618859944, 0.1481868618859944, 0.1481868618859944, 0.14730378581647563, 0.14730378581647563, 0.14730378581647563, 0.28517667380237455, 0.28517667380237455, 0.28517667380237455, 0.2772263840217666, 0.2772263840217666, 0.2772263840217666, 0.3076183437183302, 0.3076183437183302, 0.3076183437183302, 0.07801942711553145, 0.07801942711553145, 0.07801942711553145, 0.06593379809894961, 0.06593379809894961, 0.06593379809894961, 0.08137957861301237, 0.08137957861301237, 0.08137957861301237, 0.1717143324481849, 0.1717143324481849, 0.1717143324481849, 0.19588479304361928, 0.19588479304361928, 0.19588479304361928, 0.1745794111355694, 0.1745794111355694, 0.1745794111355694, 0.5444950766865322, 0.5444950766865322, 0.5444950766865322, 0.5567145421414338, 0.5567145421414338, 0.5567145421414338, 0.4994952473045139, 0.4994952473045139, 0.4994952473045139, 0.08900830432504114, 0.08900830432504114, 0.08900830432504114, 0.08250449111259217, 0.08250449111259217, 0.08250449111259217, 0.08423800417518834, 0.08423800417518834, 0.08423800417518834, 0.12556723264667724, 0.12556723264667724, 0.12556723264667724, 0.13233340832912033, 0.13233340832912033, 0.13233340832912033, 0.1531569900209483, 0.1531569900209483, 0.1531569900209483, 0.3010864225628911, 0.3010864225628911, 0.3010864225628911, 0.2977857287410478, 0.2977857287410478, 0.2977857287410478, 0.31647122346851053, 0.31647122346851053, 0.31647122346851053, 0.23285414737353904, 0.23285414737353904, 0.23285414737353904, 0.21694818548266837, 0.21694818548266837, 0.21694818548266837, 0.21798756233932515, 0.21798756233932515, 0.21798756233932515, 0.20408294616708822, 0.20408294616708822, 0.20408294616708822, 0.1974295317874848, 0.1974295317874848, 0.1974295317874848, 0.20004243720722437, 0.20004243720722437, 0.20004243720722437, 0.17931697054343, 0.17931697054343, 0.17931697054343, 0.17055945186579502, 0.17055945186579502, 0.17055945186579502, 0.17823534616342607, 0.17823534616342607, 0.17823534616342607, 0.4793151577193434, 0.4793151577193434, 0.4793151577193434, 0.4286557602142643, 0.4286557602142643, 0.4286557602142643, 0.4262906017495067, 0.4262906017495067, 0.4262906017495067, 0.20085944040544546, 0.20085944040544546, 0.20085944040544546, 0.1944869928873405, 0.1944869928873405, 0.1944869928873405, 0.15366188929214875, 0.15366188929214875, 0.15366188929214875, 0.19775660510885817, 0.19775660510885817, 0.19775660510885817, 0.17593006601520633, 0.17593006601520633, 0.17593006601520633, 0.1769541525858236, 0.1769541525858236, 0.1769541525858236, 0.08197615984032436, 0.08197615984032436, 0.08197615984032436, 0.07329847375401244, 0.07329847375401244, 0.07329847375401244, 0.07321786636736649, 0.07321786636736649, 0.07321786636736649]}, "mutation_prompt": null}
{"id": "de6cc085-25f8-45d6-9c4e-6ff3e3684e5a", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybridRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.2 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i] or np.random.rand() < 0.1:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybridRefined", "description": "A refined swarm-based hybrid algorithm enhancing adaptive local search with improved trial and selection strategy for better convergence.", "configspace": "", "generation": 54, "fitness": 0.25444798425328435, "feedback": "The algorithm SwarmAdaptiveHybridRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.7223505078599891, 0.7223505078599891, 0.7223505078599891, 0.7131083106217568, 0.7131083106217568, 0.7131083106217568, 0.7336716247488995, 0.7336716247488995, 0.7336716247488995, 0.503554630141503, 0.503554630141503, 0.503554630141503, 0.458902288887022, 0.458902288887022, 0.458902288887022, 0.4935355022637078, 0.4935355022637078, 0.4935355022637078, 0.09199845753851499, 0.09199845753851499, 0.09199845753851499, 0.11123651978708837, 0.11123651978708837, 0.11123651978708837, 0.09750026982946491, 0.09750026982946491, 0.09750026982946491, 0.09410688774747356, 0.09410688774747356, 0.09410688774747356, 0.08506676523895096, 0.08506676523895096, 0.08506676523895096, 0.09186488956839656, 0.09186488956839656, 0.09186488956839656, 0.8847972490083978, 0.8847972490083978, 0.8847972490083978, 0.9275993188955503, 0.9275993188955503, 0.9275993188955503, 0.8857939536005142, 0.8857939536005142, 0.8857939536005142, 0.3035062683631168, 0.3035062683631168, 0.3035062683631168, 0.2911653092243549, 0.2911653092243549, 0.2911653092243549, 0.351839180682722, 0.351839180682722, 0.351839180682722, 0.44727598601497787, 0.44727598601497787, 0.44727598601497787, 0.36260609119276765, 0.36260609119276765, 0.36260609119276765, 0.6217795849334407, 0.6217795849334407, 0.6217795849334407, 0.19378143559621575, 0.19378143559621575, 0.19378143559621575, 0.19725159364482991, 0.19725159364482991, 0.19725159364482991, 0.19647935986866127, 0.19647935986866127, 0.19647935986866127, 0.19524739686248305, 0.19524739686248305, 0.19524739686248305, 0.2305384780695473, 0.2305384780695473, 0.2305384780695473, 0.20570726363444036, 0.20570726363444036, 0.20570726363444036, 0.0071123223095248544, 0.0071123223095248544, 0.0071123223095248544, 0.02739382652664224, 0.02739382652664224, 0.02739382652664224, 0.02213946154685076, 0.02213946154685076, 0.02213946154685076, 0.14997404112878376, 0.14997404112878376, 0.14997404112878376, 0.10707924988779449, 0.10707924988779449, 0.10707924988779449, 0.11827012263484216, 0.11827012263484216, 0.11827012263484216, 0.014491387378134046, 0.014491387378134046, 0.014491387378134046, 0.0002663481853029115, 0.0002663481853029115, 0.0002663481853029115, 0.01770916442019299, 0.01770916442019299, 0.01770916442019299, 0.13164730424719473, 0.13164730424719473, 0.13164730424719473, 0.13591301106776132, 0.13591301106776132, 0.13591301106776132, 0.13950011341629565, 0.13950011341629565, 0.13950011341629565, 0.5094050812499415, 0.5094050812499415, 0.5094050812499415, 0.4683745923753321, 0.4683745923753321, 0.4683745923753321, 0.5056824194241787, 0.5056824194241787, 0.5056824194241787, 0.08757614778725287, 0.08757614778725287, 0.08757614778725287, 0.0870659275070057, 0.0870659275070057, 0.0870659275070057, 0.09525151558806233, 0.09525151558806233, 0.09525151558806233, 0.13875218721279547, 0.13875218721279547, 0.13875218721279547, 0.14364424852121394, 0.14364424852121394, 0.14364424852121394, 0.1136934517798962, 0.1136934517798962, 0.1136934517798962, 0.3101320228420521, 0.3101320228420521, 0.3101320228420521, 0.31059619852780673, 0.31059619852780673, 0.31059619852780673, 0.30528348995479304, 0.30528348995479304, 0.30528348995479304, 0.2324878585373913, 0.2324878585373913, 0.2324878585373913, 0.2121861435189526, 0.2121861435189526, 0.2121861435189526, 0.22055134619179617, 0.22055134619179617, 0.22055134619179617, 0.1956921732250485, 0.1956921732250485, 0.1956921732250485, 0.18841459739190525, 0.18841459739190525, 0.18841459739190525, 0.18487205044892152, 0.18487205044892152, 0.18487205044892152, 0.18423596587503255, 0.18423596587503255, 0.18423596587503255, 0.17657275810845163, 0.17657275810845163, 0.17657275810845163, 0.1879101209236651, 0.1879101209236651, 0.1879101209236651, 0.185749328169716, 0.185749328169716, 0.185749328169716, 0.155432336188147, 0.155432336188147, 0.155432336188147, 0.43258856503565957, 0.43258856503565957, 0.43258856503565957, 0.19321108443542467, 0.19321108443542467, 0.19321108443542467, 0.19789049093782718, 0.19789049093782718, 0.19789049093782718, 0.14914459373791034, 0.14914459373791034, 0.14914459373791034, 0.18590642786125444, 0.18590642786125444, 0.18590642786125444, 0.17401564264739466, 0.17401564264739466, 0.17401564264739466, 0.19390565356725897, 0.19390565356725897, 0.19390565356725897, 0.07373044542783735, 0.07373044542783735, 0.07373044542783735, 0.0754866096486434, 0.0754866096486434, 0.0754866096486434, 0.08105191501379594, 0.08105191501379594, 0.08105191501379594]}, "mutation_prompt": null}
{"id": "c66ccf1a-ce7c-4aa5-88c0-a103d2f70803", "solution": "import numpy as np\n\nclass DynamicSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                dynamic_F = self.F + 0.2 * np.random.rand()\n                mutant = np.clip(x0 + dynamic_F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.25:  # Slightly adjusted probability\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "DynamicSwarmHybrid", "description": "An advanced swarm-based algorithm incorporating dynamic mutation strategies and adaptive local refinements to enhance global search efficiency.", "configspace": "", "generation": 55, "fitness": 0.3474559025015644, "feedback": "The algorithm DynamicSwarmHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.7466147710042672, 0.7466147710042672, 0.7466147710042672, 0.7819014833208768, 0.7819014833208768, 0.7819014833208768, 0.7421382575150259, 0.7421382575150259, 0.7421382575150259, 0.5878071462864429, 0.5878071462864429, 0.5878071462864429, 0.5559076938925995, 0.5559076938925995, 0.5559076938925995, 0.5620022095049881, 0.5620022095049881, 0.5620022095049881, 0.1116806209032204, 0.1116806209032204, 0.1116806209032204, 0.10849489474482166, 0.10849489474482166, 0.10849489474482166, 0.08821258580899449, 0.08821258580899449, 0.08821258580899449, 0.10911406457923645, 0.10911406457923645, 0.10911406457923645, 0.09673286087636046, 0.09673286087636046, 0.09673286087636046, 0.0937378689972922, 0.0937378689972922, 0.0937378689972922, 0.9362433407420138, 0.9362433407420138, 0.9362433407420138, 0.9185355079595403, 0.9185355079595403, 0.9185355079595403, 0.9246089176857247, 0.9246089176857247, 0.9246089176857247, 0.39046182309360467, 0.39046182309360467, 0.39046182309360467, 0.3982130685912656, 0.3982130685912656, 0.3982130685912656, 0.45564156980628057, 0.45564156980628057, 0.45564156980628057, 0.7236884425647262, 0.7236884425647262, 0.7236884425647262, 0.78376573928165, 0.78376573928165, 0.78376573928165, 0.7265567735143216, 0.7265567735143216, 0.7265567735143216, 0.18969468495818476, 0.18969468495818476, 0.18969468495818476, 0.3404487690960586, 0.3404487690960586, 0.3404487690960586, 0.3167882534143015, 0.3167882534143015, 0.3167882534143015, 0.20270875087636608, 0.20270875087636608, 0.20270875087636608, 0.2032719347345533, 0.2032719347345533, 0.2032719347345533, 0.20639104545554443, 0.20639104545554443, 0.20639104545554443, 0.29109045620000884, 0.29109045620000884, 0.29109045620000884, 0.3326225519183167, 0.3326225519183167, 0.3326225519183167, 0.28522629470557936, 0.28522629470557936, 0.28522629470557936, 0.4460873410425069, 0.4460873410425069, 0.4460873410425069, 0.45297530330441216, 0.45297530330441216, 0.45297530330441216, 0.46459722675723814, 0.46459722675723814, 0.46459722675723814, 0.07266067148707389, 0.07266067148707389, 0.07266067148707389, 0.1806371376578032, 0.1806371376578032, 0.1806371376578032, 0.10588837320437672, 0.10588837320437672, 0.10588837320437672, 0.25487245479960396, 0.25487245479960396, 0.25487245479960396, 0.27934381523805196, 0.27934381523805196, 0.27934381523805196, 0.25101059977219276, 0.25101059977219276, 0.25101059977219276, 0.6408131441470548, 0.6408131441470548, 0.6408131441470548, 0.6322598515142969, 0.6322598515142969, 0.6322598515142969, 0.6406207930937414, 0.6406207930937414, 0.6406207930937414, 0.1071667733369035, 0.1071667733369035, 0.1071667733369035, 0.09508615035326695, 0.09508615035326695, 0.09508615035326695, 0.09114544909638134, 0.09114544909638134, 0.09114544909638134, 0.14386811578036962, 0.14386811578036962, 0.14386811578036962, 0.14747927045942855, 0.14747927045942855, 0.14747927045942855, 0.14916071686126164, 0.14916071686126164, 0.14916071686126164, 0.362179782734786, 0.362179782734786, 0.362179782734786, 0.3489317952585932, 0.3489317952585932, 0.3489317952585932, 0.3684900082999847, 0.3684900082999847, 0.3684900082999847, 0.29197672584667866, 0.29197672584667866, 0.29197672584667866, 0.277090839685206, 0.277090839685206, 0.277090839685206, 0.2673184961536065, 0.2673184961536065, 0.2673184961536065, 0.18353266040242067, 0.18353266040242067, 0.18353266040242067, 0.19235036553821083, 0.19235036553821083, 0.19235036553821083, 0.20692799908724824, 0.20692799908724824, 0.20692799908724824, 0.17747368375792016, 0.17747368375792016, 0.17747368375792016, 0.1769287967998887, 0.1769287967998887, 0.1769287967998887, 0.18459286686467757, 0.18459286686467757, 0.18459286686467757, 0.7216891037821254, 0.7216891037821254, 0.7216891037821254, 0.16867238461510692, 0.16867238461510692, 0.16867238461510692, 0.5136426982270336, 0.5136426982270336, 0.5136426982270336, 0.6439916523708576, 0.6439916523708576, 0.6439916523708576, 0.575036781219467, 0.575036781219467, 0.575036781219467, 0.20349615760307693, 0.20349615760307693, 0.20349615760307693, 0.1860845492771941, 0.1860845492771941, 0.1860845492771941, 0.17574346483482584, 0.17574346483482584, 0.17574346483482584, 0.17802295120681488, 0.17802295120681488, 0.17802295120681488, 0.07287504025617486, 0.07287504025617486, 0.07287504025617486, 0.09184244390570051, 0.09184244390570051, 0.09184244390570051, 0.0819581624469049, 0.0819581624469049, 0.0819581624469049]}, "mutation_prompt": null}
{"id": "dd0dc441-8bde-4d70-8318-fdc711133f47", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic leveraging swarm intelligence and adaptive local search to balance exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.771638200021932, 0.771638200021932, 0.771638200021932, 0.7648766299650566, 0.7648766299650566, 0.7648766299650566, 0.7731447902517012, 0.7731447902517012, 0.7731447902517012, 0.5711651907207884, 0.5711651907207884, 0.5711651907207884, 0.5266702695695717, 0.5266702695695717, 0.5266702695695717, 0.5793714529246292, 0.5793714529246292, 0.5793714529246292, 0.09426025850353748, 0.09426025850353748, 0.09426025850353748, 0.1209344091838559, 0.1209344091838559, 0.1209344091838559, 0.11045037791968149, 0.11045037791968149, 0.11045037791968149, 0.08837695463172457, 0.08837695463172457, 0.08837695463172457, 0.10326590952862247, 0.10326590952862247, 0.10326590952862247, 0.09683329501033544, 0.09683329501033544, 0.09683329501033544, 0.895738944338633, 0.895738944338633, 0.895738944338633, 0.8917770037087476, 0.8917770037087476, 0.8917770037087476, 0.9145326164067068, 0.9145326164067068, 0.9145326164067068, 0.4688501859053531, 0.4688501859053531, 0.4688501859053531, 0.45983335593443275, 0.45983335593443275, 0.45983335593443275, 0.40867727069217763, 0.40867727069217763, 0.40867727069217763, 0.7654793168243633, 0.7654793168243633, 0.7654793168243633, 0.7560276720542308, 0.7560276720542308, 0.7560276720542308, 0.7036901543434041, 0.7036901543434041, 0.7036901543434041, 0.1628888567634862, 0.1628888567634862, 0.1628888567634862, 0.161002282282381, 0.161002282282381, 0.161002282282381, 0.18035241189768747, 0.18035241189768747, 0.18035241189768747, 0.16934337741180427, 0.16934337741180427, 0.16934337741180427, 0.20780867522808477, 0.20780867522808477, 0.20780867522808477, 0.14441000290593708, 0.14441000290593708, 0.14441000290593708, 0.15756953607549362, 0.15756953607549362, 0.15756953607549362, 0.3489063893559603, 0.3489063893559603, 0.3489063893559603, 0.3308984861886214, 0.3308984861886214, 0.3308984861886214, 0.5039173446833142, 0.5039173446833142, 0.5039173446833142, 0.4888383349417218, 0.4888383349417218, 0.4888383349417218, 0.554808799388522, 0.554808799388522, 0.554808799388522, 0.14287524518293826, 0.14287524518293826, 0.14287524518293826, 0.20516321154082018, 0.20516321154082018, 0.20516321154082018, 0.10382773206804974, 0.10382773206804974, 0.10382773206804974, 0.28562998116637495, 0.28562998116637495, 0.28562998116637495, 0.289290487591626, 0.289290487591626, 0.289290487591626, 0.281098535694695, 0.281098535694695, 0.281098535694695, 0.6968476617017497, 0.6968476617017497, 0.6968476617017497, 0.6934063214483777, 0.6934063214483777, 0.6934063214483777, 0.6609774866471144, 0.6609774866471144, 0.6609774866471144, 0.09439383787696365, 0.09439383787696365, 0.09439383787696365, 0.08566929525444633, 0.08566929525444633, 0.08566929525444633, 0.08544510726738042, 0.08544510726738042, 0.08544510726738042, 0.14437616422978083, 0.14437616422978083, 0.14437616422978083, 0.13062773679384376, 0.13062773679384376, 0.13062773679384376, 0.14453251847514326, 0.14453251847514326, 0.14453251847514326, 0.40240103163746166, 0.40240103163746166, 0.40240103163746166, 0.4122230450774683, 0.4122230450774683, 0.4122230450774683, 0.4028840369177482, 0.4028840369177482, 0.4028840369177482, 0.275876078076261, 0.275876078076261, 0.275876078076261, 0.3148536540264596, 0.3148536540264596, 0.3148536540264596, 0.27055172623133505, 0.27055172623133505, 0.27055172623133505, 0.2594874317810755, 0.2594874317810755, 0.2594874317810755, 0.19086167079757232, 0.19086167079757232, 0.19086167079757232, 0.19834879527060334, 0.19834879527060334, 0.19834879527060334, 0.1910115276731924, 0.1910115276731924, 0.1910115276731924, 0.23024655407638617, 0.23024655407638617, 0.23024655407638617, 0.2015613233896547, 0.2015613233896547, 0.2015613233896547, 0.6073771781843635, 0.6073771781843635, 0.6073771781843635, 0.4338842529669802, 0.4338842529669802, 0.4338842529669802, 0.16255189171738693, 0.16255189171738693, 0.16255189171738693, 0.36222768544964756, 0.36222768544964756, 0.36222768544964756, 0.6775336484381649, 0.6775336484381649, 0.6775336484381649, 0.5960122941215279, 0.5960122941215279, 0.5960122941215279, 0.1963765435454764, 0.1963765435454764, 0.1963765435454764, 0.1866656219652132, 0.1866656219652132, 0.1866656219652132, 0.19182058819424963, 0.19182058819424963, 0.19182058819424963, 0.09040366605166528, 0.09040366605166528, 0.09040366605166528, 0.08462964671390905, 0.08462964671390905, 0.08462964671390905, 0.07849673791932832, 0.07849673791932832, 0.07849673791932832]}, "mutation_prompt": null}
{"id": "96d0dfe9-cf2c-46c3-ae89-b40cc903a76b", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybridEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Adjusted mutation factor for diversity\n        self.CR = 0.85  # Slightly reduced crossover rate for exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:  # Further increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.12 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)  # Increased exploration step size\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # More local search iterations to enhance exploitation\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybridEnhanced", "description": "A novel strategy combining swarm intelligence with adaptive differential evolution and stochastic local search to optimize complex landscapes efficiently.", "configspace": "", "generation": 57, "fitness": 0.2614544464683665, "feedback": "The algorithm SwarmAdaptiveHybridEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.6371379482912808, 0.6371379482912808, 0.6371379482912808, 0.6322994867858411, 0.6322994867858411, 0.6322994867858411, 0.6734481357127733, 0.6734481357127733, 0.6734481357127733, 0.3387772960987451, 0.3387772960987451, 0.3387772960987451, 0.37118050247268, 0.37118050247268, 0.37118050247268, 0.34079171425681576, 0.34079171425681576, 0.34079171425681576, 0.09773147995253817, 0.09773147995253817, 0.09773147995253817, 0.09785575994692519, 0.09785575994692519, 0.09785575994692519, 0.10432420773666218, 0.10432420773666218, 0.10432420773666218, 0.0780267850166183, 0.0780267850166183, 0.0780267850166183, 0.07877972292699942, 0.07877972292699942, 0.07877972292699942, 0.08262980258789232, 0.08262980258789232, 0.08262980258789232, 0.9467364809735351, 0.9467364809735351, 0.9467364809735351, 0.9368402365304968, 0.9368402365304968, 0.9368402365304968, 0.9090954823196037, 0.9090954823196037, 0.9090954823196037, 0.2902698228036318, 0.2902698228036318, 0.2902698228036318, 0.2919481309592554, 0.2919481309592554, 0.2919481309592554, 0.30121470444598686, 0.30121470444598686, 0.30121470444598686, 0.4881944604723487, 0.4881944604723487, 0.4881944604723487, 0.5621286889381932, 0.5621286889381932, 0.5621286889381932, 0.6154861135543261, 0.6154861135543261, 0.6154861135543261, 0.16512751331638686, 0.16512751331638686, 0.16512751331638686, 0.16667833304712587, 0.16667833304712587, 0.16667833304712587, 0.17582526568047419, 0.17582526568047419, 0.17582526568047419, 0.14390446157388292, 0.14390446157388292, 0.14390446157388292, 0.15389442843436862, 0.15389442843436862, 0.15389442843436862, 0.18477299492731736, 0.18477299492731736, 0.18477299492731736, 0.10679254270394634, 0.10679254270394634, 0.10679254270394634, 0.09319382923594965, 0.09319382923594965, 0.09319382923594965, 0.13838678859361608, 0.13838678859361608, 0.13838678859361608, 0.2347157471586423, 0.2347157471586423, 0.2347157471586423, 0.1676421948968636, 0.1676421948968636, 0.1676421948968636, 0.2856282511076863, 0.2856282511076863, 0.2856282511076863, 0.026004667897463474, 0.026004667897463474, 0.026004667897463474, 0.04705777691095003, 0.04705777691095003, 0.04705777691095003, 0.04121079091591018, 0.04121079091591018, 0.04121079091591018, 0.15079910977829025, 0.15079910977829025, 0.15079910977829025, 0.17234262465601802, 0.17234262465601802, 0.17234262465601802, 0.16410336633105926, 0.16410336633105926, 0.16410336633105926, 0.5168264512708759, 0.5168264512708759, 0.5168264512708759, 0.4614500330930065, 0.4614500330930065, 0.4614500330930065, 0.5042240555687592, 0.5042240555687592, 0.5042240555687592, 0.09098878348902129, 0.09098878348902129, 0.09098878348902129, 0.10347197366801375, 0.10347197366801375, 0.10347197366801375, 0.07955987608508952, 0.07955987608508952, 0.07955987608508952, 0.1288098216538287, 0.1288098216538287, 0.1288098216538287, 0.16007371175023533, 0.16007371175023533, 0.16007371175023533, 0.1366203314947717, 0.1366203314947717, 0.1366203314947717, 0.2669923235023395, 0.2669923235023395, 0.2669923235023395, 0.3192595674565035, 0.3192595674565035, 0.3192595674565035, 0.30325773969267356, 0.30325773969267356, 0.30325773969267356, 0.21433385276646555, 0.21433385276646555, 0.21433385276646555, 0.230043218981822, 0.230043218981822, 0.230043218981822, 0.21855793589377492, 0.21855793589377492, 0.21855793589377492, 0.20631723115209766, 0.20631723115209766, 0.20631723115209766, 0.18517312439639888, 0.18517312439639888, 0.18517312439639888, 0.19256012777683762, 0.19256012777683762, 0.19256012777683762, 0.17119030306812333, 0.17119030306812333, 0.17119030306812333, 0.17777919037112055, 0.17777919037112055, 0.17777919037112055, 0.1828836434072043, 0.1828836434072043, 0.1828836434072043, 0.5158795650093917, 0.5158795650093917, 0.5158795650093917, 0.462347345582787, 0.462347345582787, 0.462347345582787, 0.2039960114752969, 0.2039960114752969, 0.2039960114752969, 0.161583017156956, 0.161583017156956, 0.161583017156956, 0.20004476088860934, 0.20004476088860934, 0.20004476088860934, 0.1550947062115703, 0.1550947062115703, 0.1550947062115703, 0.180471016111294, 0.180471016111294, 0.180471016111294, 0.18152102581060658, 0.18152102581060658, 0.18152102581060658, 0.18984677719988707, 0.18984677719988707, 0.18984677719988707, 0.07909382634369466, 0.07909382634369466, 0.07909382634369466, 0.07377419573559951, 0.07377419573559951, 0.07377419573559951, 0.07771695170863402, 0.07771695170863402, 0.07771695170863402]}, "mutation_prompt": null}
{"id": "91730fa8-a576-4c30-96c3-8d35a8de8606", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic leveraging swarm intelligence and adaptive local search to balance exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.771638200021932, 0.771638200021932, 0.771638200021932, 0.7648766299650566, 0.7648766299650566, 0.7648766299650566, 0.7731447902517012, 0.7731447902517012, 0.7731447902517012, 0.5711651907207884, 0.5711651907207884, 0.5711651907207884, 0.5266702695695717, 0.5266702695695717, 0.5266702695695717, 0.5793714529246292, 0.5793714529246292, 0.5793714529246292, 0.09426025850353748, 0.09426025850353748, 0.09426025850353748, 0.1209344091838559, 0.1209344091838559, 0.1209344091838559, 0.11045037791968149, 0.11045037791968149, 0.11045037791968149, 0.08837695463172457, 0.08837695463172457, 0.08837695463172457, 0.10326590952862247, 0.10326590952862247, 0.10326590952862247, 0.09683329501033544, 0.09683329501033544, 0.09683329501033544, 0.895738944338633, 0.895738944338633, 0.895738944338633, 0.8917770037087476, 0.8917770037087476, 0.8917770037087476, 0.9145326164067068, 0.9145326164067068, 0.9145326164067068, 0.4688501859053531, 0.4688501859053531, 0.4688501859053531, 0.45983335593443275, 0.45983335593443275, 0.45983335593443275, 0.40867727069217763, 0.40867727069217763, 0.40867727069217763, 0.7654793168243633, 0.7654793168243633, 0.7654793168243633, 0.7560276720542308, 0.7560276720542308, 0.7560276720542308, 0.7036901543434041, 0.7036901543434041, 0.7036901543434041, 0.1628888567634862, 0.1628888567634862, 0.1628888567634862, 0.161002282282381, 0.161002282282381, 0.161002282282381, 0.18035241189768747, 0.18035241189768747, 0.18035241189768747, 0.16934337741180427, 0.16934337741180427, 0.16934337741180427, 0.20780867522808477, 0.20780867522808477, 0.20780867522808477, 0.14441000290593708, 0.14441000290593708, 0.14441000290593708, 0.15756953607549362, 0.15756953607549362, 0.15756953607549362, 0.3489063893559603, 0.3489063893559603, 0.3489063893559603, 0.3308984861886214, 0.3308984861886214, 0.3308984861886214, 0.5039173446833142, 0.5039173446833142, 0.5039173446833142, 0.4888383349417218, 0.4888383349417218, 0.4888383349417218, 0.554808799388522, 0.554808799388522, 0.554808799388522, 0.14287524518293826, 0.14287524518293826, 0.14287524518293826, 0.20516321154082018, 0.20516321154082018, 0.20516321154082018, 0.10382773206804974, 0.10382773206804974, 0.10382773206804974, 0.28562998116637495, 0.28562998116637495, 0.28562998116637495, 0.289290487591626, 0.289290487591626, 0.289290487591626, 0.281098535694695, 0.281098535694695, 0.281098535694695, 0.6968476617017497, 0.6968476617017497, 0.6968476617017497, 0.6934063214483777, 0.6934063214483777, 0.6934063214483777, 0.6609774866471144, 0.6609774866471144, 0.6609774866471144, 0.09439383787696365, 0.09439383787696365, 0.09439383787696365, 0.08566929525444633, 0.08566929525444633, 0.08566929525444633, 0.08544510726738042, 0.08544510726738042, 0.08544510726738042, 0.14437616422978083, 0.14437616422978083, 0.14437616422978083, 0.13062773679384376, 0.13062773679384376, 0.13062773679384376, 0.14453251847514326, 0.14453251847514326, 0.14453251847514326, 0.40240103163746166, 0.40240103163746166, 0.40240103163746166, 0.4122230450774683, 0.4122230450774683, 0.4122230450774683, 0.4028840369177482, 0.4028840369177482, 0.4028840369177482, 0.275876078076261, 0.275876078076261, 0.275876078076261, 0.3148536540264596, 0.3148536540264596, 0.3148536540264596, 0.27055172623133505, 0.27055172623133505, 0.27055172623133505, 0.2594874317810755, 0.2594874317810755, 0.2594874317810755, 0.19086167079757232, 0.19086167079757232, 0.19086167079757232, 0.19834879527060334, 0.19834879527060334, 0.19834879527060334, 0.1910115276731924, 0.1910115276731924, 0.1910115276731924, 0.23024655407638617, 0.23024655407638617, 0.23024655407638617, 0.2015613233896547, 0.2015613233896547, 0.2015613233896547, 0.6073771781843635, 0.6073771781843635, 0.6073771781843635, 0.4338842529669802, 0.4338842529669802, 0.4338842529669802, 0.16255189171738693, 0.16255189171738693, 0.16255189171738693, 0.36222768544964756, 0.36222768544964756, 0.36222768544964756, 0.6775336484381649, 0.6775336484381649, 0.6775336484381649, 0.5960122941215279, 0.5960122941215279, 0.5960122941215279, 0.1963765435454764, 0.1963765435454764, 0.1963765435454764, 0.1866656219652132, 0.1866656219652132, 0.1866656219652132, 0.19182058819424963, 0.19182058819424963, 0.19182058819424963, 0.09040366605166528, 0.09040366605166528, 0.09040366605166528, 0.08462964671390905, 0.08462964671390905, 0.08462964671390905, 0.07849673791932832, 0.07849673791932832, 0.07849673791932832]}, "mutation_prompt": null}
{"id": "6993d29e-105e-4775-b54f-6c7f92101965", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic leveraging swarm intelligence and adaptive local search to balance exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.771638200021932, 0.771638200021932, 0.771638200021932, 0.7648766299650566, 0.7648766299650566, 0.7648766299650566, 0.7731447902517012, 0.7731447902517012, 0.7731447902517012, 0.5711651907207884, 0.5711651907207884, 0.5711651907207884, 0.5266702695695717, 0.5266702695695717, 0.5266702695695717, 0.5793714529246292, 0.5793714529246292, 0.5793714529246292, 0.09426025850353748, 0.09426025850353748, 0.09426025850353748, 0.1209344091838559, 0.1209344091838559, 0.1209344091838559, 0.11045037791968149, 0.11045037791968149, 0.11045037791968149, 0.08837695463172457, 0.08837695463172457, 0.08837695463172457, 0.10326590952862247, 0.10326590952862247, 0.10326590952862247, 0.09683329501033544, 0.09683329501033544, 0.09683329501033544, 0.895738944338633, 0.895738944338633, 0.895738944338633, 0.8917770037087476, 0.8917770037087476, 0.8917770037087476, 0.9145326164067068, 0.9145326164067068, 0.9145326164067068, 0.4688501859053531, 0.4688501859053531, 0.4688501859053531, 0.45983335593443275, 0.45983335593443275, 0.45983335593443275, 0.40867727069217763, 0.40867727069217763, 0.40867727069217763, 0.7654793168243633, 0.7654793168243633, 0.7654793168243633, 0.7560276720542308, 0.7560276720542308, 0.7560276720542308, 0.7036901543434041, 0.7036901543434041, 0.7036901543434041, 0.1628888567634862, 0.1628888567634862, 0.1628888567634862, 0.161002282282381, 0.161002282282381, 0.161002282282381, 0.18035241189768747, 0.18035241189768747, 0.18035241189768747, 0.16934337741180427, 0.16934337741180427, 0.16934337741180427, 0.20780867522808477, 0.20780867522808477, 0.20780867522808477, 0.14441000290593708, 0.14441000290593708, 0.14441000290593708, 0.15756953607549362, 0.15756953607549362, 0.15756953607549362, 0.3489063893559603, 0.3489063893559603, 0.3489063893559603, 0.3308984861886214, 0.3308984861886214, 0.3308984861886214, 0.5039173446833142, 0.5039173446833142, 0.5039173446833142, 0.4888383349417218, 0.4888383349417218, 0.4888383349417218, 0.554808799388522, 0.554808799388522, 0.554808799388522, 0.14287524518293826, 0.14287524518293826, 0.14287524518293826, 0.20516321154082018, 0.20516321154082018, 0.20516321154082018, 0.10382773206804974, 0.10382773206804974, 0.10382773206804974, 0.28562998116637495, 0.28562998116637495, 0.28562998116637495, 0.289290487591626, 0.289290487591626, 0.289290487591626, 0.281098535694695, 0.281098535694695, 0.281098535694695, 0.6968476617017497, 0.6968476617017497, 0.6968476617017497, 0.6934063214483777, 0.6934063214483777, 0.6934063214483777, 0.6609774866471144, 0.6609774866471144, 0.6609774866471144, 0.09439383787696365, 0.09439383787696365, 0.09439383787696365, 0.08566929525444633, 0.08566929525444633, 0.08566929525444633, 0.08544510726738042, 0.08544510726738042, 0.08544510726738042, 0.14437616422978083, 0.14437616422978083, 0.14437616422978083, 0.13062773679384376, 0.13062773679384376, 0.13062773679384376, 0.14453251847514326, 0.14453251847514326, 0.14453251847514326, 0.40240103163746166, 0.40240103163746166, 0.40240103163746166, 0.4122230450774683, 0.4122230450774683, 0.4122230450774683, 0.4028840369177482, 0.4028840369177482, 0.4028840369177482, 0.275876078076261, 0.275876078076261, 0.275876078076261, 0.3148536540264596, 0.3148536540264596, 0.3148536540264596, 0.27055172623133505, 0.27055172623133505, 0.27055172623133505, 0.2594874317810755, 0.2594874317810755, 0.2594874317810755, 0.19086167079757232, 0.19086167079757232, 0.19086167079757232, 0.19834879527060334, 0.19834879527060334, 0.19834879527060334, 0.1910115276731924, 0.1910115276731924, 0.1910115276731924, 0.23024655407638617, 0.23024655407638617, 0.23024655407638617, 0.2015613233896547, 0.2015613233896547, 0.2015613233896547, 0.6073771781843635, 0.6073771781843635, 0.6073771781843635, 0.4338842529669802, 0.4338842529669802, 0.4338842529669802, 0.16255189171738693, 0.16255189171738693, 0.16255189171738693, 0.36222768544964756, 0.36222768544964756, 0.36222768544964756, 0.6775336484381649, 0.6775336484381649, 0.6775336484381649, 0.5960122941215279, 0.5960122941215279, 0.5960122941215279, 0.1963765435454764, 0.1963765435454764, 0.1963765435454764, 0.1866656219652132, 0.1866656219652132, 0.1866656219652132, 0.19182058819424963, 0.19182058819424963, 0.19182058819424963, 0.09040366605166528, 0.09040366605166528, 0.09040366605166528, 0.08462964671390905, 0.08462964671390905, 0.08462964671390905, 0.07849673791932832, 0.07849673791932832, 0.07849673791932832]}, "mutation_prompt": null}
{"id": "13018905-fc15-4c0e-be5f-1f43aa588a9c", "solution": "import numpy as np\n\nclass StochasticMultiPhaseOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15 + 5 * self.dim  # Slightly increased population size for diversity\n        self.F = 0.6  # Adjusted differential weight for better mutation\n        self.CR = 0.85  # Slightly reduced crossover rate for exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)  # Increased swarm influence\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.4:  # Further increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.08 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)  # Adjusted step size\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local search iterations\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "StochasticMultiPhaseOptimizer", "description": "A stochastic multi-phase optimization algorithm combining differential evolution, swarm intelligence, and adaptive local search to enhance convergence and solution quality.", "configspace": "", "generation": 60, "fitness": 0.25764467408312536, "feedback": "The algorithm StochasticMultiPhaseOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.6411798081469542, 0.6411798081469542, 0.6411798081469542, 0.6387554263830452, 0.6387554263830452, 0.6387554263830452, 0.6088088489054031, 0.6088088489054031, 0.6088088489054031, 0.33481895077930424, 0.33481895077930424, 0.33481895077930424, 0.32503954517247224, 0.32503954517247224, 0.32503954517247224, 0.33063677437481787, 0.33063677437481787, 0.33063677437481787, 0.0952252342444202, 0.0952252342444202, 0.0952252342444202, 0.09587028518665608, 0.09587028518665608, 0.09587028518665608, 0.09874506579290487, 0.09874506579290487, 0.09874506579290487, 0.09620623779538273, 0.09620623779538273, 0.09620623779538273, 0.0736033211960947, 0.0736033211960947, 0.0736033211960947, 0.08199500556237505, 0.08199500556237505, 0.08199500556237505, 0.8760611284454379, 0.8760611284454379, 0.8760611284454379, 0.8542196547601725, 0.8542196547601725, 0.8542196547601725, 0.9226640507037391, 0.9226640507037391, 0.9226640507037391, 0.2731728982821815, 0.2731728982821815, 0.2731728982821815, 0.2823722540195057, 0.2823722540195057, 0.2823722540195057, 0.2806317621306057, 0.2806317621306057, 0.2806317621306057, 0.517506866171879, 0.517506866171879, 0.517506866171879, 0.479462028743997, 0.479462028743997, 0.479462028743997, 0.48246759792734595, 0.48246759792734595, 0.48246759792734595, 0.1777824991041025, 0.1777824991041025, 0.1777824991041025, 0.15195908324561203, 0.15195908324561203, 0.15195908324561203, 0.20318299773259518, 0.20318299773259518, 0.20318299773259518, 0.15753431039035293, 0.15753431039035293, 0.15753431039035293, 0.16323619659519484, 0.16323619659519484, 0.16323619659519484, 0.16680042493171654, 0.16680042493171654, 0.16680042493171654, 0.10433400733325549, 0.10433400733325549, 0.10433400733325549, 0.10780598510377981, 0.10780598510377981, 0.10780598510377981, 0.10774554285863702, 0.10774554285863702, 0.10774554285863702, 0.23950057237111422, 0.23950057237111422, 0.23950057237111422, 0.19637345529464, 0.19637345529464, 0.19637345529464, 0.21058085411812866, 0.21058085411812866, 0.21058085411812866, 0.0192680836213025, 0.0192680836213025, 0.0192680836213025, 0.04722450542602197, 0.04722450542602197, 0.04722450542602197, 0.026112632466288033, 0.026112632466288033, 0.026112632466288033, 0.1539092045755911, 0.1539092045755911, 0.1539092045755911, 0.15410104114832301, 0.15410104114832301, 0.15410104114832301, 0.14057174280456586, 0.14057174280456586, 0.14057174280456586, 0.47947387620765913, 0.47947387620765913, 0.47947387620765913, 0.46874973727220837, 0.46874973727220837, 0.46874973727220837, 0.4787696510393309, 0.4787696510393309, 0.4787696510393309, 0.09282528567244264, 0.09282528567244264, 0.09282528567244264, 0.08943021459906608, 0.08943021459906608, 0.08943021459906608, 0.08725930565653672, 0.08725930565653672, 0.08725930565653672, 0.14582515646283467, 0.14582515646283467, 0.14582515646283467, 0.12579167973882688, 0.12579167973882688, 0.12579167973882688, 0.13656926234233557, 0.13656926234233557, 0.13656926234233557, 0.29328333343062685, 0.29328333343062685, 0.29328333343062685, 0.27636854023601365, 0.27636854023601365, 0.27636854023601365, 0.2883748874032973, 0.2883748874032973, 0.2883748874032973, 0.21779344208770313, 0.21779344208770313, 0.21779344208770313, 0.20957506541724313, 0.20957506541724313, 0.20957506541724313, 0.2173778057700354, 0.2173778057700354, 0.2173778057700354, 0.1915596531685676, 0.1915596531685676, 0.1915596531685676, 0.1900823097556632, 0.1900823097556632, 0.1900823097556632, 0.19760395975967338, 0.19760395975967338, 0.19760395975967338, 0.2195543582395355, 0.2195543582395355, 0.2195543582395355, 0.18279298932288546, 0.18279298932288546, 0.18279298932288546, 0.1797588852360975, 0.1797588852360975, 0.1797588852360975, 0.5326766424639631, 0.5326766424639631, 0.5326766424639631, 0.19134379711073535, 0.19134379711073535, 0.19134379711073535, 0.5714057148946987, 0.5714057148946987, 0.5714057148946987, 0.2431767974115443, 0.2431767974115443, 0.2431767974115443, 0.19135417366465257, 0.19135417366465257, 0.19135417366465257, 0.37959035276833797, 0.37959035276833797, 0.37959035276833797, 0.1752016044017095, 0.1752016044017095, 0.1752016044017095, 0.16889837319946366, 0.16889837319946366, 0.16889837319946366, 0.17911087410728777, 0.17911087410728777, 0.17911087410728777, 0.08243459889460336, 0.08243459889460336, 0.08243459889460336, 0.07759975438083544, 0.07759975438083544, 0.07759975438083544, 0.071338568022694, 0.071338568022694, 0.071338568022694]}, "mutation_prompt": null}
{"id": "abd6d5fc-196a-4f36-91b7-4e662c3bdfd6", "solution": "import numpy as np\n\nclass RefinedSwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 12 + 4 * self.dim\n        self.F = 0.5\n        self.CR = 0.8\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Enhanced Stochastic Local Search with Adaptive Intensity\n                if np.random.rand() < 0.35:  # Slightly increased chance for local refinement\n                    trial = self.enhanced_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def enhanced_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 3)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased number of local search attempts\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "RefinedSwarmAdaptiveHybrid", "description": "A refined hybrid metaheuristic combining differential evolution with enhanced local search and adaptive randomness for improved convergence.", "configspace": "", "generation": 61, "fitness": 0.30567766948591607, "feedback": "The algorithm RefinedSwarmAdaptiveHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.7617703459928662, 0.7617703459928662, 0.7617703459928662, 0.7703096838585989, 0.7703096838585989, 0.7703096838585989, 0.7610687205783385, 0.7610687205783385, 0.7610687205783385, 0.5903494170665985, 0.5903494170665985, 0.5903494170665985, 0.5803737987274019, 0.5803737987274019, 0.5803737987274019, 0.5686835429742221, 0.5686835429742221, 0.5686835429742221, 0.10616196893661567, 0.10616196893661567, 0.10616196893661567, 0.12297998005159605, 0.12297998005159605, 0.12297998005159605, 0.11405670411700353, 0.11405670411700353, 0.11405670411700353, 0.10876272395756992, 0.10876272395756992, 0.10876272395756992, 0.10352936828683812, 0.10352936828683812, 0.10352936828683812, 0.09922846046983702, 0.09922846046983702, 0.09922846046983702, 0.9545626009469165, 0.9545626009469165, 0.9545626009469165, 0.9003838117244023, 0.9003838117244023, 0.9003838117244023, 0.9214794668208416, 0.9214794668208416, 0.9214794668208416, 0.3879165570867643, 0.3879165570867643, 0.3879165570867643, 0.39066189763423487, 0.39066189763423487, 0.39066189763423487, 0.4027878191408507, 0.4027878191408507, 0.4027878191408507, 0.6344019472132223, 0.6344019472132223, 0.6344019472132223, 0.7012442893071794, 0.7012442893071794, 0.7012442893071794, 0.6580441832969699, 0.6580441832969699, 0.6580441832969699, 0.16847380353152963, 0.16847380353152963, 0.16847380353152963, 0.1460949489306519, 0.1460949489306519, 0.1460949489306519, 0.16808411236183274, 0.16808411236183274, 0.16808411236183274, 0.17001577189266226, 0.17001577189266226, 0.17001577189266226, 0.17636057848548337, 0.17636057848548337, 0.17636057848548337, 0.1712468667574616, 0.1712468667574616, 0.1712468667574616, 0.10203082676616737, 0.10203082676616737, 0.10203082676616737, 0.11982352686613162, 0.11982352686613162, 0.11982352686613162, 0.2276776352483103, 0.2276776352483103, 0.2276776352483103, 0.30647867113343896, 0.30647867113343896, 0.30647867113343896, 0.3297745130876648, 0.3297745130876648, 0.3297745130876648, 0.35162281748944324, 0.35162281748944324, 0.35162281748944324, 0.0636658803657536, 0.0636658803657536, 0.0636658803657536, 0.0984378876520775, 0.0984378876520775, 0.0984378876520775, 0.060837304345081056, 0.060837304345081056, 0.060837304345081056, 0.17687530494224557, 0.17687530494224557, 0.17687530494224557, 0.20420833555539442, 0.20420833555539442, 0.20420833555539442, 0.182734074314706, 0.182734074314706, 0.182734074314706, 0.5712315039737149, 0.5712315039737149, 0.5712315039737149, 0.5522435483711599, 0.5522435483711599, 0.5522435483711599, 0.5887562912816096, 0.5887562912816096, 0.5887562912816096, 0.10851338677201072, 0.10851338677201072, 0.10851338677201072, 0.09382685162109972, 0.09382685162109972, 0.09382685162109972, 0.10875851395928637, 0.10875851395928637, 0.10875851395928637, 0.13633668892439477, 0.13633668892439477, 0.13633668892439477, 0.15743073858014578, 0.15743073858014578, 0.15743073858014578, 0.14315321880933207, 0.14315321880933207, 0.14315321880933207, 0.33877646530977024, 0.33877646530977024, 0.33877646530977024, 0.3271297818316903, 0.3271297818316903, 0.3271297818316903, 0.38285169252917217, 0.38285169252917217, 0.38285169252917217, 0.2674174588406131, 0.2674174588406131, 0.2674174588406131, 0.24774313210129417, 0.24774313210129417, 0.24774313210129417, 0.2582615530238379, 0.2582615530238379, 0.2582615530238379, 0.19340576773213192, 0.19340576773213192, 0.19340576773213192, 0.1951202873731015, 0.1951202873731015, 0.1951202873731015, 0.19255058857000162, 0.19255058857000162, 0.19255058857000162, 0.1950583227339383, 0.1950583227339383, 0.1950583227339383, 0.18819983167394871, 0.18819983167394871, 0.18819983167394871, 0.18484527570523523, 0.18484527570523523, 0.18484527570523523, 0.18260168377670238, 0.18260168377670238, 0.18260168377670238, 0.702285104033876, 0.702285104033876, 0.702285104033876, 0.19366034930267084, 0.19366034930267084, 0.19366034930267084, 0.46910841978869533, 0.46910841978869533, 0.46910841978869533, 0.19362074126778506, 0.19362074126778506, 0.19362074126778506, 0.14295091895061507, 0.14295091895061507, 0.14295091895061507, 0.18063170703188658, 0.18063170703188658, 0.18063170703188658, 0.21845043382204432, 0.21845043382204432, 0.21845043382204432, 0.1791241447776618, 0.1791241447776618, 0.1791241447776618, 0.08338789476293273, 0.08338789476293273, 0.08338789476293273, 0.08305083088807419, 0.08305083088807419, 0.08305083088807419, 0.08510892695062178, 0.08510892695062178, 0.08510892695062178]}, "mutation_prompt": null}
{"id": "c48b1cd4-1d32-42c9-b49d-aebffac11365", "solution": "import numpy as np\n\nclass SwarmAdaptiveRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly increased to enhance mutation diversity\n        self.CR = 0.85  # Slightly adjusted to balance crossover\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:  # Slightly increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Small increase in local search attempts\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveRefined", "description": "A refined hybrid algorithm integrating swarm dynamics and adaptive local intensification for enhanced exploration-exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.26518999493260553, "feedback": "The algorithm SwarmAdaptiveRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.6524606048576892, 0.6524606048576892, 0.6524606048576892, 0.6689736742001364, 0.6689736742001364, 0.6689736742001364, 0.6533320833392102, 0.6533320833392102, 0.6533320833392102, 0.39539439134450616, 0.39539439134450616, 0.39539439134450616, 0.35339384553486064, 0.35339384553486064, 0.35339384553486064, 0.35380294575415205, 0.35380294575415205, 0.35380294575415205, 0.09954744394284154, 0.09954744394284154, 0.09954744394284154, 0.09096036157279053, 0.09096036157279053, 0.09096036157279053, 0.09269065512191044, 0.09269065512191044, 0.09269065512191044, 0.0851972846529716, 0.0851972846529716, 0.0851972846529716, 0.09177922673875905, 0.09177922673875905, 0.09177922673875905, 0.08147931986434653, 0.08147931986434653, 0.08147931986434653, 0.9485792929993377, 0.9485792929993377, 0.9485792929993377, 0.8999481849017174, 0.8999481849017174, 0.8999481849017174, 0.9496293663346116, 0.9496293663346116, 0.9496293663346116, 0.3048887108389614, 0.3048887108389614, 0.3048887108389614, 0.27590966028432873, 0.27590966028432873, 0.27590966028432873, 0.28600847432066834, 0.28600847432066834, 0.28600847432066834, 0.5138078440151841, 0.5138078440151841, 0.5138078440151841, 0.5905497846266028, 0.5905497846266028, 0.5905497846266028, 0.5278827496162424, 0.5278827496162424, 0.5278827496162424, 0.1387775398396056, 0.1387775398396056, 0.1387775398396056, 0.18828456220369094, 0.18828456220369094, 0.18828456220369094, 0.17345978784188176, 0.17345978784188176, 0.17345978784188176, 0.16718917624448126, 0.16718917624448126, 0.16718917624448126, 0.15274173163436822, 0.15274173163436822, 0.15274173163436822, 0.15045354808124756, 0.15045354808124756, 0.15045354808124756, 0.12151731160933865, 0.12151731160933865, 0.12151731160933865, 0.13524556930395681, 0.13524556930395681, 0.13524556930395681, 0.09848048653796282, 0.09848048653796282, 0.09848048653796282, 0.27782559550161356, 0.27782559550161356, 0.27782559550161356, 0.20844552559584972, 0.20844552559584972, 0.20844552559584972, 0.2598095601402487, 0.2598095601402487, 0.2598095601402487, 0.046249301386538044, 0.046249301386538044, 0.046249301386538044, 0.024564569477154907, 0.024564569477154907, 0.024564569477154907, 0.04203154650889629, 0.04203154650889629, 0.04203154650889629, 0.16748372622292917, 0.16748372622292917, 0.16748372622292917, 0.15590148408722415, 0.15590148408722415, 0.15590148408722415, 0.14943182628312113, 0.14943182628312113, 0.14943182628312113, 0.4968811220420295, 0.4968811220420295, 0.4968811220420295, 0.4729670565778503, 0.4729670565778503, 0.4729670565778503, 0.49150139156462047, 0.49150139156462047, 0.49150139156462047, 0.09149112083544764, 0.09149112083544764, 0.09149112083544764, 0.08560320713215985, 0.08560320713215985, 0.08560320713215985, 0.0895916060465719, 0.0895916060465719, 0.0895916060465719, 0.15444804617305874, 0.15444804617305874, 0.15444804617305874, 0.13439678996500692, 0.13439678996500692, 0.13439678996500692, 0.13846840602267962, 0.13846840602267962, 0.13846840602267962, 0.28375250584508105, 0.28375250584508105, 0.28375250584508105, 0.28417120740202806, 0.28417120740202806, 0.28417120740202806, 0.3077016325301912, 0.3077016325301912, 0.3077016325301912, 0.1927661170618601, 0.1927661170618601, 0.1927661170618601, 0.21270388741956525, 0.21270388741956525, 0.21270388741956525, 0.2308442183491396, 0.2308442183491396, 0.2308442183491396, 0.1971339561650448, 0.1971339561650448, 0.1971339561650448, 0.18100038558215914, 0.18100038558215914, 0.18100038558215914, 0.19260663878368045, 0.19260663878368045, 0.19260663878368045, 0.18002702681553617, 0.18002702681553617, 0.18002702681553617, 0.1729712839613179, 0.1729712839613179, 0.1729712839613179, 0.18653887749004627, 0.18653887749004627, 0.18653887749004627, 0.6665950324821348, 0.6665950324821348, 0.6665950324821348, 0.5794327040866614, 0.5794327040866614, 0.5794327040866614, 0.15889780180333946, 0.15889780180333946, 0.15889780180333946, 0.15931714716329515, 0.15931714716329515, 0.15931714716329515, 0.20373946995064973, 0.20373946995064973, 0.20373946995064973, 0.19621818794927737, 0.19621818794927737, 0.19621818794927737, 0.19702889950746627, 0.19702889950746627, 0.19702889950746627, 0.1796917358732173, 0.1796917358732173, 0.1796917358732173, 0.1704785327786409, 0.1704785327786409, 0.1704785327786409, 0.06749174269484048, 0.06749174269484048, 0.06749174269484048, 0.07151793553932584, 0.07151793553932584, 0.07151793553932584, 0.09159520819173594, 0.09159520819173594, 0.09159520819173594]}, "mutation_prompt": null}
{"id": "e6896dcd-b6b4-42e2-97cd-b53ab45dd107", "solution": "import numpy as np\n\nclass SwarmAdaptiveHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.3:  # Increased chance to refine the trial solution\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "SwarmAdaptiveHybrid", "description": "An enhanced hybrid metaheuristic leveraging swarm intelligence and adaptive local search to balance exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.771638200021932, 0.771638200021932, 0.771638200021932, 0.7648766299650566, 0.7648766299650566, 0.7648766299650566, 0.7731447902517012, 0.7731447902517012, 0.7731447902517012, 0.5711651907207884, 0.5711651907207884, 0.5711651907207884, 0.5266702695695717, 0.5266702695695717, 0.5266702695695717, 0.5793714529246292, 0.5793714529246292, 0.5793714529246292, 0.09426025850353748, 0.09426025850353748, 0.09426025850353748, 0.1209344091838559, 0.1209344091838559, 0.1209344091838559, 0.11045037791968149, 0.11045037791968149, 0.11045037791968149, 0.08837695463172457, 0.08837695463172457, 0.08837695463172457, 0.10326590952862247, 0.10326590952862247, 0.10326590952862247, 0.09683329501033544, 0.09683329501033544, 0.09683329501033544, 0.895738944338633, 0.895738944338633, 0.895738944338633, 0.8917770037087476, 0.8917770037087476, 0.8917770037087476, 0.9145326164067068, 0.9145326164067068, 0.9145326164067068, 0.4688501859053531, 0.4688501859053531, 0.4688501859053531, 0.45983335593443275, 0.45983335593443275, 0.45983335593443275, 0.40867727069217763, 0.40867727069217763, 0.40867727069217763, 0.7654793168243633, 0.7654793168243633, 0.7654793168243633, 0.7560276720542308, 0.7560276720542308, 0.7560276720542308, 0.7036901543434041, 0.7036901543434041, 0.7036901543434041, 0.1628888567634862, 0.1628888567634862, 0.1628888567634862, 0.161002282282381, 0.161002282282381, 0.161002282282381, 0.18035241189768747, 0.18035241189768747, 0.18035241189768747, 0.16934337741180427, 0.16934337741180427, 0.16934337741180427, 0.20780867522808477, 0.20780867522808477, 0.20780867522808477, 0.14441000290593708, 0.14441000290593708, 0.14441000290593708, 0.15756953607549362, 0.15756953607549362, 0.15756953607549362, 0.3489063893559603, 0.3489063893559603, 0.3489063893559603, 0.3308984861886214, 0.3308984861886214, 0.3308984861886214, 0.5039173446833142, 0.5039173446833142, 0.5039173446833142, 0.4888383349417218, 0.4888383349417218, 0.4888383349417218, 0.554808799388522, 0.554808799388522, 0.554808799388522, 0.14287524518293826, 0.14287524518293826, 0.14287524518293826, 0.20516321154082018, 0.20516321154082018, 0.20516321154082018, 0.10382773206804974, 0.10382773206804974, 0.10382773206804974, 0.28562998116637495, 0.28562998116637495, 0.28562998116637495, 0.289290487591626, 0.289290487591626, 0.289290487591626, 0.281098535694695, 0.281098535694695, 0.281098535694695, 0.6968476617017497, 0.6968476617017497, 0.6968476617017497, 0.6934063214483777, 0.6934063214483777, 0.6934063214483777, 0.6609774866471144, 0.6609774866471144, 0.6609774866471144, 0.09439383787696365, 0.09439383787696365, 0.09439383787696365, 0.08566929525444633, 0.08566929525444633, 0.08566929525444633, 0.08544510726738042, 0.08544510726738042, 0.08544510726738042, 0.14437616422978083, 0.14437616422978083, 0.14437616422978083, 0.13062773679384376, 0.13062773679384376, 0.13062773679384376, 0.14453251847514326, 0.14453251847514326, 0.14453251847514326, 0.40240103163746166, 0.40240103163746166, 0.40240103163746166, 0.4122230450774683, 0.4122230450774683, 0.4122230450774683, 0.4028840369177482, 0.4028840369177482, 0.4028840369177482, 0.275876078076261, 0.275876078076261, 0.275876078076261, 0.3148536540264596, 0.3148536540264596, 0.3148536540264596, 0.27055172623133505, 0.27055172623133505, 0.27055172623133505, 0.2594874317810755, 0.2594874317810755, 0.2594874317810755, 0.19086167079757232, 0.19086167079757232, 0.19086167079757232, 0.19834879527060334, 0.19834879527060334, 0.19834879527060334, 0.1910115276731924, 0.1910115276731924, 0.1910115276731924, 0.23024655407638617, 0.23024655407638617, 0.23024655407638617, 0.2015613233896547, 0.2015613233896547, 0.2015613233896547, 0.6073771781843635, 0.6073771781843635, 0.6073771781843635, 0.4338842529669802, 0.4338842529669802, 0.4338842529669802, 0.16255189171738693, 0.16255189171738693, 0.16255189171738693, 0.36222768544964756, 0.36222768544964756, 0.36222768544964756, 0.6775336484381649, 0.6775336484381649, 0.6775336484381649, 0.5960122941215279, 0.5960122941215279, 0.5960122941215279, 0.1963765435454764, 0.1963765435454764, 0.1963765435454764, 0.1866656219652132, 0.1866656219652132, 0.1866656219652132, 0.19182058819424963, 0.19182058819424963, 0.19182058819424963, 0.09040366605166528, 0.09040366605166528, 0.09040366605166528, 0.08462964671390905, 0.08462964671390905, 0.08462964671390905, 0.07849673791932832, 0.07849673791932832, 0.07849673791932832]}, "mutation_prompt": null}
{"id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "solution": "import numpy as np\n\nclass EnhancedSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:  # Slightly more frequent local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # More aggressive reduction\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased iterations for local refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedSwarmHybrid", "description": "A novel metaheuristic combining differential evolution and adaptive local search with enhanced crossover strategies for robust exploration and exploitation.", "configspace": "", "generation": 64, "fitness": 0.3550376454869543, "feedback": "The algorithm EnhancedSwarmHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "0145e40b-a4b3-4d11-9a2f-68cf662f4d97", "metadata": {"aucs": [0.7644817795223594, 0.7644817795223594, 0.7644817795223594, 0.7823922173693952, 0.7823922173693952, 0.7823922173693952, 0.7795822046501657, 0.7795822046501657, 0.7795822046501657, 0.3224680667315555, 0.3224680667315555, 0.3224680667315555, 0.5971416287068714, 0.5971416287068714, 0.5971416287068714, 0.07351308854498839, 0.07351308854498839, 0.07351308854498839, 0.10018972105705448, 0.10018972105705448, 0.10018972105705448, 0.10202043864208976, 0.10202043864208976, 0.10202043864208976, 0.10705380507242424, 0.10705380507242424, 0.10705380507242424, 0.08478020457067903, 0.08478020457067903, 0.08478020457067903, 0.10121938442443024, 0.10121938442443024, 0.10121938442443024, 0.0787324786151612, 0.0787324786151612, 0.0787324786151612, 0.867777286247637, 0.867777286247637, 0.867777286247637, 0.9143649888702736, 0.9143649888702736, 0.9143649888702736, 0.9077001605240258, 0.9077001605240258, 0.9077001605240258, 0.2276669832292717, 0.2276669832292717, 0.2276669832292717, 0.43399708500789325, 0.43399708500789325, 0.43399708500789325, 0.2761330389248836, 0.2761330389248836, 0.2761330389248836, 0.7459629133857535, 0.7459629133857535, 0.7459629133857535, 0.8537728003439787, 0.8537728003439787, 0.8537728003439787, 0.832240371646856, 0.832240371646856, 0.832240371646856, 0.2663192453734663, 0.2663192453734663, 0.2663192453734663, 0.17377701756941222, 0.17377701756941222, 0.17377701756941222, 0.1462822778220879, 0.1462822778220879, 0.1462822778220879, 0.24143936130146693, 0.24143936130146693, 0.24143936130146693, 0.16448208149271337, 0.16448208149271337, 0.16448208149271337, 0.22830724342668618, 0.22830724342668618, 0.22830724342668618, 0.5377341573217878, 0.5377341573217878, 0.5377341573217878, 0.5299069093510571, 0.5299069093510571, 0.5299069093510571, 0.38511375775048495, 0.38511375775048495, 0.38511375775048495, 0.6797853045997797, 0.6797853045997797, 0.6797853045997797, 0.1206871943308091, 0.1206871943308091, 0.1206871943308091, 0.6529701861927801, 0.6529701861927801, 0.6529701861927801, 0.2043407890021003, 0.2043407890021003, 0.2043407890021003, 0.34504141231280605, 0.34504141231280605, 0.34504141231280605, 0.2329174007411421, 0.2329174007411421, 0.2329174007411421, 0.38789540090333263, 0.38789540090333263, 0.38789540090333263, 0.3989783070067895, 0.3989783070067895, 0.3989783070067895, 0.40108919511343366, 0.40108919511343366, 0.40108919511343366, 0.6753136526662384, 0.6753136526662384, 0.6753136526662384, 0.5824471030544423, 0.5824471030544423, 0.5824471030544423, 0.7262678990054162, 0.7262678990054162, 0.7262678990054162, 0.12127376606714801, 0.12127376606714801, 0.12127376606714801, 0.10758950020519276, 0.10758950020519276, 0.10758950020519276, 0.09083398486612893, 0.09083398486612893, 0.09083398486612893, 0.14119911645874472, 0.14119911645874472, 0.14119911645874472, 0.13457254062807855, 0.13457254062807855, 0.13457254062807855, 0.28835738551546697, 0.28835738551546697, 0.28835738551546697, 0.4108288108758156, 0.4108288108758156, 0.4108288108758156, 0.3727605700002581, 0.3727605700002581, 0.3727605700002581, 0.4137233669267808, 0.4137233669267808, 0.4137233669267808, 0.3433452316889928, 0.3433452316889928, 0.3433452316889928, 0.35199553596752864, 0.35199553596752864, 0.35199553596752864, 0.3363922640344754, 0.3363922640344754, 0.3363922640344754, 0.21214909439031715, 0.21214909439031715, 0.21214909439031715, 0.19056167719220618, 0.19056167719220618, 0.19056167719220618, 0.20177037927180685, 0.20177037927180685, 0.20177037927180685, 0.18120728768689842, 0.18120728768689842, 0.18120728768689842, 0.18143238567300546, 0.18143238567300546, 0.18143238567300546, 0.1853371218145181, 0.1853371218145181, 0.1853371218145181, 0.8307977039784535, 0.8307977039784535, 0.8307977039784535, 0.3781041752220189, 0.3781041752220189, 0.3781041752220189, 0.6977342831224355, 0.6977342831224355, 0.6977342831224355, 0.20681879820476956, 0.20681879820476956, 0.20681879820476956, 0.20419701537809443, 0.20419701537809443, 0.20419701537809443, 0.16442723271475568, 0.16442723271475568, 0.16442723271475568, 0.1757857137083989, 0.1757857137083989, 0.1757857137083989, 0.1859366876693972, 0.1859366876693972, 0.1859366876693972, 0.1679721779116906, 0.1679721779116906, 0.1679721779116906, 0.07892822391203447, 0.07892822391203447, 0.07892822391203447, 0.09051044934876296, 0.09051044934876296, 0.09051044934876296, 0.08188145220055298, 0.08188145220055298, 0.08188145220055298]}, "mutation_prompt": null}
{"id": "73cbff7e-da9c-41e9-af1d-36423eed5180", "solution": "import numpy as np\n\nclass EnhancedSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:  # Slightly more frequent local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # More aggressive reduction\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased iterations for local refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedSwarmHybrid", "description": "A novel metaheuristic combining differential evolution and adaptive local search with enhanced crossover strategies for robust exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.7644817795223594, 0.7644817795223594, 0.7644817795223594, 0.7823922173693952, 0.7823922173693952, 0.7823922173693952, 0.7795822046501657, 0.7795822046501657, 0.7795822046501657, 0.3224680667315555, 0.3224680667315555, 0.3224680667315555, 0.5971416287068714, 0.5971416287068714, 0.5971416287068714, 0.07351308854498839, 0.07351308854498839, 0.07351308854498839, 0.10018972105705448, 0.10018972105705448, 0.10018972105705448, 0.10202043864208976, 0.10202043864208976, 0.10202043864208976, 0.10705380507242424, 0.10705380507242424, 0.10705380507242424, 0.08478020457067903, 0.08478020457067903, 0.08478020457067903, 0.10121938442443024, 0.10121938442443024, 0.10121938442443024, 0.0787324786151612, 0.0787324786151612, 0.0787324786151612, 0.867777286247637, 0.867777286247637, 0.867777286247637, 0.9143649888702736, 0.9143649888702736, 0.9143649888702736, 0.9077001605240258, 0.9077001605240258, 0.9077001605240258, 0.2276669832292717, 0.2276669832292717, 0.2276669832292717, 0.43399708500789325, 0.43399708500789325, 0.43399708500789325, 0.2761330389248836, 0.2761330389248836, 0.2761330389248836, 0.7459629133857535, 0.7459629133857535, 0.7459629133857535, 0.8537728003439787, 0.8537728003439787, 0.8537728003439787, 0.832240371646856, 0.832240371646856, 0.832240371646856, 0.2663192453734663, 0.2663192453734663, 0.2663192453734663, 0.17377701756941222, 0.17377701756941222, 0.17377701756941222, 0.1462822778220879, 0.1462822778220879, 0.1462822778220879, 0.24143936130146693, 0.24143936130146693, 0.24143936130146693, 0.16448208149271337, 0.16448208149271337, 0.16448208149271337, 0.22830724342668618, 0.22830724342668618, 0.22830724342668618, 0.5377341573217878, 0.5377341573217878, 0.5377341573217878, 0.5299069093510571, 0.5299069093510571, 0.5299069093510571, 0.38511375775048495, 0.38511375775048495, 0.38511375775048495, 0.6797853045997797, 0.6797853045997797, 0.6797853045997797, 0.1206871943308091, 0.1206871943308091, 0.1206871943308091, 0.6529701861927801, 0.6529701861927801, 0.6529701861927801, 0.2043407890021003, 0.2043407890021003, 0.2043407890021003, 0.34504141231280605, 0.34504141231280605, 0.34504141231280605, 0.2329174007411421, 0.2329174007411421, 0.2329174007411421, 0.38789540090333263, 0.38789540090333263, 0.38789540090333263, 0.3989783070067895, 0.3989783070067895, 0.3989783070067895, 0.40108919511343366, 0.40108919511343366, 0.40108919511343366, 0.6753136526662384, 0.6753136526662384, 0.6753136526662384, 0.5824471030544423, 0.5824471030544423, 0.5824471030544423, 0.7262678990054162, 0.7262678990054162, 0.7262678990054162, 0.12127376606714801, 0.12127376606714801, 0.12127376606714801, 0.10758950020519276, 0.10758950020519276, 0.10758950020519276, 0.09083398486612893, 0.09083398486612893, 0.09083398486612893, 0.14119911645874472, 0.14119911645874472, 0.14119911645874472, 0.13457254062807855, 0.13457254062807855, 0.13457254062807855, 0.28835738551546697, 0.28835738551546697, 0.28835738551546697, 0.4108288108758156, 0.4108288108758156, 0.4108288108758156, 0.3727605700002581, 0.3727605700002581, 0.3727605700002581, 0.4137233669267808, 0.4137233669267808, 0.4137233669267808, 0.3433452316889928, 0.3433452316889928, 0.3433452316889928, 0.35199553596752864, 0.35199553596752864, 0.35199553596752864, 0.3363922640344754, 0.3363922640344754, 0.3363922640344754, 0.21214909439031715, 0.21214909439031715, 0.21214909439031715, 0.19056167719220618, 0.19056167719220618, 0.19056167719220618, 0.20177037927180685, 0.20177037927180685, 0.20177037927180685, 0.18120728768689842, 0.18120728768689842, 0.18120728768689842, 0.18143238567300546, 0.18143238567300546, 0.18143238567300546, 0.1853371218145181, 0.1853371218145181, 0.1853371218145181, 0.8307977039784535, 0.8307977039784535, 0.8307977039784535, 0.3781041752220189, 0.3781041752220189, 0.3781041752220189, 0.6977342831224355, 0.6977342831224355, 0.6977342831224355, 0.20681879820476956, 0.20681879820476956, 0.20681879820476956, 0.20419701537809443, 0.20419701537809443, 0.20419701537809443, 0.16442723271475568, 0.16442723271475568, 0.16442723271475568, 0.1757857137083989, 0.1757857137083989, 0.1757857137083989, 0.1859366876693972, 0.1859366876693972, 0.1859366876693972, 0.1679721779116906, 0.1679721779116906, 0.1679721779116906, 0.07892822391203447, 0.07892822391203447, 0.07892822391203447, 0.09051044934876296, 0.09051044934876296, 0.09051044934876296, 0.08188145220055298, 0.08188145220055298, 0.08188145220055298]}, "mutation_prompt": null}
{"id": "651bd948-7f14-41e0-9b4b-9d9a174ab592", "solution": "import numpy as np\n\nclass AdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly increased scaling factor for diversity\n        self.CR = 0.8  # Slightly reduced crossover rate for balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.2 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Adaptive Crossover Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.15 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search with Dynamic Step Size\n                if np.random.rand() < 0.4:  # Increased frequency for local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.12 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.3)  # Adjusted reduction for finesse\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Reduced iterations for quicker refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveHybridOptimizer", "description": "A novel metaheuristic blending differential evolution with adaptive local search and enhanced adaptive crossover for efficient global exploration and local refinement.", "configspace": "", "generation": 66, "fitness": 0.3392465217771958, "feedback": "The algorithm AdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.708360801450555, 0.708360801450555, 0.708360801450555, 0.7543803682252681, 0.7543803682252681, 0.7543803682252681, 0.7430046498993793, 0.7430046498993793, 0.7430046498993793, 0.4858275183868477, 0.4858275183868477, 0.4858275183868477, 0.5209162471531928, 0.5209162471531928, 0.5209162471531928, 0.5519169327983819, 0.5519169327983819, 0.5519169327983819, 0.09545038640321202, 0.09545038640321202, 0.09545038640321202, 0.10411759582289037, 0.10411759582289037, 0.10411759582289037, 0.09262424407230896, 0.09262424407230896, 0.09262424407230896, 0.0902868915801639, 0.0902868915801639, 0.0902868915801639, 0.09823064566998962, 0.09823064566998962, 0.09823064566998962, 0.10173956924445304, 0.10173956924445304, 0.10173956924445304, 0.9610553517685221, 0.9610553517685221, 0.9610553517685221, 0.9310435032779111, 0.9310435032779111, 0.9310435032779111, 0.909562594914757, 0.909562594914757, 0.909562594914757, 0.38259586361920284, 0.38259586361920284, 0.38259586361920284, 0.4293864062967807, 0.4293864062967807, 0.4293864062967807, 0.40472960936696123, 0.40472960936696123, 0.40472960936696123, 0.7111083913609173, 0.7111083913609173, 0.7111083913609173, 0.7301150469980626, 0.7301150469980626, 0.7301150469980626, 0.738634569664582, 0.738634569664582, 0.738634569664582, 0.21527765576984925, 0.21527765576984925, 0.21527765576984925, 0.2026423973609207, 0.2026423973609207, 0.2026423973609207, 0.38889049990148317, 0.38889049990148317, 0.38889049990148317, 0.18330130031790082, 0.18330130031790082, 0.18330130031790082, 0.23189342112722156, 0.23189342112722156, 0.23189342112722156, 0.1874450177019099, 0.1874450177019099, 0.1874450177019099, 0.3532722625412824, 0.3532722625412824, 0.3532722625412824, 0.32093006758766185, 0.32093006758766185, 0.32093006758766185, 0.3275981294964959, 0.3275981294964959, 0.3275981294964959, 0.48498705614045845, 0.48498705614045845, 0.48498705614045845, 0.5297683648792668, 0.5297683648792668, 0.5297683648792668, 0.4947474526911275, 0.4947474526911275, 0.4947474526911275, 0.11409394560384845, 0.11409394560384845, 0.11409394560384845, 0.23274174420550575, 0.23274174420550575, 0.23274174420550575, 0.12262825646908981, 0.12262825646908981, 0.12262825646908981, 0.2601390923743814, 0.2601390923743814, 0.2601390923743814, 0.2657672933840134, 0.2657672933840134, 0.2657672933840134, 0.2755741234396455, 0.2755741234396455, 0.2755741234396455, 0.6490468739817812, 0.6490468739817812, 0.6490468739817812, 0.6306558460934302, 0.6306558460934302, 0.6306558460934302, 0.6609773830602799, 0.6609773830602799, 0.6609773830602799, 0.09451519106251671, 0.09451519106251671, 0.09451519106251671, 0.08709374891798727, 0.08709374891798727, 0.08709374891798727, 0.0934835621701543, 0.0934835621701543, 0.0934835621701543, 0.14424534034180747, 0.14424534034180747, 0.14424534034180747, 0.14057388585780495, 0.14057388585780495, 0.14057388585780495, 0.1271012927745182, 0.1271012927745182, 0.1271012927745182, 0.3610313551926506, 0.3610313551926506, 0.3610313551926506, 0.3628651237368564, 0.3628651237368564, 0.3628651237368564, 0.3962061338622339, 0.3962061338622339, 0.3962061338622339, 0.28092176045871864, 0.28092176045871864, 0.28092176045871864, 0.26327723190855445, 0.26327723190855445, 0.26327723190855445, 0.27388807392643344, 0.27388807392643344, 0.27388807392643344, 0.20393841944820157, 0.20393841944820157, 0.20393841944820157, 0.22504361391337357, 0.22504361391337357, 0.22504361391337357, 0.19423243220506303, 0.19423243220506303, 0.19423243220506303, 0.1884841907203496, 0.1884841907203496, 0.1884841907203496, 0.17151091657753426, 0.17151091657753426, 0.17151091657753426, 0.17704440249204167, 0.17704440249204167, 0.17704440249204167, 0.7893571470712664, 0.7893571470712664, 0.7893571470712664, 0.17646090822571936, 0.17646090822571936, 0.17646090822571936, 0.17822140227441374, 0.17822140227441374, 0.17822140227441374, 0.16453957579865963, 0.16453957579865963, 0.16453957579865963, 0.1983123460625068, 0.1983123460625068, 0.1983123460625068, 0.6779236872489555, 0.6779236872489555, 0.6779236872489555, 0.18019381099428033, 0.18019381099428033, 0.18019381099428033, 0.18375828007006545, 0.18375828007006545, 0.18375828007006545, 0.18761277725872771, 0.18761277725872771, 0.18761277725872771, 0.07606974222988772, 0.07606974222988772, 0.07606974222988772, 0.07263908545307263, 0.07263908545307263, 0.07263908545307263, 0.07773875760184723, 0.07773875760184723, 0.07773875760184723]}, "mutation_prompt": null}
{"id": "cf2cd09e-d92a-41f6-a33e-b8fa000f24b2", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:  # Slightly more frequent local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # More aggressive reduction\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased iterations for local refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveMultiStrategyDE", "description": "A hybrid optimization algorithm combining multi-strategy adaptive differential evolution with stochastic local search to balance exploration and exploitation effectively.", "configspace": "", "generation": 67, "fitness": 0.3550376454869543, "feedback": "The algorithm AdaptiveMultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.7644817795223594, 0.7644817795223594, 0.7644817795223594, 0.7823922173693952, 0.7823922173693952, 0.7823922173693952, 0.7795822046501657, 0.7795822046501657, 0.7795822046501657, 0.3224680667315555, 0.3224680667315555, 0.3224680667315555, 0.5971416287068714, 0.5971416287068714, 0.5971416287068714, 0.07351308854498839, 0.07351308854498839, 0.07351308854498839, 0.10018972105705448, 0.10018972105705448, 0.10018972105705448, 0.10202043864208976, 0.10202043864208976, 0.10202043864208976, 0.10705380507242424, 0.10705380507242424, 0.10705380507242424, 0.08478020457067903, 0.08478020457067903, 0.08478020457067903, 0.10121938442443024, 0.10121938442443024, 0.10121938442443024, 0.0787324786151612, 0.0787324786151612, 0.0787324786151612, 0.867777286247637, 0.867777286247637, 0.867777286247637, 0.9143649888702736, 0.9143649888702736, 0.9143649888702736, 0.9077001605240258, 0.9077001605240258, 0.9077001605240258, 0.2276669832292717, 0.2276669832292717, 0.2276669832292717, 0.43399708500789325, 0.43399708500789325, 0.43399708500789325, 0.2761330389248836, 0.2761330389248836, 0.2761330389248836, 0.7459629133857535, 0.7459629133857535, 0.7459629133857535, 0.8537728003439787, 0.8537728003439787, 0.8537728003439787, 0.832240371646856, 0.832240371646856, 0.832240371646856, 0.2663192453734663, 0.2663192453734663, 0.2663192453734663, 0.17377701756941222, 0.17377701756941222, 0.17377701756941222, 0.1462822778220879, 0.1462822778220879, 0.1462822778220879, 0.24143936130146693, 0.24143936130146693, 0.24143936130146693, 0.16448208149271337, 0.16448208149271337, 0.16448208149271337, 0.22830724342668618, 0.22830724342668618, 0.22830724342668618, 0.5377341573217878, 0.5377341573217878, 0.5377341573217878, 0.5299069093510571, 0.5299069093510571, 0.5299069093510571, 0.38511375775048495, 0.38511375775048495, 0.38511375775048495, 0.6797853045997797, 0.6797853045997797, 0.6797853045997797, 0.1206871943308091, 0.1206871943308091, 0.1206871943308091, 0.6529701861927801, 0.6529701861927801, 0.6529701861927801, 0.2043407890021003, 0.2043407890021003, 0.2043407890021003, 0.34504141231280605, 0.34504141231280605, 0.34504141231280605, 0.2329174007411421, 0.2329174007411421, 0.2329174007411421, 0.38789540090333263, 0.38789540090333263, 0.38789540090333263, 0.3989783070067895, 0.3989783070067895, 0.3989783070067895, 0.40108919511343366, 0.40108919511343366, 0.40108919511343366, 0.6753136526662384, 0.6753136526662384, 0.6753136526662384, 0.5824471030544423, 0.5824471030544423, 0.5824471030544423, 0.7262678990054162, 0.7262678990054162, 0.7262678990054162, 0.12127376606714801, 0.12127376606714801, 0.12127376606714801, 0.10758950020519276, 0.10758950020519276, 0.10758950020519276, 0.09083398486612893, 0.09083398486612893, 0.09083398486612893, 0.14119911645874472, 0.14119911645874472, 0.14119911645874472, 0.13457254062807855, 0.13457254062807855, 0.13457254062807855, 0.28835738551546697, 0.28835738551546697, 0.28835738551546697, 0.4108288108758156, 0.4108288108758156, 0.4108288108758156, 0.3727605700002581, 0.3727605700002581, 0.3727605700002581, 0.4137233669267808, 0.4137233669267808, 0.4137233669267808, 0.3433452316889928, 0.3433452316889928, 0.3433452316889928, 0.35199553596752864, 0.35199553596752864, 0.35199553596752864, 0.3363922640344754, 0.3363922640344754, 0.3363922640344754, 0.21214909439031715, 0.21214909439031715, 0.21214909439031715, 0.19056167719220618, 0.19056167719220618, 0.19056167719220618, 0.20177037927180685, 0.20177037927180685, 0.20177037927180685, 0.18120728768689842, 0.18120728768689842, 0.18120728768689842, 0.18143238567300546, 0.18143238567300546, 0.18143238567300546, 0.1853371218145181, 0.1853371218145181, 0.1853371218145181, 0.8307977039784535, 0.8307977039784535, 0.8307977039784535, 0.3781041752220189, 0.3781041752220189, 0.3781041752220189, 0.6977342831224355, 0.6977342831224355, 0.6977342831224355, 0.20681879820476956, 0.20681879820476956, 0.20681879820476956, 0.20419701537809443, 0.20419701537809443, 0.20419701537809443, 0.16442723271475568, 0.16442723271475568, 0.16442723271475568, 0.1757857137083989, 0.1757857137083989, 0.1757857137083989, 0.1859366876693972, 0.1859366876693972, 0.1859366876693972, 0.1679721779116906, 0.1679721779116906, 0.1679721779116906, 0.07892822391203447, 0.07892822391203447, 0.07892822391203447, 0.09051044934876296, 0.09051044934876296, 0.09051044934876296, 0.08188145220055298, 0.08188145220055298, 0.08188145220055298]}, "mutation_prompt": null}
{"id": "3e120fee-b615-4470-9cd5-199ae089dc77", "solution": "import numpy as np\n\nclass EnhancedSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Adjusted mutation factor for better exploration\n        self.CR = 0.85  # Adjusted crossover rate for improved exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                # Adjusted mutant calculation for diversification\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.2 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.15 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.4:  # Increased chance of local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # Increased step size for deeper search\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):  # Increased iterations for more thorough local refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedSwarmHybrid", "description": "A novel hybrid of differential evolution and adaptive local search with intensified exploration and exploitation balance through dynamic crossover and mutation strategies.", "configspace": "", "generation": 68, "fitness": 0.31281197627433693, "feedback": "The algorithm EnhancedSwarmHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.6939041508074539, 0.6939041508074539, 0.6939041508074539, 0.6650094449465509, 0.6650094449465509, 0.6650094449465509, 0.7363200788068912, 0.7363200788068912, 0.7363200788068912, 0.4496191097853397, 0.4496191097853397, 0.4496191097853397, 0.41906645558563393, 0.41906645558563393, 0.41906645558563393, 0.35880894813943853, 0.35880894813943853, 0.35880894813943853, 0.09557228953242558, 0.09557228953242558, 0.09557228953242558, 0.08355552227874485, 0.08355552227874485, 0.08355552227874485, 0.0875052675087904, 0.0875052675087904, 0.0875052675087904, 0.07980385157381575, 0.07980385157381575, 0.07980385157381575, 0.09024173822362958, 0.09024173822362958, 0.09024173822362958, 0.08134787704508739, 0.08134787704508739, 0.08134787704508739, 0.9166358445042525, 0.9166358445042525, 0.9166358445042525, 0.9197309337392376, 0.9197309337392376, 0.9197309337392376, 0.9257932071368205, 0.9257932071368205, 0.9257932071368205, 0.3448983195450075, 0.3448983195450075, 0.3448983195450075, 0.3399263231920855, 0.3399263231920855, 0.3399263231920855, 0.3589266542483611, 0.3589266542483611, 0.3589266542483611, 0.7176272808946471, 0.7176272808946471, 0.7176272808946471, 0.7417068339471997, 0.7417068339471997, 0.7417068339471997, 0.6855845088375956, 0.6855845088375956, 0.6855845088375956, 0.20156657288751467, 0.20156657288751467, 0.20156657288751467, 0.18337844690310134, 0.18337844690310134, 0.18337844690310134, 0.14050308289403834, 0.14050308289403834, 0.14050308289403834, 0.15630294863853067, 0.15630294863853067, 0.15630294863853067, 0.17031671551714722, 0.17031671551714722, 0.17031671551714722, 0.16786319158692253, 0.16786319158692253, 0.16786319158692253, 0.3910748999971697, 0.3910748999971697, 0.3910748999971697, 0.32051480616049344, 0.32051480616049344, 0.32051480616049344, 0.3660678860081784, 0.3660678860081784, 0.3660678860081784, 0.522196651263247, 0.522196651263247, 0.522196651263247, 0.43293880874057233, 0.43293880874057233, 0.43293880874057233, 0.506549916761553, 0.506549916761553, 0.506549916761553, 0.102732112247934, 0.102732112247934, 0.102732112247934, 0.12882801044240444, 0.12882801044240444, 0.12882801044240444, 0.17487040373398355, 0.17487040373398355, 0.17487040373398355, 0.25850534824947535, 0.25850534824947535, 0.25850534824947535, 0.2712120403770254, 0.2712120403770254, 0.2712120403770254, 0.2587553943153954, 0.2587553943153954, 0.2587553943153954, 0.6005929840806801, 0.6005929840806801, 0.6005929840806801, 0.5831482797039056, 0.5831482797039056, 0.5831482797039056, 0.5889815008883845, 0.5889815008883845, 0.5889815008883845, 0.11423868014768068, 0.11423868014768068, 0.11423868014768068, 0.07820996658408663, 0.07820996658408663, 0.07820996658408663, 0.08841394262342361, 0.08841394262342361, 0.08841394262342361, 0.13977308078241202, 0.13977308078241202, 0.13977308078241202, 0.13782470998548613, 0.13782470998548613, 0.13782470998548613, 0.13240196377982594, 0.13240196377982594, 0.13240196377982594, 0.32526995762695166, 0.32526995762695166, 0.32526995762695166, 0.33201766590364423, 0.33201766590364423, 0.33201766590364423, 0.3279515061048691, 0.3279515061048691, 0.3279515061048691, 0.2503034736308558, 0.2503034736308558, 0.2503034736308558, 0.297088659322278, 0.297088659322278, 0.297088659322278, 0.29280500680103416, 0.29280500680103416, 0.29280500680103416, 0.2013192525837817, 0.2013192525837817, 0.2013192525837817, 0.20604721278338778, 0.20604721278338778, 0.20604721278338778, 0.18877578079160062, 0.18877578079160062, 0.18877578079160062, 0.18170171634616394, 0.18170171634616394, 0.18170171634616394, 0.18493202580259172, 0.18493202580259172, 0.18493202580259172, 0.17290214497418255, 0.17290214497418255, 0.17290214497418255, 0.6511589938002891, 0.6511589938002891, 0.6511589938002891, 0.17037783151749009, 0.17037783151749009, 0.17037783151749009, 0.4050019550051869, 0.4050019550051869, 0.4050019550051869, 0.20123568092199362, 0.20123568092199362, 0.20123568092199362, 0.207472410417733, 0.207472410417733, 0.207472410417733, 0.15092963357236566, 0.15092963357236566, 0.15092963357236566, 0.17868562325623283, 0.17868562325623283, 0.17868562325623283, 0.18877168232627717, 0.18877168232627717, 0.18877168232627717, 0.17659758057957298, 0.17659758057957298, 0.17659758057957298, 0.07316141971809753, 0.07316141971809753, 0.07316141971809753, 0.07442158165430413, 0.07442158165430413, 0.07442158165430413, 0.07418651073179405, 0.07418651073179405, 0.07418651073179405]}, "mutation_prompt": null}
{"id": "7681f513-14f2-4995-bd5f-7f24735ba9d9", "solution": "import numpy as np\n\nclass EnhancedSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.35:  # Slightly more frequent local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # More aggressive reduction\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):  # Increased iterations for local refinement\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedSwarmHybrid", "description": "A novel metaheuristic combining differential evolution and adaptive local search with enhanced crossover strategies for robust exploration and exploitation.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.7644817795223594, 0.7644817795223594, 0.7644817795223594, 0.7823922173693952, 0.7823922173693952, 0.7823922173693952, 0.7795822046501657, 0.7795822046501657, 0.7795822046501657, 0.3224680667315555, 0.3224680667315555, 0.3224680667315555, 0.5971416287068714, 0.5971416287068714, 0.5971416287068714, 0.07351308854498839, 0.07351308854498839, 0.07351308854498839, 0.10018972105705448, 0.10018972105705448, 0.10018972105705448, 0.10202043864208976, 0.10202043864208976, 0.10202043864208976, 0.10705380507242424, 0.10705380507242424, 0.10705380507242424, 0.08478020457067903, 0.08478020457067903, 0.08478020457067903, 0.10121938442443024, 0.10121938442443024, 0.10121938442443024, 0.0787324786151612, 0.0787324786151612, 0.0787324786151612, 0.867777286247637, 0.867777286247637, 0.867777286247637, 0.9143649888702736, 0.9143649888702736, 0.9143649888702736, 0.9077001605240258, 0.9077001605240258, 0.9077001605240258, 0.2276669832292717, 0.2276669832292717, 0.2276669832292717, 0.43399708500789325, 0.43399708500789325, 0.43399708500789325, 0.2761330389248836, 0.2761330389248836, 0.2761330389248836, 0.7459629133857535, 0.7459629133857535, 0.7459629133857535, 0.8537728003439787, 0.8537728003439787, 0.8537728003439787, 0.832240371646856, 0.832240371646856, 0.832240371646856, 0.2663192453734663, 0.2663192453734663, 0.2663192453734663, 0.17377701756941222, 0.17377701756941222, 0.17377701756941222, 0.1462822778220879, 0.1462822778220879, 0.1462822778220879, 0.24143936130146693, 0.24143936130146693, 0.24143936130146693, 0.16448208149271337, 0.16448208149271337, 0.16448208149271337, 0.22830724342668618, 0.22830724342668618, 0.22830724342668618, 0.5377341573217878, 0.5377341573217878, 0.5377341573217878, 0.5299069093510571, 0.5299069093510571, 0.5299069093510571, 0.38511375775048495, 0.38511375775048495, 0.38511375775048495, 0.6797853045997797, 0.6797853045997797, 0.6797853045997797, 0.1206871943308091, 0.1206871943308091, 0.1206871943308091, 0.6529701861927801, 0.6529701861927801, 0.6529701861927801, 0.2043407890021003, 0.2043407890021003, 0.2043407890021003, 0.34504141231280605, 0.34504141231280605, 0.34504141231280605, 0.2329174007411421, 0.2329174007411421, 0.2329174007411421, 0.38789540090333263, 0.38789540090333263, 0.38789540090333263, 0.3989783070067895, 0.3989783070067895, 0.3989783070067895, 0.40108919511343366, 0.40108919511343366, 0.40108919511343366, 0.6753136526662384, 0.6753136526662384, 0.6753136526662384, 0.5824471030544423, 0.5824471030544423, 0.5824471030544423, 0.7262678990054162, 0.7262678990054162, 0.7262678990054162, 0.12127376606714801, 0.12127376606714801, 0.12127376606714801, 0.10758950020519276, 0.10758950020519276, 0.10758950020519276, 0.09083398486612893, 0.09083398486612893, 0.09083398486612893, 0.14119911645874472, 0.14119911645874472, 0.14119911645874472, 0.13457254062807855, 0.13457254062807855, 0.13457254062807855, 0.28835738551546697, 0.28835738551546697, 0.28835738551546697, 0.4108288108758156, 0.4108288108758156, 0.4108288108758156, 0.3727605700002581, 0.3727605700002581, 0.3727605700002581, 0.4137233669267808, 0.4137233669267808, 0.4137233669267808, 0.3433452316889928, 0.3433452316889928, 0.3433452316889928, 0.35199553596752864, 0.35199553596752864, 0.35199553596752864, 0.3363922640344754, 0.3363922640344754, 0.3363922640344754, 0.21214909439031715, 0.21214909439031715, 0.21214909439031715, 0.19056167719220618, 0.19056167719220618, 0.19056167719220618, 0.20177037927180685, 0.20177037927180685, 0.20177037927180685, 0.18120728768689842, 0.18120728768689842, 0.18120728768689842, 0.18143238567300546, 0.18143238567300546, 0.18143238567300546, 0.1853371218145181, 0.1853371218145181, 0.1853371218145181, 0.8307977039784535, 0.8307977039784535, 0.8307977039784535, 0.3781041752220189, 0.3781041752220189, 0.3781041752220189, 0.6977342831224355, 0.6977342831224355, 0.6977342831224355, 0.20681879820476956, 0.20681879820476956, 0.20681879820476956, 0.20419701537809443, 0.20419701537809443, 0.20419701537809443, 0.16442723271475568, 0.16442723271475568, 0.16442723271475568, 0.1757857137083989, 0.1757857137083989, 0.1757857137083989, 0.1859366876693972, 0.1859366876693972, 0.1859366876693972, 0.1679721779116906, 0.1679721779116906, 0.1679721779116906, 0.07892822391203447, 0.07892822391203447, 0.07892822391203447, 0.09051044934876296, 0.09051044934876296, 0.09051044934876296, 0.08188145220055298, 0.08188145220055298, 0.08188145220055298]}, "mutation_prompt": null}
{"id": "9a9c1ff5-6023-491d-8bbe-0637a5d1e978", "solution": "import numpy as np\n\nclass EnhancedSwarmHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly increased mutation factor for diversity\n        self.CR = 0.85  # Slightly decreased crossover rate for experimentation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.05 * (1 - evaluations / self.budget))  # Slightly reduced adaptation\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.4:  # Increased probability of local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.3)  # Slightly adjusted reduction\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Decreased iterations for faster exploration\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedSwarmHybrid", "description": "A novel metaheuristic enhancing differential evolution with adaptive local search and adaptive crossover strategies for improved exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.30484689201738485, "feedback": "The algorithm EnhancedSwarmHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.7260869647488286, 0.7260869647488286, 0.7260869647488286, 0.6964790872308942, 0.6964790872308942, 0.6964790872308942, 0.7012819489005419, 0.7012819489005419, 0.7012819489005419, 0.45464295175606784, 0.45464295175606784, 0.45464295175606784, 0.47728906587794895, 0.47728906587794895, 0.47728906587794895, 0.4846103309331823, 0.4846103309331823, 0.4846103309331823, 0.1087589962675427, 0.1087589962675427, 0.1087589962675427, 0.09281893591444079, 0.09281893591444079, 0.09281893591444079, 0.09364647145727589, 0.09364647145727589, 0.09364647145727589, 0.09304698749344409, 0.09304698749344409, 0.09304698749344409, 0.08493255457508808, 0.08493255457508808, 0.08493255457508808, 0.08188413112293125, 0.08188413112293125, 0.08188413112293125, 0.9153840292130518, 0.9153840292130518, 0.9153840292130518, 0.911272129916287, 0.911272129916287, 0.911272129916287, 0.8750690376078901, 0.8750690376078901, 0.8750690376078901, 0.3328509487870125, 0.3328509487870125, 0.3328509487870125, 0.34432841385820123, 0.34432841385820123, 0.34432841385820123, 0.35640303207366153, 0.35640303207366153, 0.35640303207366153, 0.639612220438054, 0.639612220438054, 0.639612220438054, 0.6093899503821929, 0.6093899503821929, 0.6093899503821929, 0.6320016277279992, 0.6320016277279992, 0.6320016277279992, 0.16953399586596674, 0.16953399586596674, 0.16953399586596674, 0.18372843645766257, 0.18372843645766257, 0.18372843645766257, 0.20072998178341672, 0.20072998178341672, 0.20072998178341672, 0.20097383043654227, 0.20097383043654227, 0.20097383043654227, 0.18433297217599032, 0.18433297217599032, 0.18433297217599032, 0.18640379049144684, 0.18640379049144684, 0.18640379049144684, 0.21287527349166246, 0.21287527349166246, 0.21287527349166246, 0.20511445826274022, 0.20511445826274022, 0.20511445826274022, 0.22139230369505547, 0.22139230369505547, 0.22139230369505547, 0.3802583571472088, 0.3802583571472088, 0.3802583571472088, 0.35740518186548953, 0.35740518186548953, 0.35740518186548953, 0.38634166948984194, 0.38634166948984194, 0.38634166948984194, 0.08947371114039926, 0.08947371114039926, 0.08947371114039926, 0.06814507944106973, 0.06814507944106973, 0.06814507944106973, 0.05167381478252886, 0.05167381478252886, 0.05167381478252886, 0.19065659644553423, 0.19065659644553423, 0.19065659644553423, 0.2137998305177976, 0.2137998305177976, 0.2137998305177976, 0.200266998520661, 0.200266998520661, 0.200266998520661, 0.5660644486869524, 0.5660644486869524, 0.5660644486869524, 0.5552366825943116, 0.5552366825943116, 0.5552366825943116, 0.5770189821346888, 0.5770189821346888, 0.5770189821346888, 0.09310080820776179, 0.09310080820776179, 0.09310080820776179, 0.09076368316567984, 0.09076368316567984, 0.09076368316567984, 0.09704009745838071, 0.09704009745838071, 0.09704009745838071, 0.17973231904171005, 0.17973231904171005, 0.17973231904171005, 0.14624484381184522, 0.14624484381184522, 0.14624484381184522, 0.1253762685851072, 0.1253762685851072, 0.1253762685851072, 0.2984723904487234, 0.2984723904487234, 0.2984723904487234, 0.325499653311224, 0.325499653311224, 0.325499653311224, 0.35345252672108773, 0.35345252672108773, 0.35345252672108773, 0.24168607885672844, 0.24168607885672844, 0.24168607885672844, 0.2523799117849125, 0.2523799117849125, 0.2523799117849125, 0.2267658480104271, 0.2267658480104271, 0.2267658480104271, 0.19391585250713128, 0.19391585250713128, 0.19391585250713128, 0.19798815676159243, 0.19798815676159243, 0.19798815676159243, 0.18951973463728422, 0.18951973463728422, 0.18951973463728422, 0.1745409557039851, 0.1745409557039851, 0.1745409557039851, 0.17651852895332598, 0.17651852895332598, 0.17651852895332598, 0.1815920551123591, 0.1815920551123591, 0.1815920551123591, 0.6351629591009856, 0.6351629591009856, 0.6351629591009856, 0.5166832213859118, 0.5166832213859118, 0.5166832213859118, 0.4847068621023747, 0.4847068621023747, 0.4847068621023747, 0.1943578463137644, 0.1943578463137644, 0.1943578463137644, 0.19907923684005535, 0.19907923684005535, 0.19907923684005535, 0.4650767575187815, 0.4650767575187815, 0.4650767575187815, 0.19657656928354206, 0.19657656928354206, 0.19657656928354206, 0.18548111813307244, 0.18548111813307244, 0.18548111813307244, 0.18980548353727678, 0.18980548353727678, 0.18980548353727678, 0.07855411876145824, 0.07855411876145824, 0.07855411876145824, 0.07359470212098063, 0.07359470212098063, 0.07359470212098063, 0.07209142536473212, 0.07209142536473212, 0.07209142536473212]}, "mutation_prompt": null}
{"id": "cd465784-f88e-4a77-809f-0598492a4dd3", "solution": "import numpy as np\n\nclass RefinedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.6  # Slightly adjusted scaling factor\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.12 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.15 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Local Search\n                if np.random.rand() < 0.30:  # More frequent local search\n                    trial = self.adaptive_stochastic_local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_local_search(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # More aggressive reduction\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Reduced iterations for balance\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "RefinedSwarmOptimizer", "description": "An enhanced differential evolution algorithm incorporating swarm intelligence and dynamic local search strategies with a refined focus on exploration.", "configspace": "", "generation": 71, "fitness": 0.36914844295248656, "feedback": "The algorithm RefinedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "9c8efefc-ce01-4eec-9e82-ab6780285d3f", "metadata": {"aucs": [0.7298705921825442, 0.7298705921825442, 0.7298705921825442, 0.7294040627436363, 0.7294040627436363, 0.7294040627436363, 0.7545206992438506, 0.7545206992438506, 0.7545206992438506, 0.5444309489073682, 0.5444309489073682, 0.5444309489073682, 0.5245132454767227, 0.5245132454767227, 0.5245132454767227, 0.548431273513046, 0.548431273513046, 0.548431273513046, 0.09782324001117682, 0.09782324001117682, 0.09782324001117682, 0.10132636812383533, 0.10132636812383533, 0.10132636812383533, 0.11441358624531017, 0.11441358624531017, 0.11441358624531017, 0.08531028884917302, 0.08531028884917302, 0.08531028884917302, 0.09519039936601026, 0.09519039936601026, 0.09519039936601026, 0.08618869864523038, 0.08618869864523038, 0.08618869864523038, 0.8940599236308086, 0.8940599236308086, 0.8940599236308086, 0.9089891824969709, 0.9089891824969709, 0.9089891824969709, 0.9097864788813921, 0.9097864788813921, 0.9097864788813921, 0.3993365995139907, 0.3993365995139907, 0.3993365995139907, 0.40045153875707673, 0.40045153875707673, 0.40045153875707673, 0.4435900917600154, 0.4435900917600154, 0.4435900917600154, 0.7820116399739102, 0.7820116399739102, 0.7820116399739102, 0.7373285763458413, 0.7373285763458413, 0.7373285763458413, 0.7291568288452686, 0.7291568288452686, 0.7291568288452686, 0.1324197913028191, 0.1324197913028191, 0.1324197913028191, 0.18854496076050686, 0.18854496076050686, 0.18854496076050686, 0.17784952475588411, 0.17784952475588411, 0.17784952475588411, 0.25425569583530383, 0.25425569583530383, 0.25425569583530383, 0.35572435012791004, 0.35572435012791004, 0.35572435012791004, 0.3751775745300713, 0.3751775745300713, 0.3751775745300713, 0.4775443169013329, 0.4775443169013329, 0.4775443169013329, 0.45034740063794243, 0.45034740063794243, 0.45034740063794243, 0.49143476623661897, 0.49143476623661897, 0.49143476623661897, 0.5841552830056648, 0.5841552830056648, 0.5841552830056648, 0.547060382420756, 0.547060382420756, 0.547060382420756, 0.5716179707588589, 0.5716179707588589, 0.5716179707588589, 0.20147495371753477, 0.20147495371753477, 0.20147495371753477, 0.3231307126375992, 0.3231307126375992, 0.3231307126375992, 0.2502677757065891, 0.2502677757065891, 0.2502677757065891, 0.35675157059067675, 0.35675157059067675, 0.35675157059067675, 0.35513366746478525, 0.35513366746478525, 0.35513366746478525, 0.30564593299026765, 0.30564593299026765, 0.30564593299026765, 0.6952143922142632, 0.6952143922142632, 0.6952143922142632, 0.6768421447951446, 0.6768421447951446, 0.6768421447951446, 0.6802495433724954, 0.6802495433724954, 0.6802495433724954, 0.09622367357863859, 0.09622367357863859, 0.09622367357863859, 0.08361045800353217, 0.08361045800353217, 0.08361045800353217, 0.08821899337564376, 0.08821899337564376, 0.08821899337564376, 0.16223735183844779, 0.16223735183844779, 0.16223735183844779, 0.12230637999125138, 0.12230637999125138, 0.12230637999125138, 0.12201233431763936, 0.12201233431763936, 0.12201233431763936, 0.34149096842121474, 0.34149096842121474, 0.34149096842121474, 0.34726777202841275, 0.34726777202841275, 0.34726777202841275, 0.3539931461704693, 0.3539931461704693, 0.3539931461704693, 0.3094757222188491, 0.3094757222188491, 0.3094757222188491, 0.2664890459847451, 0.2664890459847451, 0.2664890459847451, 0.32189587123504193, 0.32189587123504193, 0.32189587123504193, 0.2022735321941881, 0.2022735321941881, 0.2022735321941881, 0.18671218195685935, 0.18671218195685935, 0.18671218195685935, 0.17596761231955094, 0.17596761231955094, 0.17596761231955094, 0.1753109861380332, 0.1753109861380332, 0.1753109861380332, 0.1868288668779683, 0.1868288668779683, 0.1868288668779683, 0.1863995300589768, 0.1863995300589768, 0.1863995300589768, 0.8329039315019132, 0.8329039315019132, 0.8329039315019132, 0.6458011330338045, 0.6458011330338045, 0.6458011330338045, 0.4940333008398802, 0.4940333008398802, 0.4940333008398802, 0.16285028382828381, 0.16285028382828381, 0.16285028382828381, 0.7115045682665491, 0.7115045682665491, 0.7115045682665491, 0.15591684853437693, 0.15591684853437693, 0.15591684853437693, 0.1792286099022975, 0.1792286099022975, 0.1792286099022975, 0.17478158685954315, 0.17478158685954315, 0.17478158685954315, 0.18572880409852832, 0.18572880409852832, 0.18572880409852832, 0.08146296439465017, 0.08146296439465017, 0.08146296439465017, 0.06756863907917665, 0.06756863907917665, 0.06756863907917665, 0.09121582125436056, 0.09121582125436056, 0.09121582125436056]}, "mutation_prompt": null}
{"id": "c641f349-f5f8-44e3-8de0-7c36452d27f0", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Adjusted scaling factor for enhanced diversity\n        self.CR = 0.9  # Increased crossover probability for more exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Swarm Influence\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Adaptive Stochastic Gradient Strategy\n                if np.random.rand() < 0.25:\n                    trial = self.adaptive_stochastic_gradient(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def adaptive_stochastic_gradient(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Maintain balance with reduced iterations\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveSwarmOptimizer", "description": "A novel adaptive differential evolution with swarm intelligence and stochastic gradient adaptation for diverse exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.3469503913752646, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "cd465784-f88e-4a77-809f-0598492a4dd3", "metadata": {"aucs": [0.6635498305012097, 0.6635498305012097, 0.6635498305012097, 0.6931843005245617, 0.6931843005245617, 0.6931843005245617, 0.67007123813557, 0.67007123813557, 0.67007123813557, 0.40156964940130024, 0.40156964940130024, 0.40156964940130024, 0.42544833456171305, 0.42544833456171305, 0.42544833456171305, 0.4942901755996666, 0.4942901755996666, 0.4942901755996666, 0.09202163426513976, 0.09202163426513976, 0.09202163426513976, 0.09200408585890851, 0.09200408585890851, 0.09200408585890851, 0.09445628119301397, 0.09445628119301397, 0.09445628119301397, 0.0843183792254456, 0.0843183792254456, 0.0843183792254456, 0.07142585080380592, 0.07142585080380592, 0.07142585080380592, 0.08522712160519563, 0.08522712160519563, 0.08522712160519563, 0.9056252634029948, 0.9056252634029948, 0.9056252634029948, 0.9233336480281428, 0.9233336480281428, 0.9233336480281428, 0.8786133167989966, 0.8786133167989966, 0.8786133167989966, 0.35317389292778156, 0.35317389292778156, 0.35317389292778156, 0.3770678034508468, 0.3770678034508468, 0.3770678034508468, 0.38153153269091966, 0.38153153269091966, 0.38153153269091966, 0.7498377374645084, 0.7498377374645084, 0.7498377374645084, 0.712125635469195, 0.712125635469195, 0.712125635469195, 0.7184143302629602, 0.7184143302629602, 0.7184143302629602, 0.23734555536625312, 0.23734555536625312, 0.23734555536625312, 0.3492006506991483, 0.3492006506991483, 0.3492006506991483, 0.2718094431491668, 0.2718094431491668, 0.2718094431491668, 0.28703687962619684, 0.28703687962619684, 0.28703687962619684, 0.32346976691896545, 0.32346976691896545, 0.32346976691896545, 0.2848062006875318, 0.2848062006875318, 0.2848062006875318, 0.34403189616965624, 0.34403189616965624, 0.34403189616965624, 0.4249002958795842, 0.4249002958795842, 0.4249002958795842, 0.32792756997367, 0.32792756997367, 0.32792756997367, 0.48891515972889643, 0.48891515972889643, 0.48891515972889643, 0.5069583765027497, 0.5069583765027497, 0.5069583765027497, 0.48430771286302554, 0.48430771286302554, 0.48430771286302554, 0.07858287286201793, 0.07858287286201793, 0.07858287286201793, 0.18944374613370374, 0.18944374613370374, 0.18944374613370374, 0.12863002782474342, 0.12863002782474342, 0.12863002782474342, 0.25754376640602816, 0.25754376640602816, 0.25754376640602816, 0.24520400567177625, 0.24520400567177625, 0.24520400567177625, 0.2637713393956699, 0.2637713393956699, 0.2637713393956699, 0.6240154281814148, 0.6240154281814148, 0.6240154281814148, 0.6605619310842779, 0.6605619310842779, 0.6605619310842779, 0.6093675320518643, 0.6093675320518643, 0.6093675320518643, 0.08734651456734321, 0.08734651456734321, 0.08734651456734321, 0.08550644990699108, 0.08550644990699108, 0.08550644990699108, 0.08902976671479479, 0.08902976671479479, 0.08902976671479479, 0.15458507729887283, 0.15458507729887283, 0.15458507729887283, 0.18779281592702235, 0.18779281592702235, 0.18779281592702235, 0.19604000443462788, 0.19604000443462788, 0.19604000443462788, 0.31153403103911403, 0.31153403103911403, 0.31153403103911403, 0.29738402999941704, 0.29738402999941704, 0.29738402999941704, 0.3228679969969257, 0.3228679969969257, 0.3228679969969257, 0.23837053066210834, 0.23837053066210834, 0.23837053066210834, 0.256893109605025, 0.256893109605025, 0.256893109605025, 0.23863031374027865, 0.23863031374027865, 0.23863031374027865, 0.2179584321928959, 0.2179584321928959, 0.2179584321928959, 0.19285729113597372, 0.19285729113597372, 0.19285729113597372, 0.2029546308360889, 0.2029546308360889, 0.2029546308360889, 0.17817484422438357, 0.17817484422438357, 0.17817484422438357, 0.17678810116538501, 0.17678810116538501, 0.17678810116538501, 0.1768613610449229, 0.1768613610449229, 0.1768613610449229, 0.7030286476138838, 0.7030286476138838, 0.7030286476138838, 0.6154727234117203, 0.6154727234117203, 0.6154727234117203, 0.5948778849327439, 0.5948778849327439, 0.5948778849327439, 0.20647988088267744, 0.20647988088267744, 0.20647988088267744, 0.49292742354178765, 0.49292742354178765, 0.49292742354178765, 0.7233247079096359, 0.7233247079096359, 0.7233247079096359, 0.18431743063726236, 0.18431743063726236, 0.18431743063726236, 0.1880579148644026, 0.1880579148644026, 0.1880579148644026, 0.17665488291907494, 0.17665488291907494, 0.17665488291907494, 0.0853358753081207, 0.0853358753081207, 0.0853358753081207, 0.07641533099813846, 0.07641533099813846, 0.07641533099813846, 0.06683997515921825, 0.06683997515921825, 0.06683997515921825]}, "mutation_prompt": null}
{"id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 73, "fitness": 0.3822070270332013, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "cd465784-f88e-4a77-809f-0598492a4dd3", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "3b78ffd1-764c-4284-b592-a8807a4e06c8", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "7f5f5c17-42ed-4f31-926f-13752a83bc9e", "solution": "import numpy as np\n\nclass EnhancedNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.8  # Modified scaling factor for balanced exploration and exploitation\n        self.CR = 0.85  # Slightly adjusted crossover probability for robustness\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Neighborhood Perturbation for Local Search\n                if np.random.rand() < 0.3:  # Increased likelihood of local refinement\n                    trial = self.neighborhood_perturbation(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def neighborhood_perturbation(self, solution, func, progress):\n        step_size = 0.08 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # Tuned perturbation size\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Increased iterations for thorough local exploration\n            perturbation = np.random.normal(0, step_size, self.dim)  # Gaussian perturbation for smooth search\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedNeighborhoodDE", "description": "An adaptive differential evolution algorithm enriched with a neighborhood perturbation to enhance local search and convergence speed.", "configspace": "", "generation": 75, "fitness": 0.21400078404461176, "feedback": "The algorithm EnhancedNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.44653935918208576, 0.44653935918208576, 0.44653935918208576, 0.5025905528603454, 0.5025905528603454, 0.5025905528603454, 0.5159264366625362, 0.5159264366625362, 0.5159264366625362, 0.20856184435954384, 0.20856184435954384, 0.20856184435954384, 0.19819603506585015, 0.19819603506585015, 0.19819603506585015, 0.18926677619356835, 0.18926677619356835, 0.18926677619356835, 0.09409488128736598, 0.09409488128736598, 0.09409488128736598, 0.09439359987898077, 0.09439359987898077, 0.09439359987898077, 0.0723682944922922, 0.0723682944922922, 0.0723682944922922, 0.06537184809530283, 0.06537184809530283, 0.06537184809530283, 0.06223226807423088, 0.06223226807423088, 0.06223226807423088, 0.0683500963743956, 0.0683500963743956, 0.0683500963743956, 0.8874419374955472, 0.8874419374955472, 0.8874419374955472, 0.9376117276787015, 0.9376117276787015, 0.9376117276787015, 0.9045795580515656, 0.9045795580515656, 0.9045795580515656, 0.21471441735898766, 0.21471441735898766, 0.21471441735898766, 0.20112171199436535, 0.20112171199436535, 0.20112171199436535, 0.2289108854392653, 0.2289108854392653, 0.2289108854392653, 0.2541216380203307, 0.2541216380203307, 0.2541216380203307, 0.40752725346437124, 0.40752725346437124, 0.40752725346437124, 0.44156928748952595, 0.44156928748952595, 0.44156928748952595, 0.14694357244677103, 0.14694357244677103, 0.14694357244677103, 0.13722338714221716, 0.13722338714221716, 0.13722338714221716, 0.14455805081648798, 0.14455805081648798, 0.14455805081648798, 0.12704971285390743, 0.12704971285390743, 0.12704971285390743, 0.14262165804718496, 0.14262165804718496, 0.14262165804718496, 0.13754143420824239, 0.13754143420824239, 0.13754143420824239, 0.07406804491748464, 0.07406804491748464, 0.07406804491748464, 0.07170875464472015, 0.07170875464472015, 0.07170875464472015, 0.09987194917123199, 0.09987194917123199, 0.09987194917123199, 0.20415179026906016, 0.20415179026906016, 0.20415179026906016, 0.19199789281040436, 0.19199789281040436, 0.19199789281040436, 0.21136251425538433, 0.21136251425538433, 0.21136251425538433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009475681554197535, 0.009475681554197535, 0.009475681554197535, 0.02194585949954797, 0.02194585949954797, 0.02194585949954797, 0.09581835045435272, 0.09581835045435272, 0.09581835045435272, 0.14181261532229217, 0.14181261532229217, 0.14181261532229217, 0.11579801822726421, 0.11579801822726421, 0.11579801822726421, 0.37904515084122425, 0.37904515084122425, 0.37904515084122425, 0.39920623286832346, 0.39920623286832346, 0.39920623286832346, 0.3935140997074361, 0.3935140997074361, 0.3935140997074361, 0.08844070099650148, 0.08844070099650148, 0.08844070099650148, 0.07716872062699953, 0.07716872062699953, 0.07716872062699953, 0.07284115243915823, 0.07284115243915823, 0.07284115243915823, 0.13661180348697033, 0.13661180348697033, 0.13661180348697033, 0.20358401122786896, 0.20358401122786896, 0.20358401122786896, 0.1474789436337851, 0.1474789436337851, 0.1474789436337851, 0.2213304785865703, 0.2213304785865703, 0.2213304785865703, 0.23576623787340867, 0.23576623787340867, 0.23576623787340867, 0.24903904767450336, 0.24903904767450336, 0.24903904767450336, 0.1947061615311888, 0.1947061615311888, 0.1947061615311888, 0.172899717347883, 0.172899717347883, 0.172899717347883, 0.17406642230017733, 0.17406642230017733, 0.17406642230017733, 0.16734608842124965, 0.16734608842124965, 0.16734608842124965, 0.17620591775715932, 0.17620591775715932, 0.17620591775715932, 0.19050466159009272, 0.19050466159009272, 0.19050466159009272, 0.1707284008898423, 0.1707284008898423, 0.1707284008898423, 0.17241768941693858, 0.17241768941693858, 0.17241768941693858, 0.17192356500014372, 0.17192356500014372, 0.17192356500014372, 0.4497800946024868, 0.4497800946024868, 0.4497800946024868, 0.16730023653927728, 0.16730023653927728, 0.16730023653927728, 0.175797922382656, 0.175797922382656, 0.175797922382656, 0.1950991395267908, 0.1950991395267908, 0.1950991395267908, 0.18530190608005248, 0.18530190608005248, 0.18530190608005248, 0.20407372256921485, 0.20407372256921485, 0.20407372256921485, 0.19332770956670442, 0.19332770956670442, 0.19332770956670442, 0.1887031018937586, 0.1887031018937586, 0.1887031018937586, 0.18888751878957044, 0.18888751878957044, 0.18888751878957044, 0.06711107131653848, 0.06711107131653848, 0.06711107131653848, 0.06844764266164871, 0.06844764266164871, 0.06844764266164871, 0.05986148490601495, 0.05986148490601495, 0.05986148490601495]}, "mutation_prompt": null}
{"id": "ed52a5a8-3639-4007-94ed-94a3b77916a6", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "c049fb6d-aaa1-467e-b6a0-e028352bb346", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.8  # Adaptive scaling factor for dynamic exploration\n        self.CR = 0.85  # Crossover probability tuned for balanced exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                local_factor = 0.1 * (1 - evaluations / self.budget)  # Adaptive local influence\n                mutant = np.clip(x0 + self.F * (x1 - x2) + local_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.05 * np.sin(np.pi * evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Dynamic Neighborhood Exploration\n                if np.random.rand() < 0.3:  # Adjusted exploration probability\n                    trial = self.dynamic_neighborhood_exploration(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def dynamic_neighborhood_exploration(self, solution, func, progress):\n        step_size = 0.08 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.1)  # Customized step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Enhanced iterations for better local search\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "An adaptive differential evolution algorithm enhanced with dynamic neighborhood exploration and adaptive scaling to improve exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.22660657057122718, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.5495325017423189, 0.5495325017423189, 0.5495325017423189, 0.5050853921966094, 0.5050853921966094, 0.5050853921966094, 0.5485770872079816, 0.5485770872079816, 0.5485770872079816, 0.2578162080234926, 0.2578162080234926, 0.2578162080234926, 0.239091298667634, 0.239091298667634, 0.239091298667634, 0.24618501632750545, 0.24618501632750545, 0.24618501632750545, 0.09724899845540713, 0.09724899845540713, 0.09724899845540713, 0.08931019997692258, 0.08931019997692258, 0.08931019997692258, 0.11036448085903139, 0.11036448085903139, 0.11036448085903139, 0.08111771992696049, 0.08111771992696049, 0.08111771992696049, 0.07984026322948956, 0.07984026322948956, 0.07984026322948956, 0.08735974774451483, 0.08735974774451483, 0.08735974774451483, 0.9206295102387133, 0.9206295102387133, 0.9206295102387133, 0.9020858679309055, 0.9020858679309055, 0.9020858679309055, 0.8871255116277273, 0.8871255116277273, 0.8871255116277273, 0.2355371383335686, 0.2355371383335686, 0.2355371383335686, 0.22548700064220406, 0.22548700064220406, 0.22548700064220406, 0.27056878572466636, 0.27056878572466636, 0.27056878572466636, 0.32632357789696687, 0.32632357789696687, 0.32632357789696687, 0.4053914561566905, 0.4053914561566905, 0.4053914561566905, 0.4485956036596036, 0.4485956036596036, 0.4485956036596036, 0.13514907323854708, 0.13514907323854708, 0.13514907323854708, 0.14185097496643995, 0.14185097496643995, 0.14185097496643995, 0.1246893750418907, 0.1246893750418907, 0.1246893750418907, 0.1448271495540161, 0.1448271495540161, 0.1448271495540161, 0.1422051856229356, 0.1422051856229356, 0.1422051856229356, 0.14288041556710085, 0.14288041556710085, 0.14288041556710085, 0.05427838749672298, 0.05427838749672298, 0.05427838749672298, 0.04895194149289728, 0.04895194149289728, 0.04895194149289728, 0.06383250771385651, 0.06383250771385651, 0.06383250771385651, 0.16310493767001155, 0.16310493767001155, 0.16310493767001155, 0.18376711172298654, 0.18376711172298654, 0.18376711172298654, 0.18056887484993078, 0.18056887484993078, 0.18056887484993078, 0.006044641235848358, 0.006044641235848358, 0.006044641235848358, 0.016489104952150946, 0.016489104952150946, 0.016489104952150946, 0.03152434124470582, 0.03152434124470582, 0.03152434124470582, 0.12119004070315076, 0.12119004070315076, 0.12119004070315076, 0.12137709008251929, 0.12137709008251929, 0.12137709008251929, 0.1093835308958101, 0.1093835308958101, 0.1093835308958101, 0.4257167604096005, 0.4257167604096005, 0.4257167604096005, 0.45124859106215187, 0.45124859106215187, 0.45124859106215187, 0.4299991335604002, 0.4299991335604002, 0.4299991335604002, 0.07767398535885173, 0.07767398535885173, 0.07767398535885173, 0.08623186422590645, 0.08623186422590645, 0.08623186422590645, 0.07989431233783595, 0.07989431233783595, 0.07989431233783595, 0.14631925906825582, 0.14631925906825582, 0.14631925906825582, 0.14860365138224785, 0.14860365138224785, 0.14860365138224785, 0.13858222486653793, 0.13858222486653793, 0.13858222486653793, 0.2540647845497953, 0.2540647845497953, 0.2540647845497953, 0.24384381838964242, 0.24384381838964242, 0.24384381838964242, 0.24896124462046532, 0.24896124462046532, 0.24896124462046532, 0.1986694603347594, 0.1986694603347594, 0.1986694603347594, 0.18348221922892538, 0.18348221922892538, 0.18348221922892538, 0.2021291318660693, 0.2021291318660693, 0.2021291318660693, 0.18710722274716696, 0.18710722274716696, 0.18710722274716696, 0.1899756552749986, 0.1899756552749986, 0.1899756552749986, 0.17090611408044165, 0.17090611408044165, 0.17090611408044165, 0.17143185149259754, 0.17143185149259754, 0.17143185149259754, 0.17703443244579298, 0.17703443244579298, 0.17703443244579298, 0.16316424150890618, 0.16316424150890618, 0.16316424150890618, 0.5438555600965453, 0.5438555600965453, 0.5438555600965453, 0.29206306495704537, 0.29206306495704537, 0.29206306495704537, 0.3199038366325988, 0.3199038366325988, 0.3199038366325988, 0.18470616043764188, 0.18470616043764188, 0.18470616043764188, 0.19166451031676235, 0.19166451031676235, 0.19166451031676235, 0.20098889107169893, 0.20098889107169893, 0.20098889107169893, 0.17932891430297804, 0.17932891430297804, 0.17932891430297804, 0.19610698241924507, 0.19610698241924507, 0.19610698241924507, 0.17977718062358328, 0.17977718062358328, 0.17977718062358328, 0.06959026169208771, 0.06959026169208771, 0.06959026169208771, 0.07046731242186521, 0.07046731242186521, 0.07046731242186521, 0.06679239672452053, 0.06679239672452053, 0.06679239672452053]}, "mutation_prompt": null}
{"id": "b93ef894-e436-49fe-afea-a888f9519903", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "beb0fd24-0dbd-4958-b61a-f8fd0de8de57", "solution": "import numpy as np\n\nclass ChaoticAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        # Initialize chaotic sequence\n        chaotic_sequence = self.initialize_chaotic_sequence(evaluations)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Chaotic DE Mutation with Self-adaptive Strategies\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                F_dynamic = self.F * chaotic_sequence[evaluations % len(chaotic_sequence)]\n                mutant = np.clip(x0 + F_dynamic * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Self-Adaptive Crossover Probability\n                CR_dynamic = self.CR * chaotic_sequence[evaluations % len(chaotic_sequence)]\n                crossover_mask = np.random.rand(self.dim) < (CR_dynamic + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def initialize_chaotic_sequence(self, length):\n        r = 3.99  # Parameter for logistic map\n        x = np.random.rand()\n        sequence = []\n        for _ in range(length):\n            x = r * x * (1 - x)  # Logistic map equation\n            sequence.append(x)\n        return np.array(sequence)", "name": "ChaoticAdaptiveDE", "description": "An adaptive differential evolution algorithm utilizing chaotic sequences and self-adaptive parameter tuning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.34893670435393676, "feedback": "The algorithm ChaoticAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.8488948052795637, 0.8488948052795637, 0.8488948052795637, 0.8625841151762983, 0.8625841151762983, 0.8625841151762983, 0.8624687927960741, 0.8624687927960741, 0.8624687927960741, 0.7296613230179351, 0.7296613230179351, 0.7296613230179351, 0.7348179061115174, 0.7348179061115174, 0.7348179061115174, 0.7176797685283678, 0.7176797685283678, 0.7176797685283678, 0.630202701272484, 0.630202701272484, 0.630202701272484, 0.5694945187803786, 0.5694945187803786, 0.5694945187803786, 0.6129303984290589, 0.6129303984290589, 0.6129303984290589, 0.14507804755833786, 0.14507804755833786, 0.14507804755833786, 0.5214552225620455, 0.5214552225620455, 0.5214552225620455, 0.14829449080548474, 0.14829449080548474, 0.14829449080548474, 0.9544206265364361, 0.9544206265364361, 0.9544206265364361, 0.9687842759807032, 0.9687842759807032, 0.9687842759807032, 0.9714018912090786, 0.9714018912090786, 0.9714018912090786, 0.3797733291678864, 0.3797733291678864, 0.3797733291678864, 0.3581246435722424, 0.3581246435722424, 0.3581246435722424, 0.34773847314486495, 0.34773847314486495, 0.34773847314486495, 0.6262052929266808, 0.6262052929266808, 0.6262052929266808, 0.7612834945516719, 0.7612834945516719, 0.7612834945516719, 0.6634911343914185, 0.6634911343914185, 0.6634911343914185, 0.2595998478969379, 0.2595998478969379, 0.2595998478969379, 0.3778782298525283, 0.3778782298525283, 0.3778782298525283, 0.15690102242203208, 0.15690102242203208, 0.15690102242203208, 0.12240184133237786, 0.12240184133237786, 0.12240184133237786, 0.19714642419300232, 0.19714642419300232, 0.19714642419300232, 0.16809098453039784, 0.16809098453039784, 0.16809098453039784, 0.04809874877660281, 0.04809874877660281, 0.04809874877660281, 0.011128598924798228, 0.011128598924798228, 0.011128598924798228, 0.01417586952192651, 0.01417586952192651, 0.01417586952192651, 0.17277683872926786, 0.17277683872926786, 0.17277683872926786, 0.13076617903748922, 0.13076617903748922, 0.13076617903748922, 0.20395920278215574, 0.20395920278215574, 0.20395920278215574, 0.026308621383505093, 0.026308621383505093, 0.026308621383505093, 0.04821747500265139, 0.04821747500265139, 0.04821747500265139, 0.044595200265978074, 0.044595200265978074, 0.044595200265978074, 0.157770718211814, 0.157770718211814, 0.157770718211814, 0.16315562982396226, 0.16315562982396226, 0.16315562982396226, 0.14933157662014496, 0.14933157662014496, 0.14933157662014496, 0.5639874229700232, 0.5639874229700232, 0.5639874229700232, 0.572307302420801, 0.572307302420801, 0.572307302420801, 0.5473704665646615, 0.5473704665646615, 0.5473704665646615, 0.11563594506460062, 0.11563594506460062, 0.11563594506460062, 0.10173752945169234, 0.10173752945169234, 0.10173752945169234, 0.10688101208449186, 0.10688101208449186, 0.10688101208449186, 0.14931761719037584, 0.14931761719037584, 0.14931761719037584, 0.13508799554619766, 0.13508799554619766, 0.13508799554619766, 0.13370223840687812, 0.13370223840687812, 0.13370223840687812, 0.32267200202737656, 0.32267200202737656, 0.32267200202737656, 0.32656993324338424, 0.32656993324338424, 0.32656993324338424, 0.43446164359030925, 0.43446164359030925, 0.43446164359030925, 0.2568003552472108, 0.2568003552472108, 0.2568003552472108, 0.25707456081409596, 0.25707456081409596, 0.25707456081409596, 0.2830643387791194, 0.2830643387791194, 0.2830643387791194, 0.2063881688170015, 0.2063881688170015, 0.2063881688170015, 0.2182290737101893, 0.2182290737101893, 0.2182290737101893, 0.19250087668283566, 0.19250087668283566, 0.19250087668283566, 0.20584300789287313, 0.20584300789287313, 0.20584300789287313, 0.4940218242185158, 0.4940218242185158, 0.4940218242185158, 0.22635464538350214, 0.22635464538350214, 0.22635464538350214, 0.7787748691652281, 0.7787748691652281, 0.7787748691652281, 0.1931392155501227, 0.1931392155501227, 0.1931392155501227, 0.6253282767406985, 0.6253282767406985, 0.6253282767406985, 0.4363274019986181, 0.4363274019986181, 0.4363274019986181, 0.2046055552679622, 0.2046055552679622, 0.2046055552679622, 0.37288193524155644, 0.37288193524155644, 0.37288193524155644, 0.17916098180643736, 0.17916098180643736, 0.17916098180643736, 0.17989096309640495, 0.17989096309640495, 0.17989096309640495, 0.18395490384955215, 0.18395490384955215, 0.18395490384955215, 0.0839659772981447, 0.0839659772981447, 0.0839659772981447, 0.07605832883083508, 0.07605832883083508, 0.07605832883083508, 0.09225808342565067, 0.09225808342565067, 0.09225808342565067]}, "mutation_prompt": null}
{"id": "5516f45a-2d3c-4c64-8bb6-885337f91d4e", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "7f9e6955-cd69-41fd-9557-6a2eae349a7f", "solution": "import numpy as np\n\nclass RefinedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 12 + 4 * self.dim  # Slightly adjusted population size\n        self.F = 0.65  # Adjusted scaling factor for exploration\n        self.CR = 0.85  # Adjusted crossover probability for balanced exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Mutation with Noise Handling\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                noise_factor = (np.random.rand() - 0.5) * 0.2  # Introduced noise factor\n                mutant = np.clip(x0 + (self.F + noise_factor) * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search Enhancement\n                if np.random.rand() < 0.2:  # Adjusted local search probability\n                    trial = self.local_search_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def local_search_refinement(self, solution, func, progress):\n        step_size = 0.08 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.3)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Adjusted local search iterations\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "RefinedAdaptiveDE", "description": "An adaptive differential evolution algorithm with dynamic exploration-exploitation balance and noise-handling across evaluation phases.", "configspace": "", "generation": 81, "fitness": 0.3495810567470754, "feedback": "The algorithm RefinedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7405847244984964, 0.7405847244984964, 0.7405847244984964, 0.7502760047132525, 0.7502760047132525, 0.7502760047132525, 0.7808233930190811, 0.7808233930190811, 0.7808233930190811, 0.5562304371864901, 0.5562304371864901, 0.5562304371864901, 0.523398612121087, 0.523398612121087, 0.523398612121087, 0.6208638824516434, 0.6208638824516434, 0.6208638824516434, 0.09752431556885455, 0.09752431556885455, 0.09752431556885455, 0.09705130071301205, 0.09705130071301205, 0.09705130071301205, 0.10274661420853559, 0.10274661420853559, 0.10274661420853559, 0.08935906276070271, 0.08935906276070271, 0.08935906276070271, 0.10584478275671538, 0.10584478275671538, 0.10584478275671538, 0.0950370648461274, 0.0950370648461274, 0.0950370648461274, 0.9325303868081516, 0.9325303868081516, 0.9325303868081516, 0.937199792055668, 0.937199792055668, 0.937199792055668, 0.9431553785870418, 0.9431553785870418, 0.9431553785870418, 0.40953674274739527, 0.40953674274739527, 0.40953674274739527, 0.41876379010998466, 0.41876379010998466, 0.41876379010998466, 0.43719482256199116, 0.43719482256199116, 0.43719482256199116, 0.7878208344131811, 0.7878208344131811, 0.7878208344131811, 0.743906296128813, 0.743906296128813, 0.743906296128813, 0.7359193639999507, 0.7359193639999507, 0.7359193639999507, 0.25183117645777087, 0.25183117645777087, 0.25183117645777087, 0.2740839974344448, 0.2740839974344448, 0.2740839974344448, 0.32139042538559925, 0.32139042538559925, 0.32139042538559925, 0.19816812363721203, 0.19816812363721203, 0.19816812363721203, 0.2943081979118237, 0.2943081979118237, 0.2943081979118237, 0.3463401712888592, 0.3463401712888592, 0.3463401712888592, 0.29128111478740615, 0.29128111478740615, 0.29128111478740615, 0.2723468174757293, 0.2723468174757293, 0.2723468174757293, 0.27209383891389605, 0.27209383891389605, 0.27209383891389605, 0.40469282634344395, 0.40469282634344395, 0.40469282634344395, 0.49301909821021783, 0.49301909821021783, 0.49301909821021783, 0.43209802790873764, 0.43209802790873764, 0.43209802790873764, 0.07619126163103918, 0.07619126163103918, 0.07619126163103918, 0.11328448309050854, 0.11328448309050854, 0.11328448309050854, 0.13065110698790028, 0.13065110698790028, 0.13065110698790028, 0.2542971142497731, 0.2542971142497731, 0.2542971142497731, 0.26848779039262194, 0.26848779039262194, 0.26848779039262194, 0.24821248820921105, 0.24821248820921105, 0.24821248820921105, 0.6491893197514733, 0.6491893197514733, 0.6491893197514733, 0.6048201791261238, 0.6048201791261238, 0.6048201791261238, 0.6313560814636483, 0.6313560814636483, 0.6313560814636483, 0.10383941859679036, 0.10383941859679036, 0.10383941859679036, 0.08718307180750728, 0.08718307180750728, 0.08718307180750728, 0.09554092592867514, 0.09554092592867514, 0.09554092592867514, 0.14704462566535892, 0.14704462566535892, 0.14704462566535892, 0.13437545883216317, 0.13437545883216317, 0.13437545883216317, 0.12675800614010235, 0.12675800614010235, 0.12675800614010235, 0.34249565826868333, 0.34249565826868333, 0.34249565826868333, 0.32843183428973066, 0.32843183428973066, 0.32843183428973066, 0.36716952510349865, 0.36716952510349865, 0.36716952510349865, 0.2766306514666841, 0.2766306514666841, 0.2766306514666841, 0.24950873831321696, 0.24950873831321696, 0.24950873831321696, 0.2872059327084099, 0.2872059327084099, 0.2872059327084099, 0.24325964692194812, 0.24325964692194812, 0.24325964692194812, 0.19784873309492712, 0.19784873309492712, 0.19784873309492712, 0.17909021695685223, 0.17909021695685223, 0.17909021695685223, 0.17932770932168662, 0.17932770932168662, 0.17932770932168662, 0.18469853868281172, 0.18469853868281172, 0.18469853868281172, 0.17839116250231768, 0.17839116250231768, 0.17839116250231768, 0.6634212247508879, 0.6634212247508879, 0.6634212247508879, 0.49536192350015784, 0.49536192350015784, 0.49536192350015784, 0.4823059140956849, 0.4823059140956849, 0.4823059140956849, 0.6074623187156231, 0.6074623187156231, 0.6074623187156231, 0.20261970825913622, 0.20261970825913622, 0.20261970825913622, 0.49834701948979254, 0.49834701948979254, 0.49834701948979254, 0.2001344762080528, 0.2001344762080528, 0.2001344762080528, 0.18137171609548053, 0.18137171609548053, 0.18137171609548053, 0.17725027139045813, 0.17725027139045813, 0.17725027139045813, 0.07429217022059642, 0.07429217022059642, 0.07429217022059642, 0.0680010932312618, 0.0680010932312618, 0.0680010932312618, 0.07655715231731397, 0.07655715231731397, 0.07655715231731397]}, "mutation_prompt": null}
{"id": "fec64e77-92d0-4707-afd1-87fc461b36b8", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Scaling factor for exploration\n        self.CR = 0.9  # Crossover probability for exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.3:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "An enhanced hybrid adaptive differential evolution algorithm incorporating minimal stochastic adjustments for improved convergence stability.", "configspace": "", "generation": 82, "fitness": 0.2783182881825254, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.6485918902438201, 0.6485918902438201, 0.6485918902438201, 0.6454585307608706, 0.6454585307608706, 0.6454585307608706, 0.6458039287750309, 0.6458039287750309, 0.6458039287750309, 0.3303119305676814, 0.3303119305676814, 0.3303119305676814, 0.3671341607514286, 0.3671341607514286, 0.3671341607514286, 0.36383211954219574, 0.36383211954219574, 0.36383211954219574, 0.08392419637827919, 0.08392419637827919, 0.08392419637827919, 0.0740806034732917, 0.0740806034732917, 0.0740806034732917, 0.10259955915447427, 0.10259955915447427, 0.10259955915447427, 0.0848155228756039, 0.0848155228756039, 0.0848155228756039, 0.08880826280996101, 0.08880826280996101, 0.08880826280996101, 0.06838242496776181, 0.06838242496776181, 0.06838242496776181, 0.9535944724742463, 0.9535944724742463, 0.9535944724742463, 0.8700018839480854, 0.8700018839480854, 0.8700018839480854, 0.917433958957783, 0.917433958957783, 0.917433958957783, 0.28225276914989095, 0.28225276914989095, 0.28225276914989095, 0.2864532508904527, 0.2864532508904527, 0.2864532508904527, 0.3176658673736088, 0.3176658673736088, 0.3176658673736088, 0.6118057669815493, 0.6118057669815493, 0.6118057669815493, 0.5502780526235733, 0.5502780526235733, 0.5502780526235733, 0.5477880501450172, 0.5477880501450172, 0.5477880501450172, 0.14345982109045285, 0.14345982109045285, 0.14345982109045285, 0.20782750419218932, 0.20782750419218932, 0.20782750419218932, 0.19226080309146887, 0.19226080309146887, 0.19226080309146887, 0.17017683066547928, 0.17017683066547928, 0.17017683066547928, 0.1501844391662719, 0.1501844391662719, 0.1501844391662719, 0.16896327573009107, 0.16896327573009107, 0.16896327573009107, 0.21036404023287147, 0.21036404023287147, 0.21036404023287147, 0.19872679087973588, 0.19872679087973588, 0.19872679087973588, 0.20612907282605708, 0.20612907282605708, 0.20612907282605708, 0.35465065006667107, 0.35465065006667107, 0.35465065006667107, 0.32984370514570394, 0.32984370514570394, 0.32984370514570394, 0.32251110046812803, 0.32251110046812803, 0.32251110046812803, 0.03261065148466136, 0.03261065148466136, 0.03261065148466136, 0.046310191479677076, 0.046310191479677076, 0.046310191479677076, 0.0972070801957643, 0.0972070801957643, 0.0972070801957643, 0.21979274185411946, 0.21979274185411946, 0.21979274185411946, 0.19660483955628016, 0.19660483955628016, 0.19660483955628016, 0.18714520164718218, 0.18714520164718218, 0.18714520164718218, 0.5196689548808018, 0.5196689548808018, 0.5196689548808018, 0.5482826406690092, 0.5482826406690092, 0.5482826406690092, 0.5179040246845628, 0.5179040246845628, 0.5179040246845628, 0.11359057902334913, 0.11359057902334913, 0.11359057902334913, 0.08983328084437858, 0.08983328084437858, 0.08983328084437858, 0.08578829164620361, 0.08578829164620361, 0.08578829164620361, 0.1318628156689451, 0.1318628156689451, 0.1318628156689451, 0.153128065374602, 0.153128065374602, 0.153128065374602, 0.16676876061542112, 0.16676876061542112, 0.16676876061542112, 0.28133271751546685, 0.28133271751546685, 0.28133271751546685, 0.27605642845089307, 0.27605642845089307, 0.27605642845089307, 0.29023171255724756, 0.29023171255724756, 0.29023171255724756, 0.2020493560397426, 0.2020493560397426, 0.2020493560397426, 0.20859978414457037, 0.20859978414457037, 0.20859978414457037, 0.2432012274588361, 0.2432012274588361, 0.2432012274588361, 0.18277119677775966, 0.18277119677775966, 0.18277119677775966, 0.1790421475707228, 0.1790421475707228, 0.1790421475707228, 0.18352855449163774, 0.18352855449163774, 0.18352855449163774, 0.17396422228488606, 0.17396422228488606, 0.17396422228488606, 0.1651348693289295, 0.1651348693289295, 0.1651348693289295, 0.17539752517338292, 0.17539752517338292, 0.17539752517338292, 0.5990864865520772, 0.5990864865520772, 0.5990864865520772, 0.2508195884950012, 0.2508195884950012, 0.2508195884950012, 0.48463437546605814, 0.48463437546605814, 0.48463437546605814, 0.3554357854220308, 0.3554357854220308, 0.3554357854220308, 0.19654125548493906, 0.19654125548493906, 0.19654125548493906, 0.20491515476158495, 0.20491515476158495, 0.20491515476158495, 0.19507840341204485, 0.19507840341204485, 0.19507840341204485, 0.1897954492793683, 0.1897954492793683, 0.1897954492793683, 0.18143816036563376, 0.18143816036563376, 0.18143816036563376, 0.07538410950832075, 0.07538410950832075, 0.07538410950832075, 0.06583455578719244, 0.06583455578719244, 0.06583455578719244, 0.07603032678881627, 0.07603032678881627, 0.07603032678881627]}, "mutation_prompt": null}
{"id": "38b4415d-61a6-4e7c-815a-1e103be824c7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 + 5 * self.dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia = 0.7  # Inertia weight for velocity update\n        self.cognitive_coeff = 1.5  # Cognitive (personal) coefficient\n        self.social_coeff = 1.5  # Social (global) coefficient\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros_like(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_fitness)]\n        global_best_fitness = np.min(personal_best_fitness)\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Update velocity with inertia, cognitive, and social components\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social_coeff * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate fitness\n                fitness = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = fitness\n\n                # Update global best\n                if fitness < global_best_fitness:\n                    global_best_position = positions[i]\n                    global_best_fitness = fitness\n\n        return global_best_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm integrating self-organizing principles and multiplicative step size adaptation for robust global search.", "configspace": "", "generation": 83, "fitness": 0.28753560186394594, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7862961521110343, 0.7862961521110343, 0.7862961521110343, 0.7400899402616298, 0.7400899402616298, 0.7400899402616298, 0.8139617484049708, 0.8139617484049708, 0.8139617484049708, 0.5173209196154891, 0.5173209196154891, 0.5173209196154891, 0.2636043136520194, 0.2636043136520194, 0.2636043136520194, 0.2989401416023565, 0.2989401416023565, 0.2989401416023565, 0.11278541619618099, 0.11278541619618099, 0.11278541619618099, 0.062397823062039115, 0.062397823062039115, 0.062397823062039115, 0.11090891552885729, 0.11090891552885729, 0.11090891552885729, 0.048456748475474654, 0.048456748475474654, 0.048456748475474654, 0.03782596669537519, 0.03782596669537519, 0.03782596669537519, 0.12666906277738432, 0.12666906277738432, 0.12666906277738432, 0.9936798744854427, 0.9936798744854427, 0.9936798744854427, 0.9942612616724583, 0.9942612616724583, 0.9942612616724583, 0.9883641546482926, 0.9883641546482926, 0.9883641546482926, 0.24210369999169234, 0.24210369999169234, 0.24210369999169234, 0.4601330208392618, 0.4601330208392618, 0.4601330208392618, 0.3306390510107734, 0.3306390510107734, 0.3306390510107734, 0.26190466815929736, 0.26190466815929736, 0.26190466815929736, 0.16138286768254106, 0.16138286768254106, 0.16138286768254106, 0.11736594806678147, 0.11736594806678147, 0.11736594806678147, 0.49467103074548036, 0.49467103074548036, 0.49467103074548036, 0.13283393344330574, 0.13283393344330574, 0.13283393344330574, 0.4382301336115474, 0.4382301336115474, 0.4382301336115474, 0.11177905252252818, 0.11177905252252818, 0.11177905252252818, 0.12962248441125757, 0.12962248441125757, 0.12962248441125757, 0.2949240697636929, 0.2949240697636929, 0.2949240697636929, 0.08223239930955928, 0.08223239930955928, 0.08223239930955928, 0.10444096634820688, 0.10444096634820688, 0.10444096634820688, 0.31800695581358907, 0.31800695581358907, 0.31800695581358907, 0.2470248850662604, 0.2470248850662604, 0.2470248850662604, 0.18185640801094727, 0.18185640801094727, 0.18185640801094727, 0.11655673777950992, 0.11655673777950992, 0.11655673777950992, 0.04090332424410936, 0.04090332424410936, 0.04090332424410936, 0.08152617866139156, 0.08152617866139156, 0.08152617866139156, 0.15335622228595114, 0.15335622228595114, 0.15335622228595114, 0.10020053841225196, 0.10020053841225196, 0.10020053841225196, 0.21609431093285492, 0.21609431093285492, 0.21609431093285492, 0.07575729402450138, 0.07575729402450138, 0.07575729402450138, 0.6530524655769987, 0.6530524655769987, 0.6530524655769987, 0.5524667781065943, 0.5524667781065943, 0.5524667781065943, 0.6959873134743636, 0.6959873134743636, 0.6959873134743636, 0.10763266342582245, 0.10763266342582245, 0.10763266342582245, 0.10038694229909106, 0.10038694229909106, 0.10038694229909106, 0.10964062495256344, 0.10964062495256344, 0.10964062495256344, 0.4007305039443221, 0.4007305039443221, 0.4007305039443221, 0.1411499495581302, 0.1411499495581302, 0.1411499495581302, 0.2644178618290224, 0.2644178618290224, 0.2644178618290224, 0.3395852441734456, 0.3395852441734456, 0.3395852441734456, 0.21683343533372823, 0.21683343533372823, 0.21683343533372823, 0.1406859170903495, 0.1406859170903495, 0.1406859170903495, 0.24069966522115493, 0.24069966522115493, 0.24069966522115493, 0.1882198489776027, 0.1882198489776027, 0.1882198489776027, 0.1252260682010441, 0.1252260682010441, 0.1252260682010441, 0.22224929565283102, 0.22224929565283102, 0.22224929565283102, 0.21817919125663376, 0.21817919125663376, 0.21817919125663376, 0.24001049146208475, 0.24001049146208475, 0.24001049146208475, 0.2223048686009974, 0.2223048686009974, 0.2223048686009974, 0.19189734835731798, 0.19189734835731798, 0.19189734835731798, 0.22400057846909383, 0.22400057846909383, 0.22400057846909383, 0.9023609598549311, 0.9023609598549311, 0.9023609598549311, 0.15850650359360463, 0.15850650359360463, 0.15850650359360463, 0.8633644479135621, 0.8633644479135621, 0.8633644479135621, 0.16939469811697905, 0.16939469811697905, 0.16939469811697905, 0.16971313157310575, 0.16971313157310575, 0.16971313157310575, 0.15647447184880003, 0.15647447184880003, 0.15647447184880003, 0.1987781248514502, 0.1987781248514502, 0.1987781248514502, 0.18811264998822375, 0.18811264998822375, 0.18811264998822375, 0.2481883333238244, 0.2481883333238244, 0.2481883333238244, 0.09290803482819954, 0.09290803482819954, 0.09290803482819954, 0.07385296988938883, 0.07385296988938883, 0.07385296988938883, 0.09644333213254996, 0.09644333213254996, 0.09644333213254996]}, "mutation_prompt": null}
{"id": "14a4c4fb-53b9-47d5-ac14-53631c5244cb", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "a77ec469-a2e5-4091-aa93-db4c0fff52e9", "solution": "import numpy as np\n\nclass AdvancedHybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_base = 0.5  # Base scaling factor for mutation\n        self.CR_base = 0.8  # Base crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Progressive Mutation Scaling\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                progress_factor = evaluations / self.budget\n                F = self.F_base + 0.3 * (1 - progress_factor)\n                mutant = np.clip(x0 + F * (x1 - x2) + 0.1 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover Strategy\n                CR = self.CR_base + 0.2 * np.sin(np.pi * progress_factor)\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.3:\n                    trial = self.stochastic_regional_refinement(trial, func, progress_factor)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Increased refinement iterations for effectiveness\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdvancedHybridAdaptiveDE", "description": "An advanced hybrid adaptive differential evolution algorithm enhanced with progressive mutation scaling and adaptive crossover strategies for robust global optimization.", "configspace": "", "generation": 85, "fitness": 0.25906430157280735, "feedback": "The algorithm AdvancedHybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.5853496027981215, 0.5853496027981215, 0.5853496027981215, 0.6083291874977155, 0.6083291874977155, 0.6083291874977155, 0.5942918383183148, 0.5942918383183148, 0.5942918383183148, 0.32812198386958824, 0.32812198386958824, 0.32812198386958824, 0.3131277701254379, 0.3131277701254379, 0.3131277701254379, 0.309067064849217, 0.309067064849217, 0.309067064849217, 0.09571854678478453, 0.09571854678478453, 0.09571854678478453, 0.09173670341676265, 0.09173670341676265, 0.09173670341676265, 0.1065762456740511, 0.1065762456740511, 0.1065762456740511, 0.08752976378325983, 0.08752976378325983, 0.08752976378325983, 0.0934460054588293, 0.0934460054588293, 0.0934460054588293, 0.08381923278072756, 0.08381923278072756, 0.08381923278072756, 0.9593433942157029, 0.9593433942157029, 0.9593433942157029, 0.9345612419368777, 0.9345612419368777, 0.9345612419368777, 0.9221445112504906, 0.9221445112504906, 0.9221445112504906, 0.264397400109866, 0.264397400109866, 0.264397400109866, 0.2609576281406938, 0.2609576281406938, 0.2609576281406938, 0.292399815084316, 0.292399815084316, 0.292399815084316, 0.519376354311204, 0.519376354311204, 0.519376354311204, 0.5491364501911671, 0.5491364501911671, 0.5491364501911671, 0.5032465348019665, 0.5032465348019665, 0.5032465348019665, 0.2057424952126271, 0.2057424952126271, 0.2057424952126271, 0.16317998175296722, 0.16317998175296722, 0.16317998175296722, 0.1731151480097668, 0.1731151480097668, 0.1731151480097668, 0.24130085095692788, 0.24130085095692788, 0.24130085095692788, 0.2008388264279436, 0.2008388264279436, 0.2008388264279436, 0.15199991948883684, 0.15199991948883684, 0.15199991948883684, 0.15193703408117576, 0.15193703408117576, 0.15193703408117576, 0.13952133515670118, 0.13952133515670118, 0.13952133515670118, 0.1548882461242852, 0.1548882461242852, 0.1548882461242852, 0.27786802177816905, 0.27786802177816905, 0.27786802177816905, 0.2051690248436211, 0.2051690248436211, 0.2051690248436211, 0.2996174479391297, 0.2996174479391297, 0.2996174479391297, 0.03692789018615095, 0.03692789018615095, 0.03692789018615095, 0.07197823977783069, 0.07197823977783069, 0.07197823977783069, 0.05256637674701192, 0.05256637674701192, 0.05256637674701192, 0.17665706333693054, 0.17665706333693054, 0.17665706333693054, 0.1578564862298979, 0.1578564862298979, 0.1578564862298979, 0.15037746416440245, 0.15037746416440245, 0.15037746416440245, 0.48009599318896024, 0.48009599318896024, 0.48009599318896024, 0.4794286269572453, 0.4794286269572453, 0.4794286269572453, 0.5029432984749516, 0.5029432984749516, 0.5029432984749516, 0.0938209074004639, 0.0938209074004639, 0.0938209074004639, 0.07669812031168877, 0.07669812031168877, 0.07669812031168877, 0.10345928209345856, 0.10345928209345856, 0.10345928209345856, 0.17028604539245695, 0.17028604539245695, 0.17028604539245695, 0.1436686545800605, 0.1436686545800605, 0.1436686545800605, 0.13705121071084592, 0.13705121071084592, 0.13705121071084592, 0.2948244948715857, 0.2948244948715857, 0.2948244948715857, 0.2503041262566117, 0.2503041262566117, 0.2503041262566117, 0.29092895614574776, 0.29092895614574776, 0.29092895614574776, 0.19509239752762442, 0.19509239752762442, 0.19509239752762442, 0.16945120945322856, 0.16945120945322856, 0.16945120945322856, 0.21840482205728973, 0.21840482205728973, 0.21840482205728973, 0.17736257145349532, 0.17736257145349532, 0.17736257145349532, 0.20084556111559504, 0.20084556111559504, 0.20084556111559504, 0.17815240353926898, 0.17815240353926898, 0.17815240353926898, 0.17062548555475965, 0.17062548555475965, 0.17062548555475965, 0.18214819717402342, 0.18214819717402342, 0.18214819717402342, 0.1680640452775355, 0.1680640452775355, 0.1680640452775355, 0.6218869180085955, 0.6218869180085955, 0.6218869180085955, 0.16258969094680975, 0.16258969094680975, 0.16258969094680975, 0.37127242827369034, 0.37127242827369034, 0.37127242827369034, 0.15979513609132623, 0.15979513609132623, 0.15979513609132623, 0.17462760143173983, 0.17462760143173983, 0.17462760143173983, 0.2042039193360814, 0.2042039193360814, 0.2042039193360814, 0.18354341822424125, 0.18354341822424125, 0.18354341822424125, 0.1781550481971229, 0.1781550481971229, 0.1781550481971229, 0.1804270271828864, 0.1804270271828864, 0.1804270271828864, 0.0682414624388401, 0.0682414624388401, 0.0682414624388401, 0.07510848174986118, 0.07510848174986118, 0.07510848174986118, 0.0749030442105657, 0.0749030442105657, 0.0749030442105657]}, "mutation_prompt": null}
{"id": "301725cc-03e4-4306-8791-c5fdafbb8b63", "solution": "import numpy as np\n\nclass EnhancedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_base = 0.7\n        self.CR_base = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                F = self.F_base + 0.3 * (1 - evaluations / self.budget)  # Adaptive F based on progress\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                CR = self.CR_base + 0.05 * np.sin(np.pi * evaluations / self.budget)  # Adaptive CR with oscillation\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.2:  # Slightly adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Increased iterations for better local search\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedHybridDE", "description": "An enhanced hybrid differential evolution algorithm incorporating adaptive exploration and exploitation through dynamic parameter control with stochastic regional refinement.", "configspace": "", "generation": 86, "fitness": 0.2009494684836717, "feedback": "The algorithm EnhancedHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.41817500254800666, 0.41817500254800666, 0.41817500254800666, 0.44440368063267655, 0.44440368063267655, 0.44440368063267655, 0.4303161875695989, 0.4303161875695989, 0.4303161875695989, 0.16878576606543683, 0.16878576606543683, 0.16878576606543683, 0.17308216376813546, 0.17308216376813546, 0.17308216376813546, 0.20609637025971084, 0.20609637025971084, 0.20609637025971084, 0.09278259045181314, 0.09278259045181314, 0.09278259045181314, 0.07514188368916042, 0.07514188368916042, 0.07514188368916042, 0.10191530927897152, 0.10191530927897152, 0.10191530927897152, 0.08236562479132847, 0.08236562479132847, 0.08236562479132847, 0.08123171679771746, 0.08123171679771746, 0.08123171679771746, 0.08233282029590605, 0.08233282029590605, 0.08233282029590605, 0.906427816999608, 0.906427816999608, 0.906427816999608, 0.9301614340897373, 0.9301614340897373, 0.9301614340897373, 0.9276243380654343, 0.9276243380654343, 0.9276243380654343, 0.20437129649811592, 0.20437129649811592, 0.20437129649811592, 0.18849029576186194, 0.18849029576186194, 0.18849029576186194, 0.2037792270118166, 0.2037792270118166, 0.2037792270118166, 0.23483336309260427, 0.23483336309260427, 0.23483336309260427, 0.29700590486412604, 0.29700590486412604, 0.29700590486412604, 0.31410580254758125, 0.31410580254758125, 0.31410580254758125, 0.12780001360188975, 0.12780001360188975, 0.12780001360188975, 0.13909928911747316, 0.13909928911747316, 0.13909928911747316, 0.13277770986648352, 0.13277770986648352, 0.13277770986648352, 0.1243691407180384, 0.1243691407180384, 0.1243691407180384, 0.0995567088837761, 0.0995567088837761, 0.0995567088837761, 0.09081802359203739, 0.09081802359203739, 0.09081802359203739, 0.06581339881550918, 0.06581339881550918, 0.06581339881550918, 0.051727666772444336, 0.051727666772444336, 0.051727666772444336, 0.08181809423045283, 0.08181809423045283, 0.08181809423045283, 0.14044462992244922, 0.14044462992244922, 0.14044462992244922, 0.21077496007528296, 0.21077496007528296, 0.21077496007528296, 0.18497270288751566, 0.18497270288751566, 0.18497270288751566, 0.0021782431729938656, 0.0021782431729938656, 0.0021782431729938656, 0.006587020593828874, 0.006587020593828874, 0.006587020593828874, 0.010281769828830112, 0.010281769828830112, 0.010281769828830112, 0.087700664768119, 0.087700664768119, 0.087700664768119, 0.102198706061427, 0.102198706061427, 0.102198706061427, 0.12070957046675046, 0.12070957046675046, 0.12070957046675046, 0.3834599920565177, 0.3834599920565177, 0.3834599920565177, 0.3978266288030601, 0.3978266288030601, 0.3978266288030601, 0.3789837612585859, 0.3789837612585859, 0.3789837612585859, 0.08380451393118893, 0.08380451393118893, 0.08380451393118893, 0.0817361598378975, 0.0817361598378975, 0.0817361598378975, 0.0686453030695795, 0.0686453030695795, 0.0686453030695795, 0.18211181752592442, 0.18211181752592442, 0.18211181752592442, 0.1850222737242655, 0.1850222737242655, 0.1850222737242655, 0.2117003473302479, 0.2117003473302479, 0.2117003473302479, 0.22040502723267963, 0.22040502723267963, 0.22040502723267963, 0.1906938539566767, 0.1906938539566767, 0.1906938539566767, 0.22322647984273591, 0.22322647984273591, 0.22322647984273591, 0.1583391218232122, 0.1583391218232122, 0.1583391218232122, 0.14609494613592455, 0.14609494613592455, 0.14609494613592455, 0.17720724728122783, 0.17720724728122783, 0.17720724728122783, 0.16569023067296818, 0.16569023067296818, 0.16569023067296818, 0.16375325046698308, 0.16375325046698308, 0.16375325046698308, 0.16911307221771787, 0.16911307221771787, 0.16911307221771787, 0.15572793756884584, 0.15572793756884584, 0.15572793756884584, 0.16851044910130875, 0.16851044910130875, 0.16851044910130875, 0.1643877123099965, 0.1643877123099965, 0.1643877123099965, 0.43636593367497567, 0.43636593367497567, 0.43636593367497567, 0.1423571492834197, 0.1423571492834197, 0.1423571492834197, 0.17432251009109767, 0.17432251009109767, 0.17432251009109767, 0.17520967582077085, 0.17520967582077085, 0.17520967582077085, 0.18079586632974987, 0.18079586632974987, 0.18079586632974987, 0.20325576145327828, 0.20325576145327828, 0.20325576145327828, 0.19543935995693784, 0.19543935995693784, 0.19543935995693784, 0.17640415311317537, 0.17640415311317537, 0.17640415311317537, 0.18218697181959442, 0.18218697181959442, 0.18218697181959442, 0.06241845935313395, 0.06241845935313395, 0.06241845935313395, 0.054173862217915314, 0.054173862217915314, 0.054173862217915314, 0.06593499310811857, 0.06593499310811857, 0.06593499310811857]}, "mutation_prompt": null}
{"id": "2a1774ba-9c2f-4e24-b016-1f8a24a621f1", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "dc2e2294-bf23-4a94-9fc6-7609f8094aeb", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F = 0.7  # Increased scaling factor for better exploration\n        self.CR = 0.9  # Increased crossover probability for better exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Enhanced Diversity\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.15 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Enhanced Crossover with Dynamic Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.1 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Regional Refinement\n                if np.random.rand() < 0.25:  # Adjusted local search probability\n                    trial = self.stochastic_regional_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_regional_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.2)  # Adjusted refinement step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(2):  # Further reduced iterations for efficiency\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm leveraging stochastic regional refinement and dynamic diversity enhancement techniques to improve convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7228768327112073, 0.7228768327112073, 0.7228768327112073, 0.7465989594314366, 0.7465989594314366, 0.7465989594314366, 0.7612792599967402, 0.7612792599967402, 0.7612792599967402, 0.557856706037271, 0.557856706037271, 0.557856706037271, 0.535304836503271, 0.535304836503271, 0.535304836503271, 0.5559624463755917, 0.5559624463755917, 0.5559624463755917, 0.09192964739075671, 0.09192964739075671, 0.09192964739075671, 0.09335428369931253, 0.09335428369931253, 0.09335428369931253, 0.09561627334172462, 0.09561627334172462, 0.09561627334172462, 0.09986529218893647, 0.09986529218893647, 0.09986529218893647, 0.0847859218838144, 0.0847859218838144, 0.0847859218838144, 0.09000911254944222, 0.09000911254944222, 0.09000911254944222, 0.903116304486493, 0.903116304486493, 0.903116304486493, 0.8879359393653302, 0.8879359393653302, 0.8879359393653302, 0.937383996320891, 0.937383996320891, 0.937383996320891, 0.4498632727131119, 0.4498632727131119, 0.4498632727131119, 0.4256082195137807, 0.4256082195137807, 0.4256082195137807, 0.4623978956369934, 0.4623978956369934, 0.4623978956369934, 0.8061019322102028, 0.8061019322102028, 0.8061019322102028, 0.7891166460041559, 0.7891166460041559, 0.7891166460041559, 0.7602690922397419, 0.7602690922397419, 0.7602690922397419, 0.39180215504200355, 0.39180215504200355, 0.39180215504200355, 0.3383612565382611, 0.3383612565382611, 0.3383612565382611, 0.43070605826829267, 0.43070605826829267, 0.43070605826829267, 0.22589927400801457, 0.22589927400801457, 0.22589927400801457, 0.44539744135166204, 0.44539744135166204, 0.44539744135166204, 0.2984365318644734, 0.2984365318644734, 0.2984365318644734, 0.46558562554207317, 0.46558562554207317, 0.46558562554207317, 0.4274873373073691, 0.4274873373073691, 0.4274873373073691, 0.4637548356323822, 0.4637548356323822, 0.4637548356323822, 0.5984324693764875, 0.5984324693764875, 0.5984324693764875, 0.5624333472160867, 0.5624333472160867, 0.5624333472160867, 0.6000770176986673, 0.6000770176986673, 0.6000770176986673, 0.0966060038637212, 0.0966060038637212, 0.0966060038637212, 0.297655560823856, 0.297655560823856, 0.297655560823856, 0.1859117474289299, 0.1859117474289299, 0.1859117474289299, 0.36137584039140613, 0.36137584039140613, 0.36137584039140613, 0.30742491902334435, 0.30742491902334435, 0.30742491902334435, 0.3303179576961326, 0.3303179576961326, 0.3303179576961326, 0.6804161076015103, 0.6804161076015103, 0.6804161076015103, 0.7004686670029747, 0.7004686670029747, 0.7004686670029747, 0.7025755141133759, 0.7025755141133759, 0.7025755141133759, 0.09235586610337199, 0.09235586610337199, 0.09235586610337199, 0.09036352106311674, 0.09036352106311674, 0.09036352106311674, 0.08961773953798069, 0.08961773953798069, 0.08961773953798069, 0.12433224731666082, 0.12433224731666082, 0.12433224731666082, 0.13172720750256417, 0.13172720750256417, 0.13172720750256417, 0.13398133066756013, 0.13398133066756013, 0.13398133066756013, 0.3648966128519606, 0.3648966128519606, 0.3648966128519606, 0.3639778370897613, 0.3639778370897613, 0.3639778370897613, 0.35086778263279816, 0.35086778263279816, 0.35086778263279816, 0.2779907076345828, 0.2779907076345828, 0.2779907076345828, 0.26466785183328034, 0.26466785183328034, 0.26466785183328034, 0.334580632716345, 0.334580632716345, 0.334580632716345, 0.1848503698839723, 0.1848503698839723, 0.1848503698839723, 0.18487738470297177, 0.18487738470297177, 0.18487738470297177, 0.19778103020669324, 0.19778103020669324, 0.19778103020669324, 0.19096350291952036, 0.19096350291952036, 0.19096350291952036, 0.18732451636519232, 0.18732451636519232, 0.18732451636519232, 0.18245732020752659, 0.18245732020752659, 0.18245732020752659, 0.8265978901388091, 0.8265978901388091, 0.8265978901388091, 0.747240374954627, 0.747240374954627, 0.747240374954627, 0.49947931739155327, 0.49947931739155327, 0.49947931739155327, 0.20702657878634634, 0.20702657878634634, 0.20702657878634634, 0.7066052177771937, 0.7066052177771937, 0.7066052177771937, 0.20548121704116906, 0.20548121704116906, 0.20548121704116906, 0.1861094576722283, 0.1861094576722283, 0.1861094576722283, 0.1946622917342975, 0.1946622917342975, 0.1946622917342975, 0.18858160320039274, 0.18858160320039274, 0.18858160320039274, 0.08069850590847583, 0.08069850590847583, 0.08069850590847583, 0.08598309738144183, 0.08598309738144183, 0.08598309738144183, 0.07446839477687262, 0.07446839477687262, 0.07446839477687262]}, "mutation_prompt": null}
{"id": "f7a32c62-275e-42c0-827e-5a1a0eb2f721", "solution": "import numpy as np\n\nclass DynamicMutationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 12 + 4 * self.dim  # Slightly adjusted population size\n        self.F = 0.8  # Enhanced scaling factor for increased mutation strength\n        self.CR = 0.85  # Adjusted crossover probability for balance between exploration and exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with Dynamic Intensification\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2) + 0.2 * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover Strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Focused Perturbation\n                if np.random.rand() < 0.20:  # Adjusted local search probability\n                    trial = self.focused_perturbation(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def focused_perturbation(self, solution, func, progress):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound) * (1 - progress ** 1.5)  # Tuned perturbation step\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Adjusted iterations for focused exploration\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "DynamicMutationDE", "description": "A dynamic mutation-intensified differential evolution algorithm integrating adaptive crossover rates and focused perturbation strategies to enhance global search capability.", "configspace": "", "generation": 89, "fitness": 0.3082216189196386, "feedback": "The algorithm DynamicMutationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.6968226873240453, 0.6968226873240453, 0.6968226873240453, 0.7013890444724237, 0.7013890444724237, 0.7013890444724237, 0.7216176274341422, 0.7216176274341422, 0.7216176274341422, 0.5385131226322522, 0.5385131226322522, 0.5385131226322522, 0.4708411011859853, 0.4708411011859853, 0.4708411011859853, 0.47824187616663416, 0.47824187616663416, 0.47824187616663416, 0.1080949980472049, 0.1080949980472049, 0.1080949980472049, 0.11614685786041024, 0.11614685786041024, 0.11614685786041024, 0.10631117317283045, 0.10631117317283045, 0.10631117317283045, 0.09626266843562847, 0.09626266843562847, 0.09626266843562847, 0.0989008315536204, 0.0989008315536204, 0.0989008315536204, 0.10272559761475841, 0.10272559761475841, 0.10272559761475841, 0.9380117059262598, 0.9380117059262598, 0.9380117059262598, 0.90778072934855, 0.90778072934855, 0.90778072934855, 0.9215187657049795, 0.9215187657049795, 0.9215187657049795, 0.3540809019501946, 0.3540809019501946, 0.3540809019501946, 0.3396923404199931, 0.3396923404199931, 0.3396923404199931, 0.34924192621605354, 0.34924192621605354, 0.34924192621605354, 0.600457533821527, 0.600457533821527, 0.600457533821527, 0.5680958381420609, 0.5680958381420609, 0.5680958381420609, 0.7053462880428658, 0.7053462880428658, 0.7053462880428658, 0.2900022560922346, 0.2900022560922346, 0.2900022560922346, 0.18127206783102545, 0.18127206783102545, 0.18127206783102545, 0.3137330833463925, 0.3137330833463925, 0.3137330833463925, 0.2558452195985581, 0.2558452195985581, 0.2558452195985581, 0.2463714516263893, 0.2463714516263893, 0.2463714516263893, 0.24446789123093648, 0.24446789123093648, 0.24446789123093648, 0.2138590361380327, 0.2138590361380327, 0.2138590361380327, 0.20457404235287846, 0.20457404235287846, 0.20457404235287846, 0.20319805936191715, 0.20319805936191715, 0.20319805936191715, 0.31586314804015314, 0.31586314804015314, 0.31586314804015314, 0.31670446614259773, 0.31670446614259773, 0.31670446614259773, 0.3312535321773935, 0.3312535321773935, 0.3312535321773935, 0.06539018182275391, 0.06539018182275391, 0.06539018182275391, 0.05886469551071627, 0.05886469551071627, 0.05886469551071627, 0.040186412103244584, 0.040186412103244584, 0.040186412103244584, 0.20165620934581285, 0.20165620934581285, 0.20165620934581285, 0.21534709799214724, 0.21534709799214724, 0.21534709799214724, 0.19441784156788566, 0.19441784156788566, 0.19441784156788566, 0.5465719055926195, 0.5465719055926195, 0.5465719055926195, 0.5521970127291802, 0.5521970127291802, 0.5521970127291802, 0.5511019142639564, 0.5511019142639564, 0.5511019142639564, 0.09084264772233364, 0.09084264772233364, 0.09084264772233364, 0.08982804870478267, 0.08982804870478267, 0.08982804870478267, 0.0842364054943604, 0.0842364054943604, 0.0842364054943604, 0.14060622115119747, 0.14060622115119747, 0.14060622115119747, 0.15792206218469296, 0.15792206218469296, 0.15792206218469296, 0.18541286644567045, 0.18541286644567045, 0.18541286644567045, 0.3332384361145583, 0.3332384361145583, 0.3332384361145583, 0.3019540841435694, 0.3019540841435694, 0.3019540841435694, 0.32239234918420057, 0.32239234918420057, 0.32239234918420057, 0.2069886910230242, 0.2069886910230242, 0.2069886910230242, 0.19368512097568236, 0.19368512097568236, 0.19368512097568236, 0.2528837989659908, 0.2528837989659908, 0.2528837989659908, 0.18967242293504527, 0.18967242293504527, 0.18967242293504527, 0.1874139646314842, 0.1874139646314842, 0.1874139646314842, 0.18650563864997438, 0.18650563864997438, 0.18650563864997438, 0.1935005879683287, 0.1935005879683287, 0.1935005879683287, 0.17877965980557875, 0.17877965980557875, 0.17877965980557875, 0.18172448433845123, 0.18172448433845123, 0.18172448433845123, 0.7465233523491286, 0.7465233523491286, 0.7465233523491286, 0.16761806556250103, 0.16761806556250103, 0.16761806556250103, 0.1580501463413706, 0.1580501463413706, 0.1580501463413706, 0.7046454982579762, 0.7046454982579762, 0.7046454982579762, 0.48284187745631957, 0.48284187745631957, 0.48284187745631957, 0.2023997480241091, 0.2023997480241091, 0.2023997480241091, 0.1815185981904639, 0.1815185981904639, 0.1815185981904639, 0.18086074046702327, 0.18086074046702327, 0.18086074046702327, 0.18832315419447443, 0.18832315419447443, 0.18832315419447443, 0.08714642191431499, 0.08714642191431499, 0.08714642191431499, 0.07681223764666578, 0.07681223764666578, 0.07681223764666578, 0.07465809103145715, 0.07465809103145715, 0.07465809103145715]}, "mutation_prompt": null}
{"id": "e7913b25-0fc7-4d5f-b75e-feb60aceea98", "solution": "import numpy as np\n\nclass AdaptiveDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_min = 0.5  # Minimum scaling factor for adaptive control\n        self.F_max = 0.9  # Maximum scaling factor for adaptive control\n        self.CR = 0.8  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                F = self.F_min + (self.F_max - self.F_min) * (1 - evaluations / self.budget)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover with Adaptive Strategy\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Local Search Balancing\n                if np.random.rand() < 0.1 + 0.1 * (evaluations / self.budget):\n                    trial = self.local_search(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def local_search(self, solution, func, progress):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound) * (1 - progress)\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):  # Small number of local search iterations\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveDEWithLocalSearch", "description": "An adaptive differential evolution algorithm with adaptive parameter control and local search balancing exploration and exploitation.", "configspace": "", "generation": 90, "fitness": 0.2377380680996468, "feedback": "The algorithm AdaptiveDEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.5916519481618158, 0.5916519481618158, 0.5916519481618158, 0.6479896257961713, 0.6479896257961713, 0.6479896257961713, 0.6215414697375108, 0.6215414697375108, 0.6215414697375108, 0.3745273368274651, 0.3745273368274651, 0.3745273368274651, 0.42488580136039056, 0.42488580136039056, 0.42488580136039056, 0.38926597429435184, 0.38926597429435184, 0.38926597429435184, 0.09842353689229544, 0.09842353689229544, 0.09842353689229544, 0.10565188838263895, 0.10565188838263895, 0.10565188838263895, 0.1060654805671698, 0.1060654805671698, 0.1060654805671698, 0.09429435371451256, 0.09429435371451256, 0.09429435371451256, 0.09098874032571291, 0.09098874032571291, 0.09098874032571291, 0.08541279265057822, 0.08541279265057822, 0.08541279265057822, 0.964617797671317, 0.964617797671317, 0.964617797671317, 0.9371188213420838, 0.9371188213420838, 0.9371188213420838, 0.9759088476916774, 0.9759088476916774, 0.9759088476916774, 0.24000249030891552, 0.24000249030891552, 0.24000249030891552, 0.2798586003264726, 0.2798586003264726, 0.2798586003264726, 0.2846110892573581, 0.2846110892573581, 0.2846110892573581, 0.27906168668986275, 0.27906168668986275, 0.27906168668986275, 0.4305011073528283, 0.4305011073528283, 0.4305011073528283, 0.3957312314321071, 0.3957312314321071, 0.3957312314321071, 0.1526381394171039, 0.1526381394171039, 0.1526381394171039, 0.16544651487194328, 0.16544651487194328, 0.16544651487194328, 0.16980180312331372, 0.16980180312331372, 0.16980180312331372, 0.1813451081379932, 0.1813451081379932, 0.1813451081379932, 0.1419707241888003, 0.1419707241888003, 0.1419707241888003, 0.14615855142473122, 0.14615855142473122, 0.14615855142473122, 0.0559244052629021, 0.0559244052629021, 0.0559244052629021, 0.05331662936521331, 0.05331662936521331, 0.05331662936521331, 0.04427876113274576, 0.04427876113274576, 0.04427876113274576, 0.14069080538235956, 0.14069080538235956, 0.14069080538235956, 0.13709058267923335, 0.13709058267923335, 0.13709058267923335, 0.15012236350883046, 0.15012236350883046, 0.15012236350883046, 0.014527428886247251, 0.014527428886247251, 0.014527428886247251, 0.004822336289410534, 0.004822336289410534, 0.004822336289410534, 0.004708489977392705, 0.004708489977392705, 0.004708489977392705, 0.11128669843816408, 0.11128669843816408, 0.11128669843816408, 0.12195613179658338, 0.12195613179658338, 0.12195613179658338, 0.1101780407550601, 0.1101780407550601, 0.1101780407550601, 0.4648172684210661, 0.4648172684210661, 0.4648172684210661, 0.44623609937818143, 0.44623609937818143, 0.44623609937818143, 0.4275862209292117, 0.4275862209292117, 0.4275862209292117, 0.08924507756439648, 0.08924507756439648, 0.08924507756439648, 0.08605097803767547, 0.08605097803767547, 0.08605097803767547, 0.07677484303841087, 0.07677484303841087, 0.07677484303841087, 0.1537283729186062, 0.1537283729186062, 0.1537283729186062, 0.15589227688903462, 0.15589227688903462, 0.15589227688903462, 0.18237203205517138, 0.18237203205517138, 0.18237203205517138, 0.26957969645399027, 0.26957969645399027, 0.26957969645399027, 0.24879541172055242, 0.24879541172055242, 0.24879541172055242, 0.2844964804288558, 0.2844964804288558, 0.2844964804288558, 0.19012747063037105, 0.19012747063037105, 0.19012747063037105, 0.18605162127360364, 0.18605162127360364, 0.18605162127360364, 0.1792311019693159, 0.1792311019693159, 0.1792311019693159, 0.18509031081288663, 0.18509031081288663, 0.18509031081288663, 0.1933266432529097, 0.1933266432529097, 0.1933266432529097, 0.19867585773856544, 0.19867585773856544, 0.19867585773856544, 0.17783801513409292, 0.17783801513409292, 0.17783801513409292, 0.17548296640186234, 0.17548296640186234, 0.17548296640186234, 0.18593557403407923, 0.18593557403407923, 0.18593557403407923, 0.5590001855734497, 0.5590001855734497, 0.5590001855734497, 0.16973357588047888, 0.16973357588047888, 0.16973357588047888, 0.1610131075326935, 0.1610131075326935, 0.1610131075326935, 0.194562185540596, 0.194562185540596, 0.194562185540596, 0.18939896471759088, 0.18939896471759088, 0.18939896471759088, 0.20608662261989075, 0.20608662261989075, 0.20608662261989075, 0.18001011668322775, 0.18001011668322775, 0.18001011668322775, 0.19102332050173298, 0.19102332050173298, 0.19102332050173298, 0.17466489729487256, 0.17466489729487256, 0.17466489729487256, 0.07189151448015951, 0.07189151448015951, 0.07189151448015951, 0.06587992071777826, 0.06587992071777826, 0.06587992071777826, 0.07216803712799214, 0.07216803712799214, 0.07216803712799214]}, "mutation_prompt": null}
{"id": "a36069b8-8926-4f17-bd9f-b57d4595598c", "solution": "import numpy as np\n\nclass EnhancedChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.5  # Adaptive scaling factor\n        self.CR_initial = 0.8  # Adaptive crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Parameters\n                F = self.F_initial + 0.1 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.1 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Chaotic Refinement\n                if np.random.rand() < 0.3:\n                    trial = self.chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def chaotic_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.abs(np.sin(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(3):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedChaoticDE", "description": "An enhanced differential evolution algorithm with adaptive scaling and crossover parameters, integrating chaotic search for improved exploration and convergence.", "configspace": "", "generation": 91, "fitness": 0.39681224966998035, "feedback": "The algorithm EnhancedChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "87bcfdb3-e3d0-4d19-8a99-bb5b9a364aa0", "metadata": {"aucs": [0.7946663579963851, 0.7946663579963851, 0.7946663579963851, 0.7999020136041658, 0.7999020136041658, 0.7999020136041658, 0.8033765521527423, 0.8033765521527423, 0.8033765521527423, 0.6682761837750804, 0.6682761837750804, 0.6682761837750804, 0.6448037241826664, 0.6448037241826664, 0.6448037241826664, 0.6612243992780639, 0.6612243992780639, 0.6612243992780639, 0.12899954221620413, 0.12899954221620413, 0.12899954221620413, 0.10457337127177202, 0.10457337127177202, 0.10457337127177202, 0.2701208200831223, 0.2701208200831223, 0.2701208200831223, 0.10906948373377456, 0.10906948373377456, 0.10906948373377456, 0.09609378101176591, 0.09609378101176591, 0.09609378101176591, 0.13189976261708725, 0.13189976261708725, 0.13189976261708725, 0.8922705077085712, 0.8922705077085712, 0.8922705077085712, 0.854339263172333, 0.854339263172333, 0.854339263172333, 0.8766034658831465, 0.8766034658831465, 0.8766034658831465, 0.6136187211972028, 0.6136187211972028, 0.6136187211972028, 0.5731319433167805, 0.5731319433167805, 0.5731319433167805, 0.5882841474721399, 0.5882841474721399, 0.5882841474721399, 0.7777610241288226, 0.7777610241288226, 0.7777610241288226, 0.826252061699855, 0.826252061699855, 0.826252061699855, 0.7963072959898568, 0.7963072959898568, 0.7963072959898568, 0.43563743400979915, 0.43563743400979915, 0.43563743400979915, 0.4214252869666525, 0.4214252869666525, 0.4214252869666525, 0.4564985450641105, 0.4564985450641105, 0.4564985450641105, 0.15441712864722468, 0.15441712864722468, 0.15441712864722468, 0.4220082380780674, 0.4220082380780674, 0.4220082380780674, 0.2451711186869454, 0.2451711186869454, 0.2451711186869454, 0.5313701715852317, 0.5313701715852317, 0.5313701715852317, 0.3844562026611955, 0.3844562026611955, 0.3844562026611955, 0.4404451201505136, 0.4404451201505136, 0.4404451201505136, 0.5748981643840364, 0.5748981643840364, 0.5748981643840364, 0.5170740032481993, 0.5170740032481993, 0.5170740032481993, 0.6246119647978946, 0.6246119647978946, 0.6246119647978946, 0.07132708039560642, 0.07132708039560642, 0.07132708039560642, 0.37662299464069116, 0.37662299464069116, 0.37662299464069116, 0.18176243234571343, 0.18176243234571343, 0.18176243234571343, 0.32449610767809123, 0.32449610767809123, 0.32449610767809123, 0.3604655462522157, 0.3604655462522157, 0.3604655462522157, 0.3528157383000393, 0.3528157383000393, 0.3528157383000393, 0.7742874888036603, 0.7742874888036603, 0.7742874888036603, 0.7069224852714093, 0.7069224852714093, 0.7069224852714093, 0.7323997487771838, 0.7323997487771838, 0.7323997487771838, 0.10486970087755876, 0.10486970087755876, 0.10486970087755876, 0.10381371212174217, 0.10381371212174217, 0.10381371212174217, 0.12843486193116638, 0.12843486193116638, 0.12843486193116638, 0.16407469426878307, 0.16407469426878307, 0.16407469426878307, 0.1358716340257663, 0.1358716340257663, 0.1358716340257663, 0.13735827643017817, 0.13735827643017817, 0.13735827643017817, 0.45125201895580447, 0.45125201895580447, 0.45125201895580447, 0.4433355496950109, 0.4433355496950109, 0.4433355496950109, 0.4371820645846459, 0.4371820645846459, 0.4371820645846459, 0.2579512015203923, 0.2579512015203923, 0.2579512015203923, 0.3184537004544724, 0.3184537004544724, 0.3184537004544724, 0.37278465910088365, 0.37278465910088365, 0.37278465910088365, 0.2326994311770354, 0.2326994311770354, 0.2326994311770354, 0.21472868032306391, 0.21472868032306391, 0.21472868032306391, 0.19441195914995224, 0.19441195914995224, 0.19441195914995224, 0.2062642620769476, 0.2062642620769476, 0.2062642620769476, 0.2088677717718449, 0.2088677717718449, 0.2088677717718449, 0.31880143464447297, 0.31880143464447297, 0.31880143464447297, 0.8003184298611457, 0.8003184298611457, 0.8003184298611457, 0.1575992254032682, 0.1575992254032682, 0.1575992254032682, 0.7207934211583571, 0.7207934211583571, 0.7207934211583571, 0.20240762159188108, 0.20240762159188108, 0.20240762159188108, 0.20186498038742795, 0.20186498038742795, 0.20186498038742795, 0.12414937568440876, 0.12414937568440876, 0.12414937568440876, 0.1901456880605471, 0.1901456880605471, 0.1901456880605471, 0.20455020125233936, 0.20455020125233936, 0.20455020125233936, 0.1862242255346802, 0.1862242255346802, 0.1862242255346802, 0.08841631622045154, 0.08841631622045154, 0.08841631622045154, 0.0768873181573706, 0.0768873181573706, 0.0768873181573706, 0.08528213658096795, 0.08528213658096795, 0.08528213658096795]}, "mutation_prompt": null}
{"id": "7aeb7715-5991-4812-850a-198feb4aa453", "solution": "import numpy as np\n\nclass RefinedChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.6  # Dynamic scaling factor\n        self.CR_initial = 0.9  # Dynamic crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Dynamic Parameters\n                F = self.F_initial + 0.15 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.15 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Stochastic Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.cos(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.03 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Chaotic Refinement\n                if np.random.rand() < 0.35:\n                    trial = self.stochastic_chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_chaotic_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.abs(np.cos(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "RefinedChaoticDE", "description": "A refined differential evolution algorithm using dynamic feedback control for scaling and crossover, with stochastic chaotic search boosting exploration.", "configspace": "", "generation": 92, "fitness": 0.4083514535474673, "feedback": "The algorithm RefinedChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "a36069b8-8926-4f17-bd9f-b57d4595598c", "metadata": {"aucs": [0.8684978212619668, 0.8684978212619668, 0.8684978212619668, 0.8733816348958291, 0.8733816348958291, 0.8733816348958291, 0.873678307039911, 0.873678307039911, 0.873678307039911, 0.6784807359872207, 0.6784807359872207, 0.6784807359872207, 0.5100314953114333, 0.5100314953114333, 0.5100314953114333, 0.46361939745977043, 0.46361939745977043, 0.46361939745977043, 0.10307198905958981, 0.10307198905958981, 0.10307198905958981, 0.0990432906536165, 0.0990432906536165, 0.0990432906536165, 0.09737830932900693, 0.09737830932900693, 0.09737830932900693, 0.092502354460963, 0.092502354460963, 0.092502354460963, 0.10756756768659925, 0.10756756768659925, 0.10756756768659925, 0.10359341122506027, 0.10359341122506027, 0.10359341122506027, 0.9886566954898455, 0.9886566954898455, 0.9886566954898455, 0.9904101393287997, 0.9904101393287997, 0.9904101393287997, 0.9891515292419598, 0.9891515292419598, 0.9891515292419598, 0.5878303021798, 0.5878303021798, 0.5878303021798, 0.6018878910087664, 0.6018878910087664, 0.6018878910087664, 0.6568455093062325, 0.6568455093062325, 0.6568455093062325, 0.31190238765543377, 0.31190238765543377, 0.31190238765543377, 0.2113371374164561, 0.2113371374164561, 0.2113371374164561, 0.8842329024210067, 0.8842329024210067, 0.8842329024210067, 0.33994070985924774, 0.33994070985924774, 0.33994070985924774, 0.4952305254773014, 0.4952305254773014, 0.4952305254773014, 0.13205388191622036, 0.13205388191622036, 0.13205388191622036, 0.12742101215537116, 0.12742101215537116, 0.12742101215537116, 0.130246216664892, 0.130246216664892, 0.130246216664892, 0.7081781417358977, 0.7081781417358977, 0.7081781417358977, 0.6520616806945545, 0.6520616806945545, 0.6520616806945545, 0.7097345934484061, 0.7097345934484061, 0.7097345934484061, 0.6028677752935786, 0.6028677752935786, 0.6028677752935786, 0.7850738376436353, 0.7850738376436353, 0.7850738376436353, 0.789101857324749, 0.789101857324749, 0.789101857324749, 0.7743631681106914, 0.7743631681106914, 0.7743631681106914, 0.534466427879904, 0.534466427879904, 0.534466427879904, 0.5336006217635031, 0.5336006217635031, 0.5336006217635031, 0.10180755064539548, 0.10180755064539548, 0.10180755064539548, 0.5787867997020177, 0.5787867997020177, 0.5787867997020177, 0.27851486302306905, 0.27851486302306905, 0.27851486302306905, 0.4894842799734722, 0.4894842799734722, 0.4894842799734722, 0.8186243707095748, 0.8186243707095748, 0.8186243707095748, 0.8263724966823213, 0.8263724966823213, 0.8263724966823213, 0.8346501625019771, 0.8346501625019771, 0.8346501625019771, 0.10789739374359286, 0.10789739374359286, 0.10789739374359286, 0.09648543240899221, 0.09648543240899221, 0.09648543240899221, 0.12532668564158012, 0.12532668564158012, 0.12532668564158012, 0.7330692445328119, 0.7330692445328119, 0.7330692445328119, 0.2362070649061737, 0.2362070649061737, 0.2362070649061737, 0.1843873197818955, 0.1843873197818955, 0.1843873197818955, 0.33211511797500237, 0.33211511797500237, 0.33211511797500237, 0.5144640783837285, 0.5144640783837285, 0.5144640783837285, 0.2809560696190717, 0.2809560696190717, 0.2809560696190717, 0.30662248002086945, 0.30662248002086945, 0.30662248002086945, 0.21883015600564937, 0.21883015600564937, 0.21883015600564937, 0.19509924401333623, 0.19509924401333623, 0.19509924401333623, 0.1942797799579532, 0.1942797799579532, 0.1942797799579532, 0.18997024223439307, 0.18997024223439307, 0.18997024223439307, 0.21233771554795733, 0.21233771554795733, 0.21233771554795733, 0.24688981066157023, 0.24688981066157023, 0.24688981066157023, 0.19564213386379492, 0.19564213386379492, 0.19564213386379492, 0.20466055722096022, 0.20466055722096022, 0.20466055722096022, 0.9084560714324982, 0.9084560714324982, 0.9084560714324982, 0.1519075497973248, 0.1519075497973248, 0.1519075497973248, 0.11299466282973503, 0.11299466282973503, 0.11299466282973503, 0.16897769999662726, 0.16897769999662726, 0.16897769999662726, 0.2104448209905866, 0.2104448209905866, 0.2104448209905866, 0.15701486516497787, 0.15701486516497787, 0.15701486516497787, 0.1821811780692485, 0.1821811780692485, 0.1821811780692485, 0.17490640629823628, 0.17490640629823628, 0.17490640629823628, 0.1764193548475208, 0.1764193548475208, 0.1764193548475208, 0.08005857304384467, 0.08005857304384467, 0.08005857304384467, 0.0830685360996456, 0.0830685360996456, 0.0830685360996456, 0.08395262870302234, 0.08395262870302234, 0.08395262870302234]}, "mutation_prompt": null}
{"id": "472878fe-74fb-4eb3-92e0-7c764e76cc08", "solution": "import numpy as np\n\nclass AdaptiveChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.7  # Adaptive scaling factor\n        self.CR_initial = 0.8  # Adaptive crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Parameters\n                F = self.F_initial + 0.2 * np.sin(np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.2 * np.cos(np.pi * evaluations / self.budget)\n\n                # Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Chaotic Refinement\n                if np.random.rand() < 0.4:\n                    trial = self.chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def chaotic_refinement(self, solution, func, progress):\n        step_size = 0.08 * (self.upper_bound - self.lower_bound) * np.abs(np.sin(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveChaoticDE", "description": "An adaptive differential evolution algorithm with chaotic mutation and crossover mechanisms for enhanced exploration and exploitation.", "configspace": "", "generation": 93, "fitness": 0.27443214383596365, "feedback": "The algorithm AdaptiveChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.18.", "error": "", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.5176578107970353, 0.5176578107970353, 0.5176578107970353, 0.547433380247925, 0.547433380247925, 0.547433380247925, 0.5884074794007951, 0.5884074794007951, 0.5884074794007951, 0.25502830474924043, 0.25502830474924043, 0.25502830474924043, 0.2557407792597539, 0.2557407792597539, 0.2557407792597539, 0.2819731469019302, 0.2819731469019302, 0.2819731469019302, 0.08180385241906496, 0.08180385241906496, 0.08180385241906496, 0.0822579907041392, 0.0822579907041392, 0.0822579907041392, 0.09215877079823853, 0.09215877079823853, 0.09215877079823853, 0.06827685955988505, 0.06827685955988505, 0.06827685955988505, 0.07771826236112589, 0.07771826236112589, 0.07771826236112589, 0.06921116372422298, 0.06921116372422298, 0.06921116372422298, 0.7370176620263167, 0.7370176620263167, 0.7370176620263167, 0.7909380044089802, 0.7909380044089802, 0.7909380044089802, 0.7827188574178767, 0.7827188574178767, 0.7827188574178767, 0.2921217061551532, 0.2921217061551532, 0.2921217061551532, 0.2565808181597642, 0.2565808181597642, 0.2565808181597642, 0.31814452019026285, 0.31814452019026285, 0.31814452019026285, 0.552835946717259, 0.552835946717259, 0.552835946717259, 0.6301634100104134, 0.6301634100104134, 0.6301634100104134, 0.6413849709048032, 0.6413849709048032, 0.6413849709048032, 0.15241601415062467, 0.15241601415062467, 0.15241601415062467, 0.1793329681846655, 0.1793329681846655, 0.1793329681846655, 0.2505577100804893, 0.2505577100804893, 0.2505577100804893, 0.21701752171723254, 0.21701752171723254, 0.21701752171723254, 0.19567620553481513, 0.19567620553481513, 0.19567620553481513, 0.23904217563856622, 0.23904217563856622, 0.23904217563856622, 0.22224331005261988, 0.22224331005261988, 0.22224331005261988, 0.21830172419507465, 0.21830172419507465, 0.21830172419507465, 0.2794901808819711, 0.2794901808819711, 0.2794901808819711, 0.4164186476732753, 0.4164186476732753, 0.4164186476732753, 0.3919598786391387, 0.3919598786391387, 0.3919598786391387, 0.3784307286210443, 0.3784307286210443, 0.3784307286210443, 0.11164821335139874, 0.11164821335139874, 0.11164821335139874, 0.08688399161148153, 0.08688399161148153, 0.08688399161148153, 0.07529386747773592, 0.07529386747773592, 0.07529386747773592, 0.17536569719440054, 0.17536569719440054, 0.17536569719440054, 0.1714556535286974, 0.1714556535286974, 0.1714556535286974, 0.1980910647822084, 0.1980910647822084, 0.1980910647822084, 0.518272643464375, 0.518272643464375, 0.518272643464375, 0.5362395921047651, 0.5362395921047651, 0.5362395921047651, 0.4757405954694054, 0.4757405954694054, 0.4757405954694054, 0.09632466595798084, 0.09632466595798084, 0.09632466595798084, 0.08516543418156675, 0.08516543418156675, 0.08516543418156675, 0.0969752407099832, 0.0969752407099832, 0.0969752407099832, 0.2372064009549163, 0.2372064009549163, 0.2372064009549163, 0.30702289511287195, 0.30702289511287195, 0.30702289511287195, 0.26417936580839274, 0.26417936580839274, 0.26417936580839274, 0.27218917605144965, 0.27218917605144965, 0.27218917605144965, 0.2686782608047499, 0.2686782608047499, 0.2686782608047499, 0.2892380501282854, 0.2892380501282854, 0.2892380501282854, 0.23468641693836712, 0.23468641693836712, 0.23468641693836712, 0.22732533967669621, 0.22732533967669621, 0.22732533967669621, 0.2248994245125272, 0.2248994245125272, 0.2248994245125272, 0.19074340416502988, 0.19074340416502988, 0.19074340416502988, 0.17634399206675722, 0.17634399206675722, 0.17634399206675722, 0.1782587176031316, 0.1782587176031316, 0.1782587176031316, 0.19527517701718622, 0.19527517701718622, 0.19527517701718622, 0.174421605292578, 0.174421605292578, 0.174421605292578, 0.18299580820733552, 0.18299580820733552, 0.18299580820733552, 0.1594953350834103, 0.1594953350834103, 0.1594953350834103, 0.1483464255771232, 0.1483464255771232, 0.1483464255771232, 0.1781631038995427, 0.1781631038995427, 0.1781631038995427, 0.5001686238618801, 0.5001686238618801, 0.5001686238618801, 0.3090349623239703, 0.3090349623239703, 0.3090349623239703, 0.5686208538632072, 0.5686208538632072, 0.5686208538632072, 0.1859695545239518, 0.1859695545239518, 0.1859695545239518, 0.18303729383087652, 0.18303729383087652, 0.18303729383087652, 0.18389451258576395, 0.18389451258576395, 0.18389451258576395, 0.0839860456499073, 0.0839860456499073, 0.0839860456499073, 0.0717066348317208, 0.0717066348317208, 0.0717066348317208, 0.07530955370005321, 0.07530955370005321, 0.07530955370005321]}, "mutation_prompt": null}
{"id": "4378d7e4-9d43-4fbc-96e6-26c731147508", "solution": "import numpy as np\n\nclass RefinedChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.6  # Dynamic scaling factor\n        self.CR_initial = 0.9  # Dynamic crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Dynamic Parameters\n                F = self.F_initial + 0.15 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.15 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Stochastic Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.cos(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.03 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Chaotic Refinement\n                if np.random.rand() < 0.35:\n                    trial = self.stochastic_chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_chaotic_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.abs(np.cos(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "RefinedChaoticDE", "description": "A refined differential evolution algorithm using dynamic feedback control for scaling and crossover, with stochastic chaotic search boosting exploration.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.8684978212619668, 0.8684978212619668, 0.8684978212619668, 0.8733816348958291, 0.8733816348958291, 0.8733816348958291, 0.873678307039911, 0.873678307039911, 0.873678307039911, 0.6784807359872207, 0.6784807359872207, 0.6784807359872207, 0.5100314953114333, 0.5100314953114333, 0.5100314953114333, 0.46361939745977043, 0.46361939745977043, 0.46361939745977043, 0.10307198905958981, 0.10307198905958981, 0.10307198905958981, 0.0990432906536165, 0.0990432906536165, 0.0990432906536165, 0.09737830932900693, 0.09737830932900693, 0.09737830932900693, 0.092502354460963, 0.092502354460963, 0.092502354460963, 0.10756756768659925, 0.10756756768659925, 0.10756756768659925, 0.10359341122506027, 0.10359341122506027, 0.10359341122506027, 0.9886566954898455, 0.9886566954898455, 0.9886566954898455, 0.9904101393287997, 0.9904101393287997, 0.9904101393287997, 0.9891515292419598, 0.9891515292419598, 0.9891515292419598, 0.5878303021798, 0.5878303021798, 0.5878303021798, 0.6018878910087664, 0.6018878910087664, 0.6018878910087664, 0.6568455093062325, 0.6568455093062325, 0.6568455093062325, 0.31190238765543377, 0.31190238765543377, 0.31190238765543377, 0.2113371374164561, 0.2113371374164561, 0.2113371374164561, 0.8842329024210067, 0.8842329024210067, 0.8842329024210067, 0.33994070985924774, 0.33994070985924774, 0.33994070985924774, 0.4952305254773014, 0.4952305254773014, 0.4952305254773014, 0.13205388191622036, 0.13205388191622036, 0.13205388191622036, 0.12742101215537116, 0.12742101215537116, 0.12742101215537116, 0.130246216664892, 0.130246216664892, 0.130246216664892, 0.7081781417358977, 0.7081781417358977, 0.7081781417358977, 0.6520616806945545, 0.6520616806945545, 0.6520616806945545, 0.7097345934484061, 0.7097345934484061, 0.7097345934484061, 0.6028677752935786, 0.6028677752935786, 0.6028677752935786, 0.7850738376436353, 0.7850738376436353, 0.7850738376436353, 0.789101857324749, 0.789101857324749, 0.789101857324749, 0.7743631681106914, 0.7743631681106914, 0.7743631681106914, 0.534466427879904, 0.534466427879904, 0.534466427879904, 0.5336006217635031, 0.5336006217635031, 0.5336006217635031, 0.10180755064539548, 0.10180755064539548, 0.10180755064539548, 0.5787867997020177, 0.5787867997020177, 0.5787867997020177, 0.27851486302306905, 0.27851486302306905, 0.27851486302306905, 0.4894842799734722, 0.4894842799734722, 0.4894842799734722, 0.8186243707095748, 0.8186243707095748, 0.8186243707095748, 0.8263724966823213, 0.8263724966823213, 0.8263724966823213, 0.8346501625019771, 0.8346501625019771, 0.8346501625019771, 0.10789739374359286, 0.10789739374359286, 0.10789739374359286, 0.09648543240899221, 0.09648543240899221, 0.09648543240899221, 0.12532668564158012, 0.12532668564158012, 0.12532668564158012, 0.7330692445328119, 0.7330692445328119, 0.7330692445328119, 0.2362070649061737, 0.2362070649061737, 0.2362070649061737, 0.1843873197818955, 0.1843873197818955, 0.1843873197818955, 0.33211511797500237, 0.33211511797500237, 0.33211511797500237, 0.5144640783837285, 0.5144640783837285, 0.5144640783837285, 0.2809560696190717, 0.2809560696190717, 0.2809560696190717, 0.30662248002086945, 0.30662248002086945, 0.30662248002086945, 0.21883015600564937, 0.21883015600564937, 0.21883015600564937, 0.19509924401333623, 0.19509924401333623, 0.19509924401333623, 0.1942797799579532, 0.1942797799579532, 0.1942797799579532, 0.18997024223439307, 0.18997024223439307, 0.18997024223439307, 0.21233771554795733, 0.21233771554795733, 0.21233771554795733, 0.24688981066157023, 0.24688981066157023, 0.24688981066157023, 0.19564213386379492, 0.19564213386379492, 0.19564213386379492, 0.20466055722096022, 0.20466055722096022, 0.20466055722096022, 0.9084560714324982, 0.9084560714324982, 0.9084560714324982, 0.1519075497973248, 0.1519075497973248, 0.1519075497973248, 0.11299466282973503, 0.11299466282973503, 0.11299466282973503, 0.16897769999662726, 0.16897769999662726, 0.16897769999662726, 0.2104448209905866, 0.2104448209905866, 0.2104448209905866, 0.15701486516497787, 0.15701486516497787, 0.15701486516497787, 0.1821811780692485, 0.1821811780692485, 0.1821811780692485, 0.17490640629823628, 0.17490640629823628, 0.17490640629823628, 0.1764193548475208, 0.1764193548475208, 0.1764193548475208, 0.08005857304384467, 0.08005857304384467, 0.08005857304384467, 0.0830685360996456, 0.0830685360996456, 0.0830685360996456, 0.08395262870302234, 0.08395262870302234, 0.08395262870302234]}, "mutation_prompt": null}
{"id": "0ff5fe3c-daba-49c4-be5b-ce721a603b02", "solution": "# Description: A refined differential evolution algorithm with adaptive scaling and stochastic chaotic search to enhance exploration and convergence.\n\nimport numpy as np\n\nclass RefinedChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.6  # Dynamic scaling factor\n        self.CR_initial = 0.9  # Dynamic crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Dynamic Parameters\n                F = self.F_initial + 0.1 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.1 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Stochastic Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.02 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Chaotic Refinement\n                if np.random.rand() < 0.3:\n                    trial = self.stochastic_chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_chaotic_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.abs(np.sin(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "RefinedChaoticDE", "description": "A refined differential evolution algorithm with adaptive scaling and stochastic chaotic search to enhance exploration and convergence.", "configspace": "", "generation": 95, "fitness": 0.362570601571478, "feedback": "The algorithm RefinedChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.23.", "error": "", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.7027681946330028, 0.7027681946330028, 0.7027681946330028, 0.7014228401858031, 0.7014228401858031, 0.7014228401858031, 0.6971923385627237, 0.6971923385627237, 0.6971923385627237, 0.4939265547451379, 0.4939265547451379, 0.4939265547451379, 0.5132228732104942, 0.5132228732104942, 0.5132228732104942, 0.48758430753378046, 0.48758430753378046, 0.48758430753378046, 0.0994155022060006, 0.0994155022060006, 0.0994155022060006, 0.09600390808974824, 0.09600390808974824, 0.09600390808974824, 0.09785231486797952, 0.09785231486797952, 0.09785231486797952, 0.07452165080139583, 0.07452165080139583, 0.07452165080139583, 0.07903366442084148, 0.07903366442084148, 0.07903366442084148, 0.0850449910279042, 0.0850449910279042, 0.0850449910279042, 0.8320603542178598, 0.8320603542178598, 0.8320603542178598, 0.8604188129893867, 0.8604188129893867, 0.8604188129893867, 0.7920995430150282, 0.7920995430150282, 0.7920995430150282, 0.4149966116269207, 0.4149966116269207, 0.4149966116269207, 0.422829549319396, 0.422829549319396, 0.422829549319396, 0.4579928612751133, 0.4579928612751133, 0.4579928612751133, 0.7053053622354521, 0.7053053622354521, 0.7053053622354521, 0.7088498671828881, 0.7088498671828881, 0.7088498671828881, 0.7265602399743586, 0.7265602399743586, 0.7265602399743586, 0.34747002569161145, 0.34747002569161145, 0.34747002569161145, 0.2613917515702435, 0.2613917515702435, 0.2613917515702435, 0.25744585806860354, 0.25744585806860354, 0.25744585806860354, 0.24546886362310338, 0.24546886362310338, 0.24546886362310338, 0.3754314814491617, 0.3754314814491617, 0.3754314814491617, 0.2704500360613007, 0.2704500360613007, 0.2704500360613007, 0.40498271633168237, 0.40498271633168237, 0.40498271633168237, 0.45730969708139835, 0.45730969708139835, 0.45730969708139835, 0.4443583355160926, 0.4443583355160926, 0.4443583355160926, 0.5478408529200984, 0.5478408529200984, 0.5478408529200984, 0.5764378608233005, 0.5764378608233005, 0.5764378608233005, 0.5483594552832419, 0.5483594552832419, 0.5483594552832419, 0.1211002950618375, 0.1211002950618375, 0.1211002950618375, 0.30931994630370896, 0.30931994630370896, 0.30931994630370896, 0.11808660725848164, 0.11808660725848164, 0.11808660725848164, 0.2980031468961294, 0.2980031468961294, 0.2980031468961294, 0.3131101987406455, 0.3131101987406455, 0.3131101987406455, 0.33621645573789094, 0.33621645573789094, 0.33621645573789094, 0.6010336690410947, 0.6010336690410947, 0.6010336690410947, 0.6728134477218211, 0.6728134477218211, 0.6728134477218211, 0.6328768152642057, 0.6328768152642057, 0.6328768152642057, 0.11198690096571595, 0.11198690096571595, 0.11198690096571595, 0.09539197080858663, 0.09539197080858663, 0.09539197080858663, 0.12885423981948718, 0.12885423981948718, 0.12885423981948718, 0.15487241948935693, 0.15487241948935693, 0.15487241948935693, 0.42729763691511, 0.42729763691511, 0.42729763691511, 0.21119645653394004, 0.21119645653394004, 0.21119645653394004, 0.34227803228169673, 0.34227803228169673, 0.34227803228169673, 0.34879280490707865, 0.34879280490707865, 0.34879280490707865, 0.32906572353304353, 0.32906572353304353, 0.32906572353304353, 0.2998615817410917, 0.2998615817410917, 0.2998615817410917, 0.2834942142335366, 0.2834942142335366, 0.2834942142335366, 0.3007348194187027, 0.3007348194187027, 0.3007348194187027, 0.20968774810589452, 0.20968774810589452, 0.20968774810589452, 0.19673787438218304, 0.19673787438218304, 0.19673787438218304, 0.19286127056719615, 0.19286127056719615, 0.19286127056719615, 0.18475820680483201, 0.18475820680483201, 0.18475820680483201, 0.1744853274642021, 0.1744853274642021, 0.1744853274642021, 0.2310361462831052, 0.2310361462831052, 0.2310361462831052, 0.6805914958552103, 0.6805914958552103, 0.6805914958552103, 0.6374572520592523, 0.6374572520592523, 0.6374572520592523, 0.15245151336481266, 0.15245151336481266, 0.15245151336481266, 0.7061773498464063, 0.7061773498464063, 0.7061773498464063, 0.6032893590321668, 0.6032893590321668, 0.6032893590321668, 0.15013642806844785, 0.15013642806844785, 0.15013642806844785, 0.18300152358242727, 0.18300152358242727, 0.18300152358242727, 0.18224768801932079, 0.18224768801932079, 0.18224768801932079, 0.17653168168199407, 0.17653168168199407, 0.17653168168199407, 0.07224751635581816, 0.07224751635581816, 0.07224751635581816, 0.0755916310346294, 0.0755916310346294, 0.0755916310346294, 0.07335664142430409, 0.07335664142430409, 0.07335664142430409]}, "mutation_prompt": null}
{"id": "35cb8a18-1a1c-4ce6-a851-139d12318b6d", "solution": "import numpy as np\n\nclass EnhancedChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.7  # Dynamic scaling factor with slight increase\n        self.CR_initial = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Parameters\n                F = self.F_initial + 0.12 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.12 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Chaotic Mutation with a twist\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.02 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Chaotic Refinement with reduced probability\n                if np.random.rand() < 0.3:\n                    trial = self.chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def chaotic_refinement(self, solution, func, progress):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound) * np.abs(np.sin(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(4):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedChaoticDE", "description": "An enhanced differential evolution using adaptive chaotic parameters for better exploration-exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.2874459498193667, "feedback": "The algorithm EnhancedChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.20.", "error": "", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.616955979318937, 0.616955979318937, 0.616955979318937, 0.6583615615420328, 0.6583615615420328, 0.6583615615420328, 0.654104167470879, 0.654104167470879, 0.654104167470879, 0.4223331276800767, 0.4223331276800767, 0.4223331276800767, 0.42185691215095955, 0.42185691215095955, 0.42185691215095955, 0.3898427493424591, 0.3898427493424591, 0.3898427493424591, 0.0937529455263113, 0.0937529455263113, 0.0937529455263113, 0.09709998880832793, 0.09709998880832793, 0.09709998880832793, 0.0848409683274427, 0.0848409683274427, 0.0848409683274427, 0.09611658103519771, 0.09611658103519771, 0.09611658103519771, 0.08364787218549663, 0.08364787218549663, 0.08364787218549663, 0.08126424794447717, 0.08126424794447717, 0.08126424794447717, 0.8679647564655164, 0.8679647564655164, 0.8679647564655164, 0.7915353800383319, 0.7915353800383319, 0.7915353800383319, 0.8030572477523993, 0.8030572477523993, 0.8030572477523993, 0.32458696571073264, 0.32458696571073264, 0.32458696571073264, 0.2932539405723046, 0.2932539405723046, 0.2932539405723046, 0.3422958169480096, 0.3422958169480096, 0.3422958169480096, 0.5535182112671528, 0.5535182112671528, 0.5535182112671528, 0.6926429420743296, 0.6926429420743296, 0.6926429420743296, 0.5820179726030699, 0.5820179726030699, 0.5820179726030699, 0.24286959593468538, 0.24286959593468538, 0.24286959593468538, 0.27523884765837425, 0.27523884765837425, 0.27523884765837425, 0.1741163301025508, 0.1741163301025508, 0.1741163301025508, 0.22671646656941413, 0.22671646656941413, 0.22671646656941413, 0.2532176702736574, 0.2532176702736574, 0.2532176702736574, 0.24205690364686283, 0.24205690364686283, 0.24205690364686283, 0.17981517203494202, 0.17981517203494202, 0.17981517203494202, 0.1616412348714995, 0.1616412348714995, 0.1616412348714995, 0.21593465511044474, 0.21593465511044474, 0.21593465511044474, 0.3211136518190195, 0.3211136518190195, 0.3211136518190195, 0.3241703680259871, 0.3241703680259871, 0.3241703680259871, 0.39060653855389504, 0.39060653855389504, 0.39060653855389504, 0.0729597253000478, 0.0729597253000478, 0.0729597253000478, 0.03752716184641958, 0.03752716184641958, 0.03752716184641958, 0.07451640502266943, 0.07451640502266943, 0.07451640502266943, 0.17999694837188085, 0.17999694837188085, 0.17999694837188085, 0.19943913246900624, 0.19943913246900624, 0.19943913246900624, 0.17895247332933195, 0.17895247332933195, 0.17895247332933195, 0.5178383310179417, 0.5178383310179417, 0.5178383310179417, 0.49364530898896397, 0.49364530898896397, 0.49364530898896397, 0.55287781739719, 0.55287781739719, 0.55287781739719, 0.08743227798557107, 0.08743227798557107, 0.08743227798557107, 0.08758471183458894, 0.08758471183458894, 0.08758471183458894, 0.07834352309742187, 0.07834352309742187, 0.07834352309742187, 0.17067372472343867, 0.17067372472343867, 0.17067372472343867, 0.1595781922996975, 0.1595781922996975, 0.1595781922996975, 0.2578220484917372, 0.2578220484917372, 0.2578220484917372, 0.2765483547446923, 0.2765483547446923, 0.2765483547446923, 0.2747377109566368, 0.2747377109566368, 0.2747377109566368, 0.3121495755185959, 0.3121495755185959, 0.3121495755185959, 0.23457094328979233, 0.23457094328979233, 0.23457094328979233, 0.20256056215180018, 0.20256056215180018, 0.20256056215180018, 0.22680347333759632, 0.22680347333759632, 0.22680347333759632, 0.18455593557827232, 0.18455593557827232, 0.18455593557827232, 0.19083446062877407, 0.19083446062877407, 0.19083446062877407, 0.2017723501780122, 0.2017723501780122, 0.2017723501780122, 0.17886420905706968, 0.17886420905706968, 0.17886420905706968, 0.17748599118939024, 0.17748599118939024, 0.17748599118939024, 0.17541292315703194, 0.17541292315703194, 0.17541292315703194, 0.6356165181295239, 0.6356165181295239, 0.6356165181295239, 0.4372311665483354, 0.4372311665483354, 0.4372311665483354, 0.1353647697992345, 0.1353647697992345, 0.1353647697992345, 0.16027123591049108, 0.16027123591049108, 0.16027123591049108, 0.19399386035070376, 0.19399386035070376, 0.19399386035070376, 0.6009627384925549, 0.6009627384925549, 0.6009627384925549, 0.19163471665727339, 0.19163471665727339, 0.19163471665727339, 0.1768275849847294, 0.1768275849847294, 0.1768275849847294, 0.192221768729278, 0.192221768729278, 0.192221768729278, 0.0742238843362919, 0.0742238843362919, 0.0742238843362919, 0.08771612768313353, 0.08771612768313353, 0.08771612768313353, 0.06601197404350823, 0.06601197404350823, 0.06601197404350823]}, "mutation_prompt": null}
{"id": "b40b916e-78da-4114-9443-502947f5d01e", "solution": "import numpy as np\n\nclass EnhancedChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.7  # Adjusted dynamic scaling factor\n        self.CR_initial = 0.85  # Adjusted dynamic crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Parameters\n                F = self.F_initial + 0.1 * np.sin(3 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.1 * np.cos(3 * np.pi * evaluations / self.budget)\n\n                # Stochastic Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.02 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Chaotic Refinement\n                if np.random.rand() < 0.4:\n                    trial = self.stochastic_chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_chaotic_refinement(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * np.abs(np.sin(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedChaoticDE", "description": "An enhanced differential evolution with adaptive scaling and chaotic feedback, optimizing exploration-exploitation balance through dynamic chaotic perturbations.", "configspace": "", "generation": 97, "fitness": 0.23099781428411653, "feedback": "The algorithm EnhancedChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.18.", "error": "", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.5405613385866705, 0.5405613385866705, 0.5405613385866705, 0.6006239174294328, 0.6006239174294328, 0.6006239174294328, 0.5307405381527853, 0.5307405381527853, 0.5307405381527853, 0.24254524134709443, 0.24254524134709443, 0.24254524134709443, 0.2744328054497509, 0.2744328054497509, 0.2744328054497509, 0.2873587712272001, 0.2873587712272001, 0.2873587712272001, 0.09660582026210018, 0.09660582026210018, 0.09660582026210018, 0.09866063519639678, 0.09866063519639678, 0.09866063519639678, 0.08429260499291735, 0.08429260499291735, 0.08429260499291735, 0.07695243937731489, 0.07695243937731489, 0.07695243937731489, 0.08855682375983165, 0.08855682375983165, 0.08855682375983165, 0.06717129921060383, 0.06717129921060383, 0.06717129921060383, 0.8127795946612927, 0.8127795946612927, 0.8127795946612927, 0.7951254989673779, 0.7951254989673779, 0.7951254989673779, 0.7796464034632681, 0.7796464034632681, 0.7796464034632681, 0.2522884022492039, 0.2522884022492039, 0.2522884022492039, 0.2575969369995784, 0.2575969369995784, 0.2575969369995784, 0.23613539335590938, 0.23613539335590938, 0.23613539335590938, 0.4562486675000714, 0.4562486675000714, 0.4562486675000714, 0.5185064124741663, 0.5185064124741663, 0.5185064124741663, 0.4593533144476263, 0.4593533144476263, 0.4593533144476263, 0.1606326611383505, 0.1606326611383505, 0.1606326611383505, 0.19062445958836804, 0.19062445958836804, 0.19062445958836804, 0.15987538528234913, 0.15987538528234913, 0.15987538528234913, 0.1900597647057919, 0.1900597647057919, 0.1900597647057919, 0.14476774985802643, 0.14476774985802643, 0.14476774985802643, 0.15853235575564317, 0.15853235575564317, 0.15853235575564317, 0.08840594882557584, 0.08840594882557584, 0.08840594882557584, 0.11281087664347711, 0.11281087664347711, 0.11281087664347711, 0.09432257691178891, 0.09432257691178891, 0.09432257691178891, 0.25869845276939774, 0.25869845276939774, 0.25869845276939774, 0.22521594835006797, 0.22521594835006797, 0.22521594835006797, 0.19826143089357107, 0.19826143089357107, 0.19826143089357107, 0.009674988359343328, 0.009674988359343328, 0.009674988359343328, 0.03140742773306848, 0.03140742773306848, 0.03140742773306848, 0.0204880467669587, 0.0204880467669587, 0.0204880467669587, 0.11652726719239526, 0.11652726719239526, 0.11652726719239526, 0.1281467029092328, 0.1281467029092328, 0.1281467029092328, 0.1382689390313011, 0.1382689390313011, 0.1382689390313011, 0.4486106602525254, 0.4486106602525254, 0.4486106602525254, 0.4245983555978161, 0.4245983555978161, 0.4245983555978161, 0.438213133583117, 0.438213133583117, 0.438213133583117, 0.09567439683914258, 0.09567439683914258, 0.09567439683914258, 0.07223704846191503, 0.07223704846191503, 0.07223704846191503, 0.07305440492232573, 0.07305440492232573, 0.07305440492232573, 0.13961286981297993, 0.13961286981297993, 0.13961286981297993, 0.14928886888781967, 0.14928886888781967, 0.14928886888781967, 0.12530458551751422, 0.12530458551751422, 0.12530458551751422, 0.2627660244724995, 0.2627660244724995, 0.2627660244724995, 0.2666934878610163, 0.2666934878610163, 0.2666934878610163, 0.24988307921166897, 0.24988307921166897, 0.24988307921166897, 0.2009675431752952, 0.2009675431752952, 0.2009675431752952, 0.18032335145492673, 0.18032335145492673, 0.18032335145492673, 0.18522876318509485, 0.18522876318509485, 0.18522876318509485, 0.17582914634808644, 0.17582914634808644, 0.17582914634808644, 0.18317561409650684, 0.18317561409650684, 0.18317561409650684, 0.17854894067306126, 0.17854894067306126, 0.17854894067306126, 0.16642152656662512, 0.16642152656662512, 0.16642152656662512, 0.16279518941532822, 0.16279518941532822, 0.16279518941532822, 0.18972570490531937, 0.18972570490531937, 0.18972570490531937, 0.3484512059843359, 0.3484512059843359, 0.3484512059843359, 0.1742542409888127, 0.1742542409888127, 0.1742542409888127, 0.16741101404008263, 0.16741101404008263, 0.16741101404008263, 0.15614391459478216, 0.15614391459478216, 0.15614391459478216, 0.46281836637906326, 0.46281836637906326, 0.46281836637906326, 0.1939735123004367, 0.1939735123004367, 0.1939735123004367, 0.1932667038905045, 0.1932667038905045, 0.1932667038905045, 0.1765588255419318, 0.1765588255419318, 0.1765588255419318, 0.18693992635949053, 0.18693992635949053, 0.18693992635949053, 0.06810216994215157, 0.06810216994215157, 0.06810216994215157, 0.07379228584082298, 0.07379228584082298, 0.07379228584082298, 0.07827392552809165, 0.07827392552809165, 0.07827392552809165]}, "mutation_prompt": null}
{"id": "200da7a0-5862-4df2-977f-cc87001b0c2d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.7  # Adjusted dynamic scaling factor\n        self.CR_initial = 0.8  # Adjusted dynamic crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Dynamic Parameters\n                F = self.F_initial + 0.2 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.1 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Stochastic Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Dynamic Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Stochastic Chaotic Refinement\n                if np.random.rand() < 0.30:\n                    trial = self.stochastic_chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def stochastic_chaotic_refinement(self, solution, func, progress):\n        step_size = 0.15 * (self.upper_bound - self.lower_bound) * np.abs(np.sin(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "EnhancedAdaptiveChaoticDE", "description": "An enhanced differential evolution with adaptive scaling, crossover, and chaotic local search leveraging dynamic chaos for robust exploration and exploitation balance.", "configspace": "", "generation": 98, "fitness": 0.2335342171460933, "feedback": "The algorithm EnhancedAdaptiveChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.5588808123961775, 0.5588808123961775, 0.5588808123961775, 0.5571472415671747, 0.5571472415671747, 0.5571472415671747, 0.5128167739395686, 0.5128167739395686, 0.5128167739395686, 0.23041400233654163, 0.23041400233654163, 0.23041400233654163, 0.28003207595478996, 0.28003207595478996, 0.28003207595478996, 0.2666307313726337, 0.2666307313726337, 0.2666307313726337, 0.08526507240429215, 0.08526507240429215, 0.08526507240429215, 0.08654330990900438, 0.08654330990900438, 0.08654330990900438, 0.13063557304794426, 0.13063557304794426, 0.13063557304794426, 0.07595179902728233, 0.07595179902728233, 0.07595179902728233, 0.07884837579615012, 0.07884837579615012, 0.07884837579615012, 0.08451288668036028, 0.08451288668036028, 0.08451288668036028, 0.8575659990883358, 0.8575659990883358, 0.8575659990883358, 0.901050053531448, 0.901050053531448, 0.901050053531448, 0.8266851676977328, 0.8266851676977328, 0.8266851676977328, 0.23801453779667714, 0.23801453779667714, 0.23801453779667714, 0.2417774009764727, 0.2417774009764727, 0.2417774009764727, 0.2656997751671796, 0.2656997751671796, 0.2656997751671796, 0.3659882693367196, 0.3659882693367196, 0.3659882693367196, 0.5398292108550751, 0.5398292108550751, 0.5398292108550751, 0.5375005519064089, 0.5375005519064089, 0.5375005519064089, 0.1389302833084073, 0.1389302833084073, 0.1389302833084073, 0.15985836731440572, 0.15985836731440572, 0.15985836731440572, 0.16180706408531098, 0.16180706408531098, 0.16180706408531098, 0.19315006298435267, 0.19315006298435267, 0.19315006298435267, 0.13975935964011077, 0.13975935964011077, 0.13975935964011077, 0.19616892852703638, 0.19616892852703638, 0.19616892852703638, 0.11415006993036914, 0.11415006993036914, 0.11415006993036914, 0.08452933063915224, 0.08452933063915224, 0.08452933063915224, 0.11102453151654923, 0.11102453151654923, 0.11102453151654923, 0.2343803641370953, 0.2343803641370953, 0.2343803641370953, 0.20762178956982558, 0.20762178956982558, 0.20762178956982558, 0.2070375252378296, 0.2070375252378296, 0.2070375252378296, 0.0026623902665638965, 0.0026623902665638965, 0.0026623902665638965, 0.013350491285977095, 0.013350491285977095, 0.013350491285977095, 0.0036469946080754934, 0.0036469946080754934, 0.0036469946080754934, 0.11674337392006984, 0.11674337392006984, 0.11674337392006984, 0.14077758954876773, 0.14077758954876773, 0.14077758954876773, 0.12493311881727298, 0.12493311881727298, 0.12493311881727298, 0.4025159062096588, 0.4025159062096588, 0.4025159062096588, 0.3967963989080182, 0.3967963989080182, 0.3967963989080182, 0.4259040801841161, 0.4259040801841161, 0.4259040801841161, 0.07519075501400152, 0.07519075501400152, 0.07519075501400152, 0.08175929876631705, 0.08175929876631705, 0.08175929876631705, 0.09269932148178017, 0.09269932148178017, 0.09269932148178017, 0.13181362567096133, 0.13181362567096133, 0.13181362567096133, 0.12312124576491279, 0.12312124576491279, 0.12312124576491279, 0.1492101144995317, 0.1492101144995317, 0.1492101144995317, 0.2448799834263019, 0.2448799834263019, 0.2448799834263019, 0.2765321353836271, 0.2765321353836271, 0.2765321353836271, 0.29237038332772314, 0.29237038332772314, 0.29237038332772314, 0.18916140763586264, 0.18916140763586264, 0.18916140763586264, 0.18054580775899354, 0.18054580775899354, 0.18054580775899354, 0.20677166703646788, 0.20677166703646788, 0.20677166703646788, 0.1875502438087473, 0.1875502438087473, 0.1875502438087473, 0.186498511168266, 0.186498511168266, 0.186498511168266, 0.18917671829560656, 0.18917671829560656, 0.18917671829560656, 0.1775250843792101, 0.1775250843792101, 0.1775250843792101, 0.16826415922735882, 0.16826415922735882, 0.16826415922735882, 0.17703946207035792, 0.17703946207035792, 0.17703946207035792, 0.4708162167898158, 0.4708162167898158, 0.4708162167898158, 0.15947151541106686, 0.15947151541106686, 0.15947151541106686, 0.12952821031376038, 0.12952821031376038, 0.12952821031376038, 0.5406399753779736, 0.5406399753779736, 0.5406399753779736, 0.1824264959027988, 0.1824264959027988, 0.1824264959027988, 0.14643151204009663, 0.14643151204009663, 0.14643151204009663, 0.1861089486730444, 0.1861089486730444, 0.1861089486730444, 0.1922720798664398, 0.1922720798664398, 0.1922720798664398, 0.18082250943827638, 0.18082250943827638, 0.18082250943827638, 0.06497474230222289, 0.06497474230222289, 0.06497474230222289, 0.06657050642341744, 0.06657050642341744, 0.06657050642341744, 0.06675335583684339, 0.06675335583684339, 0.06675335583684339]}, "mutation_prompt": null}
{"id": "55db8597-8186-43cc-8210-1075856241a7", "solution": "import numpy as np\n\nclass AdaptiveChaoticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 5 * self.dim\n        self.F_initial = 0.7  # Adjusted dynamic scaling factor\n        self.CR_initial = 0.85  # Adjusted dynamic crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        global_best = population[np.argmin(fitness)]\n        global_best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Parameters\n                F = self.F_initial + 0.1 * np.sin(2 * np.pi * evaluations / self.budget)\n                CR = self.CR_initial + 0.1 * np.cos(2 * np.pi * evaluations / self.budget)\n\n                # Chaotic Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                chaotic_factor = np.sin(evaluations / self.budget * np.pi)\n                mutant = np.clip(x0 + F * (x1 - x2) + chaotic_factor * (global_best - x0), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover\n                crossover_mask = np.random.rand(self.dim) < (CR + 0.05 * (1 - evaluations / self.budget))\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Chaotic Refinement\n                if np.random.rand() < 0.3:\n                    trial = self.chaotic_refinement(trial, func, evaluations / self.budget)\n\n                # Evaluate Trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < global_best_fitness:\n                        global_best = trial\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n    def chaotic_refinement(self, solution, func, progress):\n        step_size = 0.12 * (self.upper_bound - self.lower_bound) * np.abs(np.cos(progress * np.pi))\n        best_solution = solution.copy()\n        best_fitness = func(best_solution)\n        \n        for _ in range(5):\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            \n            if candidate_fitness < best_fitness:\n                best_solution = candidate\n                best_fitness = candidate_fitness\n\n        return best_solution", "name": "AdaptiveChaoticDE", "description": "An adaptive differential evolution algorithm incorporating dynamic feedback control for mutation and crossover, with chaotic search for robust exploration.", "configspace": "", "generation": 99, "fitness": 0.2817582945255025, "feedback": "The algorithm AdaptiveChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.20.", "error": "", "parent_id": "7aeb7715-5991-4812-850a-198feb4aa453", "metadata": {"aucs": [0.6030533363214718, 0.6030533363214718, 0.6030533363214718, 0.6101695016755231, 0.6101695016755231, 0.6101695016755231, 0.6142888504078803, 0.6142888504078803, 0.6142888504078803, 0.380861794149725, 0.380861794149725, 0.380861794149725, 0.32153162245643674, 0.32153162245643674, 0.32153162245643674, 0.34047264821792766, 0.34047264821792766, 0.34047264821792766, 0.08937758167009724, 0.08937758167009724, 0.08937758167009724, 0.09487198866300328, 0.09487198866300328, 0.09487198866300328, 0.10636292356421106, 0.10636292356421106, 0.10636292356421106, 0.08706562825343278, 0.08706562825343278, 0.08706562825343278, 0.06871168855588494, 0.06871168855588494, 0.06871168855588494, 0.07682572828853773, 0.07682572828853773, 0.07682572828853773, 0.8999117557036784, 0.8999117557036784, 0.8999117557036784, 0.9138237811419535, 0.9138237811419535, 0.9138237811419535, 0.8486295201206692, 0.8486295201206692, 0.8486295201206692, 0.3122957879691326, 0.3122957879691326, 0.3122957879691326, 0.29087330055839977, 0.29087330055839977, 0.29087330055839977, 0.32187749366903995, 0.32187749366903995, 0.32187749366903995, 0.5815359141145726, 0.5815359141145726, 0.5815359141145726, 0.6463190759520523, 0.6463190759520523, 0.6463190759520523, 0.6020386341883168, 0.6020386341883168, 0.6020386341883168, 0.2929612274284926, 0.2929612274284926, 0.2929612274284926, 0.19722735123732416, 0.19722735123732416, 0.19722735123732416, 0.23636979840010774, 0.23636979840010774, 0.23636979840010774, 0.10751231505366687, 0.10751231505366687, 0.10751231505366687, 0.24485720253446452, 0.24485720253446452, 0.24485720253446452, 0.27243838895676464, 0.27243838895676464, 0.27243838895676464, 0.19098453261296677, 0.19098453261296677, 0.19098453261296677, 0.23288089601631534, 0.23288089601631534, 0.23288089601631534, 0.22834353702415722, 0.22834353702415722, 0.22834353702415722, 0.39752898543932347, 0.39752898543932347, 0.39752898543932347, 0.3279094038793475, 0.3279094038793475, 0.3279094038793475, 0.3824327904461957, 0.3824327904461957, 0.3824327904461957, 0.05309682474188415, 0.05309682474188415, 0.05309682474188415, 0.07463851314553305, 0.07463851314553305, 0.07463851314553305, 0.09631034481727652, 0.09631034481727652, 0.09631034481727652, 0.17202062161465292, 0.17202062161465292, 0.17202062161465292, 0.1932988918564189, 0.1932988918564189, 0.1932988918564189, 0.20177956248427387, 0.20177956248427387, 0.20177956248427387, 0.5219073593893812, 0.5219073593893812, 0.5219073593893812, 0.4934587161585682, 0.4934587161585682, 0.4934587161585682, 0.5304153883155162, 0.5304153883155162, 0.5304153883155162, 0.0895814849183465, 0.0895814849183465, 0.0895814849183465, 0.09178588540755028, 0.09178588540755028, 0.09178588540755028, 0.0899949269024648, 0.0899949269024648, 0.0899949269024648, 0.12193699562809501, 0.12193699562809501, 0.12193699562809501, 0.11869415042482745, 0.11869415042482745, 0.11869415042482745, 0.1401981744761791, 0.1401981744761791, 0.1401981744761791, 0.31385191086112785, 0.31385191086112785, 0.31385191086112785, 0.3048165450643211, 0.3048165450643211, 0.3048165450643211, 0.3002954637517511, 0.3002954637517511, 0.3002954637517511, 0.22345160153333943, 0.22345160153333943, 0.22345160153333943, 0.2325702495695975, 0.2325702495695975, 0.2325702495695975, 0.2479539547497317, 0.2479539547497317, 0.2479539547497317, 0.2290080534896911, 0.2290080534896911, 0.2290080534896911, 0.1893079616112705, 0.1893079616112705, 0.1893079616112705, 0.201115489590603, 0.201115489590603, 0.201115489590603, 0.17184005486689857, 0.17184005486689857, 0.17184005486689857, 0.16470148844183696, 0.16470148844183696, 0.16470148844183696, 0.19228224882398226, 0.19228224882398226, 0.19228224882398226, 0.17245373317342183, 0.17245373317342183, 0.17245373317342183, 0.15953087250977338, 0.15953087250977338, 0.15953087250977338, 0.5928717953650806, 0.5928717953650806, 0.5928717953650806, 0.5527200794391263, 0.5527200794391263, 0.5527200794391263, 0.19970484989279025, 0.19970484989279025, 0.19970484989279025, 0.14530599710703263, 0.14530599710703263, 0.14530599710703263, 0.19465308038691642, 0.19465308038691642, 0.19465308038691642, 0.18992284653082392, 0.18992284653082392, 0.18992284653082392, 0.16855574168521648, 0.16855574168521648, 0.16855574168521648, 0.07524973232735721, 0.07524973232735721, 0.07524973232735721, 0.07803246014967313, 0.07803246014967313, 0.07803246014967313, 0.07493816996277525, 0.07493816996277525, 0.07493816996277525]}, "mutation_prompt": null}
