{"id": "f9581be4-86be-4767-8d18-93301a575ab5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 10  # Initial population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.initial_temp = 1.0  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.99  # Cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Generate a mutant vector\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Simulated Annealing acceptance\n                current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                if trial_fitness >= fitness[i]:\n                    acceptance_prob = np.exp((fitness[i] - trial_fitness) / current_temp)\n                    if np.random.rand() < acceptance_prob:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n\n            # Adaptively adjust parameters\n            self.F = 0.8 + 0.2 * np.random.rand()\n            self.CR = 0.9 + 0.1 * np.random.rand()\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]\n\n# Note: This algorithm combines the global search capabilities of Differential Evolution \n# with the local refinement and escape mechanism of Simulated Annealing.", "name": "HybridDE_SA", "description": "A hybrid algorithm that combines Differential Evolution and Simulated Annealing for effective exploration and exploitation in continuous domains.", "configspace": "", "generation": 0, "fitness": 0.23157674006906442, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3254761910454872, 0.41292087194974436, 0.31009530139996555, 0.32439175090365824, 0.3121275237387424, 0.3224515346150373, 0.33224665430543876, 0.32234132121705183, 0.31566611534270794, 0.3043847473380511, 0.3241345367994669, 0.3118286048305714, 0.0500288673991115, 0.31587098415268633, 0.3120738802998956, 0.31258853259448605, 0.30079445557378426, 0.28980686613210305, 0.14605115488729303, 0.1454273663578799, 0.14802030404855193, 0.09842180698906089, 0.13155377947917912, 0.12385883570185308, 0.15416034858421224, 0.16024515141115392, 0.1322057591676088, 0.11426347156479155, 0.027761378135075065, 0.1377963416268938, 0.1401259048123189, 0.09184056647356742, 0.06359833626850198, 0.11563939210015228, 0.10775527453045275, 0.11401352720306279, 0.9873232064904626, 0.09970925407190567, 0.986450834963613, 0.9548602359718964, 0.9868751303105863, 0.9647316585701569, 0.9704493425419983, 0.9811491770793346, 0.9533382849326856, 0.27422867081591007, 0.059959737410656966, 0.24636206918700376, 0.2575852235949091, 0.27768572942159964, 0.26488149397548777, 0.2714670560747454, 0.2772042351458368, 0.24431784677894952, 0.3105381356070571, 0.31503316578130736, 0.31782304778470916, 0.34672555398064997, 0.28653079492082767, 0.336217786985502, 0.33717294243815576, 0.31591417998059357, 0.3419266302460978, 0.29802134712549233, 0.2678551535154474, 0.2714762687560984, 0.13291698190339996, 0.2800341746025786, 0.28532140612983903, 0.3246973840514421, 0.24544127584617315, 0.2284010181311894, 0.26725264492169254, 0.12410577581551019, 0.3123261277933286, 0.26035793472451296, 0.24616086674188775, 0.26969610989574644, 0.3034646106516449, 0.23671550221735493, 0.2849638818461149, 0.07620795695788496, 0.15661969764308725, 0.07934041136083103, 0.1762007779727428, 9.999999999998899e-05, 0.023033686680668852, 0.06116277052365915, 0.0678410372039332, 0.20200445588614047, 0.17584114642365967, 0.15745825937338764, 0.07473281735966775, 0.08390309761260084, 0.05116240091745006, 0.11244366813981888, 0.2906385837872949, 0.15282643010575392, 0.0834860318298748, 0.03773579551525075, 0.1763326847549671, 0.10312660585918243, 0.2201458023068451, 0.1943515320779169, 0.20534591401751734, 0.15284848487125802, 0.13471145236861848, 0.26596101647931314, 0.22420604818767276, 0.23514699098593217, 0.2630366047458885, 0.25866030557304853, 0.24611153225490556, 0.23749029300416402, 0.20833895293178495, 0.2185024521719584, 0.2174802548642073, 0.30408855990870753, 0.2906258678584518, 0.294306468970684, 0.30953091542542555, 0.29414839735919096, 0.32649816946542987, 0.297523328174074, 0.12160093025496921, 0.3101775340388947, 0.10297183813977695, 0.06852116511984074, 0.05468987503350453, 0.13995799697891875, 0.11481158855612794, 0.07687879727530145, 0.1269640066936838, 0.1225898958011854, 0.12862257169498337, 0.2968650103474685, 0.2789895207880546, 0.2944954692483298, 0.1445440698589775, 0.24145120660269026, 0.28605468489970143, 0.13886265458609726, 0.11992378581953267, 0.21040402874478792, 0.24527972861913205, 0.23019436020676842, 0.2410601704144355, 0.24067551117847974, 0.241840083886796, 0.25156932103193674, 0.25575670964261665, 0.22178439729287758, 0.23028895066496602, 0.23502262085200532, 0.22969732189322378, 0.26158422121228064, 0.26215222330749743, 0.24396443067017248, 0.22714479896535278, 0.22065137489108055, 0.22505095918109053, 0.22151006163660814, 0.19151046060248766, 0.20417496817013314, 0.23007442896273356, 0.1678592438602745, 0.2170079890087966, 0.19068314945687193, 0.15997650941227293, 0.19607114286125527, 0.21079589188713488, 0.19257427575208208, 0.1863163235508647, 0.24206316134365247, 0.1946253554375258, 0.1963968543947877, 0.189629131693129, 0.20116156448367717, 0.1996947522599607, 0.19177143028421817, 0.14064801120842896, 0.16585655265073707, 0.15700940613517178, 0.1766920681820271, 0.1962772871578794, 0.19104797541283636, 0.18366574881198017, 0.49483809799453915, 0.20705721210608685, 0.20951374893720254, 0.20701961075322572, 0.12176646056763807, 0.20524174432086817, 0.1271664072779376, 0.15405413094566156, 0.12724249483948114, 0.15629457221173693, 0.2073128067031279, 0.14534230615763777, 0.1754788739488169, 0.17594173600602225, 0.1960568224500675, 0.15450435988619815, 0.18368079620008748, 0.18183921979658757, 0.16348930629714664, 0.20269576767319186, 0.07569021252941643, 0.08858414161369288, 0.09337540374166897, 0.09677628503320013, 0.07663144630953556, 0.0944597298326848, 0.08305365533661713, 0.08577073534648938, 0.09261522246773568]}, "mutation_prompt": null}
{"id": "118b4838-31f4-409f-9905-40d3d61d7f8d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.initial_population_size = 10\n        self.F = 0.8\n        self.CR = 0.9\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.995\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population with an adaptive size\n        population_size = self.initial_population_size + int(self.budget / 100)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                # Generate a mutant vector\n                a, b, c = population[np.random.choice(population_size, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover with a dynamic strategy\n                crossover_mask = np.random.rand(self.dim) < (self.CR / 2 + self.CR / 2 * np.random.rand())\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Simulated Annealing acceptance\n                current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                if trial_fitness >= fitness[i]:\n                    acceptance_prob = np.exp((fitness[i] - trial_fitness) / current_temp)\n                    if np.random.rand() < acceptance_prob:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n\n            # Adaptive parameter adjustment\n            self.F = 0.7 + 0.3 * np.random.rand()\n            self.CR = 0.8 + 0.2 * np.random.rand()\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE_SA", "description": "An enhanced hybrid algorithm combining Differential Evolution and Simulated Annealing with adaptive population size for improved optimization performance.", "configspace": "", "generation": 1, "fitness": 0.16065488247002685, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "f9581be4-86be-4767-8d18-93301a575ab5", "metadata": {"aucs": [0.2674045622665533, 0.29593407042358855, 0.2670344048579668, 0.2728946687506201, 0.30381948556307403, 0.2735023470245954, 0.2704094979165933, 0.31187193290921034, 0.286429718929071, 0.09475762829243595, 0.10246129412040705, 0.1157617846485306, 0.11047359817365376, 0.09860576151814038, 0.10764725579421242, 0.10061296180037571, 0.1167341566091018, 0.09811953552518571, 0.09281929562575464, 0.09319416350543486, 0.10208171447737424, 0.09704081138564269, 0.08775142570499062, 0.08927086963386444, 0.10168072389229821, 0.09205044636642579, 0.10063977629762699, 0.07874594117618383, 0.07511494007377983, 0.08562860873728095, 0.09400926601076931, 0.09628535388635295, 0.07573569598519347, 0.0795749169014287, 0.0816797777334135, 0.08335448960549219, 0.955907362197731, 0.9339014947290896, 0.938589554061531, 0.9178391923156065, 0.9309577926480905, 0.9517735407990268, 0.913332926482273, 0.9263779049712827, 0.9041420012670294, 0.12314209744327831, 0.13723042589597467, 0.13593258594867197, 0.1412295283484013, 0.12243884232774893, 0.12714496533571162, 0.13812138787957084, 0.12943144919800176, 0.13262143624023426, 0.18721781123814873, 0.16451168384227477, 0.16203752151249695, 0.18959158493924122, 0.17387333747790268, 0.22496300450047046, 0.19545500168788454, 0.18389561414553124, 0.17376846445594252, 0.09413402357930423, 0.07383288556690681, 0.09386782349672196, 0.11440904822921527, 0.07301398787379965, 0.07381674476008826, 0.08124321782547772, 0.09469001346024908, 0.09308470478740705, 0.06476858564006638, 0.06417300777405399, 0.09881094857821593, 0.06677622101062175, 0.0906460566170274, 0.10709031985023465, 0.09387103785717099, 0.07314156302274655, 0.053898405575705355, 9.999999999998899e-05, 0.005563335765988442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002383943475274819, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0738859978143912, 0.06720768553973522, 0.07946633033070305, 0.0634857242045831, 0.07374803148290976, 0.06548017725015798, 0.0650690988352719, 0.0779369321243033, 0.06506736611377106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060236589936906, 0.045198989526582634, 0.043437481708143655, 0.047370810301916366, 0.05020589459408242, 0.052607384480280794, 0.04053113973317546, 0.04081469286773576, 0.04199169972524286, 0.2529043540827305, 0.2619490569274586, 0.2635313086254598, 0.24992656102828648, 0.2679343470680098, 0.2599761716898037, 0.27867661914656816, 0.25643791033268315, 0.2864481975009363, 0.0826273632207809, 0.0783589378129067, 0.08278109607549289, 0.06165743582257688, 0.06823662453979218, 0.07239081573104744, 0.08215412113710918, 0.07195017237033774, 0.08397936925530902, 0.14761746401320686, 0.13759308269375548, 0.1519782654909272, 0.15393994418905788, 0.16458129597483362, 0.15538470411512628, 0.1986984778680826, 0.13237206198171458, 0.14432534602127378, 0.1984020318139239, 0.1865139729903248, 0.1985377675032428, 0.18813869120923088, 0.18771499577422834, 0.1796250279103655, 0.2075872588758515, 0.20908952036370987, 0.1974815192835272, 0.15308854336854072, 0.1447754510592293, 0.1493545640553059, 0.1338635754168972, 0.12922955749398624, 0.14019798426707986, 0.15178024353411912, 0.13798279569050953, 0.16005939515797285, 0.16280420887851144, 0.16401936350110957, 0.16239883498316654, 0.1769233709097644, 0.1558489371550157, 0.1783199395031314, 0.17728924745151653, 0.17533521961179577, 0.17588064437586204, 0.15838687418746844, 0.17358569794962153, 0.17426539898707682, 0.1703938704619562, 0.17498174639526298, 0.1612306067489373, 0.15907411439515928, 0.16104673549874493, 0.1720856911833022, 0.17485035852006947, 0.1550811232321737, 0.14120684245489667, 0.13695889672599515, 0.20624658294922238, 0.15595345061659516, 0.15881784682978872, 0.1615155941163301, 0.15071690652343728, 0.16526488130086348, 0.17207731457260855, 0.16011168352449423, 0.1818592186728395, 0.17646049522712182, 0.1407028702321248, 0.2191759347195813, 0.19996642543376697, 0.19138896908789838, 0.20033737217448322, 0.17924689540773564, 0.19525863697727375, 0.16899596274099882, 0.19174089207576384, 0.190029681136607, 0.17891338319462302, 0.17552057429214074, 0.19489421671970597, 0.06285704552789229, 0.0613923681592885, 0.05982331399483409, 0.0705998239754475, 0.06063054556959646, 0.06527872542926794, 0.06581620537334787, 0.06408352759415925, 0.05863602361946063]}, "mutation_prompt": null}
{"id": "6e1c6ddc-8249-4621-b042-acc9781d3cb2", "solution": "import numpy as np\n\nclass HybridDE_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 10  # Initial population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.initial_temp = 1.0  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.95  # Adjusted cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Generate a mutant vector with adaptive scaling\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                F_adaptive = self.F * np.random.rand()  # Adaptive factor\n                mutant = np.clip(a + F_adaptive * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive Simulated Annealing acceptance\n                current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                if trial_fitness >= fitness[i]:\n                    acceptance_prob = np.exp((fitness[i] - trial_fitness) / current_temp)\n                    if np.random.rand() < acceptance_prob:\n                        population[i] = trial\n                        fitness[i] = trial_fitness\n\n            # Dynamic parameter adjustment\n            self.F = 0.7 + 0.3 * np.random.rand()\n            self.CR = 0.85 + 0.15 * np.random.rand()\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE_AdaptiveSA", "description": "A novel hybrid algorithm integrating Differential Evolution with Adaptive Simulated Annealing for enhanced search efficiency in continuous optimization.", "configspace": "", "generation": 2, "fitness": 0.1526293980024393, "feedback": "The algorithm HybridDE_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "f9581be4-86be-4767-8d18-93301a575ab5", "metadata": {"aucs": [0.2800076181827107, 0.25724666342506863, 0.20536663668025468, 0.21062129105595917, 0.2288996201238327, 0.1048351354128596, 0.34203644796067545, 0.31769604396881546, 0.23995094791651206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020455772768082747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08028247846063241, 0.09105281202516657, 0.08764276283090988, 0.0645444605359784, 0.07359549696496559, 0.11083401965919437, 0.1278405086453489, 0.08832866772415804, 0.08005742692479967, 0.1026380540366294, 0.024877035350351462, 0.04989778860203409, 0.0733263119412828, 0.06260720285522692, 0.015408792239921976, 0.11850792994145254, 0.01473344131098675, 0.018905385709681477, 0.8299887636248136, 0.9759805261608541, 0.8338695729068802, 0.9278627891087309, 0.6570759776098809, 0.7506559462962079, 0.8888374722242544, 0.5786822173782973, 0.732026254671819, 0.17042383531454885, 0.0419974034520465, 0.1256625646837336, 0.11462154727809304, 0.05253169848302208, 0.12009839514784704, 0.06903669500987486, 0.13521264591037563, 9.999999999998899e-05, 0.2293133805999451, 0.11225454052597472, 0.183822096285574, 0.17323557343599094, 0.16656315451274972, 0.1823845676275888, 0.23770715398553732, 0.10223786314555361, 0.22620288701330593, 0.04056934186959693, 0.10330145357867382, 9.999999999998899e-05, 0.21813931580227175, 0.03429301437228405, 9.999999999998899e-05, 0.1592898497156735, 9.999999999998899e-05, 0.10556714327287375, 0.10939941077697601, 9.999999999998899e-05, 0.08579556956383216, 0.02692593751933492, 0.12131157593435549, 0.1164197305028365, 0.08722940287749348, 9.999999999998899e-05, 0.21257438668445483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11295732333596553, 0.08134812941222735, 0.07833969426089293, 0.0758471582904574, 0.011396067908659102, 0.021403732023049793, 0.18970609675185368, 0.028529878426886035, 0.19494347709189574, 0.04993651243177266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011374271668222358, 9.999999999998899e-05, 0.09852530585902108, 9.999999999998899e-05, 0.08709644030978403, 0.06813637789883764, 0.0023479054249664344, 0.136209326884975, 9.999999999998899e-05, 0.22356189927856918, 0.3337355811568422, 0.2943817466483546, 0.2035186341562525, 0.3659079400467289, 0.32341082732022763, 0.31305768218469876, 0.2740211982033296, 0.2975506545774641, 0.03840624584391894, 0.08822429816304245, 9.999999999998899e-05, 0.13369591911909262, 0.11138431874574595, 0.09495711286154418, 0.11286747236900041, 0.0913587147832724, 0.08163185021287822, 0.10945657881645021, 0.26050115506707283, 0.16482198519142277, 0.17496771900738983, 0.19721834970036645, 0.16380282086531517, 0.15926473109867056, 0.15438687776164084, 0.20215150851421027, 0.2528868228546918, 0.20225260844789184, 0.1452099313820232, 0.20014035840902356, 0.28994971159752303, 0.1341750709334627, 0.17023333755490422, 0.1669633886069063, 0.12307739295986808, 0.23354845588284412, 0.21959924341357817, 0.15000858234996217, 0.1825440585416146, 0.204799688560933, 0.1684955027584163, 0.10043110688880641, 0.16289403014996184, 0.08203147552017775, 0.23608527175501703, 0.1971359969494869, 0.23746363491000588, 0.19012799026861382, 0.22930404491832157, 0.27133009615124626, 0.28335197574683113, 0.25982289730042774, 0.3102005131467733, 0.16525613174928366, 0.16781971183153988, 0.1853459910662083, 0.17801940340023525, 0.1764673320293183, 0.1812509377919318, 0.21063669980074873, 0.19675878842169048, 0.1824705470380592, 0.11875596426738899, 0.14063312250435833, 0.18916626830932004, 0.1706777018175184, 0.20052684904166462, 0.11197590272083235, 0.15860857526206362, 0.116062717971806, 0.11276733883127321, 0.11013197728836477, 0.11020565292040085, 0.10367878807554987, 0.16532363427818597, 0.07344768066810758, 0.08916293014311849, 0.14552216076446078, 0.17408179034974613, 0.1397484411826475, 0.2153783351391474, 0.22990865750829115, 0.20866762587879106, 0.21734165102019476, 0.20803425054031188, 0.19369370120159568, 0.20117957980351187, 0.23582489962135134, 0.22262617411021468, 0.11662483398407308, 0.0807297548581355, 0.060382199673276404, 0.1094077784966343, 0.10763075674661049, 0.0641905516130521, 0.08082621729399309, 0.09875840340659581, 0.08703844235535341]}, "mutation_prompt": null}
{"id": "d49427a9-e7c0-4244-8090-4d2e2ac365c0", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 20  # Increased population size for diversity\n        self.inertia_weight = 0.7  # Inertia weight for velocity update\n        self.cognitive_coefficient = 1.4  # Cognitive coefficient\n        self.social_coefficient = 1.4  # Social coefficient\n        self.initial_temp = 1.0  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.98  # Cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities and positions\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n\n                # Simulated Annealing acceptance\n                current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                if fitness >= personal_best_fitness[i]:\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / current_temp)\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_SA", "description": "A hybrid algorithm integrating Particle Swarm Optimization and Simulated Annealing for robust global convergence and local search refinement.", "configspace": "", "generation": 3, "fitness": 0.2822256327489052, "feedback": "The algorithm HybridPSO_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "f9581be4-86be-4767-8d18-93301a575ab5", "metadata": {"aucs": [0.7348904934445695, 0.8093269736035197, 0.7925094744370806, 0.8418171281496055, 0.19021656646790275, 0.8052723564168843, 0.8230710925274383, 0.7524667127676856, 0.8033460959272615, 0.7473030303025547, 0.7328179158530475, 9.999999999998899e-05, 0.762511369843894, 0.048810331501238924, 0.7614144971036323, 0.7392525454737936, 0.7576852935827291, 0.7097213844854158, 0.18178429996180245, 0.11629693830665888, 0.11155516743362748, 0.13645149734448803, 0.09698454659683853, 0.08422007442204171, 0.12214041287614841, 0.052143656289954765, 0.11839253452871978, 0.11652495186986522, 0.10134474908660052, 0.1300288838631286, 0.1321292051758155, 0.1334686261278708, 0.08240085198930569, 0.09349309671026274, 0.11157420026317255, 0.09349592670805562, 0.9930761627015453, 0.988845267784801, 0.9942436394935744, 0.9891054233168531, 0.9908339665813047, 0.9904776858948613, 0.9941055035338944, 0.9892310534472601, 0.9919279386525065, 0.6885973584776222, 0.05563031644067706, 0.6517096823904106, 0.1549999172019112, 0.6980347017438353, 0.1549818549829728, 0.08940292757236035, 0.08820850535037039, 0.7004523834450429, 0.1727767825218236, 0.2135243910923228, 0.141315641774019, 0.1926560025221613, 0.27767696573501677, 0.19345529455992772, 0.22106887510222306, 0.17821681864638417, 0.17877296909345075, 0.18113122058920295, 0.24522777629057724, 0.12813329663055562, 0.1843421491549634, 0.13479845901112908, 0.10574001037430458, 0.28346712190265766, 0.2886521201132004, 0.24750423809600375, 0.26718075931740004, 9.999999999998899e-05, 0.2698143618378531, 0.2625825757552549, 0.3767475253877104, 0.28404909915184207, 0.2999515062267667, 0.12986596452607468, 0.10561465191892816, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036913398849214296, 9.999999999998899e-05, 0.00445165562922667, 0.004159871001047422, 9.999999999998899e-05, 9.999999999998899e-05, 0.041181759551788155, 0.09119500748896026, 0.053660207506044055, 0.0713235212446316, 0.08390360041372824, 0.018496840735013342, 0.000889707925996519, 0.07983528843512688, 0.059360708091173886, 0.045159069894299186, 0.051964634205287075, 0.09713188856298127, 0.0832358276062587, 0.10329994768869544, 0.13635880433131975, 0.11404968953138794, 0.10654872902288715, 0.106389294060244, 0.07900679149393386, 0.04368153477510606, 0.2411433456144053, 0.24714513266466387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05886303031718365, 0.050520929365915235, 0.10344669443353871, 0.5188645296396356, 0.48221516908036366, 0.6723970561924348, 0.5669384513827893, 0.49414967129093734, 0.20969705431871266, 0.5202843171603864, 0.6218825622046305, 0.5811997980820078, 0.11829890673410415, 0.08849886271718754, 0.05217039432424386, 0.12507033923132627, 0.07218433150091219, 0.11192000360751841, 0.14228698003479912, 0.13331617220623482, 0.08474429884705825, 0.18312047197948, 0.37041716377834555, 0.35590864757304663, 0.2667734897931707, 0.460826762105227, 0.24909097475143394, 0.19451047513632047, 0.1861712792976976, 0.407565808274273, 0.30374990505113764, 0.3325248131502193, 0.2874053769813446, 0.3132069814562146, 0.3319278728555144, 0.31620513550838536, 0.28172947327282627, 0.42706167352947966, 0.14700597204850496, 0.30631490216019974, 0.21239671867436083, 0.1528501605301006, 0.25670631204507033, 0.20273431432880562, 0.26999813469081857, 0.23016384787068567, 0.31506641096126187, 0.10128369884839905, 0.2238128491288538, 0.2233397637140936, 0.24835809718990454, 0.22043334977337947, 0.23647720114071047, 0.2761938331589048, 0.2116371937394882, 0.26766680594533065, 0.22811250865126098, 0.2549698645402232, 0.22709973577216602, 0.198780996106818, 0.8268959032412412, 0.23261562264284041, 0.22790522537989666, 0.19151612095388204, 0.20356477567758813, 0.1945812506813428, 0.8899267851833902, 0.12685329152947966, 0.15466696031876037, 0.9135678307659051, 0.20125960816454946, 0.20060955620245002, 0.12379637811722155, 0.1704314041405447, 0.16834231422445323, 0.07916896373411964, 0.21269942197648117, 0.12813142772673614, 0.2119085322147083, 0.8515418042203393, 0.7984267858569707, 0.10435735856754913, 0.3156833237829265, 0.8886050433426926, 0.19134624182750792, 0.22862676484787892, 0.27433083199199604, 0.22658436712349017, 0.2347491156674263, 0.19617032145316138, 0.22129825780931356, 0.2300936770524309, 0.3207645460224633, 0.050979935733467596, 0.09615277863306637, 0.08800847083631236, 0.09546042657592657, 0.08962870966420777, 0.07721312457158569, 0.10029682208548585, 0.08363241968665458, 0.08985990610084049]}, "mutation_prompt": null}
{"id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 25  # Tweaked population size for more exploration\n        self.inertia_weight = 0.6  # Adjusted inertia weight\n        self.cognitive_coefficient = 1.5  # Modified cognitive coefficient\n        self.social_coefficient = 1.3  # Modified social coefficient\n        self.initial_temp = 0.8  # Adjusted initial temperature for SA\n        self.cooling_rate = 0.95  # Modified cooling rate for more gradual cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with tweaked weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.5 + 0.1 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA", "description": "A hybrid algorithm blending Particle Swarm Optimization and Adaptive Simulated Annealing for enhanced convergence and exploration balance.", "configspace": "", "generation": 4, "fitness": 0.30374837509122415, "feedback": "The algorithm HybridPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "d49427a9-e7c0-4244-8090-4d2e2ac365c0", "metadata": {"aucs": [0.8799609829172478, 0.8586909503928349, 0.8566534436291947, 0.897899778767167, 0.8843537620332748, 0.8775636596985431, 0.9046974141015873, 0.8931642371528448, 0.8503974239810025, 0.7995871376641931, 0.8085080130473501, 0.802867907674548, 0.7837169798466223, 0.7316804186891858, 0.7316090174717947, 0.7712509602188602, 0.7754846176541473, 0.7849544085223976, 0.1453653707913941, 0.10074289060845276, 0.10700570810652643, 0.09616914934491227, 0.18378941349243283, 0.12162564622923511, 0.11782232132765313, 0.16146579700456842, 0.1190286446947102, 0.10121953869740485, 0.13290855039295324, 0.11893846729456914, 0.08698097049308873, 0.11662577784916706, 0.14493121158839217, 0.14484396627719565, 0.16032332243208236, 0.13091399044761765, 0.9849522984121216, 0.9909263546968334, 0.9929085595493936, 0.984348654876733, 0.9864296152157568, 0.9860111046400795, 0.9876790897923149, 0.9847123023009133, 0.9888422539969598, 0.7429180748910443, 0.8371093239682338, 0.8330370526032167, 0.755895063357234, 0.15497087983083768, 0.15460295783547895, 0.4946469019043118, 0.08914244368961044, 0.22959669934372573, 0.1727265454861301, 0.11724224266021155, 0.17211339002283255, 0.2028572789931945, 0.17374973683820338, 0.21484507076656167, 0.21809092490040694, 0.23725991710098748, 0.15242251100102655, 0.21201728704514666, 0.24465453892586808, 0.22188502466696147, 0.19610078429561706, 0.2439402999679523, 9.999999999998899e-05, 0.25370013938023084, 0.20003296618230193, 0.22163562441575957, 0.2720077407611182, 0.11534915401292978, 0.2535526116031921, 0.26007249863355086, 0.21445792556385346, 0.13535100542638379, 0.30848604919447575, 0.11442069107261665, 0.28894635681633485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005067921783855178, 0.08716435110184706, 0.010124527005228035, 0.05642075771374988, 0.0390183390449651, 0.08624612823419242, 0.1360291361402105, 0.01576137965358304, 0.01890890035552617, 0.21807972818035792, 0.08977974709350578, 0.03990943291476323, 0.0718593767348884, 0.1851108070164107, 0.2671054145922408, 0.0835278553053378, 0.3036516500579892, 0.08651391184452517, 0.15723868627544557, 0.10745918639269714, 0.077277228155048, 0.06545599564709415, 0.06151025352008177, 0.20590121175907838, 9.999999999998899e-05, 0.12134556678799036, 0.09328880892848956, 0.08509209514844374, 0.058284434733336665, 0.0859761358114649, 0.5419599922895202, 0.5437607388170249, 0.5741717869048746, 0.6152239879545969, 0.5307629037332805, 0.5117268976411135, 0.5137880248696945, 0.564154757143718, 0.5865111580478859, 0.08750364405155375, 0.06865264186189945, 0.13443738489989687, 0.11661660495739812, 0.13565218865106743, 0.1454461848978046, 0.09218886741788879, 0.08287952536724119, 0.1913648754932442, 0.23926980702067202, 0.22593035614973034, 0.20931111329162855, 0.27898384999623815, 0.26282777421442916, 0.27894490317540654, 0.4336130851275236, 0.2306513737076089, 0.2004137913329238, 0.24022175530045475, 0.3379340748832441, 0.34514114857487344, 0.19058504983205493, 0.35369485388044164, 0.3148617787023471, 0.38465417436618166, 0.3542582503932372, 0.33155567724600543, 0.12196690459575144, 0.25196592581172506, 0.26330155651693854, 0.25199768504316167, 0.20088478895039064, 0.2822646192784901, 0.23497188865644492, 0.26756014056341715, 0.2703921607973885, 0.21170509056968467, 0.25566001355418244, 0.17094574288829845, 0.22441656007163857, 0.20507854813946003, 0.263918653334287, 0.24948128869926645, 0.19283798216218406, 0.21333061563211353, 0.1734318442939322, 0.2539338503094448, 0.18049046365862687, 0.1845675870682172, 0.21353526802199208, 0.25540596706849505, 0.1985684614921528, 0.8361452291258308, 0.19426140436774808, 0.1881469102762252, 0.1274037513653118, 0.15501675433600504, 0.17371358174832707, 0.2017712964602042, 0.2013237575083089, 0.11154629943644445, 0.17033698354032334, 0.9381567808730792, 0.08330352541676878, 0.15771733294266377, 0.10005442893970051, 0.7769521257967943, 0.8724135256708302, 0.2136311691719911, 0.1052911126981404, 0.8982321001976468, 0.7672508407053418, 0.2082054048078794, 0.20986005878694125, 0.22301893224450264, 0.21263025891667897, 0.1873735624298849, 0.19395667656821092, 0.19675174705294363, 0.26352400621707395, 0.1960777067772862, 0.10079310112304607, 0.08589183176478277, 0.09181390944117462, 0.11794080682671337, 0.1106335934905035, 0.10771137466695369, 0.08542964704151224, 0.09880413531331067, 0.10399600117881258]}, "mutation_prompt": null}
{"id": "4167e784-b56a-49d8-b1c0-83d3e3a3a0a6", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 25  # Tweaked population size for more exploration\n        self.inertia_weight = 0.6  # Adjusted inertia weight\n        self.cognitive_coefficient = 1.5  # Modified cognitive coefficient\n        self.social_coefficient = 1.3  # Modified social coefficient\n        self.initial_temp = 0.8  # Adjusted initial temperature for SA\n        self.cooling_rate = 0.95  # Modified cooling rate for more gradual cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with tweaked weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.5 + 0.1 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA", "description": "A hybrid algorithm blending Particle Swarm Optimization and Adaptive Simulated Annealing for enhanced convergence and exploration balance.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.8799609829172478, 0.8586909503928349, 0.8566534436291947, 0.897899778767167, 0.8843537620332748, 0.8775636596985431, 0.9046974141015873, 0.8931642371528448, 0.8503974239810025, 0.7995871376641931, 0.8085080130473501, 0.802867907674548, 0.7837169798466223, 0.7316804186891858, 0.7316090174717947, 0.7712509602188602, 0.7754846176541473, 0.7849544085223976, 0.1453653707913941, 0.10074289060845276, 0.10700570810652643, 0.09616914934491227, 0.18378941349243283, 0.12162564622923511, 0.11782232132765313, 0.16146579700456842, 0.1190286446947102, 0.10121953869740485, 0.13290855039295324, 0.11893846729456914, 0.08698097049308873, 0.11662577784916706, 0.14493121158839217, 0.14484396627719565, 0.16032332243208236, 0.13091399044761765, 0.9849522984121216, 0.9909263546968334, 0.9929085595493936, 0.984348654876733, 0.9864296152157568, 0.9860111046400795, 0.9876790897923149, 0.9847123023009133, 0.9888422539969598, 0.7429180748910443, 0.8371093239682338, 0.8330370526032167, 0.755895063357234, 0.15497087983083768, 0.15460295783547895, 0.4946469019043118, 0.08914244368961044, 0.22959669934372573, 0.1727265454861301, 0.11724224266021155, 0.17211339002283255, 0.2028572789931945, 0.17374973683820338, 0.21484507076656167, 0.21809092490040694, 0.23725991710098748, 0.15242251100102655, 0.21201728704514666, 0.24465453892586808, 0.22188502466696147, 0.19610078429561706, 0.2439402999679523, 9.999999999998899e-05, 0.25370013938023084, 0.20003296618230193, 0.22163562441575957, 0.2720077407611182, 0.11534915401292978, 0.2535526116031921, 0.26007249863355086, 0.21445792556385346, 0.13535100542638379, 0.30848604919447575, 0.11442069107261665, 0.28894635681633485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005067921783855178, 0.08716435110184706, 0.010124527005228035, 0.05642075771374988, 0.0390183390449651, 0.08624612823419242, 0.1360291361402105, 0.01576137965358304, 0.01890890035552617, 0.21807972818035792, 0.08977974709350578, 0.03990943291476323, 0.0718593767348884, 0.1851108070164107, 0.2671054145922408, 0.0835278553053378, 0.3036516500579892, 0.08651391184452517, 0.15723868627544557, 0.10745918639269714, 0.077277228155048, 0.06545599564709415, 0.06151025352008177, 0.20590121175907838, 9.999999999998899e-05, 0.12134556678799036, 0.09328880892848956, 0.08509209514844374, 0.058284434733336665, 0.0859761358114649, 0.5419599922895202, 0.5437607388170249, 0.5741717869048746, 0.6152239879545969, 0.5307629037332805, 0.5117268976411135, 0.5137880248696945, 0.564154757143718, 0.5865111580478859, 0.08750364405155375, 0.06865264186189945, 0.13443738489989687, 0.11661660495739812, 0.13565218865106743, 0.1454461848978046, 0.09218886741788879, 0.08287952536724119, 0.1913648754932442, 0.23926980702067202, 0.22593035614973034, 0.20931111329162855, 0.27898384999623815, 0.26282777421442916, 0.27894490317540654, 0.4336130851275236, 0.2306513737076089, 0.2004137913329238, 0.24022175530045475, 0.3379340748832441, 0.34514114857487344, 0.19058504983205493, 0.35369485388044164, 0.3148617787023471, 0.38465417436618166, 0.3542582503932372, 0.33155567724600543, 0.12196690459575144, 0.25196592581172506, 0.26330155651693854, 0.25199768504316167, 0.20088478895039064, 0.2822646192784901, 0.23497188865644492, 0.26756014056341715, 0.2703921607973885, 0.21170509056968467, 0.25566001355418244, 0.17094574288829845, 0.22441656007163857, 0.20507854813946003, 0.263918653334287, 0.24948128869926645, 0.19283798216218406, 0.21333061563211353, 0.1734318442939322, 0.2539338503094448, 0.18049046365862687, 0.1845675870682172, 0.21353526802199208, 0.25540596706849505, 0.1985684614921528, 0.8361452291258308, 0.19426140436774808, 0.1881469102762252, 0.1274037513653118, 0.15501675433600504, 0.17371358174832707, 0.2017712964602042, 0.2013237575083089, 0.11154629943644445, 0.17033698354032334, 0.9381567808730792, 0.08330352541676878, 0.15771733294266377, 0.10005442893970051, 0.7769521257967943, 0.8724135256708302, 0.2136311691719911, 0.1052911126981404, 0.8982321001976468, 0.7672508407053418, 0.2082054048078794, 0.20986005878694125, 0.22301893224450264, 0.21263025891667897, 0.1873735624298849, 0.19395667656821092, 0.19675174705294363, 0.26352400621707395, 0.1960777067772862, 0.10079310112304607, 0.08589183176478277, 0.09181390944117462, 0.11794080682671337, 0.1106335934905035, 0.10771137466695369, 0.08542964704151224, 0.09880413531331067, 0.10399600117881258]}, "mutation_prompt": null}
{"id": "6e020727-b8ac-46b6-9109-96b78f048118", "solution": "import numpy as np\n\nclass HybridDE_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 25\n        self.mutation_factor = 0.8  # Set mutation factor for DE\n        self.crossover_probability = 0.7  # Set crossover probability for DE\n        self.initial_temp = 0.9  # Adjusted initial temperature for SA\n        self.cooling_rate = 0.98  # Modified cooling rate for slower cooling\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation and Crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.bounds[0], self.bounds[1])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_probability, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.bounds[0], self.bounds[1])\n\n                # Evaluate trial vector\n                fitness = func(trial_vector)\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = trial_vector\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = trial_vector\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridDE_AdaptiveSA", "description": "A hybrid algorithm combining Differential Evolution and Adaptive Simulated Annealing for improved solution diversity and convergence dynamics.", "configspace": "", "generation": 6, "fitness": 0.08802920628610983, "feedback": "The algorithm HybridDE_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.16250258474430557, 0.15630678422182087, 0.184374498869454, 0.1416492613833965, 0.1548295021861983, 0.14744374748755185, 0.214101473756666, 0.1434538870412041, 0.14548703157241194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047505988187018344, 0.05419206198659665, 0.03937962713145149, 0.040222695424466104, 0.03886178204446844, 0.042177801338578735, 0.04122415173538507, 0.038167278752704425, 0.03679732543338121, 0.03131030267261936, 0.019182501268672825, 0.02914461986624206, 0.0303758634160185, 0.032835561253434786, 0.02451390815965604, 0.03030291991042411, 0.013505576918258155, 0.029311368619032163, 0.1387486456726862, 0.16483312135337513, 0.16660569715614804, 0.1096791165287585, 0.13211572536083982, 0.1539131775331778, 0.15514458369103779, 0.19710118447124525, 0.1437413178341329, 0.10240731972914763, 0.05312450655008871, 0.07124093476687288, 0.07216781706163566, 0.05600931544936161, 0.0933066547523449, 0.07967996760391538, 0.08254439343075681, 0.09509146752458986, 0.13062499940493122, 0.17883934211666563, 0.14185608177747977, 0.13035533018435386, 0.11781106215234072, 0.14493754547950066, 0.0928844961457086, 0.09887910063908734, 0.13639434485042534, 0.015625615270261184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002892833621275126, 0.0012394368298701552, 9.999999999998899e-05, 0.0004977980166790408, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035740908196690846, 9.999999999998899e-05, 0.000992661865827582, 9.999999999998899e-05, 0.025368786998832493, 0.0005419839214421129, 0.02015325858964334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03285166772608594, 0.03277508491737302, 0.06765984067588593, 0.03460535196716463, 0.034978836644175115, 0.1379313840744486, 0.05136962735178663, 0.024250783255065245, 0.10136570698887004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16982788633895907, 0.1821612464286705, 0.19943662947600937, 0.18209925327341658, 0.1829075536592536, 0.21319041075231748, 0.16554679087132496, 0.19801524105234647, 0.21361252131096564, 0.03841371912536273, 0.040692525661004564, 0.01791150259615626, 0.04114680979419505, 0.0360209624412593, 0.05449131349269154, 0.038415824165543566, 0.040391789525508814, 0.05585333844764284, 0.13504932653297497, 0.13968356567093265, 0.13773767442849894, 0.1234381427860275, 0.13604238314416417, 0.12010541361123594, 0.1410488451989622, 0.14157929700627359, 0.16547866605202943, 0.15056323558257445, 0.1448597768404678, 0.15678861604608407, 0.15008799910595794, 0.15814252453176214, 0.18597981229182803, 0.15864714331713003, 0.17464648562904783, 0.1538316649921433, 0.08906426218028685, 0.08588914970342942, 0.09533227682724443, 0.104254474711582, 0.09843442877697872, 0.1083990303509148, 0.11314428394980136, 0.11369721027794943, 0.11118498202913174, 0.20431437580416834, 0.15567270807535238, 0.1672625044966619, 0.16241002743717836, 0.14085245884371123, 0.1511681847526355, 0.1613685499952291, 0.1395474068389556, 0.15501606479635233, 0.13091089319232085, 0.1270091370180697, 0.13480042609003462, 0.15321543401099302, 0.10666420700632484, 0.13975353109034583, 0.13397142795527672, 0.0988368451088647, 0.12742091362506913, 0.16239585946219703, 0.1498784704478927, 0.1634453820490993, 0.16733172982339461, 0.1471664722655336, 0.17715671702167002, 0.12764264201488218, 0.12991446936808138, 0.1371492051354588, 0.2259408453530638, 0.13182396251357675, 0.1465931639538911, 0.14863839764021214, 0.1406185602997595, 0.16173613565747524, 0.13230100481589413, 0.15612511374854587, 0.11368645934755073, 0.1825074271820738, 0.18689077209263116, 0.18258899419023766, 0.19016784665487652, 0.18435126297394067, 0.2110523722051817, 0.19564013616705378, 0.17581717467602576, 0.20602163948903174, 0.04940075200526606, 0.04238249706289354, 0.06062577823148263, 0.04732860286804974, 0.03964142638106094, 0.0388114564933183, 0.05610326682368161, 0.04077985818954544, 0.05205619467092659]}, "mutation_prompt": null}
{"id": "7587ff8e-2c78-4b30-8b04-c56a1905e463", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 25  # Tweaked population size for more exploration\n        self.inertia_weight = 0.6  # Adjusted inertia weight\n        self.cognitive_coefficient = 1.5  # Modified cognitive coefficient\n        self.social_coefficient = 1.3  # Modified social coefficient\n        self.initial_temp = 0.8  # Adjusted initial temperature for SA\n        self.cooling_rate = 0.95  # Modified cooling rate for more gradual cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with tweaked weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.5 + 0.1 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA", "description": "A hybrid algorithm blending Particle Swarm Optimization and Adaptive Simulated Annealing for enhanced convergence and exploration balance.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.8799609829172478, 0.8586909503928349, 0.8566534436291947, 0.897899778767167, 0.8843537620332748, 0.8775636596985431, 0.9046974141015873, 0.8931642371528448, 0.8503974239810025, 0.7995871376641931, 0.8085080130473501, 0.802867907674548, 0.7837169798466223, 0.7316804186891858, 0.7316090174717947, 0.7712509602188602, 0.7754846176541473, 0.7849544085223976, 0.1453653707913941, 0.10074289060845276, 0.10700570810652643, 0.09616914934491227, 0.18378941349243283, 0.12162564622923511, 0.11782232132765313, 0.16146579700456842, 0.1190286446947102, 0.10121953869740485, 0.13290855039295324, 0.11893846729456914, 0.08698097049308873, 0.11662577784916706, 0.14493121158839217, 0.14484396627719565, 0.16032332243208236, 0.13091399044761765, 0.9849522984121216, 0.9909263546968334, 0.9929085595493936, 0.984348654876733, 0.9864296152157568, 0.9860111046400795, 0.9876790897923149, 0.9847123023009133, 0.9888422539969598, 0.7429180748910443, 0.8371093239682338, 0.8330370526032167, 0.755895063357234, 0.15497087983083768, 0.15460295783547895, 0.4946469019043118, 0.08914244368961044, 0.22959669934372573, 0.1727265454861301, 0.11724224266021155, 0.17211339002283255, 0.2028572789931945, 0.17374973683820338, 0.21484507076656167, 0.21809092490040694, 0.23725991710098748, 0.15242251100102655, 0.21201728704514666, 0.24465453892586808, 0.22188502466696147, 0.19610078429561706, 0.2439402999679523, 9.999999999998899e-05, 0.25370013938023084, 0.20003296618230193, 0.22163562441575957, 0.2720077407611182, 0.11534915401292978, 0.2535526116031921, 0.26007249863355086, 0.21445792556385346, 0.13535100542638379, 0.30848604919447575, 0.11442069107261665, 0.28894635681633485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005067921783855178, 0.08716435110184706, 0.010124527005228035, 0.05642075771374988, 0.0390183390449651, 0.08624612823419242, 0.1360291361402105, 0.01576137965358304, 0.01890890035552617, 0.21807972818035792, 0.08977974709350578, 0.03990943291476323, 0.0718593767348884, 0.1851108070164107, 0.2671054145922408, 0.0835278553053378, 0.3036516500579892, 0.08651391184452517, 0.15723868627544557, 0.10745918639269714, 0.077277228155048, 0.06545599564709415, 0.06151025352008177, 0.20590121175907838, 9.999999999998899e-05, 0.12134556678799036, 0.09328880892848956, 0.08509209514844374, 0.058284434733336665, 0.0859761358114649, 0.5419599922895202, 0.5437607388170249, 0.5741717869048746, 0.6152239879545969, 0.5307629037332805, 0.5117268976411135, 0.5137880248696945, 0.564154757143718, 0.5865111580478859, 0.08750364405155375, 0.06865264186189945, 0.13443738489989687, 0.11661660495739812, 0.13565218865106743, 0.1454461848978046, 0.09218886741788879, 0.08287952536724119, 0.1913648754932442, 0.23926980702067202, 0.22593035614973034, 0.20931111329162855, 0.27898384999623815, 0.26282777421442916, 0.27894490317540654, 0.4336130851275236, 0.2306513737076089, 0.2004137913329238, 0.24022175530045475, 0.3379340748832441, 0.34514114857487344, 0.19058504983205493, 0.35369485388044164, 0.3148617787023471, 0.38465417436618166, 0.3542582503932372, 0.33155567724600543, 0.12196690459575144, 0.25196592581172506, 0.26330155651693854, 0.25199768504316167, 0.20088478895039064, 0.2822646192784901, 0.23497188865644492, 0.26756014056341715, 0.2703921607973885, 0.21170509056968467, 0.25566001355418244, 0.17094574288829845, 0.22441656007163857, 0.20507854813946003, 0.263918653334287, 0.24948128869926645, 0.19283798216218406, 0.21333061563211353, 0.1734318442939322, 0.2539338503094448, 0.18049046365862687, 0.1845675870682172, 0.21353526802199208, 0.25540596706849505, 0.1985684614921528, 0.8361452291258308, 0.19426140436774808, 0.1881469102762252, 0.1274037513653118, 0.15501675433600504, 0.17371358174832707, 0.2017712964602042, 0.2013237575083089, 0.11154629943644445, 0.17033698354032334, 0.9381567808730792, 0.08330352541676878, 0.15771733294266377, 0.10005442893970051, 0.7769521257967943, 0.8724135256708302, 0.2136311691719911, 0.1052911126981404, 0.8982321001976468, 0.7672508407053418, 0.2082054048078794, 0.20986005878694125, 0.22301893224450264, 0.21263025891667897, 0.1873735624298849, 0.19395667656821092, 0.19675174705294363, 0.26352400621707395, 0.1960777067772862, 0.10079310112304607, 0.08589183176478277, 0.09181390944117462, 0.11794080682671337, 0.1106335934905035, 0.10771137466695369, 0.08542964704151224, 0.09880413531331067, 0.10399600117881258]}, "mutation_prompt": null}
{"id": "46da2fd1-16ed-430d-82f7-68182833f03e", "solution": "import numpy as np\n\nclass HybridPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Tweaked population size for better diversity\n        self.inertia_weight = 0.7  # Adjusted inertia weight for balance\n        self.cognitive_coefficient = 1.4  # Modified cognitive coefficient\n        self.social_coefficient = 1.4  # Modified social coefficient\n        self.initial_temp = 0.9  # Adjusted initial temperature for SA\n        self.cooling_rate = 0.9  # Modified cooling rate for more gradual cooling\n        self.crowding_factor = 0.5  # Introduced crowding factor to maintain diversity\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with tweaked weight and crowding\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + self.crowding_factor * np.random.rand(self.dim) * (np.mean(population, axis=0) - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.6 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_EnhancedSA", "description": "A hybrid algorithm enhancing Particle Swarm Optimization with Adaptive Simulated Annealing and dynamic crowding to maintain diversity and improve convergence.", "configspace": "", "generation": 8, "fitness": 0.23343568985170435, "feedback": "The algorithm HybridPSO_EnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.38789938362081844, 0.41213173334650055, 0.41011654215786997, 0.18254000502507162, 0.18856260486566145, 0.15757180170035967, 0.4126350139325258, 0.41825410656092776, 0.3984425647545893, 0.2258004309633821, 0.22420112444184126, 0.20900443539053581, 0.175525232826088, 0.24470103771578955, 0.2836583433826956, 9.999999999998899e-05, 0.278196004356566, 0.2797860321187011, 0.1167043553820376, 0.12106822892118385, 0.13618469724360927, 0.11860387105099257, 0.14829199941250404, 0.07128659601533871, 0.263064971860839, 0.1235628820045418, 0.15118400536385723, 0.1060722246143494, 0.11028158216773842, 0.13033568193812606, 0.13220759070226085, 0.1043051034276119, 0.10436353646769381, 0.1241027137818792, 0.13245393596047217, 0.10869026372934332, 0.988780917987343, 0.9914191779664722, 0.9915090112407178, 0.9780743923055816, 0.9867273379768732, 0.9822000307029479, 0.988952348191967, 0.98625002120508, 0.9909592386398992, 0.43078873483698676, 0.05931477028651699, 0.4562805201820396, 0.14982896378151433, 0.4495558156029098, 0.38546690630813774, 0.08908608696701736, 0.08862619400403493, 0.08831190395550437, 0.36233547798675425, 0.4893454896723691, 0.711194734739504, 0.20724400513471597, 0.18910928748637057, 0.20077375907576922, 0.3000670986771474, 0.7109319130095537, 0.32713993439414357, 0.28027453134574165, 0.19090252439394362, 0.19907643236045547, 0.18897690448298932, 0.18952179868342056, 0.14755917981064248, 0.21806233558059718, 0.15172767960829092, 0.1602770649737797, 0.19680384487509472, 0.00017644496639568352, 0.18686967233958862, 0.2387701335743594, 0.18093220289654743, 0.17231436560130153, 0.23010378047668167, 0.2358032133425546, 0.20204060423117087, 9.999999999998899e-05, 0.023914034166476306, 9.999999999998899e-05, 0.008882472888613102, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017453055620990643, 9.999999999998899e-05, 9.999999999998899e-05, 0.044447149849320744, 0.05199637945595548, 0.11503906509864104, 0.03405032176195877, 0.02117486805345048, 0.03332492011078103, 0.12061982418189476, 0.040076305957689184, 0.14362339856196726, 0.038590629264073306, 0.07575747331462512, 0.1164265412053912, 0.060481787877488036, 0.17016955889215823, 0.06255863923789928, 0.08143413420919254, 0.11253097138956325, 0.052480514749080776, 0.04375370103253429, 0.05540486060822658, 0.0845867633601074, 0.06754087800034958, 0.17767508688071287, 0.015399406091161638, 0.05557338005525403, 0.08877861479828553, 0.07965975381941404, 0.3708734151416472, 0.38245354089784644, 0.3663853538677926, 0.38798460264957957, 0.36274929172396586, 0.2085594677825151, 0.36715285204469617, 0.39016770189225747, 0.3857419089247144, 0.11276622357629362, 0.06167813855836235, 0.06324682551347938, 0.11718524946326758, 0.14226445561655587, 0.10621718200596408, 0.09376078395782117, 0.10634942999850627, 0.1029298934540257, 0.29024257816176746, 0.33967380229364574, 0.1797330188829408, 0.2808425811734534, 0.30791024560585234, 0.17998713759198048, 0.23197653903468418, 0.19384417545002575, 0.32278150769013914, 0.2917907668958333, 0.1857819836221699, 0.3136545178760618, 0.3023479399885405, 0.3078639995231922, 0.3074385338118709, 0.32092392900860045, 0.26152043332096087, 0.19304552874795666, 0.2838503148848044, 0.14436904162573705, 0.17362721432381734, 0.27102239095109704, 0.23246548558912306, 0.21845137213289578, 0.28096319499654887, 0.25273044357354124, 0.2655724520906283, 0.22180138471698663, 0.15573274203389342, 0.20063518198247177, 0.24022260050349065, 0.19207339287163672, 0.18103669573854297, 0.1902535511419492, 0.22013386866771112, 0.20620750948180455, 0.21803482108357708, 0.20808086526645597, 0.19917967273550707, 0.19383352079062166, 0.21006497786333633, 0.3355966567360078, 0.23793091358980645, 0.20071296237988123, 0.3606301953473141, 0.18220756631067136, 0.1672386966243814, 0.1541551884442921, 0.6152000964342309, 0.19942288266531782, 0.19976822696042673, 0.09973874627281798, 0.17023985577146628, 0.6143586793116862, 0.5337986940843236, 0.15729313472877327, 0.203922665598394, 0.45627663015980624, 0.45885618169391496, 0.21042183369458067, 0.19937091519316064, 0.5516512804505387, 0.5155299908281433, 0.20069795357255615, 0.185784659447378, 0.18390536899894994, 0.1854165268644522, 0.1863660864736717, 0.17464217119347158, 0.19074817412861356, 0.17710988398719762, 0.17982492561429042, 0.1187389719080314, 0.06900443272691792, 0.09166949730424745, 0.09349587352808508, 0.08635424663972024, 0.08756127245612755, 0.08268430094198953, 0.08689884153542393, 0.096061433071843]}, "mutation_prompt": null}
{"id": "c39dc122-66df-43cd-87c3-ea301ea87c8b", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA_DynamicPop:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.initial_population_size = 30  # Increased initial population size for more exploration\n        self.inertia_weight = 0.7  # Tweaked inertia weight for balancing exploration and exploitation\n        self.cognitive_coefficient = 1.7  # Modified cognitive coefficient\n        self.social_coefficient = 1.5  # Modified social coefficient\n        self.initial_temp = 0.9  # Slightly increased initial temperature for SA\n        self.cooling_rate = 0.9  # Adjusted cooling rate for a more gradual cooling\n        self.pop_shrink_rate = 0.98  # New parameter for dynamic population resizing\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = population_size\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                # Update velocities with tweaked weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget\n\n            # Dynamic population resizing\n            if self.evaluations < self.budget * 0.8:\n                population_size = max(5, int(self.initial_population_size * (self.pop_shrink_rate ** (self.evaluations / self.budget))))\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA_DynamicPop", "description": "A hybrid algorithm utilizing Particle Swarm Optimization with Adaptive Simulated Annealing and dynamic population resizing for enhanced convergence and exploration.", "configspace": "", "generation": 9, "fitness": 0.280351839299271, "feedback": "The algorithm HybridPSO_AdaptiveSA_DynamicPop got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.7445984418241938, 0.7391435460612347, 0.6971452655360897, 0.7654623419848788, 0.7460651348308098, 0.1614223152162766, 0.7877938024185035, 0.7627898438771056, 0.17558535285226573, 0.6705561425938851, 0.6151457878248157, 0.6332643426636255, 0.6958319723009568, 0.047250691812106727, 0.6358621576162682, 0.05086993939748152, 0.6804951598450795, 0.6071331798624684, 0.1392822410798923, 0.15646739112904484, 0.10339017769592951, 0.1537375877177488, 0.07431647363510219, 0.1308956678347255, 0.12096213873069972, 0.051284177364476324, 0.1568885125237146, 0.11952041705939176, 0.13982653386138955, 0.11501667181995068, 0.13985293776902308, 0.15368210494392498, 0.11211327342824484, 0.13789006681698268, 0.14227763370743174, 0.13642057727469215, 0.9883998958486997, 0.9916630228555521, 0.9916277521005219, 0.9861598248882624, 0.9877753614921518, 0.9844576478787664, 0.9867964906287147, 0.9862039420517396, 0.9881201305470202, 0.6946175715350025, 0.05973652240733662, 0.11601386777248612, 0.5729064887506743, 0.15328361160947135, 0.701695351388941, 0.6908230768268403, 0.08914067173593576, 0.6614857624874654, 0.22892126753821018, 0.22395621361716078, 0.22387457178701364, 0.32935874852815106, 0.8092905089538992, 0.7501360113026951, 0.22758118189404863, 0.24402235823823037, 0.22834446232426586, 0.24221960246729712, 0.12603878973828908, 0.27326520644163954, 0.13348181843007711, 0.12822028657787943, 0.2259458360420017, 0.25440070947408, 0.2239881371595427, 0.13177094831170744, 0.2411029449240244, 0.05195097528368664, 0.2083244477653481, 0.1351611557810969, 0.3050550009826567, 0.21986558616466956, 0.1137601469747287, 0.13600451726677043, 0.31033505039063447, 0.000962493568907985, 9.999999999998899e-05, 0.08970358598126482, 0.027243979063842794, 9.999999999998899e-05, 0.04118604187995967, 0.01495831832607486, 9.999999999998899e-05, 0.05609941170078403, 0.03730610024000858, 0.02959793005138578, 0.05167417044875422, 0.07264818246459415, 0.034562454027811884, 0.008290054711861505, 0.0652748127377123, 0.135286906362027, 0.04742833502169341, 0.04990694007197782, 0.03605775545846923, 0.1382239086451229, 0.09461130613138358, 0.09511997842118158, 0.09801157749496447, 0.09928247464713635, 0.07118796012084094, 0.07557438806441874, 0.357207253053625, 9.999999999998899e-05, 0.16538268124444477, 0.12209337473025395, 0.03048832278503577, 0.006587898389299851, 0.08388591648884636, 0.10130140442095414, 0.08290012648964706, 0.48732292601575244, 0.5104062068192525, 0.49872954072345554, 0.5158002469096999, 0.20905428094862033, 0.5178801201439388, 0.5447109401330212, 0.48915452148648375, 0.5342931224718466, 0.08936198290498143, 0.12116060600314427, 0.09512930069401915, 0.11351994520570219, 0.08769365134276319, 0.11249551359170618, 0.12168416226826717, 0.1047951185227548, 0.18100375450204798, 0.26757039981747055, 0.344960349841397, 0.28949546348467414, 0.24134526791636413, 0.37102033719633154, 0.36306619207255386, 0.4028950493808132, 0.16835183159610878, 0.1841786626835078, 0.2122817927673416, 0.355894777674179, 0.32049776185933054, 0.3383838475269084, 0.3575880023154474, 0.30748139143498343, 0.34998548278235786, 0.3459510157525034, 0.35587566666063863, 0.2088370377805564, 0.3195799409584209, 0.30015663528093217, 0.18581716378487334, 0.22295179373546536, 0.3164623818698562, 0.24859082138525146, 0.27579576829354946, 0.2938085333303989, 0.33940767320628185, 0.1618959415087884, 0.19212458168920898, 0.2230267942622658, 0.20071793959750184, 0.204338496825351, 0.2323395613736272, 0.23255072774311114, 0.20488987498546185, 0.20045248482590172, 0.20228490154289136, 0.2083449493587909, 0.19213666493811166, 0.1838484918249882, 0.20949225669115645, 0.2002769152449808, 0.22097142849528362, 0.20778987692976691, 0.8434973815305582, 0.12658005185242016, 0.15456148928413316, 0.1724037438293219, 0.2009366695314868, 0.20014604815991122, 0.1180599960295945, 0.1697595543854713, 0.8322854980671444, 0.8217063278945917, 0.15637527705786192, 0.11217126209333783, 0.7074670546916721, 0.22645402151210947, 0.2910744472676321, 0.10433909183477064, 0.594019927956123, 0.7609715442500528, 0.20364874289979273, 0.18088134742207185, 0.1980368197790413, 0.2026078584852684, 0.1911138263004517, 0.17982037024255204, 0.19905399876510022, 0.1922868162581015, 0.194566211730679, 0.0942226217508847, 0.10235334703438204, 0.10223091760077074, 0.09305313670901283, 0.07541113146707012, 0.08730258050983941, 0.10867216413547431, 0.08701454585995272, 0.09303307023067153]}, "mutation_prompt": null}
{"id": "508f6600-0d79-4897-9bca-98a192ba9120", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Increased population size for better diversity\n        self.inertia_weight = 0.7  # Slightly increased inertia weight for more global search\n        self.cognitive_coefficient = 1.4  # Adjusted cognitive coefficient for balance\n        self.social_coefficient = 1.4  # Balanced social coefficient for cohesion\n        self.initial_temp = 0.9  # Higher initial temperature in SA for exploration\n        self.cooling_rate = 0.93  # Slightly faster cooling rate for quicker convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with refined weights\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.6 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA_Refined", "description": "A refined hybrid algorithm combining Particle Swarm Optimization and Adaptive Simulated Annealing with dynamic parameter adjustments for enhanced optimization efficiency.", "configspace": "", "generation": 10, "fitness": 0.24917517335417433, "feedback": "The algorithm HybridPSO_AdaptiveSA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.5191235586676148, 0.5049891381491831, 0.4993202894687232, 0.5034799921229165, 0.5305058287897017, 0.16134465305415413, 0.5199221895061108, 0.5344175676134744, 0.1826889987680017, 0.4083460176729542, 0.040212509087195425, 9.999999999998899e-05, 0.38358953767686144, 0.404806599255099, 0.4223928463574024, 0.38807833639384903, 0.054181556649874674, 0.4795986711001846, 0.13906593607304163, 0.12128035862138953, 0.11337751842627819, 0.128061169267502, 0.1441185607385842, 0.1564972838231612, 0.1554161792603843, 0.12956254643439746, 0.14254545021378595, 0.09619935479439756, 0.13846404457784933, 0.11951986973547069, 0.14740894330937937, 0.13695532588826698, 0.11873578592267453, 0.13985582529854257, 0.11397249668607123, 0.12986892651807158, 0.9880667160698053, 0.9915551037156686, 0.9912021828937527, 0.9855431572050868, 0.9884669329420445, 0.9831972212845504, 0.9889288655333027, 0.9854923179651286, 0.9886857335174749, 0.5050096709416276, 0.05962289349453387, 0.055541445290839375, 0.15143536878962804, 0.15192046544448679, 0.5218325039677092, 0.5521355331176974, 0.08905374339476657, 0.0887869052615915, 0.17126314330676173, 0.5900494071079876, 0.22266311442286546, 0.20705614577377873, 0.6358871547238767, 0.21172471725611364, 0.2178869818889838, 0.2120165442538694, 0.6098391115990154, 0.20927091303542733, 0.40466894516352847, 0.24720665875835912, 0.10487856256918382, 0.13087600584774028, 0.23051820029027503, 0.13248610150380014, 0.32076339144253607, 0.36376862278219035, 0.24054198544390304, 0.01641401915583285, 0.13015589151087792, 0.26213546639398955, 0.3098666275536499, 0.3725312305366665, 0.26734240264264875, 9.999999999998899e-05, 0.412021188293349, 0.03620489869556509, 9.999999999998899e-05, 0.0005991504315983054, 9.999999999998899e-05, 0.004590011968131358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010575401605541046, 0.056746748795389435, 0.040729125815094136, 0.06932491886501102, 0.05566690962748122, 0.002332877456621807, 0.035456787082869035, 0.08358364819083763, 0.11297632526151213, 0.026587451807384754, 0.046337008028067284, 0.08385130518336459, 0.04532713690285328, 0.07049788271717394, 0.0911903719948226, 0.17112824145683825, 0.09114774806011683, 0.1462685208768586, 0.06720232771433643, 0.20570002932656428, 9.999999999998899e-05, 0.12167544537125852, 0.006301698869012995, 0.006231131887719177, 0.006497122409519718, 0.108227924313123, 0.24194953936811214, 0.09454837033282948, 0.43703922123245165, 0.4395222277408447, 0.4236327470250598, 0.4131942302743986, 0.4369131533702584, 0.4162331216170079, 0.4258478190239414, 0.4509843074071924, 0.4596573842684647, 0.10790360529644383, 0.08180617310838934, 0.07455677928957427, 0.13199006920669276, 0.10475444460606831, 0.11419182234588643, 0.12264161923551786, 0.11186183265124072, 0.11603632902027616, 0.266750382943317, 0.18481936331529758, 0.37367302262784374, 0.3758648712315965, 0.24847508004024954, 0.2525067167583075, 0.26718876480470644, 0.23246170857138915, 0.2218902583654473, 0.16457746308539023, 0.23338211130010245, 0.2529703907719182, 0.3392151598411085, 0.3190936779455834, 0.32487263345144224, 0.33235090407134193, 0.3199830693931538, 0.3454503164593733, 0.27589716138340314, 0.21722885163628147, 0.1977132821367753, 0.24382841189076665, 0.18621819104446746, 0.23274487264282484, 0.17697968957083454, 0.2535735455463618, 0.2542735483274764, 0.214111868530248, 0.13865927510175202, 0.21595256831584708, 0.20692171210109778, 0.18204803565404026, 0.17629645369905722, 0.23559517592125756, 0.2379589947031503, 0.20587924385223721, 0.21784028684748769, 0.20211517939249113, 0.17739123509465882, 0.1974881305786984, 0.24023877570268715, 0.21387529382910841, 0.18685366743576515, 0.24625534617454337, 0.21903199832544362, 0.184968585186429, 0.17552820592154816, 0.14777680627666723, 0.6650708365439567, 0.20094813142161716, 0.7391609058517659, 0.09975461944248765, 0.17030208073397812, 0.6695169457583714, 0.5756051150082291, 0.1458613382889391, 0.11193169425226257, 0.6207100969973142, 0.5823141020192129, 0.2764423726288525, 0.10432760553122755, 0.10497013377563658, 0.6568882756617023, 0.1957649072906794, 0.19470569927670267, 0.18032263476752974, 0.21741393981904378, 0.18276008948030664, 0.19064498846609668, 0.19497120001315293, 0.19634677484951468, 0.212729628145376, 0.0908979928533894, 0.060892349201458806, 0.0942479408832283, 0.06989067276793304, 0.08567035265780343, 0.09269179276228279, 0.1256143367943614, 0.08675558961422325, 0.09170590599726547]}, "mutation_prompt": null}
{"id": "c32b33b8-8385-4674-aab8-98a4c4abfa01", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Increased population size for better diversity\n        self.inertia_weight = 0.7  # Slightly increased inertia weight for improved exploration\n        self.cognitive_coefficient = 1.4  # Adjusted cognitive coefficient for balance\n        self.social_coefficient = 1.6  # Increased social coefficient for stronger convergence\n        self.initial_temp = 1.0  # Increased initial temperature for more aggressive initial exploration\n        self.cooling_rate = 0.9  # Faster cooling rate for more exploitation in later stages\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with modified parameters\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * r1 * (personal_best[i] - population[i])\n                                 + self.social_coefficient * r2 * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamically adapt inertia weight\n            self.inertia_weight = 0.6 + 0.15 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA", "description": "A novel hybrid algorithm combining Modified Particle Swarm Optimization with an Adaptive Simulated Annealing strategy for enhanced optimization performance.", "configspace": "", "generation": 11, "fitness": 0.24775337362595187, "feedback": "The algorithm HybridPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.4708303774081377, 0.4940901273525192, 0.4731765487507822, 0.4980607403436115, 0.18885051143217946, 0.19056849048837166, 0.443477996381066, 0.1754310401325413, 0.43947798396011917, 9.999999999998899e-05, 0.0402750398021724, 9.999999999998899e-05, 0.36045764771780764, 0.3406396005592581, 0.34901429120963234, 0.05104784755361669, 0.05630975285138573, 0.04969538864095158, 0.15748089943895738, 0.12239711829077571, 0.1698839838676588, 0.33987091710324624, 0.3937959736137804, 0.12191542505473985, 0.163268555128258, 0.1467069599139309, 0.17303117200084694, 0.12294108742267795, 0.1321584737660405, 0.14141551436321043, 0.13788429689276493, 0.1304638623552683, 0.17413187214871506, 0.1532097790648359, 0.17288376025760932, 0.13076705922546772, 0.9891264914256214, 0.9917205248188382, 0.9916658913783645, 0.985416724011941, 0.9886678313838874, 0.9828616103017613, 0.9916787105287515, 0.988907604899579, 0.9908831790796334, 0.494052208380069, 0.4697927504335372, 0.1138168968537786, 0.44789857536544453, 0.15333632000723085, 0.15410779579852185, 0.5189970937654842, 0.0889025099585724, 0.08809313507800454, 0.39104045989757796, 0.6906489055991027, 0.7242112710427735, 0.2807079092550586, 0.26196655674083136, 0.160610661600202, 0.1740885890030368, 0.2701359753506982, 0.23107024194425996, 0.24922132370894112, 0.3244537038598825, 0.24668343575236973, 0.09546376214575558, 0.39998697219242685, 9.999999999998899e-05, 0.2783929462307506, 0.19738468427010958, 0.3047554284771471, 0.21579904126545457, 0.054155698840032684, 0.2508336619294954, 0.1324472333745622, 0.24415101627607771, 0.261798232141379, 0.22358770423438024, 0.034783804709543786, 0.2652276570217026, 9.999999999998899e-05, 9.999999999998899e-05, 0.08426731532300002, 0.011834103288336562, 9.999999999998899e-05, 0.017527056366172133, 9.999999999998899e-05, 9.999999999998899e-05, 0.010486002682185025, 0.07107277881097529, 0.06449169337074823, 0.03862039973797671, 0.09226261660924207, 0.0011814083679723142, 0.04467136988998377, 0.06170061571322405, 0.04778314568941988, 0.05897613467904417, 0.24913333244688796, 0.034069448431272575, 0.09043821831273602, 0.07696136198946202, 0.09206607249001986, 0.07402380523192875, 0.09285394948117376, 0.0985951374418843, 0.24523695938822387, 0.17434263500383984, 9.999999999998899e-05, 0.2916821392373975, 0.006481937598845633, 0.006296158526192475, 0.006782387580176019, 0.11086362959331397, 9.999999999998899e-05, 0.08209626311601137, 0.4443970769444042, 0.39465768140767143, 0.40027968856177065, 0.39109967010488267, 0.40671632399501245, 0.2087912251076316, 0.38567191250519894, 0.4225244244213211, 0.4061300821090865, 0.08482999480998532, 0.06773082662486918, 0.07184065555808661, 0.12819223775638644, 0.09833364937581335, 0.113031397591842, 0.07741074350052912, 0.11204993418507114, 0.12407978540883291, 0.24550423165807223, 0.3378377583402805, 0.3930285372876313, 0.2737527279839248, 0.3553828474335875, 0.20228793404474332, 0.19735796626346325, 0.3847128367203333, 0.3379593356390753, 0.30376857143792524, 0.21211064845416494, 0.2977398194730049, 0.3153548626828313, 0.3185998837489522, 0.30287540919055655, 0.3347442975175877, 0.2803360355639125, 0.33132369726463684, 0.19447520832986698, 0.21079779202518367, 0.31359181525677127, 0.28764614825994805, 0.21757951617391325, 0.2720814659991254, 0.3154572765078151, 0.22920237617930284, 0.25915433654697717, 0.21892291570875533, 0.140648821719089, 0.2041468868251458, 0.20700830403865667, 0.25306943491945044, 0.20113470987060345, 0.20893340931150983, 0.20782576783260343, 0.2519648103172072, 0.21861229853886666, 0.19037343472937784, 0.22048014050314535, 0.2067978465963437, 0.20666256025536633, 0.22292669502509166, 0.22588322671796157, 0.21437607884859367, 0.20130950625617883, 0.6857949577884039, 0.17718680535530507, 0.12473017281846865, 0.6391975717784637, 0.19963022375266515, 0.20071072286103053, 0.0999260511383816, 0.1702569017544916, 0.7079433290762169, 0.677502079319369, 0.15698431387592993, 0.11226912476127304, 0.46971517280603425, 0.5819963131200933, 0.6311821899495496, 0.18909568228705997, 0.10412420207957107, 0.6226030480811413, 0.1895572132364216, 0.19007062253139206, 0.195609153032265, 0.19849125227369402, 0.19255545612119163, 0.18768168226413073, 0.22432970297457555, 0.19268514903338574, 0.19557255467369228, 0.09572010016936361, 0.08845214244559751, 0.11779826431196105, 0.09249638403952176, 0.10030021301424186, 0.08201078737829903, 0.13391571718998052, 0.08853841700311638, 0.0976466337202413]}, "mutation_prompt": null}
{"id": "e98e7ebf-1712-48d6-be15-42f3c4f38ee4", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Increased population size for better exploration\n        self.inertia_weight = 0.7  # Slightly increased inertia weight for exploration\n        self.cognitive_coefficient = 1.4  # Minor adjustment to cognitive coefficient\n        self.social_coefficient = 1.5  # Increased social coefficient for enhanced social learning\n        self.initial_temp = 1.0  # Higher initial temperature for SA\n        self.cooling_rate = 0.93  # Adjusted cooling rate for slower cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with updated weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically with increased range\n            self.inertia_weight = 0.4 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedHybridPSO_AdaptiveSA", "description": "An enhanced hybrid algorithm utilizing dynamic strategy adjustments in Particle Swarm Optimization and Adaptive Simulated Annealing for efficient exploration and convergence.", "configspace": "", "generation": 12, "fitness": 0.29115320302157144, "feedback": "The algorithm EnhancedHybridPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.8728417032539412, 0.8466282193026491, 0.8552599619996045, 0.8612840625670182, 0.7864585831873151, 0.19096131180266762, 0.8454573356859917, 0.8354070135171949, 0.18265950799515107, 0.7666514292553621, 0.6732306705225231, 0.7288824941402925, 0.7450930143721504, 0.04831819799959525, 0.7332799565189139, 0.6648850976321581, 0.6869234587437915, 0.7439766873001192, 0.131313571149418, 0.12346129180091325, 0.15798575000284132, 0.19121015514699324, 0.07567665004845803, 0.06470175836165948, 0.15449570868036422, 0.16219721548467847, 0.12542686107715761, 0.11792975348093226, 0.09962520952873999, 0.12313861408538573, 0.15384944788317256, 0.14436392851566238, 0.1170016041603954, 0.1333429131621917, 0.10795698639458662, 0.08233283954804416, 0.987930489393818, 0.9915589088375153, 0.9915457820630835, 0.9856302481355402, 0.9879301580629816, 0.9800809808407576, 0.9865100543815839, 0.9812036629354004, 0.9879087263132225, 0.7884828773019132, 0.059899863815092935, 0.7963946712160553, 0.7102867405045629, 0.15362505263466497, 0.7765986846386875, 0.7879974107363692, 0.7784019150977173, 0.0887531704165927, 0.8756028751702614, 0.15685003243476114, 0.2069626906621792, 0.28338635025992154, 0.28117170383763235, 0.2204768427819408, 0.16693782876347485, 0.232790589057429, 0.377970290304377, 0.18714506568541311, 0.2588114368965585, 0.2059001299899902, 0.10850201888093236, 0.24511137629988988, 0.27267616548670126, 0.23960000279587113, 0.3149919656517467, 0.2624904510697784, 0.3012513197585507, 0.1215440048940547, 0.185545023919776, 0.2669273881524421, 0.2754037088810626, 0.32046243862688384, 0.1805983507875768, 9.999999999998899e-05, 0.2966627209759045, 0.0014013130387303674, 9.999999999998899e-05, 9.999999999998899e-05, 0.002293337288474695, 9.999999999998899e-05, 0.00537866272250942, 0.025761322106169104, 9.999999999998899e-05, 0.09466058562424917, 0.05951594435082186, 0.043359225924210154, 0.08812004557453024, 0.06023958326924661, 0.010339798393107391, 0.016668084531500038, 0.12263753649392206, 0.11020720102932924, 0.057418322489342755, 0.1467676772697607, 9.999999999998899e-05, 0.05260843633827439, 0.17989200942962347, 0.10101140861043445, 0.20497150521984708, 0.10436836295633023, 0.07620722092632881, 0.07613453163941686, 0.09228009735729281, 0.043114220371463174, 0.11566536165957497, 9.999999999998899e-05, 0.023642436417582346, 0.006793064881024602, 0.08516075653911415, 0.2834241680527826, 0.11000859450376266, 0.5389942309600271, 0.541134968870618, 0.5609033986264709, 0.544156240009428, 0.5851386480544536, 0.20915176870239127, 0.6435763283284919, 0.5527417214176307, 0.5608567267883783, 0.1121389957339769, 0.11987022623308508, 0.08656141610103041, 0.13433842681574548, 0.09226710540625971, 0.13394763282313393, 0.08009020562501357, 0.11737624530598623, 0.09978257671692103, 0.2714989463682539, 0.23395429033918436, 0.22768876631075174, 0.23197920051001975, 0.2374474382491487, 0.1656186827823516, 0.20196178180654667, 0.16557256884594485, 0.3214558165045994, 0.15831130511407976, 0.21550382164005533, 0.2349849462015865, 0.2638665022448434, 0.2969576858241183, 0.31553285089566685, 0.3488005953823299, 0.21872561044088734, 0.3144598212138726, 0.279737524331485, 0.2833930700145475, 0.2775334890310289, 0.2516975978749336, 0.1900866760832265, 0.2423870186216711, 0.23367618411097346, 0.2696112467613653, 0.18034082588406786, 0.19737612176433406, 0.1417429911642617, 0.20138684315244793, 0.25444003239753443, 0.21613303866842404, 0.2307422346033, 0.1894014238141417, 0.2562911474595586, 0.21180302334949552, 0.17872212424290812, 0.22567481627387975, 0.20536886920509456, 0.2266767467791465, 0.19234995569257451, 0.1712814822292641, 0.18909882489609398, 0.225592401257261, 0.2095493726087484, 0.8742765289182616, 0.17768148449266863, 0.15472925415847494, 0.17176956216210293, 0.2016512313796286, 0.200970866328551, 0.09996532684336124, 0.17036640641386747, 0.9008741349106718, 0.8387216379471885, 0.1573634073129262, 0.21055102294790007, 0.291717923707683, 0.7830793038469342, 0.21343173003103644, 0.10436918969094755, 0.103936991905894, 0.8691274822143962, 0.1849041395639266, 0.20922191914025512, 0.19305424188188625, 0.23714391717434835, 0.20565297552451156, 0.24030625226393298, 0.24192992134696067, 0.2473095314243463, 0.235490179273102, 0.11238001799792618, 0.10692924158425154, 0.1007216598534757, 0.11002084094167042, 0.08678949816135573, 0.0713341856410632, 0.14595191318014877, 0.059934543217251335, 0.10451886514402609]}, "mutation_prompt": null}
{"id": "b8274898-0297-42f0-9d88-8d055455705f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Incremented population size for increased diversity\n        self.inertia_weight = 0.7  # Increased inertia weight for improved exploration\n        self.cognitive_coefficient = 1.4  # Tweaked cognitive coefficient\n        self.social_coefficient = 1.4  # Adjusted social coefficient\n        self.initial_temp = 1.0  # Increased initial temperature for SA\n        self.cooling_rate = 0.9  # Modified cooling rate for slower cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with tweaked weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedHybridPSO_AdaptiveSA", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization with Adaptive Simulated Annealing and dynamic population adjustments for refined exploration and exploitation balance.", "configspace": "", "generation": 13, "fitness": 0.27734798084139634, "feedback": "The algorithm EnhancedHybridPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.6409273002389997, 0.749659597023177, 0.7419875362922843, 0.7351269173154117, 0.18269334826339423, 0.16135476347149635, 0.7567112544947678, 0.7704502657626164, 0.18286303617984712, 9.999999999998899e-05, 0.641958668096711, 0.6138504415147057, 0.6145401256782155, 0.6690142334550668, 0.6556531580355387, 0.6389770802794913, 0.5878232475740071, 0.6835009807339989, 0.1443540982112469, 0.09565042792548406, 0.1577821288102983, 0.5602865704700714, 0.1604936215690672, 0.1586901948330316, 0.13437595085447862, 0.11694350465640402, 0.13996510387655559, 0.11047043461583494, 0.17449190671904002, 0.15748546721384604, 0.14491232984965297, 0.09296757874622275, 0.11191633308187743, 0.09530851110463845, 0.12385310701972574, 0.17483179295893392, 0.987982130032909, 0.9915414176775104, 0.9911910796766281, 0.9854530775798233, 0.9879504029539651, 0.984409791048061, 0.9872028669674849, 0.9853161999435012, 0.9886009985632193, 0.11584464185685861, 0.0599979527960155, 0.11347929965796089, 0.5575842798830881, 0.15250135112526075, 0.6879233115536165, 0.6412210674462028, 0.08919659690332205, 0.08882069787981417, 0.22867030962113244, 0.3427293023496011, 0.7431427669250061, 0.28330229586287936, 0.21364195046943013, 0.213158754569986, 0.17900990049324605, 0.12515389890834738, 0.3973083863655401, 0.13367645682959517, 0.2909699321279665, 0.34177428769858387, 0.13140915012488963, 0.10854039961989947, 0.2920410641371304, 0.2866270495557578, 0.2872867749103153, 0.26493040965432924, 0.27765361873535144, 0.10812051541949674, 0.24952073426143817, 0.29113756593487694, 0.2913785159615958, 0.29118778345488494, 0.2064645295619102, 9.999999999998899e-05, 0.3110003471035352, 0.012547393064759271, 9.999999999998899e-05, 9.999999999998899e-05, 0.031557487204734946, 9.999999999998899e-05, 0.059432765292770084, 0.0001770548372481695, 9.999999999998899e-05, 0.1077731647706216, 0.08896584040348776, 0.04584926653292154, 0.06445473272021596, 0.06068790670770008, 0.002916044634601933, 0.07048420023128199, 0.12003304302485973, 0.15238545734016784, 0.05943057781896566, 0.050470766787957144, 0.1070718539696569, 0.05045909918898139, 0.07865709869954185, 0.0959313076963837, 0.14949750317486654, 0.10170809234035638, 0.1155880363574977, 0.07289811642006638, 0.11317205184298307, 9.999999999998899e-05, 0.2799808369458112, 0.07042322372114684, 0.0065904733978909835, 0.0065909873685749965, 0.17484518732696452, 0.07958410164538199, 0.08392859250062223, 0.5212424356947132, 0.5345364241174855, 0.5357467736831215, 0.5784445193120309, 0.4971459075224619, 0.20880069705322635, 0.5340551083527207, 0.5404594368575713, 0.5500057898411084, 0.08327807541586296, 0.059941047264774894, 0.05725589996155267, 0.11027033709466783, 0.10054465673266899, 0.11638810338407224, 0.07079167168681122, 0.1456444661914662, 0.13134590657064904, 0.23621128985616402, 0.17033751682944853, 0.16019981532221284, 0.2591928410002057, 0.41135134387749417, 0.16963209961349135, 0.1883607104462981, 0.1533733510942148, 0.16995231918770004, 0.3243981512740838, 0.2572753013495417, 0.32718561486988107, 0.25288788336961354, 0.36495974122991315, 0.35813688337219607, 0.3622750865726846, 0.28231243593390865, 0.19761984505200958, 0.29526181440603316, 0.15943832140893732, 0.3286933243092489, 0.23321115955668603, 0.22623073235663482, 0.2985379823186174, 0.2461609923942919, 0.3764507330040284, 0.33518391770122, 0.2177557711017264, 0.13842849403482482, 0.2106047993912361, 0.25598860178140104, 0.19280898114796396, 0.24484694771966287, 0.23368171321521458, 0.17853040982994228, 0.25764314708521785, 0.20204144810192848, 0.22243795825932067, 0.24552507981981342, 0.21012973954256453, 0.25047905601832476, 0.19663000637840955, 0.19528998478033655, 0.19926061493831404, 0.20844212433368137, 0.8365069242310765, 0.1259772005882691, 0.1876213736742941, 0.1726978199465733, 0.20133350495453162, 0.8913848712661282, 0.09980350413162065, 0.1705132730871577, 0.8541119191260259, 0.7723335386307779, 0.14621260369365696, 0.11154230984674796, 0.2891488845782013, 0.811051280099368, 0.2867605934609191, 0.10440149068511051, 0.10483006230938696, 0.8205923604600734, 0.2042053436779323, 0.23520092771458068, 0.19680504620590844, 0.19726984818428794, 0.19609627492858062, 0.2681817225583858, 0.19607892970252694, 0.22481826580943065, 0.21939496843461426, 0.14345425572960935, 0.10173334145332358, 0.11214184113911774, 0.07946878678302616, 0.08718008544510869, 0.09793251867441666, 0.10212488188122848, 0.09288499327360444, 0.10139782835527344]}, "mutation_prompt": null}
{"id": "e56e5b83-6162-4775-a426-7611eb662eeb", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 25  # Tweaked population size for more exploration\n        self.inertia_weight = 0.6  # Adjusted inertia weight\n        self.cognitive_coefficient = 1.5  # Modified cognitive coefficient\n        self.social_coefficient = 1.3  # Modified social coefficient\n        self.initial_temp = 0.8  # Adjusted initial temperature for SA\n        self.cooling_rate = 0.95  # Modified cooling rate for more gradual cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocities with tweaked weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Adapt inertia weight dynamically\n            self.inertia_weight = 0.5 + 0.1 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridPSO_AdaptiveSA", "description": "A hybrid algorithm blending Particle Swarm Optimization and Adaptive Simulated Annealing for enhanced convergence and exploration balance.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.8799609829172478, 0.8586909503928349, 0.8566534436291947, 0.897899778767167, 0.8843537620332748, 0.8775636596985431, 0.9046974141015873, 0.8931642371528448, 0.8503974239810025, 0.7995871376641931, 0.8085080130473501, 0.802867907674548, 0.7837169798466223, 0.7316804186891858, 0.7316090174717947, 0.7712509602188602, 0.7754846176541473, 0.7849544085223976, 0.1453653707913941, 0.10074289060845276, 0.10700570810652643, 0.09616914934491227, 0.18378941349243283, 0.12162564622923511, 0.11782232132765313, 0.16146579700456842, 0.1190286446947102, 0.10121953869740485, 0.13290855039295324, 0.11893846729456914, 0.08698097049308873, 0.11662577784916706, 0.14493121158839217, 0.14484396627719565, 0.16032332243208236, 0.13091399044761765, 0.9849522984121216, 0.9909263546968334, 0.9929085595493936, 0.984348654876733, 0.9864296152157568, 0.9860111046400795, 0.9876790897923149, 0.9847123023009133, 0.9888422539969598, 0.7429180748910443, 0.8371093239682338, 0.8330370526032167, 0.755895063357234, 0.15497087983083768, 0.15460295783547895, 0.4946469019043118, 0.08914244368961044, 0.22959669934372573, 0.1727265454861301, 0.11724224266021155, 0.17211339002283255, 0.2028572789931945, 0.17374973683820338, 0.21484507076656167, 0.21809092490040694, 0.23725991710098748, 0.15242251100102655, 0.21201728704514666, 0.24465453892586808, 0.22188502466696147, 0.19610078429561706, 0.2439402999679523, 9.999999999998899e-05, 0.25370013938023084, 0.20003296618230193, 0.22163562441575957, 0.2720077407611182, 0.11534915401292978, 0.2535526116031921, 0.26007249863355086, 0.21445792556385346, 0.13535100542638379, 0.30848604919447575, 0.11442069107261665, 0.28894635681633485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005067921783855178, 0.08716435110184706, 0.010124527005228035, 0.05642075771374988, 0.0390183390449651, 0.08624612823419242, 0.1360291361402105, 0.01576137965358304, 0.01890890035552617, 0.21807972818035792, 0.08977974709350578, 0.03990943291476323, 0.0718593767348884, 0.1851108070164107, 0.2671054145922408, 0.0835278553053378, 0.3036516500579892, 0.08651391184452517, 0.15723868627544557, 0.10745918639269714, 0.077277228155048, 0.06545599564709415, 0.06151025352008177, 0.20590121175907838, 9.999999999998899e-05, 0.12134556678799036, 0.09328880892848956, 0.08509209514844374, 0.058284434733336665, 0.0859761358114649, 0.5419599922895202, 0.5437607388170249, 0.5741717869048746, 0.6152239879545969, 0.5307629037332805, 0.5117268976411135, 0.5137880248696945, 0.564154757143718, 0.5865111580478859, 0.08750364405155375, 0.06865264186189945, 0.13443738489989687, 0.11661660495739812, 0.13565218865106743, 0.1454461848978046, 0.09218886741788879, 0.08287952536724119, 0.1913648754932442, 0.23926980702067202, 0.22593035614973034, 0.20931111329162855, 0.27898384999623815, 0.26282777421442916, 0.27894490317540654, 0.4336130851275236, 0.2306513737076089, 0.2004137913329238, 0.24022175530045475, 0.3379340748832441, 0.34514114857487344, 0.19058504983205493, 0.35369485388044164, 0.3148617787023471, 0.38465417436618166, 0.3542582503932372, 0.33155567724600543, 0.12196690459575144, 0.25196592581172506, 0.26330155651693854, 0.25199768504316167, 0.20088478895039064, 0.2822646192784901, 0.23497188865644492, 0.26756014056341715, 0.2703921607973885, 0.21170509056968467, 0.25566001355418244, 0.17094574288829845, 0.22441656007163857, 0.20507854813946003, 0.263918653334287, 0.24948128869926645, 0.19283798216218406, 0.21333061563211353, 0.1734318442939322, 0.2539338503094448, 0.18049046365862687, 0.1845675870682172, 0.21353526802199208, 0.25540596706849505, 0.1985684614921528, 0.8361452291258308, 0.19426140436774808, 0.1881469102762252, 0.1274037513653118, 0.15501675433600504, 0.17371358174832707, 0.2017712964602042, 0.2013237575083089, 0.11154629943644445, 0.17033698354032334, 0.9381567808730792, 0.08330352541676878, 0.15771733294266377, 0.10005442893970051, 0.7769521257967943, 0.8724135256708302, 0.2136311691719911, 0.1052911126981404, 0.8982321001976468, 0.7672508407053418, 0.2082054048078794, 0.20986005878694125, 0.22301893224450264, 0.21263025891667897, 0.1873735624298849, 0.19395667656821092, 0.19675174705294363, 0.26352400621707395, 0.1960777067772862, 0.10079310112304607, 0.08589183176478277, 0.09181390944117462, 0.11794080682671337, 0.1106335934905035, 0.10771137466695369, 0.08542964704151224, 0.09880413531331067, 0.10399600117881258]}, "mutation_prompt": null}
{"id": "9ff2fb06-8815-44cd-967e-aa3045e4b4c2", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Slightly increased population size for better sampling\n        self.inertia_weight = 0.5  # Reduced inertia weight for faster convergence\n        self.cognitive_coefficient = 1.8  # Increased cognitive coefficient\n        self.social_coefficient = 1.2  # Reduced social coefficient for diversity\n        self.initial_temp = 1.0  # Higher initial temperature for more acceptance\n        self.cooling_rate = 0.92  # Faster cooling rate to stabilize quicker\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.15 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveSA", "description": "An innovative optimization strategy combining Quantum-inspired Particle Swarm Optimization and Adaptive Simulated Annealing for improved exploration-exploitation synergy.", "configspace": "", "generation": 15, "fitness": 0.3088033929848172, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "87a21e2c-7cf9-4bb3-88f2-29cf4e053b32", "metadata": {"aucs": [0.9019858497398809, 0.9115647681588859, 0.9062504184213166, 0.9008360322644099, 0.8942042462618996, 0.888997975447047, 0.8977927144555252, 0.8930175717099704, 0.887832991870152, 0.8028845846293375, 0.8038383650747976, 0.4524906220262509, 0.5160732261959537, 0.5272364634833333, 0.7086490140517788, 0.7942412094854436, 0.7728519268954257, 0.7874104217264958, 0.093211976299171, 0.12530693631474477, 0.13529028696612877, 0.1185401600012459, 0.13317347751965003, 0.16238658402321215, 0.09327619245298158, 0.15978562721288125, 0.1569055940393428, 0.08525123691370651, 0.06970953385556544, 0.1101645911189717, 0.12342515901455264, 0.0793009838763894, 0.14580248646677374, 0.09622252019138755, 0.05684644745109413, 0.09211765186179022, 0.9539359091144445, 0.9651316932129664, 0.9645072462740886, 0.9623179277082594, 0.9519846755386255, 0.9258681262987266, 0.9671773048350438, 0.9411961501254795, 0.9491186693177811, 0.630567247501765, 0.7155812094958222, 0.4914417872104955, 0.5680027068094292, 0.8587581856514851, 0.7290157893189515, 0.7598980416539897, 0.5846892695252828, 0.6621358844217927, 0.25682265541282545, 0.14112520569238496, 0.20958787039289561, 0.2841500606152827, 0.2799922752925672, 0.19436573380797595, 0.12901016212456795, 0.12693380246758756, 0.19734589776937106, 0.20165157747755158, 0.12807798481440436, 0.1328312010363486, 0.18716810937002915, 0.21546091777537557, 0.19168276418391583, 0.18426986009067847, 0.12730433742570202, 0.24430718130988238, 0.21869193593268277, 0.22379587389138356, 0.1325160120282951, 0.13532036749041998, 0.20545442911600453, 0.13310937977338888, 0.22530822223262947, 0.15457647387726137, 0.21532090062582498, 0.07422149347975426, 0.05925234744022312, 9.999999999998899e-05, 0.06187857076169856, 0.013363759630338978, 0.010042612107199256, 0.006728199089755638, 9.999999999998899e-05, 0.012420928556553523, 0.21960973295497055, 0.06113710191243993, 0.09860855931158907, 0.07172762394808774, 0.011499028437427672, 0.015727085810522623, 0.10996535176475497, 0.08727084248498884, 0.04164579679085201, 0.11311535718331311, 0.1158324003220349, 0.26019611172939294, 0.13225977997904048, 0.16860329510235517, 0.10489686390513997, 0.16458321856217495, 0.19138305283924906, 0.0787012295678392, 0.18104963623923243, 0.17758732786534204, 0.14370352487634586, 0.07357947125471787, 0.006751269606262933, 0.09132966876649884, 0.08487020336640783, 0.23201396779903694, 0.10592809480312648, 0.5374916018674287, 0.5838556580763758, 0.5512441496128913, 0.6256887510184599, 0.514857647095024, 0.5873516285498838, 0.5820097168738583, 0.5666605488283536, 0.48609091760913703, 0.11652431387543949, 0.05667795097223738, 0.12438185278929392, 0.1450257079081645, 0.06800937910336124, 0.13487471603928458, 0.10873988477171626, 0.08386268058114421, 0.08400414841262605, 0.21162675952517207, 0.19448540227015765, 0.204243958636386, 0.22029991287470918, 0.4072210625576851, 0.20628084395616975, 0.23648003191022016, 0.16501368173761854, 0.1445803626023633, 0.2704133658074651, 0.27896930051005797, 0.23561117303845514, 0.25095464466366746, 0.24515748636665058, 0.305135344157488, 0.253257262001252, 0.3846375690634404, 0.3368103237016936, 0.15967183293606435, 0.3796596019533074, 0.2308843453313355, 0.24651129965508556, 0.2025093652590001, 0.3518413190519062, 0.26371881457604374, 0.2554740431591602, 0.2045732037782919, 0.22606726820765388, 0.18836572532325624, 0.2098036558185088, 0.24624509059159827, 0.3005557395634756, 0.23510856128001778, 0.2059067453104909, 0.2746195985843355, 0.23326431511334256, 0.17975420257743457, 0.22765102297450734, 0.18671735408207546, 0.21147381620564853, 0.2142182002899189, 0.1760740382925451, 0.21809091049020124, 0.19173136483420972, 0.17580269777773316, 0.18837180509501872, 0.12618012814571522, 0.18795420176181665, 0.9371888904482688, 0.2018849932713651, 0.2008315240910532, 0.9318852042194662, 0.9375829651459991, 0.9439863390648138, 0.5886558990994469, 0.157102993599197, 0.6518381840439937, 0.10500689133691687, 0.15545358254433517, 0.21272038011141603, 0.5129175406617239, 0.16757960741994926, 0.7395309634225988, 0.19637771221075462, 0.2363220839929252, 0.22637598890215127, 0.19963548984262003, 0.260211707394007, 0.21444178752856513, 0.23730183985082298, 0.2047286734557, 0.18952100426278484, 0.08268561763770521, 0.0956386701583204, 0.06300569952757629, 0.09457138718456115, 0.101120668601963, 0.08535285006121818, 0.08415530896884049, 0.07044646340066574, 0.08407559410592969]}, "mutation_prompt": null}
{"id": "ebd08761-9ddd-4578-9eae-47c6702f5e52", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Slightly increased population size for better sampling\n        self.inertia_weight = 0.5  # Reduced inertia weight for faster convergence\n        self.cognitive_coefficient = 1.8  # Increased cognitive coefficient\n        self.social_coefficient = 1.2  # Reduced social coefficient for diversity\n        self.initial_temp = 1.0  # Higher initial temperature for more acceptance\n        self.cooling_rate = 0.92  # Faster cooling rate to stabilize quicker\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.15 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveSA", "description": "An innovative optimization strategy combining Quantum-inspired Particle Swarm Optimization and Adaptive Simulated Annealing for improved exploration-exploitation synergy.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ff2fb06-8815-44cd-967e-aa3045e4b4c2", "metadata": {"aucs": [0.9019858497398809, 0.9115647681588859, 0.9062504184213166, 0.9008360322644099, 0.8942042462618996, 0.888997975447047, 0.8977927144555252, 0.8930175717099704, 0.887832991870152, 0.8028845846293375, 0.8038383650747976, 0.4524906220262509, 0.5160732261959537, 0.5272364634833333, 0.7086490140517788, 0.7942412094854436, 0.7728519268954257, 0.7874104217264958, 0.093211976299171, 0.12530693631474477, 0.13529028696612877, 0.1185401600012459, 0.13317347751965003, 0.16238658402321215, 0.09327619245298158, 0.15978562721288125, 0.1569055940393428, 0.08525123691370651, 0.06970953385556544, 0.1101645911189717, 0.12342515901455264, 0.0793009838763894, 0.14580248646677374, 0.09622252019138755, 0.05684644745109413, 0.09211765186179022, 0.9539359091144445, 0.9651316932129664, 0.9645072462740886, 0.9623179277082594, 0.9519846755386255, 0.9258681262987266, 0.9671773048350438, 0.9411961501254795, 0.9491186693177811, 0.630567247501765, 0.7155812094958222, 0.4914417872104955, 0.5680027068094292, 0.8587581856514851, 0.7290157893189515, 0.7598980416539897, 0.5846892695252828, 0.6621358844217927, 0.25682265541282545, 0.14112520569238496, 0.20958787039289561, 0.2841500606152827, 0.2799922752925672, 0.19436573380797595, 0.12901016212456795, 0.12693380246758756, 0.19734589776937106, 0.20165157747755158, 0.12807798481440436, 0.1328312010363486, 0.18716810937002915, 0.21546091777537557, 0.19168276418391583, 0.18426986009067847, 0.12730433742570202, 0.24430718130988238, 0.21869193593268277, 0.22379587389138356, 0.1325160120282951, 0.13532036749041998, 0.20545442911600453, 0.13310937977338888, 0.22530822223262947, 0.15457647387726137, 0.21532090062582498, 0.07422149347975426, 0.05925234744022312, 9.999999999998899e-05, 0.06187857076169856, 0.013363759630338978, 0.010042612107199256, 0.006728199089755638, 9.999999999998899e-05, 0.012420928556553523, 0.21960973295497055, 0.06113710191243993, 0.09860855931158907, 0.07172762394808774, 0.011499028437427672, 0.015727085810522623, 0.10996535176475497, 0.08727084248498884, 0.04164579679085201, 0.11311535718331311, 0.1158324003220349, 0.26019611172939294, 0.13225977997904048, 0.16860329510235517, 0.10489686390513997, 0.16458321856217495, 0.19138305283924906, 0.0787012295678392, 0.18104963623923243, 0.17758732786534204, 0.14370352487634586, 0.07357947125471787, 0.006751269606262933, 0.09132966876649884, 0.08487020336640783, 0.23201396779903694, 0.10592809480312648, 0.5374916018674287, 0.5838556580763758, 0.5512441496128913, 0.6256887510184599, 0.514857647095024, 0.5873516285498838, 0.5820097168738583, 0.5666605488283536, 0.48609091760913703, 0.11652431387543949, 0.05667795097223738, 0.12438185278929392, 0.1450257079081645, 0.06800937910336124, 0.13487471603928458, 0.10873988477171626, 0.08386268058114421, 0.08400414841262605, 0.21162675952517207, 0.19448540227015765, 0.204243958636386, 0.22029991287470918, 0.4072210625576851, 0.20628084395616975, 0.23648003191022016, 0.16501368173761854, 0.1445803626023633, 0.2704133658074651, 0.27896930051005797, 0.23561117303845514, 0.25095464466366746, 0.24515748636665058, 0.305135344157488, 0.253257262001252, 0.3846375690634404, 0.3368103237016936, 0.15967183293606435, 0.3796596019533074, 0.2308843453313355, 0.24651129965508556, 0.2025093652590001, 0.3518413190519062, 0.26371881457604374, 0.2554740431591602, 0.2045732037782919, 0.22606726820765388, 0.18836572532325624, 0.2098036558185088, 0.24624509059159827, 0.3005557395634756, 0.23510856128001778, 0.2059067453104909, 0.2746195985843355, 0.23326431511334256, 0.17975420257743457, 0.22765102297450734, 0.18671735408207546, 0.21147381620564853, 0.2142182002899189, 0.1760740382925451, 0.21809091049020124, 0.19173136483420972, 0.17580269777773316, 0.18837180509501872, 0.12618012814571522, 0.18795420176181665, 0.9371888904482688, 0.2018849932713651, 0.2008315240910532, 0.9318852042194662, 0.9375829651459991, 0.9439863390648138, 0.5886558990994469, 0.157102993599197, 0.6518381840439937, 0.10500689133691687, 0.15545358254433517, 0.21272038011141603, 0.5129175406617239, 0.16757960741994926, 0.7395309634225988, 0.19637771221075462, 0.2363220839929252, 0.22637598890215127, 0.19963548984262003, 0.260211707394007, 0.21444178752856513, 0.23730183985082298, 0.2047286734557, 0.18952100426278484, 0.08268561763770521, 0.0956386701583204, 0.06300569952757629, 0.09457138718456115, 0.101120668601963, 0.08535285006121818, 0.08415530896884049, 0.07044646340066574, 0.08407559410592969]}, "mutation_prompt": null}
{"id": "5e54eb07-9b25-4c6a-8161-50980ee8db05", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Slightly increased population size for better sampling\n        self.inertia_weight = 0.5  # Reduced inertia weight for faster convergence\n        self.cognitive_coefficient = 1.8  # Increased cognitive coefficient\n        self.social_coefficient = 1.2  # Reduced social coefficient for diversity\n        self.initial_temp = 1.0  # Higher initial temperature for more acceptance\n        self.cooling_rate = 0.92  # Faster cooling rate to stabilize quicker\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.15 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveSA", "description": "An innovative optimization strategy combining Quantum-inspired Particle Swarm Optimization and Adaptive Simulated Annealing for improved exploration-exploitation synergy.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ff2fb06-8815-44cd-967e-aa3045e4b4c2", "metadata": {"aucs": [0.9019858497398809, 0.9115647681588859, 0.9062504184213166, 0.9008360322644099, 0.8942042462618996, 0.888997975447047, 0.8977927144555252, 0.8930175717099704, 0.887832991870152, 0.8028845846293375, 0.8038383650747976, 0.4524906220262509, 0.5160732261959537, 0.5272364634833333, 0.7086490140517788, 0.7942412094854436, 0.7728519268954257, 0.7874104217264958, 0.093211976299171, 0.12530693631474477, 0.13529028696612877, 0.1185401600012459, 0.13317347751965003, 0.16238658402321215, 0.09327619245298158, 0.15978562721288125, 0.1569055940393428, 0.08525123691370651, 0.06970953385556544, 0.1101645911189717, 0.12342515901455264, 0.0793009838763894, 0.14580248646677374, 0.09622252019138755, 0.05684644745109413, 0.09211765186179022, 0.9539359091144445, 0.9651316932129664, 0.9645072462740886, 0.9623179277082594, 0.9519846755386255, 0.9258681262987266, 0.9671773048350438, 0.9411961501254795, 0.9491186693177811, 0.630567247501765, 0.7155812094958222, 0.4914417872104955, 0.5680027068094292, 0.8587581856514851, 0.7290157893189515, 0.7598980416539897, 0.5846892695252828, 0.6621358844217927, 0.25682265541282545, 0.14112520569238496, 0.20958787039289561, 0.2841500606152827, 0.2799922752925672, 0.19436573380797595, 0.12901016212456795, 0.12693380246758756, 0.19734589776937106, 0.20165157747755158, 0.12807798481440436, 0.1328312010363486, 0.18716810937002915, 0.21546091777537557, 0.19168276418391583, 0.18426986009067847, 0.12730433742570202, 0.24430718130988238, 0.21869193593268277, 0.22379587389138356, 0.1325160120282951, 0.13532036749041998, 0.20545442911600453, 0.13310937977338888, 0.22530822223262947, 0.15457647387726137, 0.21532090062582498, 0.07422149347975426, 0.05925234744022312, 9.999999999998899e-05, 0.06187857076169856, 0.013363759630338978, 0.010042612107199256, 0.006728199089755638, 9.999999999998899e-05, 0.012420928556553523, 0.21960973295497055, 0.06113710191243993, 0.09860855931158907, 0.07172762394808774, 0.011499028437427672, 0.015727085810522623, 0.10996535176475497, 0.08727084248498884, 0.04164579679085201, 0.11311535718331311, 0.1158324003220349, 0.26019611172939294, 0.13225977997904048, 0.16860329510235517, 0.10489686390513997, 0.16458321856217495, 0.19138305283924906, 0.0787012295678392, 0.18104963623923243, 0.17758732786534204, 0.14370352487634586, 0.07357947125471787, 0.006751269606262933, 0.09132966876649884, 0.08487020336640783, 0.23201396779903694, 0.10592809480312648, 0.5374916018674287, 0.5838556580763758, 0.5512441496128913, 0.6256887510184599, 0.514857647095024, 0.5873516285498838, 0.5820097168738583, 0.5666605488283536, 0.48609091760913703, 0.11652431387543949, 0.05667795097223738, 0.12438185278929392, 0.1450257079081645, 0.06800937910336124, 0.13487471603928458, 0.10873988477171626, 0.08386268058114421, 0.08400414841262605, 0.21162675952517207, 0.19448540227015765, 0.204243958636386, 0.22029991287470918, 0.4072210625576851, 0.20628084395616975, 0.23648003191022016, 0.16501368173761854, 0.1445803626023633, 0.2704133658074651, 0.27896930051005797, 0.23561117303845514, 0.25095464466366746, 0.24515748636665058, 0.305135344157488, 0.253257262001252, 0.3846375690634404, 0.3368103237016936, 0.15967183293606435, 0.3796596019533074, 0.2308843453313355, 0.24651129965508556, 0.2025093652590001, 0.3518413190519062, 0.26371881457604374, 0.2554740431591602, 0.2045732037782919, 0.22606726820765388, 0.18836572532325624, 0.2098036558185088, 0.24624509059159827, 0.3005557395634756, 0.23510856128001778, 0.2059067453104909, 0.2746195985843355, 0.23326431511334256, 0.17975420257743457, 0.22765102297450734, 0.18671735408207546, 0.21147381620564853, 0.2142182002899189, 0.1760740382925451, 0.21809091049020124, 0.19173136483420972, 0.17580269777773316, 0.18837180509501872, 0.12618012814571522, 0.18795420176181665, 0.9371888904482688, 0.2018849932713651, 0.2008315240910532, 0.9318852042194662, 0.9375829651459991, 0.9439863390648138, 0.5886558990994469, 0.157102993599197, 0.6518381840439937, 0.10500689133691687, 0.15545358254433517, 0.21272038011141603, 0.5129175406617239, 0.16757960741994926, 0.7395309634225988, 0.19637771221075462, 0.2363220839929252, 0.22637598890215127, 0.19963548984262003, 0.260211707394007, 0.21444178752856513, 0.23730183985082298, 0.2047286734557, 0.18952100426278484, 0.08268561763770521, 0.0956386701583204, 0.06300569952757629, 0.09457138718456115, 0.101120668601963, 0.08535285006121818, 0.08415530896884049, 0.07044646340066574, 0.08407559410592969]}, "mutation_prompt": null}
{"id": "b0303b85-c0ca-4f07-b0e4-2c96fb23bc6c", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 30  # Slightly increased population size for better sampling\n        self.inertia_weight = 0.5  # Reduced inertia weight for faster convergence\n        self.cognitive_coefficient = 1.8  # Increased cognitive coefficient\n        self.social_coefficient = 1.2  # Reduced social coefficient for diversity\n        self.initial_temp = 1.0  # Higher initial temperature for more acceptance\n        self.cooling_rate = 0.92  # Faster cooling rate to stabilize quicker\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.15 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveSA", "description": "An innovative optimization strategy combining Quantum-inspired Particle Swarm Optimization and Adaptive Simulated Annealing for improved exploration-exploitation synergy.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9ff2fb06-8815-44cd-967e-aa3045e4b4c2", "metadata": {"aucs": [0.9019858497398809, 0.9115647681588859, 0.9062504184213166, 0.9008360322644099, 0.8942042462618996, 0.888997975447047, 0.8977927144555252, 0.8930175717099704, 0.887832991870152, 0.8028845846293375, 0.8038383650747976, 0.4524906220262509, 0.5160732261959537, 0.5272364634833333, 0.7086490140517788, 0.7942412094854436, 0.7728519268954257, 0.7874104217264958, 0.093211976299171, 0.12530693631474477, 0.13529028696612877, 0.1185401600012459, 0.13317347751965003, 0.16238658402321215, 0.09327619245298158, 0.15978562721288125, 0.1569055940393428, 0.08525123691370651, 0.06970953385556544, 0.1101645911189717, 0.12342515901455264, 0.0793009838763894, 0.14580248646677374, 0.09622252019138755, 0.05684644745109413, 0.09211765186179022, 0.9539359091144445, 0.9651316932129664, 0.9645072462740886, 0.9623179277082594, 0.9519846755386255, 0.9258681262987266, 0.9671773048350438, 0.9411961501254795, 0.9491186693177811, 0.630567247501765, 0.7155812094958222, 0.4914417872104955, 0.5680027068094292, 0.8587581856514851, 0.7290157893189515, 0.7598980416539897, 0.5846892695252828, 0.6621358844217927, 0.25682265541282545, 0.14112520569238496, 0.20958787039289561, 0.2841500606152827, 0.2799922752925672, 0.19436573380797595, 0.12901016212456795, 0.12693380246758756, 0.19734589776937106, 0.20165157747755158, 0.12807798481440436, 0.1328312010363486, 0.18716810937002915, 0.21546091777537557, 0.19168276418391583, 0.18426986009067847, 0.12730433742570202, 0.24430718130988238, 0.21869193593268277, 0.22379587389138356, 0.1325160120282951, 0.13532036749041998, 0.20545442911600453, 0.13310937977338888, 0.22530822223262947, 0.15457647387726137, 0.21532090062582498, 0.07422149347975426, 0.05925234744022312, 9.999999999998899e-05, 0.06187857076169856, 0.013363759630338978, 0.010042612107199256, 0.006728199089755638, 9.999999999998899e-05, 0.012420928556553523, 0.21960973295497055, 0.06113710191243993, 0.09860855931158907, 0.07172762394808774, 0.011499028437427672, 0.015727085810522623, 0.10996535176475497, 0.08727084248498884, 0.04164579679085201, 0.11311535718331311, 0.1158324003220349, 0.26019611172939294, 0.13225977997904048, 0.16860329510235517, 0.10489686390513997, 0.16458321856217495, 0.19138305283924906, 0.0787012295678392, 0.18104963623923243, 0.17758732786534204, 0.14370352487634586, 0.07357947125471787, 0.006751269606262933, 0.09132966876649884, 0.08487020336640783, 0.23201396779903694, 0.10592809480312648, 0.5374916018674287, 0.5838556580763758, 0.5512441496128913, 0.6256887510184599, 0.514857647095024, 0.5873516285498838, 0.5820097168738583, 0.5666605488283536, 0.48609091760913703, 0.11652431387543949, 0.05667795097223738, 0.12438185278929392, 0.1450257079081645, 0.06800937910336124, 0.13487471603928458, 0.10873988477171626, 0.08386268058114421, 0.08400414841262605, 0.21162675952517207, 0.19448540227015765, 0.204243958636386, 0.22029991287470918, 0.4072210625576851, 0.20628084395616975, 0.23648003191022016, 0.16501368173761854, 0.1445803626023633, 0.2704133658074651, 0.27896930051005797, 0.23561117303845514, 0.25095464466366746, 0.24515748636665058, 0.305135344157488, 0.253257262001252, 0.3846375690634404, 0.3368103237016936, 0.15967183293606435, 0.3796596019533074, 0.2308843453313355, 0.24651129965508556, 0.2025093652590001, 0.3518413190519062, 0.26371881457604374, 0.2554740431591602, 0.2045732037782919, 0.22606726820765388, 0.18836572532325624, 0.2098036558185088, 0.24624509059159827, 0.3005557395634756, 0.23510856128001778, 0.2059067453104909, 0.2746195985843355, 0.23326431511334256, 0.17975420257743457, 0.22765102297450734, 0.18671735408207546, 0.21147381620564853, 0.2142182002899189, 0.1760740382925451, 0.21809091049020124, 0.19173136483420972, 0.17580269777773316, 0.18837180509501872, 0.12618012814571522, 0.18795420176181665, 0.9371888904482688, 0.2018849932713651, 0.2008315240910532, 0.9318852042194662, 0.9375829651459991, 0.9439863390648138, 0.5886558990994469, 0.157102993599197, 0.6518381840439937, 0.10500689133691687, 0.15545358254433517, 0.21272038011141603, 0.5129175406617239, 0.16757960741994926, 0.7395309634225988, 0.19637771221075462, 0.2363220839929252, 0.22637598890215127, 0.19963548984262003, 0.260211707394007, 0.21444178752856513, 0.23730183985082298, 0.2047286734557, 0.18952100426278484, 0.08268561763770521, 0.0956386701583204, 0.06300569952757629, 0.09457138718456115, 0.101120668601963, 0.08535285006121818, 0.08415530896884049, 0.07044646340066574, 0.08407559410592969]}, "mutation_prompt": null}
{"id": "6c337f6e-cd69-4276-a590-4f87035e0cb9", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 35  # Increased population size for better exploration\n        self.inertia_weight = 0.55  # Slightly higher inertia weight for more stability\n        self.cognitive_coefficient = 1.9  # Further increased cognitive coefficient\n        self.social_coefficient = 1.1  # Further reduced social coefficient for diversity\n        self.initial_temp = 1.2  # Even higher initial temperature for broad search space\n        self.cooling_rate = 0.88  # Modified cooling rate for gradual stabilization\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim)) # Altered velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.45 + 0.1 * (self.budget - self.evaluations) / self.budget  # Slightly adjusted dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A refined Quantum-inspired PSO with an enhanced Adaptive Simulated Annealing approach, emphasizing increased exploration and efficient convergence.", "configspace": "", "generation": 19, "fitness": 0.309757772140825, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "9ff2fb06-8815-44cd-967e-aa3045e4b4c2", "metadata": {"aucs": [0.8986671061769949, 0.9082512062732897, 0.90534714539504, 0.9039381848976014, 0.9008056518990337, 0.8935501211839219, 0.8898965930231196, 0.9013583845120247, 0.8784586534649372, 0.3204066121582396, 0.764651583208689, 0.7512355798411435, 0.41967540236083645, 0.3598942019817105, 0.75819519181172, 0.7850115535047153, 0.7615196466910794, 0.6696126009516061, 0.12464723103859598, 0.11172398966075614, 0.15827369484179943, 0.1632368643106249, 0.13858716756211087, 0.1347228334407875, 0.09279083635606167, 0.1463648148534512, 0.15220973999977905, 0.08275478896225374, 0.09174422830426321, 0.08966965527898918, 0.11457460598929992, 0.07959059214817721, 0.09631724903210037, 0.1858723876621119, 0.11752192549649132, 0.09531468393721354, 0.9557895182922114, 0.9649445982015916, 0.9582632727803633, 0.9512161236927267, 0.9491121848417464, 0.9248913459356666, 0.9575807658991131, 0.9135858715277101, 0.9584389844626537, 0.37110975754569764, 0.8416038889512213, 0.058139032797932866, 0.6254328578145067, 0.7472444915686942, 0.5778154441690182, 0.6760039610769484, 0.08750045557039576, 0.8163191780490895, 0.9185061393555788, 0.13958660638810727, 0.21465047346456523, 0.2148423421860074, 0.92680832696602, 0.21302114442268083, 0.15217920665087692, 0.15178426748212226, 0.19670839323480205, 0.2138298859591239, 0.20228369156677362, 0.17397321381014919, 0.203484416649385, 0.19944756026373378, 0.12459095357611227, 0.2813329737416622, 0.17544511002576202, 0.1477711983522524, 0.20992318634819673, 0.1629758530343144, 0.21849397654746705, 0.1676286159750241, 0.21219912076160596, 0.13549290562092597, 0.36422889109532774, 0.28889311092086367, 0.1231807732063731, 9.999999999998899e-05, 0.005308940580034283, 0.0466147945689287, 9.999999999998899e-05, 0.016505422244111334, 9.999999999998899e-05, 0.009222766467409715, 9.999999999998899e-05, 0.07482409487929631, 0.1694196034729668, 0.07287836939591796, 0.0933978383334999, 0.07354048295065008, 0.016990460713971478, 0.06747564970911557, 0.19782453839375846, 0.10605716360454354, 0.09241445077324206, 0.11463652063884056, 0.19104938577352437, 0.13958044635177247, 0.1862201988678418, 0.09869758982520471, 0.17248874150152427, 0.10537646193917916, 0.11526052017158694, 0.14186852913271086, 0.17326371143122776, 0.1402059284948205, 0.10965609947461141, 0.03946888132520676, 0.07792361606306963, 0.1081785779759622, 0.14673415565605863, 0.2355467000363426, 0.08537440478299962, 0.5086385922451483, 0.49530722341245503, 0.5112775904735324, 0.540746811139434, 0.560266967066958, 0.2078009177931015, 0.59910400324759, 0.4947277193554581, 0.6028335829103553, 0.10475589352142944, 0.09324233475560084, 0.08402778949628986, 0.18770676201023118, 0.07990105359281718, 0.07787326757544111, 0.08298813116255732, 0.13451916201810366, 0.14275788079364704, 0.2373454047454595, 0.2410745813676325, 0.255676385692556, 0.20295304789893265, 0.23647249787553815, 0.30756739895797414, 0.17497486092743586, 0.18566669840350425, 0.17988182479102854, 0.21386775981512884, 0.31414026792301075, 0.3314523139479494, 0.3665376582171165, 0.2578023416656764, 0.32428117270859247, 0.2007197368171354, 0.3285410623454428, 0.23825299018098456, 0.2218248962706464, 0.3032449983865674, 0.2516582329727405, 0.2523294720354141, 0.2130221102231853, 0.2581481956247883, 0.23126968508104107, 0.28697097914919245, 0.19253082448085335, 0.24183822906612962, 0.1953247448114851, 0.2177818987220046, 0.25178895616962294, 0.2200935257865424, 0.21087272361845444, 0.21278344158788454, 0.22223310337902735, 0.2132928409489988, 0.20052890063187956, 0.21149006648842583, 0.21002105417541828, 0.1895665806638741, 0.19995219913729534, 0.16196449336105123, 0.21417530213922975, 0.19271332200217306, 0.1890082716624566, 0.17702371464141342, 0.1775726698593395, 0.1875417360808599, 0.9347510683300867, 0.20099134597385115, 0.9228268160233961, 0.923595115146361, 0.16985939854463628, 0.933888374981814, 0.6607296348939227, 0.2142745380285893, 0.3415839173474913, 0.572442314068826, 0.15511273217642774, 0.1538487079023243, 0.5290173511660732, 0.8284918333401213, 0.6777881134213982, 0.2016363637826637, 0.21624009025812696, 0.21304607957289723, 0.19623814299279263, 0.19091953654613614, 0.19933201017410906, 0.23312325901019804, 0.22384364968464565, 0.185124168410025, 0.10020465067502649, 0.09144089656324017, 0.07713753560623349, 0.09747229122960821, 0.09919243754818485, 0.09909517090841291, 0.11767448666542335, 0.10694672920750159, 0.08650734170482122]}, "mutation_prompt": null}
{"id": "f73026b9-160e-47d6-a118-48ad227e3c68", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_DynamicSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40  # Increased population size for more diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for dynamic control\n        self.cognitive_coefficient = 2.0  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.0  # Modified social component for exploration\n        self.initial_temp = 1.0  # Standard initial temperature for exploration\n        self.cooling_rate = 0.85  # Adjusted cooling rate for temperature reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.2 * (self.budget - self.evaluations) / self.budget  # Expanded dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_DynamicSA", "description": "A Quantum-inspired PSO integrated with enhanced Adaptive Simulated Annealing and dynamic parameter tuning for superior exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.3228002571992285, "feedback": "The algorithm QuantumInspiredPSO_DynamicSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "6c337f6e-cd69-4276-a590-4f87035e0cb9", "metadata": {"aucs": [0.8761384555361177, 0.8616816106496541, 0.8845642728844142, 0.8664348438448957, 0.8488174395285809, 0.8623676121208774, 0.8788673556057982, 0.8452854243883705, 0.8682492560245171, 0.7632792036426641, 0.5536303075998428, 0.7442103147348049, 0.7444822851313512, 0.7168378186317479, 0.7045447830119794, 0.7699703073055052, 0.7088342951064116, 0.6803691119191453, 0.15246187497500685, 0.18013346928460738, 0.17665393493636583, 0.14477154163321904, 0.16344613575853295, 0.17461721329664015, 0.11922368414187479, 0.1530591567366717, 0.1792066999494557, 0.1374716818938989, 0.1059982399613737, 0.10950974649190881, 0.13103002190854607, 0.10905485505305024, 0.09993443353670906, 0.15441749657489856, 0.14387304379033228, 0.10802713918037155, 0.9497607901578731, 0.9649280142119969, 0.9344878684955087, 0.9517949761439051, 0.9361021666860411, 0.9353108369818457, 0.9589471607530203, 0.9313942007196577, 0.9520707626034564, 0.581819963131013, 0.8123969689299165, 0.6070567441547139, 0.6386103298141541, 0.6613164996953163, 0.1522309961460272, 0.7727170539825203, 0.5445489726808355, 0.6189688901653667, 0.22989376436679476, 0.16581006051631098, 0.17050769349240213, 0.28057881202029, 0.19256367892822868, 0.2206967960273727, 0.17876906525227754, 0.17815610993352038, 0.2390248613367716, 0.21636243835144675, 0.13304609341818174, 0.1854385994562131, 0.1880547688104499, 0.2334846086192257, 0.24148938835244915, 0.20168669505207382, 0.22867641486834245, 0.1609050263228402, 0.17728485641282077, 0.22736982510129533, 0.3265987373569621, 0.19984189735343194, 0.28055828521342707, 0.21919421249492566, 0.2028618850306666, 0.24028228633840254, 0.2577816349544788, 9.999999999998899e-05, 0.0003639217873564471, 0.06547065393569595, 0.08345449252416637, 0.048325160961324, 0.06709899793380714, 9.999999999998899e-05, 0.0003914748391525835, 0.020375234021450694, 0.09059826599647136, 0.03227971053394707, 0.10399968002077553, 0.08595086623568604, 0.04123741123448654, 0.05242915557368666, 0.06791581889160248, 0.09206178766167306, 0.06321746787465565, 0.16023843836844975, 0.19933096893262214, 0.21432591592660177, 0.3196262421494259, 0.13685090838632963, 0.08969190163335494, 0.10206658164252658, 0.143074072806044, 0.12707450905867768, 0.1229347981128065, 0.2095066402008472, 0.1546571048871982, 0.06679306562932086, 0.20890641286938594, 0.1833777684744884, 0.10027376346432193, 0.18618190833237835, 0.10167849611075275, 0.5628682721138033, 0.5289582210873144, 0.5429198340733904, 0.5375492979688455, 0.5536725958398581, 0.5505470843148235, 0.5772456442185031, 0.5388389935223263, 0.606148703250033, 0.10551033256915054, 0.11745840710099453, 0.07506966983850594, 0.11550069433146326, 0.10866122549112955, 0.10508589033743487, 0.10566215047879379, 0.13017462906197907, 0.12252097037351395, 0.25593697988040864, 0.20445182671785955, 0.25691808645688397, 0.31272868970422674, 0.35677035254434575, 0.19723572599673156, 0.2270530146209857, 0.15598123651197893, 0.21234849881958096, 0.3062943022034008, 0.4158445846183776, 0.2545069952193657, 0.3175208305420699, 0.3613817361868733, 0.3535561794122368, 0.2544879965323348, 0.3537034357551473, 0.39558068492722565, 0.23345948842430708, 0.19327204441962187, 0.19069512040538483, 0.2286078501896096, 0.23587324125194353, 0.31497567164675433, 0.23902056458151844, 0.31148896535686277, 0.2568054966268968, 0.2597316526667469, 0.22968854273585138, 0.164529792726951, 0.21086666144496058, 0.3103899920697395, 0.21551707122222752, 0.2671909725166163, 0.19882267366435957, 0.25479666221031516, 0.8254757351999497, 0.2526590003763972, 0.2000065623544257, 0.18661486237158253, 0.8415391708956186, 0.20890666186761986, 0.21637422113951799, 0.19125286982125922, 0.21235073188998943, 0.12605633334410338, 0.17585739665832478, 0.17544952480595255, 0.925079992261964, 0.19998887683858968, 0.9206443544735846, 0.15184273213456423, 0.8693011315828394, 0.9313989164552786, 0.566699532541008, 0.21344193115318688, 0.911081265436053, 0.21042601389858562, 0.3308686635353323, 0.1565538409153685, 0.16697976521254, 0.5209020885764041, 0.8302715063041117, 0.18820831262603865, 0.18811711489560934, 0.1899787709759233, 0.20428402641696186, 0.19323839182746783, 0.17992755977614028, 0.19047456712190391, 0.1940751968264508, 0.20505561252698157, 0.10590822970138247, 0.08769216998048801, 0.07215510736732067, 0.09409129262842175, 0.10641977534814817, 0.08470835538007615, 0.09708135616593994, 0.08951571906130207, 0.09867772296371191]}, "mutation_prompt": null}
{"id": "c1716eae-e4d9-4168-80e7-1386a86c6f66", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_DynamicSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40  # Increased population size for more diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for dynamic control\n        self.cognitive_coefficient = 2.0  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.0  # Modified social component for exploration\n        self.initial_temp = 1.0  # Standard initial temperature for exploration\n        self.cooling_rate = 0.85  # Adjusted cooling rate for temperature reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.2 * (self.budget - self.evaluations) / self.budget  # Expanded dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_DynamicSA", "description": "A Quantum-inspired PSO integrated with enhanced Adaptive Simulated Annealing and dynamic parameter tuning for superior exploration-exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.8761384555361177, 0.8616816106496541, 0.8845642728844142, 0.8664348438448957, 0.8488174395285809, 0.8623676121208774, 0.8788673556057982, 0.8452854243883705, 0.8682492560245171, 0.7632792036426641, 0.5536303075998428, 0.7442103147348049, 0.7444822851313512, 0.7168378186317479, 0.7045447830119794, 0.7699703073055052, 0.7088342951064116, 0.6803691119191453, 0.15246187497500685, 0.18013346928460738, 0.17665393493636583, 0.14477154163321904, 0.16344613575853295, 0.17461721329664015, 0.11922368414187479, 0.1530591567366717, 0.1792066999494557, 0.1374716818938989, 0.1059982399613737, 0.10950974649190881, 0.13103002190854607, 0.10905485505305024, 0.09993443353670906, 0.15441749657489856, 0.14387304379033228, 0.10802713918037155, 0.9497607901578731, 0.9649280142119969, 0.9344878684955087, 0.9517949761439051, 0.9361021666860411, 0.9353108369818457, 0.9589471607530203, 0.9313942007196577, 0.9520707626034564, 0.581819963131013, 0.8123969689299165, 0.6070567441547139, 0.6386103298141541, 0.6613164996953163, 0.1522309961460272, 0.7727170539825203, 0.5445489726808355, 0.6189688901653667, 0.22989376436679476, 0.16581006051631098, 0.17050769349240213, 0.28057881202029, 0.19256367892822868, 0.2206967960273727, 0.17876906525227754, 0.17815610993352038, 0.2390248613367716, 0.21636243835144675, 0.13304609341818174, 0.1854385994562131, 0.1880547688104499, 0.2334846086192257, 0.24148938835244915, 0.20168669505207382, 0.22867641486834245, 0.1609050263228402, 0.17728485641282077, 0.22736982510129533, 0.3265987373569621, 0.19984189735343194, 0.28055828521342707, 0.21919421249492566, 0.2028618850306666, 0.24028228633840254, 0.2577816349544788, 9.999999999998899e-05, 0.0003639217873564471, 0.06547065393569595, 0.08345449252416637, 0.048325160961324, 0.06709899793380714, 9.999999999998899e-05, 0.0003914748391525835, 0.020375234021450694, 0.09059826599647136, 0.03227971053394707, 0.10399968002077553, 0.08595086623568604, 0.04123741123448654, 0.05242915557368666, 0.06791581889160248, 0.09206178766167306, 0.06321746787465565, 0.16023843836844975, 0.19933096893262214, 0.21432591592660177, 0.3196262421494259, 0.13685090838632963, 0.08969190163335494, 0.10206658164252658, 0.143074072806044, 0.12707450905867768, 0.1229347981128065, 0.2095066402008472, 0.1546571048871982, 0.06679306562932086, 0.20890641286938594, 0.1833777684744884, 0.10027376346432193, 0.18618190833237835, 0.10167849611075275, 0.5628682721138033, 0.5289582210873144, 0.5429198340733904, 0.5375492979688455, 0.5536725958398581, 0.5505470843148235, 0.5772456442185031, 0.5388389935223263, 0.606148703250033, 0.10551033256915054, 0.11745840710099453, 0.07506966983850594, 0.11550069433146326, 0.10866122549112955, 0.10508589033743487, 0.10566215047879379, 0.13017462906197907, 0.12252097037351395, 0.25593697988040864, 0.20445182671785955, 0.25691808645688397, 0.31272868970422674, 0.35677035254434575, 0.19723572599673156, 0.2270530146209857, 0.15598123651197893, 0.21234849881958096, 0.3062943022034008, 0.4158445846183776, 0.2545069952193657, 0.3175208305420699, 0.3613817361868733, 0.3535561794122368, 0.2544879965323348, 0.3537034357551473, 0.39558068492722565, 0.23345948842430708, 0.19327204441962187, 0.19069512040538483, 0.2286078501896096, 0.23587324125194353, 0.31497567164675433, 0.23902056458151844, 0.31148896535686277, 0.2568054966268968, 0.2597316526667469, 0.22968854273585138, 0.164529792726951, 0.21086666144496058, 0.3103899920697395, 0.21551707122222752, 0.2671909725166163, 0.19882267366435957, 0.25479666221031516, 0.8254757351999497, 0.2526590003763972, 0.2000065623544257, 0.18661486237158253, 0.8415391708956186, 0.20890666186761986, 0.21637422113951799, 0.19125286982125922, 0.21235073188998943, 0.12605633334410338, 0.17585739665832478, 0.17544952480595255, 0.925079992261964, 0.19998887683858968, 0.9206443544735846, 0.15184273213456423, 0.8693011315828394, 0.9313989164552786, 0.566699532541008, 0.21344193115318688, 0.911081265436053, 0.21042601389858562, 0.3308686635353323, 0.1565538409153685, 0.16697976521254, 0.5209020885764041, 0.8302715063041117, 0.18820831262603865, 0.18811711489560934, 0.1899787709759233, 0.20428402641696186, 0.19323839182746783, 0.17992755977614028, 0.19047456712190391, 0.1940751968264508, 0.20505561252698157, 0.10590822970138247, 0.08769216998048801, 0.07215510736732067, 0.09409129262842175, 0.10641977534814817, 0.08470835538007615, 0.09708135616593994, 0.08951571906130207, 0.09867772296371191]}, "mutation_prompt": null}
{"id": "5b63ced6-8ce9-4830-aa18-ccf0febe962c", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveStochastic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40\n        self.inertia_weight_base = 0.5  # Base inertia weight reduced for adaptation\n        self.cognitive_coefficient = 2.0\n        self.social_coefficient = 1.0\n        self.initial_temp = 1.2  # Increased initial temperature for broader exploration\n        self.cooling_rate = 0.9  # Higher cooling rate for more gradual temperature change\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                stochastic_inertia = self.inertia_weight_base + 0.2 * np.random.rand()\n                velocities[i] = (stochastic_inertia * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            self.inertia_weight_base = 0.3 + 0.1 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveStochastic", "description": "A Quantum-inspired PSO with a novel stochastic inertia approach and adaptive cooling for enhanced exploration-exploitation trade-off.", "configspace": "", "generation": 22, "fitness": 0.2981947246291167, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveStochastic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.9037978495389568, 0.9124367394380097, 0.9112093737686661, 0.8929757136062783, 0.8983864821676878, 0.9039787391271995, 0.8173998567350884, 0.8988701327281773, 0.9099559889756125, 0.7777807250607777, 0.7919579037539796, 0.3741523864895523, 0.33281281580602695, 0.3714630125217572, 0.813122125119466, 0.22609983291572, 0.29952637752033984, 0.38851402265201196, 0.1185867890723814, 0.14152826724811673, 0.15774195644173794, 0.1795694780994065, 0.1591332560194112, 0.12577279077605197, 0.1288704921485765, 0.1614521933084665, 0.1444290733200878, 0.08867060008310268, 0.10105725284820599, 0.07964932681304471, 0.18229332275460097, 0.0719054787306852, 0.104683924853194, 0.14774423185743868, 0.1465933710699281, 0.07949552616090638, 0.9289998865224611, 0.9462120879568134, 0.9384857504562664, 0.9386973290307917, 0.8890645654567788, 0.9284814347629089, 0.947645217350668, 0.879069919649126, 0.9088861630492103, 0.6060530864628769, 0.7192616136893922, 0.05705258827356463, 0.4659703273432444, 0.5839418394877072, 0.17558412274221624, 0.5223298473957901, 0.45483106468606993, 0.50901643268462, 0.251826200339611, 0.1394938246014974, 0.3992637106828453, 0.2814258450673287, 0.38721654792554916, 0.19360614196825987, 0.18074143007861598, 0.15163962754506843, 0.21853547008962548, 0.17030113398120827, 0.12895682595141766, 0.1609428817829961, 0.13303658241913274, 0.14499886927053596, 0.16150749782355522, 0.4068276184997899, 0.15627034536171536, 0.17159692756012668, 0.1652048163934291, 0.1676918157518239, 0.12631717362030215, 0.1531014278786066, 0.18683370006635325, 0.18819378557894495, 0.19043968813579715, 0.13474897360450655, 0.15997671211949038, 0.17517814975824553, 9.999999999998899e-05, 0.07801266582332878, 0.08416622624043935, 0.04833439903902437, 9.999999999998899e-05, 0.01170940506778384, 0.0012711830722024198, 0.1829115768757913, 0.08021191630452673, 0.1040776995332009, 0.07830656828908245, 0.06642784872090268, 0.04859263933926217, 0.039159172344253035, 0.12463780042879258, 0.10435225746619181, 0.042807043092047525, 0.11594280433029236, 0.18288350977579626, 0.30589473448643467, 0.1805294776069053, 0.15105400982825745, 0.12166998692994457, 0.10480623298059255, 0.1604435855098576, 0.1378189465293843, 0.14104900000144627, 0.1041242227460869, 0.1105168841137385, 0.08630380580622843, 0.12188095148350564, 0.12165150867329444, 0.18423539079712437, 0.3967161360869852, 0.1593252125536212, 0.5066214783979599, 0.49712098754873857, 0.449942071002694, 0.5626315766745738, 0.4887345598073216, 0.580645685492434, 0.548992880048799, 0.5176882856164011, 0.5776388163991498, 0.0792446903917926, 0.06753903188433541, 0.09335138224896489, 0.13233114106569577, 0.07284307165230397, 0.11186157293980781, 0.10600072915772796, 0.11383078451827155, 0.09731958906932925, 0.16408334635572996, 0.32226855717963065, 0.18324710070173245, 0.2939238701687825, 0.2645532502027408, 0.1876642052450037, 0.2859211566186075, 0.1869458499324398, 0.1960531275368539, 0.17396193768954038, 0.3240996950870796, 0.29904656533364493, 0.3029742069503416, 0.3855153470103363, 0.47920869519938847, 0.24412873207584063, 0.38864084406125, 0.3228319225931372, 0.2328239157308274, 0.1505268154719679, 0.23510869614687968, 0.2736653322812016, 0.23693414769945398, 0.277259966327961, 0.25627772320308584, 0.2665011297600365, 0.20535842728502307, 0.24962243284586616, 0.21962754114520178, 0.21365055278205858, 0.2429298226247063, 0.2504584918664552, 0.2537159377315251, 0.21401585576874593, 0.19632932596581232, 0.25425231648564417, 0.2040154361744707, 0.19059494482218153, 0.1737432770556574, 0.19917631104091926, 0.19112619215996796, 0.18623349279879353, 0.21017217566158575, 0.17853217037404012, 0.20977826348723239, 0.9310204862729979, 0.1769746351091941, 0.15355199050006618, 0.9425210685869301, 0.2012175685436296, 0.9379305665139507, 0.9114319031071536, 0.16956421818708645, 0.9436856558892631, 0.5561284500209575, 0.21426426326702175, 0.9275660279972371, 0.7015337048085576, 0.16844381769864414, 0.15549109608661804, 0.1050530704004814, 0.10494963545087799, 0.2691774208185925, 0.203660567125432, 0.20163187471842092, 0.22028089315472854, 0.20204673227800962, 0.1881506313439979, 0.18325551634259374, 0.20215181929080106, 0.21449898398680312, 0.19475419999333776, 0.09186986249453089, 0.08892637138024495, 0.09567990999478626, 0.09112848717272815, 0.09994281086469614, 0.10722028490295599, 0.07737300525433854, 0.08287591653034942, 0.1011704229816478]}, "mutation_prompt": null}
{"id": "6419853d-0125-46b0-bd6b-a29d0e82bdee", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EntropyAdjustment:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better exploration\n        self.inertia_weight = 0.7  # Increased inertia weight for initial exploration\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component\n        self.social_coefficient = 1.5  # Balanced social component\n        self.initial_temp = 1.5  # Higher initial temperature to encourage exploration\n        self.cooling_rate = 0.9  # Slower cooling for gradual exploitation\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Even wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with a novel entropy-based certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(velocities[i] / (1 + np.log1p(np.abs(velocities[i])))), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Entropy-based adjustment of inertia weight\n            entropy = -np.sum(personal_best_fitness / np.sum(personal_best_fitness) * np.log2(personal_best_fitness / np.sum(personal_best_fitness)))\n            self.inertia_weight = 0.5 + 0.5 * entropy / np.log2(self.population_size)\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EntropyAdjustment", "description": "A Quantum-inspired PSO with adaptive exploration-exploitation balance and a novel entropy-based dynamic parameter adjustment for enhanced performance.", "configspace": "", "generation": 23, "fitness": 0.1418629901200265, "feedback": "The algorithm QuantumInspiredPSO_EntropyAdjustment got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.28268116005161936, 0.2627396629498244, 0.3393337502371834, 0.3205084146023186, 0.3307379762813286, 0.19318893383260993, 0.30873081787227774, 0.30285488774058766, 0.31775149562320626, 0.0, 0.0, 0.0, 0.006658183566955245, 0.00768909360805814, 0.01647018942440659, 9.999999999998899e-05, 0.006656532949263938, 9.999999999998899e-05, 0.019287367537178746, 0.014572254733962287, 0.005275638633511659, 0.08189581901257603, 0.07768110449809085, 0.07801122357290391, 0.05242426252786769, 0.0875754346237998, 0.07629404107449755, 0.016303198891279735, 0.0169850301955925, 0.0, 0.05572381744465582, 0.06310877356543843, 0.06722724723592022, 0.0804840281044591, 0.06469038510160174, 0.0691264695969277, 0.16452629688145848, 0.11360692416164786, 0.15360999536795594, 0.96407340152777, 0.9672531209822111, 0.9698418490725133, 0.972450685187523, 0.972458444744989, 0.9788011047668569, 0.26805920700399566, 0.23927258813986252, 0.056913514740915216, 0.2123992389180963, 0.14103235347718435, 0.14836781897298335, 0.11393618743271816, 0.011194453811883442, 0.059829166828912816, 0.21718097486380095, 0.2148250147637104, 0.20489972095674913, 0.19017921906060342, 0.22502284647895332, 0.184436395358464, 0.20601996893950592, 0.24354477120655593, 0.2252777507093956, 0.11256927314403675, 0.05554784027519344, 0.032698059996550954, 0.0, 0.0, 0.0, 0.12584958768181898, 0.054940772946796446, 0.10500799764187307, 0.10135082339341173, 0.09008689542511295, 0.02220017323021839, 0.10021217646213443, 0.11508931688400104, 0.09237402196518851, 0.09484274931926306, 0.08316956694306732, 0.07643234753030681, 9.999999999998899e-05, 0.028590829143936403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.05979317438901832, 0.10664287897785585, 0.06478262136769097, 0.060130672981794864, 0.05828072513611404, 0.026323114348014487, 0.08630880104622207, 0.15641312289231302, 0.04287929104036481, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027173824503960553, 0.02381258717322321, 0.026608105035679563, 0.005727912432376581, 0.029629584292227618, 0.02991026185255974, 0.0, 0.0, 0.0, 0.18709048140015572, 0.18324908258180717, 0.15503139724833004, 0.17525418674883053, 0.11468221829704817, 0.10791325743941727, 0.30076557162741424, 0.26319091024566177, 0.3038212191955677, 0.10037535526937869, 0.06812648615702421, 0.0834522699684076, 0.07200862907461902, 0.08765492845750145, 0.08145852090672434, 0.031392374660202615, 0.0456515002865564, 0.03401319029878902, 0.15459440899924015, 0.17046576420750026, 0.14185159923327284, 0.18727066272577075, 0.17981538673026243, 0.20525148885515532, 0.2051170610373566, 0.16330317364288172, 0.19039675207841678, 0.12192091863084409, 0.1125294320538216, 0.16130937881362284, 0.2023485567229062, 0.2360885440409074, 0.2147304535173522, 0.22717245577674772, 0.18678549544332657, 0.24693358202870408, 0.09240767424295826, 0.08017040776387951, 0.08389423256590178, 0.1796121895252203, 0.1635695358759034, 0.16555634570440236, 0.19416185639974615, 0.1701998089263168, 0.18551354235972717, 0.124317176738454, 0.1164337947009948, 0.13336421106438578, 0.21407030016038142, 0.1736814040043928, 0.1878740178255116, 0.17755128979139934, 0.1705358142862351, 0.18729921772601132, 0.0, 0.14645383290391167, 0.0, 0.1736742728486661, 0.1855000819306919, 0.16874969612087376, 0.16544234537682823, 0.1728220992215591, 0.17411834346707677, 0.5079019557973309, 0.17265602356160747, 0.1493841219316686, 0.18645823171750397, 0.19454532048157303, 0.1674099215488679, 0.134044579390858, 0.14802118890658478, 0.2866810553152823, 0.4157429591870453, 0.19601329348270324, 0.1603216910634253, 0.16265971758149111, 0.2834491356264358, 0.11221990399606163, 0.046927600880654285, 0.09524662069711065, 0.06871843642989461, 0.17615208706144003, 0.18045169178927645, 0.1877483980875948, 0.19646743081164686, 0.19212729931909345, 0.18560914671585182, 0.20275822186195436, 0.18029307621842094, 0.1967278824016102, 0.06201181956582602, 0.06383602244315956, 0.07969328945718046, 0.06494700057758762, 0.07354458255189189, 0.07009516741022326, 0.0784510512042429, 0.0704483385559792, 0.0639920974642475]}, "mutation_prompt": null}
{"id": "95e8642e-5a46-4c21-addc-45331615514d", "solution": "import numpy as np\n\nclass EnhancedQuantumPSO_AdaptiveAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Changed population size for better exploration\n        self.inertia_weight = 0.7  # Updated inertia for improved balance\n        self.cognitive_coefficient = 1.8  # Adjusted for refined personal search\n        self.social_coefficient = 1.2  # Adjusted for refined exploration\n        self.initial_temp = 1.2  # Increased initial temperature\n        self.cooling_rate = 0.9  # Modified cooling rate for slower decay\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Dynamic range adjustment\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedQuantumPSO_AdaptiveAnnealing", "description": "Enhanced Quantum-inspired PSO with Adaptive Annealing and dynamic hyperparameter tuning for robust and efficient optimization.", "configspace": "", "generation": 24, "fitness": 0.31134622790569716, "feedback": "The algorithm EnhancedQuantumPSO_AdaptiveAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.7469351486348501, 0.73993641964225, 0.7328213882436321, 0.6927808246829774, 0.7627886984300211, 0.7386776869814478, 0.7318857042360569, 0.6738799767861925, 0.7237094464800486, 0.5648551143970754, 0.6075366307378844, 0.5410789417209103, 0.579566988042028, 0.5315785656793025, 0.5608288358312755, 0.5272961017850861, 0.563935890839569, 0.5290750344577131, 0.17538185179394628, 0.1389478920204592, 0.16735484345606622, 0.12646533699208506, 0.17288859803125034, 0.11523912722916407, 0.11845712420360976, 0.1751983810526212, 0.1400109072741248, 0.1173792920533171, 0.11458441093278693, 0.13494259482803317, 0.1303866881016631, 0.11204464226787225, 0.1484397951620956, 0.11264722230182067, 0.16619731356123157, 0.17408359654762173, 0.9578664372264282, 0.9543267068264693, 0.9600729107258239, 0.9461105234919822, 0.9278713611949456, 0.93234574423146, 0.947999447163964, 0.9350455357281883, 0.9584247290653901, 0.6848605044706428, 0.6236440959189822, 0.633152378594464, 0.6255735807139537, 0.6063548797446889, 0.5885659988618186, 0.651939980021919, 0.6409702192693513, 0.6675963485804525, 0.7952988616889773, 0.2275969871675667, 0.38247826674607366, 0.21281726471174411, 0.21151253077173182, 0.21150791925430312, 0.2309772136190701, 0.20698633638794484, 0.8039031127606008, 0.30050538699314944, 0.2565974448392999, 0.36044513645136744, 0.2045126249949556, 0.27708765395404067, 0.23454566997815207, 0.31663690267878386, 0.24535662494162702, 0.13167540363755692, 0.26039836591713383, 0.2480564431687805, 0.2548258980803336, 0.26339838484587874, 0.1291502511668885, 0.2842095616546113, 0.2874660042877524, 0.2625009330046766, 0.129647810737627, 0.05220363117659976, 0.009659568020311204, 0.012416561856574693, 9.999999999998899e-05, 9.999999999998899e-05, 0.046557565843573845, 0.06654093084873458, 0.10231187261324082, 9.999999999998899e-05, 0.17854426752410268, 0.11657057788476866, 0.12440975672389343, 0.11130315750508146, 0.026641270216644086, 0.05067166488068309, 0.11747230054204938, 0.12540452011064918, 0.08415781581458526, 0.03308164523510149, 0.03351795622152254, 0.19427791266093375, 0.12239534839652566, 0.10164700439855301, 0.12514045438910526, 0.09235281006771345, 0.1688558754262145, 0.07592350909694157, 0.22119297325511766, 0.20693485849835613, 0.23366298672601993, 0.09292818772414024, 0.17695432764776853, 0.11056593117813318, 0.12069164336016824, 0.1885058244513933, 0.0822310542857978, 0.4809413351805474, 0.519898902500493, 0.5348949379028792, 0.5421374132225423, 0.5195662179570646, 0.4850859959248863, 0.5605478236637018, 0.5206058454284711, 0.5318058684625324, 0.0931821006455632, 0.0808623681508599, 0.1132016956061499, 0.13979499998033296, 0.12973304738963087, 0.13162798038266332, 0.08820876730677996, 0.15116808395331993, 0.1314590020310349, 0.2183436833045127, 0.18866819397314893, 0.2161904703369194, 0.25114029337866983, 0.16718325577751747, 0.27033914805203185, 0.19916685324061267, 0.30550325515821963, 0.21130940557356848, 0.3330865602744342, 0.358491711030969, 0.3011659833642598, 0.3231849048754504, 0.35467887978508483, 0.33410542410154953, 0.3453175667065157, 0.300504425618933, 0.3217608213968368, 0.2496551147809135, 0.2645901703658795, 0.2359586558158444, 0.24981289237846604, 0.24928003419947087, 0.33050847968614905, 0.2312924131814158, 0.18111835733410242, 0.24527932538763408, 0.2177743675867485, 0.2832379510766353, 0.1999988871226429, 0.24599148063623488, 0.2078557049774794, 0.2414361755634299, 0.20880141058208168, 0.21081496274599243, 0.22699875296460348, 0.19258102653018638, 0.19162401141345653, 0.18023710205561383, 0.20733869027482088, 0.2013359599247755, 0.2205915159782894, 0.2043723394140412, 0.21229590903820605, 0.19736100575603577, 0.8507385780741927, 0.12250933495343486, 0.15286317219100365, 0.8635947805651362, 0.20014978335160327, 0.19838856175491215, 0.1422451723481205, 0.16304385791988918, 0.8194048441823545, 0.8181463307097974, 0.21261297060711426, 0.07345413667368739, 0.7978164953456159, 0.1681655080533384, 0.15443669524587877, 0.7886646161097814, 0.7792617701056993, 0.7768211288430112, 0.20013691911578846, 0.17856292022817455, 0.18991211794567353, 0.20417715199636266, 0.20288946792461116, 0.19658213506371713, 0.2216390136611377, 0.17498989809392584, 0.18638047858303486, 0.0896245271144035, 0.17668840070281255, 0.09528710852623468, 0.09645348266187959, 0.09618534198485285, 0.09643601747224262, 0.06805959135559192, 0.09440851826894636, 0.08838932521614074]}, "mutation_prompt": null}
{"id": "d5299eff-9aba-415f-a5c6-d94c978fa924", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_DynamicSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40  # Increased population size for more diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for dynamic control\n        self.cognitive_coefficient = 2.0  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.0  # Modified social component for exploration\n        self.initial_temp = 1.0  # Standard initial temperature for exploration\n        self.cooling_rate = 0.85  # Adjusted cooling rate for temperature reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.2 * (self.budget - self.evaluations) / self.budget  # Expanded dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_DynamicSA", "description": "A Quantum-inspired PSO integrated with enhanced Adaptive Simulated Annealing and dynamic parameter tuning for superior exploration-exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.8761384555361177, 0.8616816106496541, 0.8845642728844142, 0.8664348438448957, 0.8488174395285809, 0.8623676121208774, 0.8788673556057982, 0.8452854243883705, 0.8682492560245171, 0.7632792036426641, 0.5536303075998428, 0.7442103147348049, 0.7444822851313512, 0.7168378186317479, 0.7045447830119794, 0.7699703073055052, 0.7088342951064116, 0.6803691119191453, 0.15246187497500685, 0.18013346928460738, 0.17665393493636583, 0.14477154163321904, 0.16344613575853295, 0.17461721329664015, 0.11922368414187479, 0.1530591567366717, 0.1792066999494557, 0.1374716818938989, 0.1059982399613737, 0.10950974649190881, 0.13103002190854607, 0.10905485505305024, 0.09993443353670906, 0.15441749657489856, 0.14387304379033228, 0.10802713918037155, 0.9497607901578731, 0.9649280142119969, 0.9344878684955087, 0.9517949761439051, 0.9361021666860411, 0.9353108369818457, 0.9589471607530203, 0.9313942007196577, 0.9520707626034564, 0.581819963131013, 0.8123969689299165, 0.6070567441547139, 0.6386103298141541, 0.6613164996953163, 0.1522309961460272, 0.7727170539825203, 0.5445489726808355, 0.6189688901653667, 0.22989376436679476, 0.16581006051631098, 0.17050769349240213, 0.28057881202029, 0.19256367892822868, 0.2206967960273727, 0.17876906525227754, 0.17815610993352038, 0.2390248613367716, 0.21636243835144675, 0.13304609341818174, 0.1854385994562131, 0.1880547688104499, 0.2334846086192257, 0.24148938835244915, 0.20168669505207382, 0.22867641486834245, 0.1609050263228402, 0.17728485641282077, 0.22736982510129533, 0.3265987373569621, 0.19984189735343194, 0.28055828521342707, 0.21919421249492566, 0.2028618850306666, 0.24028228633840254, 0.2577816349544788, 9.999999999998899e-05, 0.0003639217873564471, 0.06547065393569595, 0.08345449252416637, 0.048325160961324, 0.06709899793380714, 9.999999999998899e-05, 0.0003914748391525835, 0.020375234021450694, 0.09059826599647136, 0.03227971053394707, 0.10399968002077553, 0.08595086623568604, 0.04123741123448654, 0.05242915557368666, 0.06791581889160248, 0.09206178766167306, 0.06321746787465565, 0.16023843836844975, 0.19933096893262214, 0.21432591592660177, 0.3196262421494259, 0.13685090838632963, 0.08969190163335494, 0.10206658164252658, 0.143074072806044, 0.12707450905867768, 0.1229347981128065, 0.2095066402008472, 0.1546571048871982, 0.06679306562932086, 0.20890641286938594, 0.1833777684744884, 0.10027376346432193, 0.18618190833237835, 0.10167849611075275, 0.5628682721138033, 0.5289582210873144, 0.5429198340733904, 0.5375492979688455, 0.5536725958398581, 0.5505470843148235, 0.5772456442185031, 0.5388389935223263, 0.606148703250033, 0.10551033256915054, 0.11745840710099453, 0.07506966983850594, 0.11550069433146326, 0.10866122549112955, 0.10508589033743487, 0.10566215047879379, 0.13017462906197907, 0.12252097037351395, 0.25593697988040864, 0.20445182671785955, 0.25691808645688397, 0.31272868970422674, 0.35677035254434575, 0.19723572599673156, 0.2270530146209857, 0.15598123651197893, 0.21234849881958096, 0.3062943022034008, 0.4158445846183776, 0.2545069952193657, 0.3175208305420699, 0.3613817361868733, 0.3535561794122368, 0.2544879965323348, 0.3537034357551473, 0.39558068492722565, 0.23345948842430708, 0.19327204441962187, 0.19069512040538483, 0.2286078501896096, 0.23587324125194353, 0.31497567164675433, 0.23902056458151844, 0.31148896535686277, 0.2568054966268968, 0.2597316526667469, 0.22968854273585138, 0.164529792726951, 0.21086666144496058, 0.3103899920697395, 0.21551707122222752, 0.2671909725166163, 0.19882267366435957, 0.25479666221031516, 0.8254757351999497, 0.2526590003763972, 0.2000065623544257, 0.18661486237158253, 0.8415391708956186, 0.20890666186761986, 0.21637422113951799, 0.19125286982125922, 0.21235073188998943, 0.12605633334410338, 0.17585739665832478, 0.17544952480595255, 0.925079992261964, 0.19998887683858968, 0.9206443544735846, 0.15184273213456423, 0.8693011315828394, 0.9313989164552786, 0.566699532541008, 0.21344193115318688, 0.911081265436053, 0.21042601389858562, 0.3308686635353323, 0.1565538409153685, 0.16697976521254, 0.5209020885764041, 0.8302715063041117, 0.18820831262603865, 0.18811711489560934, 0.1899787709759233, 0.20428402641696186, 0.19323839182746783, 0.17992755977614028, 0.19047456712190391, 0.1940751968264508, 0.20505561252698157, 0.10590822970138247, 0.08769216998048801, 0.07215510736732067, 0.09409129262842175, 0.10641977534814817, 0.08470835538007615, 0.09708135616593994, 0.08951571906130207, 0.09867772296371191]}, "mutation_prompt": null}
{"id": "7a22ab41-df0a-489c-bc5a-bfb9b1430fcd", "solution": "import numpy as np\n\nclass ImprovedQuantumPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40\n        self.inertia_weight = 0.7  # Increased inertia weight for momentum-based velocity update\n        self.cognitive_coefficient = 1.5  # Reduced cognitive component for balanced global and local search\n        self.social_coefficient = 1.2  # Slightly increased social component for global guidance\n        self.initial_temp = 1.5  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for gradual exploration reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Momentum-based velocity update\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.1 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "ImprovedQuantumPSO_AdaptiveSA", "description": "An improved Quantum-inspired PSO with adaptive SA, enhanced diversity strategy, and momentum-based velocity updates for balanced exploration-exploitation.", "configspace": "", "generation": 26, "fitness": 0.3154007108934624, "feedback": "The algorithm ImprovedQuantumPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.8453534097293848, 0.8458345722008574, 0.8583303243627065, 0.8234793860435852, 0.8517814792342113, 0.8528704988986672, 0.8444139380357429, 0.8053524695306743, 0.8425513148415397, 0.6819694516043538, 0.07510983836650609, 0.7344578593182474, 0.7313680218149222, 0.5133578355484067, 0.5562246339923238, 0.654681213594835, 0.7514898136748311, 0.7198511516792294, 0.11219765315918595, 0.11562612268900796, 0.12506300778535628, 0.10085414768027678, 0.13638496900458974, 0.1327335495932872, 0.15672185426402008, 0.11246649226342598, 0.18825796149615726, 0.1335953322494754, 0.11537642467139708, 0.16048319685211443, 0.6788260244806466, 0.18620313121453658, 0.10379565739807672, 0.1415513038344558, 0.1438574169456306, 0.11695560837999541, 0.9855305125470271, 0.9889649036646992, 0.9858063259640764, 0.9678469155578219, 0.9814609306091482, 0.9851126406397169, 0.9871332107316761, 0.9820173767344577, 0.9760359736203613, 0.7791116139378852, 0.7416566285981439, 0.7615596704288554, 0.5508046280693379, 0.40411338265190844, 0.15293980364189153, 0.7625013002774423, 0.7684671064196145, 0.7081595900701554, 0.22954637968139635, 0.22466079824571994, 0.9241093910420299, 0.21037207587517748, 0.20308063406945331, 0.19424739517057465, 0.17722304448409665, 0.13819962603138758, 0.23480060976844241, 0.2738201539293367, 0.2490546941832571, 0.27468181639653444, 0.13378714444247275, 0.12838501853749562, 0.3047255774656181, 0.21808542883920834, 0.21389051522281433, 0.20671668634443408, 0.15686320791511643, 0.2069629345124937, 0.24962198274555147, 0.2639071088043028, 0.2163280143716978, 0.20383687933824712, 0.11560788680847511, 0.23163988136538538, 0.11852835494608682, 9.999999999998899e-05, 9.999999999998899e-05, 0.07600296642014637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009243776060159359, 9.999999999998899e-05, 0.006162098310456221, 0.08765289409050459, 0.045699486621107455, 0.11455630281635754, 0.07978527559143045, 0.062496910447664034, 0.041764461335467074, 0.06305969281659596, 0.060102045265339465, 0.0354879848113383, 0.18470393505886817, 0.08204888474271133, 0.051018657401477374, 0.08043892176598821, 0.0805452927576562, 0.08114892822310726, 0.11406753139809589, 0.07573476275213231, 0.3011567813473063, 0.04091555462685559, 0.18953088128404627, 0.2290719302535129, 0.12486483759872513, 0.04025941393427579, 0.0799908418371662, 0.0840414374718812, 0.05731102010001632, 0.08379846642903288, 0.5716117836345356, 0.539718896887617, 0.5420123460932758, 0.5499205111392982, 0.5557256113009246, 0.582407193062222, 0.5629115636272148, 0.5635398080043932, 0.5745196629185785, 0.0703573074792404, 0.08012613915039035, 0.1605030710138179, 0.08401404882430563, 0.10507626451515495, 0.13351300271950373, 0.14401663287349298, 0.133286135451689, 0.09586796073555015, 0.16384697191762665, 0.18987180521085056, 0.20478315526042323, 0.2716926867700056, 0.3673378307504893, 0.15524950017657424, 0.1750984295978013, 0.475126797548331, 0.22052824967620965, 0.35500781506037415, 0.20789537294224358, 0.27179071712174185, 0.27842800036772397, 0.2976478408504494, 0.3129695901128231, 0.27477150497100833, 0.39191477005857567, 0.26025949512841307, 0.20013793751660236, 0.23121867200630164, 0.2610656599925253, 0.22653815510480468, 0.19055871874816643, 0.29107289308164885, 0.23304453206132847, 0.32671690896083017, 0.19170491560255765, 0.20908360266357362, 0.24893498623216115, 0.19072719024099893, 0.20784769846772688, 0.18454726601250426, 0.22513078975366407, 0.26420358290275847, 0.21307417226553593, 0.20220781012275868, 0.19478380962938358, 0.7959216419250409, 0.18410738855531572, 0.1995423601389581, 0.2002380785992557, 0.19160192026522094, 0.7848510734677802, 0.1967957710769157, 0.22562903234388332, 0.9205841940865345, 0.19963323676610756, 0.15435338690467193, 0.9167127462587021, 0.2011882436024066, 0.20058979502482865, 0.8945138179750808, 0.17030276948002554, 0.9227401347750955, 0.8570411910097088, 0.21248957406234137, 0.7370499686897551, 0.21318132978883308, 0.1692432887154962, 0.1681386779515942, 0.10494098943480601, 0.10416416096807857, 0.8758747987362292, 0.2072415376992136, 0.20171489666504816, 0.20749886966769004, 0.2062226194170511, 0.1989090589375041, 0.177278979425469, 0.25039507361117863, 0.18433854727307242, 0.27546605569057314, 0.07968598359741697, 0.07543357369984094, 0.10767601588384368, 0.11057116352461782, 0.0957311326131316, 0.08334317018128745, 0.07234864111928696, 0.09519730404305249, 0.0955287903141121]}, "mutation_prompt": null}
{"id": "4e5a50e9-aaf7-40b3-b314-e84cf0ddc723", "solution": "import numpy as np\n\nclass HybridQuantumPSO_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Adjusted inertia weight for stable convergence\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for local search\n        self.social_coefficient = 1.5  # Balanced social component for global exploration\n        self.initial_temp = 0.5  # Lower initial temperature for focused search\n        self.cooling_rate = 0.9  # Gradual cooling for extended exploration\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))  # Narrowed velocity range for control\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # More conservative dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridQuantumPSO_AdaptiveCooling", "description": "Hybrid Quantum-Inspired PSO with Adaptive Cooling and Diversity Enhancement for Robust Optimization.", "configspace": "", "generation": 27, "fitness": 0.3048083851045885, "feedback": "The algorithm HybridQuantumPSO_AdaptiveCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.7247396436196023, 0.6639794078135498, 0.6794948494807139, 0.6823580061090133, 0.617660370979844, 0.6793214466091074, 0.7080427778256667, 0.6811482356555737, 0.6509263288334792, 0.4682163238135738, 0.5127102781720616, 0.5165988032046307, 0.4908207390068047, 0.45044684696403825, 0.5237446262457434, 0.44479390733451385, 0.5037908748239168, 0.5089816249423497, 0.1115564886056194, 0.154321115064038, 0.12248371806535219, 0.13162663747445835, 0.1518400110675011, 0.15165698277498763, 0.1436176476767792, 0.14405732812283534, 0.1560086839116811, 0.13390666460472855, 0.10720936060896458, 0.13446951441381683, 0.1447839260333933, 0.14220573857945307, 0.1393792621351011, 0.13925194519139206, 0.1206212286565409, 0.13309940251250862, 0.9571914039386918, 0.947999252937356, 0.9574749043089498, 0.9494054306494196, 0.9406065905144747, 0.9369473119720599, 0.9557661344875432, 0.941603237322673, 0.9534733575447757, 0.6091202748006359, 0.6096004709527405, 0.5846476277413581, 0.5790046168828212, 0.603891424080283, 0.5751209943215472, 0.5920787933803752, 0.5669038670490476, 0.5807771715479635, 0.7983279865037012, 0.8839513124709182, 0.37404414415239595, 0.2751066230808765, 0.19293843146209488, 0.2121738698890585, 0.17780922401974986, 0.12584853534509288, 0.3737446541840087, 0.24727107928057435, 0.1286343282307465, 0.24650707145289774, 0.23101790884939755, 0.22496215756853866, 0.3249341859431085, 0.25242105846557095, 0.26178280905378337, 0.13036839946999912, 0.12678112400634456, 0.23546870783275575, 0.11696003215631623, 0.24727907453410314, 0.28678700674827806, 0.24535559644994576, 0.24353794915778104, 0.2917359741900406, 0.278192191640494, 0.055476559992283736, 9.999999999998899e-05, 0.13792955854565714, 0.03596424026288203, 9.999999999998899e-05, 9.999999999998899e-05, 0.013906959363303772, 0.01160792249235909, 0.011531543604672123, 0.11220440364566475, 0.06650931187021747, 0.09604945059580583, 0.0954214468315695, 0.04504009665065056, 0.013961617524078429, 0.09678366856163523, 0.1236314009783992, 0.058615897724458965, 0.08352256103570976, 0.19989978416778242, 0.1491496202225675, 0.11590877191561633, 0.17572188791004428, 0.11701112678130687, 0.09150557678198779, 0.4088547093421403, 0.10418146706811626, 0.18763512647447422, 0.09727907897085897, 0.21914855501645614, 0.058354840464036384, 0.2460686534345522, 0.15042202050240394, 0.18353439056305654, 0.08019406224053949, 0.0953445940907004, 0.48363718255312227, 0.49904153022832776, 0.5008280496933488, 0.5039658329859568, 0.5197149014931091, 0.5253519954467414, 0.4862634651469503, 0.4815994137332025, 0.5168949049010624, 0.11933045481874882, 0.13553329062510033, 0.1134890705290923, 0.13383125695110976, 0.12814947412322675, 0.0860952135070625, 0.12162763633205376, 0.18037158200963255, 0.1041171002130008, 0.4594722327954408, 0.48282902092994784, 0.22666141884330715, 0.2663049535154388, 0.2719943160291698, 0.5163649213644714, 0.40230767752124597, 0.22460037744598504, 0.2175514573803774, 0.32976400067511635, 0.3376130765018013, 0.40525963264590337, 0.35849871574290626, 0.3033373455455387, 0.29020143753580796, 0.33035590456273445, 0.3656206795265131, 0.24862273404746538, 0.28643144955115807, 0.26803910162543365, 0.2131021727107194, 0.21292798065131335, 0.2523012851038041, 0.3161265013907537, 0.2333023256145409, 0.30957312357243094, 0.23772384445465222, 0.20581963383472834, 0.21780915215460706, 0.2024823760460518, 0.23363115387296773, 0.2201965716096712, 0.1851480120775384, 0.21878966611127737, 0.2163457836377235, 0.22669236500640289, 0.24709806130967404, 0.24726130011058445, 0.2068048261324148, 0.1843480426577766, 0.20991856094543104, 0.19827125979817417, 0.24509398729092058, 0.1777386899446739, 0.18230574770356045, 0.8141331032329219, 0.1766893473848109, 0.15310631717251633, 0.8333595494323854, 0.20024409784956076, 0.19685963960038044, 0.7985706991825092, 0.1668527220714453, 0.8307734000407478, 0.8289709910742751, 0.2121257387289307, 0.07214268973061333, 0.6732179250147122, 0.15350376793007758, 0.15518497725755098, 0.10432339037141392, 0.10364681094579697, 0.7303963408465597, 0.20370801489642043, 0.22921620333445214, 0.18864106447618845, 0.1915331550684879, 0.20541311664933337, 0.19987861947207097, 0.20969122196752643, 0.20932266595479265, 0.1875021966280156, 0.09881134640417133, 0.11979691941179971, 0.08451474792885616, 0.09676848431207674, 0.1117873726030797, 0.1070660210094635, 0.08759182195060033, 0.08944487761121767, 0.09724063909574177]}, "mutation_prompt": null}
{"id": "c962771a-d28e-4471-bb7f-a519ba7c0181", "solution": "import numpy as np\n\nclass AdvancedQuantumPSO_AdaptiveCoolingSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Larger population size for better initial exploration\n        self.inertia_weight = 0.7  # Increased inertia weight for momentum preservation\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for local search\n        self.social_coefficient = 1.5  # Balanced social component for global cooperation\n        self.initial_temp = 1.5  # Higher initial temperature for more aggressive exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for gradual exploration-exploitation switch\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Expanded velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired velocity update\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive cooling SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Fine-tuned dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "AdvancedQuantumPSO_AdaptiveCoolingSA", "description": "An Advanced Quantum PSO combined with Adaptive Cooling Simulated Annealing for enhanced dynamic exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.30641887493408715, "feedback": "The algorithm AdvancedQuantumPSO_AdaptiveCoolingSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.6160651383337279, 0.6128588546242166, 0.6379288540620168, 0.6898156598794307, 0.6716873552659083, 0.6507301839432993, 0.5010375757765405, 0.6416352143100992, 0.6287846919898632, 0.4562093329421658, 0.48883505491569723, 0.4879210915323756, 0.5014783249653976, 0.4556560075166932, 0.461518845545843, 0.507026700378332, 0.5427672048292164, 0.5218797633865504, 0.15715184600658827, 0.1267390334462425, 0.1080994348601424, 0.13292016522332273, 0.10927006563808905, 0.13914287028993877, 0.08334206452944926, 0.156129137020396, 0.11186095116299544, 0.0888289956817716, 0.10936495592617523, 0.10761365596777628, 0.13662481477841426, 0.12717029384552248, 0.10845686463496185, 0.11751656822031287, 0.1288468762392294, 0.07464840720850696, 0.9580791056396271, 0.9548269676139239, 0.9650141381082916, 0.9489966015902835, 0.9316223918505665, 0.9272519999581994, 0.9475942525798409, 0.9349621444698893, 0.9553386593687784, 0.5799135133305044, 0.5500745048497291, 0.6087766523569921, 0.6195552727621911, 0.6144824394662762, 0.5958148920178661, 0.5818928465385571, 0.570946132020455, 0.5674103355057603, 0.2307297079805909, 0.22701172239654066, 0.8850074725273793, 0.1932820167433389, 0.19206750163483854, 0.1919946109438082, 0.12643913557787578, 0.20981085099960428, 0.23229156745882984, 0.29721140672199764, 0.12140844111591409, 0.23068009550217294, 0.2414428780717468, 0.2951186895423471, 0.2514351076337543, 0.2870425401853294, 0.29633470853216526, 0.3097344285524526, 0.2828097927795441, 0.23617293635621783, 0.12620010860065412, 0.2714605537748166, 0.2896003616836168, 0.2562591609492282, 0.2612883983054668, 0.28071599466676156, 0.3125129481737836, 0.04100629678922829, 0.06307449961438616, 0.00012455126207133738, 9.999999999998899e-05, 9.999999999998899e-05, 0.02104409907478544, 0.035207452456843535, 0.0021259916895163267, 0.043072799816678, 0.10041277967178863, 0.17296737005745422, 0.08825658701310135, 0.09552534340413654, 0.04311340754335602, 0.03552248003932312, 0.10453956740614445, 0.10860203391381928, 0.03690594417550752, 0.08403391043588615, 0.0510343141872297, 0.094883020087693, 0.10575023208040002, 0.11773423987391674, 0.0688064024059517, 0.09151678344594272, 0.14310843861358702, 0.06763978494966127, 0.19954656886109956, 0.18611942037295026, 0.2398898083551877, 0.07364661089819602, 0.14957875796684528, 0.08807519286336851, 0.12348582794902763, 0.08081651289781022, 0.08117068972125596, 0.49792920541926233, 0.4542788578867889, 0.47694063982544754, 0.4562747807035503, 0.4793164525633169, 0.4880355850742022, 0.4790867856073048, 0.5147365518328931, 0.49665039211133155, 0.08241524920630694, 0.07068486558690168, 0.08431001286722983, 0.10894373253113043, 0.08074004226210019, 0.13918012333716556, 0.10390131800452196, 0.10873236354338367, 0.10686295720796402, 0.1700265624959142, 0.1489073632465987, 0.2255406869602884, 0.41067564196908646, 0.39611883676879067, 0.4252662682328887, 0.26655284109529753, 0.39635737865437226, 0.3512963646299321, 0.3527115794755664, 0.2954394249724379, 0.3609483926203777, 0.33764484753647006, 0.3312722310584486, 0.32269523168974557, 0.31657226553951245, 0.30259793138936697, 0.30711129802051773, 0.267733083546948, 0.25663489581834154, 0.26975424476259036, 0.30699583968707156, 0.23071406729563837, 0.27870833735643974, 0.27405388850523527, 0.29239816924992923, 0.26579086000580787, 0.25035846482639834, 0.2906442563990487, 0.25206654845337684, 0.20422256727540067, 0.21580011523250342, 0.21266286569904191, 0.21055362766032726, 0.26313448552181384, 0.278148920792324, 0.22176536375517686, 0.22301473416908124, 0.2090225778470043, 0.2485694597431043, 0.20876917648111848, 0.5764941751443472, 0.2002034324527202, 0.5951277213282538, 0.19499664448187748, 0.7910854616865912, 0.17599076009633918, 0.15236605600547204, 0.8269085586817211, 0.1998061796258499, 0.8190483544774054, 0.17520574817804013, 0.16315431489520382, 0.8159880671768731, 0.7486843428834719, 0.21175505916251436, 0.6531051635102894, 0.20894339107199122, 0.6889368728546279, 0.15401041112575853, 0.7294875946377328, 0.7379256893533332, 0.6985134560412464, 0.20014986030490944, 0.20424948126876674, 0.22085189531024918, 0.2589633902881009, 0.193240779316058, 0.20662215853178012, 0.1902001923214649, 0.19670428663716655, 0.19451129038832538, 0.0986101651109964, 0.12297744976942593, 0.08560892606652282, 0.09816094367582207, 0.10097209293196496, 0.14684994301036058, 0.09566192759891168, 0.10638905572133883, 0.08502751841900358]}, "mutation_prompt": null}
{"id": "19f5aca2-a75c-4b1a-b25d-f861246ecc0a", "solution": "import numpy as np\n\nclass EnhancedQuantumPSO_SDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40\n        self.inertia_weight = 0.7  # Slightly increased for more momentum preservation\n        self.cognitive_coefficient = 1.5  # Lowered for balanced personal influence\n        self.social_coefficient = 1.5  # Increased for enhanced collective behavior\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.9  # Increased cooling rate for faster adaptation\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                stochastic_term = np.random.normal(0, 1, self.dim) * np.sqrt(self.inertia_weight)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + stochastic_term)\n\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            self.inertia_weight = 0.3 + 0.4 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedQuantumPSO_SDE", "description": "Enhanced Quantum-inspired PSO with dynamic parameter adaptation and stochastic differential equations for improved convergence.", "configspace": "", "generation": 29, "fitness": 0.16604976353048326, "feedback": "The algorithm EnhancedQuantumPSO_SDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.26046413207966923, 0.28619812315741266, 0.2836099788657658, 0.2592131710105139, 0.2853865236900076, 0.2626768112258192, 0.28879864562139934, 0.268979799854982, 0.28344260224420537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07578376929915898, 0.07468494838650053, 0.09235422194634224, 0.07854571145323153, 0.07141685297643308, 0.07805283709955857, 0.06928425092092294, 0.08437407233450889, 0.08416623665317291, 0.07365206548378522, 0.06583663997583078, 0.08833370561291864, 0.07416636684907774, 0.0712074704456871, 0.06349445991793001, 0.0668012009132033, 0.08804944236538581, 0.07167081738580894, 0.9875332945108837, 0.9889695985394809, 0.9894289113862711, 0.976223843169272, 0.9873943161622062, 0.9872140620362739, 0.9845893930443006, 0.9887123014649633, 0.9882065054158987, 0.17130912081501448, 0.21199353092262951, 0.15588216255627207, 0.1653876195756675, 0.1635185697154693, 0.16104974101843395, 0.14673559349189202, 0.1523204518579645, 0.16663129481732863, 0.20010625400272586, 0.20476064376789538, 0.1928624843806136, 0.19154469672764107, 0.20608749601151832, 0.2139056509307079, 0.20049684713866134, 0.19380342299414088, 0.18426439883588686, 0.1061313278269076, 0.08691011739687127, 0.059502140687304195, 0.08829624292644767, 0.09644018357045259, 0.06613575588366472, 0.08220177101361237, 0.06338669035908207, 0.09671439515426739, 0.09688579003876041, 0.08025118943766629, 0.08010589468226847, 0.10045977754585134, 0.08864982176864944, 0.0887214269720964, 0.08772148353786013, 0.039469313629285185, 0.06117323901709437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09759333538369175, 0.017304905852800756, 0.08810854756239295, 0.09376074632104425, 0.009707571597011522, 0.012863177537930315, 0.05274352578658059, 0.050946729733187035, 0.052311451961929545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015074879911298411, 0.019865972138379928, 0.02541838226865567, 0.023590447741345777, 0.04317446199871777, 0.028963021448637494, 0.032164131458719436, 0.02730591868743304, 0.03410330876121226, 0.2646364938960153, 0.2802157915711644, 0.2632973609803082, 0.27951920920273643, 0.2714490508517391, 0.3030243920567146, 0.29336928364459114, 0.28606712747385044, 0.27183051215610043, 0.0789373417051864, 0.07584378639835154, 0.08128639243559643, 0.09240219041771691, 0.08417818228393914, 0.08058342646471861, 0.07903523691278902, 0.07485414038762317, 0.08331087432248219, 0.12740205531968718, 0.1538103339208592, 0.1453594220397113, 0.14360731818108685, 0.16967005699968973, 0.15726447759262996, 0.16798549298197452, 0.16409442313704425, 0.15764857016323464, 0.20966089620672124, 0.21437444276627982, 0.2087726682525709, 0.20894923681831068, 0.2324384500359874, 0.21315327108475235, 0.21104178798027684, 0.21716367359423439, 0.20337334397525708, 0.1569734713411819, 0.16906328233176393, 0.15782888737094236, 0.15165328468394912, 0.15622055372232313, 0.1430131143615765, 0.15428884364422624, 0.17401492142243402, 0.1760740796146001, 0.22193939539265273, 0.19743219707161885, 0.18590090577545193, 0.19852179489635313, 0.14662272213187588, 0.17515492918591824, 0.19474327477506914, 0.17510008723709158, 0.2018911246734708, 0.17259748958503351, 0.17887001582476025, 0.18885511569839208, 0.16941382459611265, 0.16544490180499216, 0.1744141959310591, 0.17633406286334885, 0.17177167729550713, 0.16880198980838235, 0.3149045252125403, 0.16502922919567486, 0.1487756464035359, 0.3654306068597941, 0.2752432500763794, 0.34209282949337105, 0.12902678064643025, 0.16625406499348772, 0.3704739646382942, 0.3211698765779084, 0.17257498626647194, 0.15061559839828165, 0.189583435115801, 0.22338392042223953, 0.13619895704719498, 0.1842765722740718, 0.19939240445993622, 0.1995792202729273, 0.1773704436380904, 0.17921909993195773, 0.18862244286520113, 0.18802997968799684, 0.1759784797470143, 0.1915152074581129, 0.19688581064805144, 0.17317535566034548, 0.17660094011788097, 0.07757736612425137, 0.08239429326156811, 0.0820591080338734, 0.07489098249194026, 0.08244625986412635, 0.07376277038264967, 0.08049493122500095, 0.07922757548872472, 0.07150700969288615]}, "mutation_prompt": null}
{"id": "f6a4a011-7d7e-4839-89b4-e27107e6b023", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40  # Maintain population size for balance\n        self.inertia_weight = 0.7  # Adjust inertia weight for better exploration\n        self.cognitive_coefficient = 1.8  # Adjusted cognitive component\n        self.social_coefficient = 1.3  # Modified social component\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.9  # Slightly increased cooling rate\n        self.mutation_rate = 0.1  # Introduced mutation rate for diversity\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                mutation = self.mutation_rate * np.random.randn(self.dim) * (self.bounds[1] - self.bounds[0]) / 2\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])) + mutation, self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Adjusted inertia dynamics\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveMutation", "description": "A Quantum-inspired PSO with Adaptive Mutation and Dynamic Inertia for efficient convergence in diverse optimization landscapes.", "configspace": "", "generation": 30, "fitness": 0.1829312300790784, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.28523508909651807, 0.3038820851979793, 0.34139244912505295, 0.3150843596391012, 0.2999286518607782, 0.3165348717830595, 0.2986306164613951, 0.3004225713141172, 0.3183646510204432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10578145922642557, 0.09919301343936282, 0.10537701852624104, 0.09361000290890864, 0.09076449446614754, 0.09037734920774487, 0.08098383361426931, 0.08051508612940339, 0.09921237180022513, 0.08409447189914865, 0.07898237965801036, 0.07527801688880498, 0.0887978175068711, 0.08110687566365848, 0.08147474876289085, 0.08326547900915648, 0.08456363597673366, 0.08238515385479972, 0.9407424585119917, 0.9631121706695305, 0.9669324867361195, 0.968756759083766, 0.9538004175207141, 0.9514113374812312, 0.9639571579525935, 0.9521537326860682, 0.9357538314723399, 0.20497088132232233, 0.20047627574456717, 0.18693511945034902, 0.2497228029688905, 0.20203203286564198, 0.18720072604284788, 0.17779321828386563, 0.19490916412530357, 0.19129913817707955, 0.2589715504868626, 0.2309302052121277, 0.21986189368227638, 0.26178408383443685, 0.23313210009140417, 0.27940477272126396, 0.224999170115722, 0.2522098487181035, 0.2568953005981375, 0.09464409005070107, 0.085151581261934, 0.11095741050338659, 0.11335846759752022, 0.10882216012339885, 0.09733373476074181, 0.10294074666643938, 0.11552300766163903, 0.1103811551143854, 0.10637818372019425, 0.1103681714587954, 0.09444191328428408, 0.1612383334541002, 0.12152820691255206, 0.11830113326217029, 0.10475446013968481, 0.1043045303640785, 0.10890640849671474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013613698184111511, 0.1254744876553463, 0.0598312117183053, 0.11582575669433304, 0.10507493227993614, 0.07003925844446746, 0.03894330522955747, 0.10291928377797599, 0.09706547176120561, 0.08662266809437258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06658036136427303, 0.02840103008988204, 0.04729955099247474, 0.057722786906468704, 0.06096560115622485, 0.04430857680414224, 0.03571878068364909, 0.05209369148481313, 0.04339836941009145, 0.30187729516793094, 0.30490900223086126, 0.29631678122197125, 0.3257833418095192, 0.29576457300270975, 0.3444230036121634, 0.31053914396852944, 0.28901671214881675, 0.30354140288951303, 0.0990304785188082, 0.10546975888613885, 0.07483660925720492, 0.09183271265197746, 0.08901435030695026, 0.1135860213518477, 0.1057712198878733, 0.08300881691328055, 0.09881305163666676, 0.14391060983112725, 0.13856539739874263, 0.14770952054677533, 0.17978860818381182, 0.16504099797319627, 0.1661658644974735, 0.13589101545838844, 0.15451045715717915, 0.14870166341650093, 0.23394073704629081, 0.22778991825713968, 0.2551777076953996, 0.22732399124824265, 0.22272060944902494, 0.24600994716042324, 0.2362903146183688, 0.2390734311732331, 0.22625372836803903, 0.1736635314749203, 0.16460908260566376, 0.1686849479354079, 0.16876817987713766, 0.18321001505893664, 0.1706565233679168, 0.1763638631820339, 0.1785516357122504, 0.1665845778172821, 0.2323363210992868, 0.21425795942607495, 0.19497032260323444, 0.2642834078974212, 0.21509437198740167, 0.20917887126987067, 0.21713069231999793, 0.2145584241813725, 0.21715981705221366, 0.1813852970580182, 0.17705777980091153, 0.1801478354253475, 0.20947511270668984, 0.18745117225490182, 0.19031966181825, 0.18619251055192443, 0.18521572509644102, 0.17725625401075018, 0.18173797228156174, 0.17314115515650408, 0.1504271563743238, 0.3851970225867333, 0.19013915171502394, 0.1876131482170994, 0.34724083905994807, 0.1689112609625767, 0.43358691136295857, 0.36159006351391343, 0.20288315204105511, 0.34831240664683527, 0.36293806544887963, 0.25356597785026447, 0.14976626496897827, 0.1649256939895658, 0.10380384465637804, 0.36221329138517777, 0.18419373400842054, 0.18257364417217836, 0.18877176978423071, 0.1819016976434007, 0.19029636246966097, 0.19349415335557296, 0.17389244952835492, 0.19952668367529836, 0.1829289688247523, 0.08215042589822152, 0.08588679293247337, 0.08289861854138159, 0.1054194395867657, 0.08604930206124972, 0.08925816711325607, 0.07812057991451371, 0.08537954067187437, 0.08022759199062202]}, "mutation_prompt": null}
{"id": "cea0d842-95e7-4089-82ee-ca0f1daedbab", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for greater exploration\n        self.inertia_weight = 0.7  # Enhanced inertia weight to balance exploration and exploitation\n        self.cognitive_coefficient = 1.8  # Adjusted cognitive component for fine-tuned personal search\n        self.social_coefficient = 1.2  # Modified social component for better exploration\n        self.initial_temp = 1.5  # Adjusted initial temperature for enhanced exploration at start\n        self.cooling_rate = 0.9  # Increased cooling rate for slower temperature reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Expanded velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with diverse strategies\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + np.random.normal(0, 0.1, self.dim))  # Added Gaussian noise for diversity\n\n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.3 + 0.4 * (self.budget - self.evaluations) / self.budget  # Adjusted dynamic range for inertia weight\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_Enhanced", "description": "A Quantum-inspired PSO enhanced with adaptive simulated annealing and dynamic parameter tuning, now incorporating diversified velocity strategies and adaptive cooling for improved global exploration and convergence.", "configspace": "", "generation": 31, "fitness": 0.21707597176035526, "feedback": "The algorithm QuantumInspiredPSO_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.46030911681280773, 0.4101883028324622, 0.4022320322295063, 0.3890926645132611, 0.4204538284103092, 0.4034675648218429, 0.43771070647506904, 0.3901011221131817, 0.4363950412145132, 0.05103116830713916, 0.0034430613683676947, 0.0677033925725733, 9.999999999998899e-05, 0.052713406303961374, 9.999999999998899e-05, 9.999999999998899e-05, 0.007664156339637018, 9.999999999998899e-05, 0.1191658794764473, 0.11345316350615942, 0.1034771239774438, 0.11156189041704945, 0.09064827669633191, 0.10190908599261295, 0.10808908320163646, 0.13067997331298098, 0.1140361813502655, 0.10779377136348134, 0.09265448254185393, 0.09885430522547156, 0.10192948774031574, 0.13011323373111605, 0.12084256623950096, 0.10779904048299083, 0.09694031522649316, 0.10267309946395742, 0.9594923276212105, 0.9546922464812185, 0.9642532007974965, 0.9383061962799693, 0.941628562516979, 0.9542158421693707, 0.9472034871158265, 0.9448248570735691, 0.9536536454841033, 0.29555296967670863, 0.27604030896356657, 0.2703889134302849, 0.2934827496763259, 0.2910476525601863, 0.274062693849655, 0.2865491630015049, 0.2759683938652492, 0.2905386356337101, 0.3642634639314889, 0.349870400536495, 0.1872419774016123, 0.21248232007117707, 0.4154231254253371, 0.23570758561747263, 0.32674927465157877, 0.2284690076102739, 0.25964930584536894, 0.11927915789223265, 0.1540654281968702, 0.1637047714478127, 0.1617845097928028, 0.17320817445386216, 0.18524965652038117, 0.1737849384127974, 0.18963901073871836, 0.21568211753521438, 0.19705478190016945, 0.17474851240135925, 0.14551031347225563, 0.17118229578545852, 0.1610203778266226, 0.17509452143268478, 0.11952516557966375, 0.155180715845456, 0.1240906912940336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001327129476843547, 9.999999999998899e-05, 0.014410927105299565, 0.011366841695195529, 0.0040698585718126346, 0.09004676137155676, 0.08930043150341371, 0.04873571257343179, 0.14336163141337221, 0.0649219546992501, 0.06961959303376497, 0.03762597169862347, 0.05722929404034438, 0.11190725466466867, 0.08932849779046248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008195165989555053, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034109254948462286, 9.999999999998899e-05, 9.999999999998899e-05, 0.105351149226378, 0.08090786910854664, 0.0903713342165775, 0.08795296717713375, 0.0958168829232875, 0.11037196632248503, 0.06925353170363435, 0.06900103537523716, 0.08573489825096747, 0.3680732088991163, 0.36647988531430886, 0.3826492003035963, 0.3633178069670122, 0.38495072959016785, 0.37106232228309666, 0.3769965078909894, 0.3827203730340465, 0.38650433950227514, 0.09949525393479652, 0.10794119177824646, 0.12175413531382384, 0.12403846908568827, 0.12785986255697934, 0.08922119876630408, 0.09816990467450215, 0.11465248476906231, 0.11447723235524809, 0.2621132064807209, 0.2526415404269998, 0.1726118569813685, 0.27527512565144197, 0.26409564046239986, 0.2562913034608474, 0.25564063806479864, 0.24254976116886107, 0.2700723275902155, 0.275595673523959, 0.2997402846782651, 0.27802130440608175, 0.2800204532832694, 0.2818780814335723, 0.2757936845776935, 0.2833694322834429, 0.28288611339256253, 0.2857461684510857, 0.19229441150350945, 0.21749407974379298, 0.23434265781675756, 0.2313764448184451, 0.20196361381482297, 0.22355296592169205, 0.22645563159866544, 0.24277642160878832, 0.20159962947199528, 0.2445561132812717, 0.2191867287444884, 0.21010418326064395, 0.20036412109319668, 0.2297106137992475, 0.22904735770445084, 0.20463004257673745, 0.20100032418362812, 0.20208797584603844, 0.19480525444928676, 0.2106179816574646, 0.19039008922093315, 0.19751520532118771, 0.22890945311220146, 0.2004322706674857, 0.19683601974269582, 0.23610578791262082, 0.21054704552061687, 0.12612816737627197, 0.18454974936564372, 0.17633853777196562, 0.6041147844682955, 0.1991218763197703, 0.16868031288579133, 0.5824988472903583, 0.14993411764428488, 0.17552368115515304, 0.5646230480379071, 0.2112575106201784, 0.07344122844224588, 0.21007740789524698, 0.16785279145647813, 0.1521304858878777, 0.5105799124742127, 0.5085262798355843, 0.5373145095297507, 0.18276527197615355, 0.17897147812599212, 0.18041798786338314, 0.1816343349012851, 0.1976138726750537, 0.17990736691168552, 0.19303258430968528, 0.17443920026809834, 0.18586485594596536, 0.08349169050700689, 0.08760633260555628, 0.08512070252551807, 0.09407331292059007, 0.08432764155382244, 0.08999327892889308, 0.10476343680004352, 0.08680060182437754, 0.08486843243269837]}, "mutation_prompt": null}
{"id": "86db9cd3-44e4-432a-b55c-f2584dd2b48d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_DynamicSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Adjusted population size for balanced exploration-exploitation\n        self.inertia_weight = 0.7  # Slightly increased inertia for better momentum\n        self.cognitive_coefficient = 1.5  # Adjusted cognitive component for subtle personal influence\n        self.social_coefficient = 1.5  # Balanced social component for cooperative search\n        self.initial_temp = 1.2  # Slightly higher initial temperature for more acceptance potential\n        self.cooling_rate = 0.9  # Slower cooling rate for gradual temperature decrease\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Increased velocity range for dynamic updates\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n\n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.3 * (self.budget - self.evaluations) / self.budget  # More dynamic inertia adaptation\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_DynamicSA", "description": "Quantum-inspired Particle Swarm Optimization enhanced with dynamic adaptive mechanisms for improved exploration and exploitation.", "configspace": "", "generation": 32, "fitness": 0.28066102247346325, "feedback": "The algorithm QuantumInspiredPSO_DynamicSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.5345587092510834, 0.50206233823698, 0.4729127423931214, 0.5588313511089809, 0.49913208230828665, 0.5318276484524863, 0.5097071631657524, 0.5780778423381385, 0.49103337469796615, 0.4069195512018783, 0.37507281113791147, 0.4347180099377972, 0.45633615996525845, 0.3865135775984714, 0.4354858832879078, 0.3476393995117064, 0.4048484053962499, 0.42533914435452, 0.3356370755297635, 0.17589857038734058, 0.13517388397176888, 0.1237260863903562, 0.13815160727742937, 0.1446642013628654, 0.13479113026489487, 0.146670752243519, 0.17163113130449748, 0.1441678353053094, 0.11427483219633305, 0.13507850541349453, 0.1380882426961989, 0.1506556172536757, 0.14667490578566345, 0.13489019944934277, 0.11016000923855152, 0.13270411022923867, 0.962174841540471, 0.9570569608478593, 0.9612193195396703, 0.9627997082102495, 0.954868754167054, 0.9423776099367974, 0.9641105245585654, 0.952349346658373, 0.9553984372127782, 0.5161814574393248, 0.5168315257127859, 0.05838728649981206, 0.4839281502088294, 0.5174805324624108, 0.5385982685244091, 0.4943269784962505, 0.08829951928790558, 0.504942570057975, 0.22752847566533563, 0.6790561824547592, 0.7148881842700752, 0.6918256696392606, 0.19254890913352252, 0.7395626329654417, 0.2318566005143735, 0.23090947408756435, 0.26209080213352587, 0.23532113600153526, 0.10249440244557695, 0.2279676823230674, 0.20007174399429195, 0.28222312262867455, 0.10406106892959777, 0.24108962925422028, 0.26021023847460656, 0.2415946392570295, 0.2508731599071431, 0.12833895312099508, 0.12983350433887586, 0.2808798346086433, 0.2842800671248221, 0.12778231478656266, 0.312519386680691, 0.09536284868555633, 0.22755385565567776, 9.999999999998899e-05, 0.008179396717407195, 0.017136151772445207, 9.999999999998899e-05, 9.999999999998899e-05, 0.053072814043893746, 0.008161491146670974, 9.999999999998899e-05, 0.052533382428870734, 0.07146975953775458, 0.05107981012866769, 0.09545721060443557, 0.13263474913033846, 0.017091905279040698, 0.016793968751519617, 0.08027975528890563, 0.07488222557213631, 0.12062401599611638, 0.09836840086515164, 0.14274882404491707, 0.04430204270908056, 0.06423669005730337, 0.0703204272758643, 0.10915222058337948, 0.11867699802672127, 0.17968926453547995, 0.1590441488754084, 0.16956367978716191, 0.16849757101719354, 0.2082473865006168, 0.006036247020390184, 0.1281571595978911, 0.06956836083631046, 0.0793447695398578, 0.07881312609919955, 0.07900595522808707, 0.4745104710088951, 0.41541872188457807, 0.46459873172841515, 0.4204449020894606, 0.4741412136519535, 0.4293972959382564, 0.41874443868799527, 0.43571652451989995, 0.44193170392620396, 0.09881541274588002, 0.06581576641382236, 0.12304107127060837, 0.13982205653128654, 0.11918215614462258, 0.14616693467586028, 0.1173682474904294, 0.11669020995347601, 0.10123478520831541, 0.3469316786328903, 0.40582921523811055, 0.20846963067187851, 0.25352912798551375, 0.21634352121089562, 0.20728280802686572, 0.19297491762070185, 0.24496714819722698, 0.27463126238156665, 0.32493084424405083, 0.23161553729020123, 0.3197513304285994, 0.3052643477034841, 0.31785928484958337, 0.32659839844515626, 0.3250976781681605, 0.3000962139881177, 0.2705243893950685, 0.25013755570599394, 0.2655075688859855, 0.2318637340506693, 0.2830991390555737, 0.20038933822539662, 0.2835781591481138, 0.2879699486783224, 0.29787999700630985, 0.3128310981364594, 0.2143998527476495, 0.2075905139837949, 0.22024889138883796, 0.2221392750375012, 0.23212915230913878, 0.22047029871606838, 0.25911414774483743, 0.24243236214453712, 0.24050054901281448, 0.21949260447810703, 0.2204382616898839, 0.24315882673823552, 0.22198772160016778, 0.24160302961651126, 0.24647318944218222, 0.2178282161729751, 0.24304130382043354, 0.1926355016957979, 0.18614760116257634, 0.20981894948570756, 0.17339073559987195, 0.743865192807714, 0.19974908490665721, 0.7572114165882878, 0.6669065025646101, 0.16944941551816006, 0.16653320812189376, 0.7019265138550368, 0.21144049638706786, 0.6777184585850833, 0.2098176747830729, 0.15138818672149934, 0.15339204220916725, 0.7056072801574991, 0.7081055003749772, 0.7292230017975239, 0.18775979514445518, 0.1815925034749466, 0.18509561034950617, 0.19820915942352213, 0.22085613638273305, 0.1910425455798358, 0.19316772490194778, 0.20551505009369164, 0.19636200817850824, 0.08808099248614976, 0.09182582093392844, 0.1089537393133323, 0.09945601361843415, 0.09017989662915715, 0.100683803559936, 0.11657112136641734, 0.09653908481499351, 0.082839260723918]}, "mutation_prompt": null}
{"id": "74cd2675-b272-4383-b4e4-8ac46d2084ee", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for better diversity\n        self.inertia_weight = 0.7  # Initial inertia weight for improved balance\n        self.cognitive_coefficient = 1.5  # Adjusted cognitive component for individual exploration\n        self.social_coefficient = 1.5  # Balanced social component for global cooperation\n        self.initial_temp = 1.0  # Standard initial temperature for exploration\n        self.cooling_rate = 0.9  # Improved cooling rate for slower temperature decrease\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n\n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with dynamic SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.3 * (self.budget - self.evaluations) / self.budget  # More dynamic range for inertia weight\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveInertia", "description": "A Quantum-inspired PSO with dynamic inertia and enhanced local-global balancing for adaptive optimization.", "configspace": "", "generation": 33, "fitness": 0.2858247712202085, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.22.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.5140555215627154, 0.5065532347259085, 0.5538227987585378, 0.5628696690401289, 0.5248554109732773, 0.5003993565062428, 0.5396091606434054, 0.5089934285713464, 0.5290971533320363, 0.38564903346313517, 0.451203466569722, 0.41861117237952594, 0.41422546769833024, 0.3976246698726238, 0.4059140111243972, 0.4558356909419876, 0.4110591801753327, 0.416965748811018, 0.14782601874875856, 0.14247318340156945, 0.133135403966675, 0.17195920272641174, 0.4541492184262125, 0.14995092727100234, 0.1453843885739956, 0.17970059164770502, 0.1379346192435954, 0.16225619918741974, 0.10888266190739704, 0.13972328428423786, 0.1435021654275268, 0.10864507877677354, 0.11228512454704709, 0.1604005618566815, 0.11821529824696286, 0.17230551872624145, 0.9588853202513278, 0.9564622845682779, 0.9583368665376447, 0.9585861700294678, 0.9553308674345995, 0.9561428848722598, 0.9617812604558543, 0.9499004430580597, 0.961149035811737, 0.5107419197961695, 0.4966106661815435, 0.05809994967854093, 0.5019507065027782, 0.5562952598948071, 0.5151117771003472, 0.5209771115289225, 0.5219641483306576, 0.5524568179251056, 0.22916209707493096, 0.7014564659846295, 0.2272523916321777, 0.19363057873818879, 0.19326927359907942, 0.2723253624871096, 0.22264895958487974, 0.21642264564285985, 0.215832049338208, 0.2354500345310223, 0.38199213372431184, 0.22089231540318666, 0.1032321713715193, 0.1326275471526489, 0.11669349287241204, 0.25410924144760816, 0.23180081005717457, 0.2427516782722272, 0.24161536474999734, 0.22215476162888037, 0.24728349587313514, 0.23305035345489, 0.38889795098518976, 0.24976493501816954, 0.3166281256495478, 0.03295561875369335, 0.2647651313792315, 0.00017987037249189708, 0.021300632171009748, 0.004899988879948025, 0.045498792637143404, 9.999999999998899e-05, 0.013171906943784228, 0.012674682790025371, 9.999999999998899e-05, 0.070016745356968, 0.11804671480147166, 0.06470025397429147, 0.08373531875785933, 0.07822388550630166, 0.037306704303416316, 0.04906747047741333, 0.18196015606584848, 0.09050074908178707, 0.06130595699158037, 0.0855627303784966, 0.09108043129657817, 0.16466965139465117, 0.2083554269909339, 0.06786332953744989, 0.06696135651023638, 0.08816774149129103, 0.16060406620339396, 0.11376678571298704, 0.1365106216267008, 0.14679010848863017, 0.2819357283533914, 0.1301199381452991, 0.1263591634213841, 0.09621927835803745, 0.11279746091197995, 0.1518860154653081, 0.09154224504360098, 0.42030081291300014, 0.4135663288163718, 0.45045172147212176, 0.4413271042576775, 0.4347643391726985, 0.43198176908686636, 0.45826934588068247, 0.4560677001823641, 0.4704015822054908, 0.13690919107874655, 0.08906024997031758, 0.11924762228676733, 0.15244714993887087, 0.12033710325957037, 0.1446960118572248, 0.0699394261006977, 0.1169370649329281, 0.12084914729551655, 0.42905823258139464, 0.30603795207405105, 0.21634591279370607, 0.25196035199558764, 0.20241572369210004, 0.2957803679723836, 0.3463690414921041, 0.3994302216683099, 0.2075479011265623, 0.22777389825832428, 0.29814099389303894, 0.3368753144765687, 0.3159057596749901, 0.3071437589774233, 0.27917035062007567, 0.3020383309297454, 0.31507256068116063, 0.34805528314563894, 0.26440573109819276, 0.2530169957661642, 0.2981228987502207, 0.30725556169388424, 0.19152624195639778, 0.2972533852431666, 0.20238413657163523, 0.31535339763340664, 0.2079463807700176, 0.24248465825288668, 0.19994626341764, 0.2119928780098166, 0.26790606084616597, 0.23840009502104176, 0.2272688808596549, 0.23426792858283862, 0.23768224220090572, 0.21666532439703934, 0.247133973327342, 0.5506496959249146, 0.20581098895974426, 0.4863177457227067, 0.209168596881119, 0.20846336218039918, 0.18006631121382344, 0.4641088378298558, 0.1958977562597909, 0.18593691655567468, 0.18603474280189436, 0.1856982379783111, 0.7363639872416113, 0.20030815647310285, 0.712144183960933, 0.1639779531882325, 0.16937494786559204, 0.7093365852325759, 0.7588006482339403, 0.21112448912833925, 0.0733951743465856, 0.20997935075555807, 0.729552249663026, 0.1539276140089456, 0.6339604188624123, 0.6725913335924343, 0.6841028087694118, 0.23772192306698714, 0.18422904412914354, 0.20384275353761794, 0.19552860023431318, 0.2110161775073247, 0.18407419822841486, 0.20077348126495653, 0.19313916996740443, 0.1800550151974596, 0.07521613692004248, 0.10568244767508606, 0.13295478473761324, 0.10120107501263065, 0.08675091616934061, 0.08364362096109812, 0.10768358633025799, 0.10352210227236469, 0.10082978863996683]}, "mutation_prompt": null}
{"id": "b16d3bf8-d4b6-4482-a85c-e7b4b63cdf6a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveChaotic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40\n        self.inertia_weight = 0.7  # Slightly increased inertia weight\n        self.cognitive_coefficient = 1.5  # Reduced cognitive component\n        self.social_coefficient = 1.5  # Balanced social component\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.9  # Slower cooling rate\n        self.chaotic_factor = 0.2  # Chaotic perturbation factor\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        def logistic_map(x):\n            return 4 * x * (1 - x)\n\n        chaotic_value = np.random.rand()\n\n        while self.evaluations < self.budget:\n            chaotic_value = logistic_map(chaotic_value)\n            for i in range(self.population_size):\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + self.chaotic_factor * chaotic_value * (np.random.rand(self.dim) - 0.5))\n\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n            self.inertia_weight = 0.6 + 0.1 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveChaotic", "description": "An Enhanced Quantum-inspired PSO with adaptive inertia and chaotic perturbation for improved exploration and convergence.", "configspace": "", "generation": 34, "fitness": 0.24706532854057028, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveChaotic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.43547409645633184, 0.43801183292278234, 0.41525417707853685, 0.4276556454808279, 0.4104190117389206, 0.41523091653641997, 0.40897799356490483, 0.41636735829365445, 0.4450123649123745, 0.029253122853363345, 0.08046750055242269, 0.06796074513848993, 0.10785189981430832, 0.07132408232662513, 0.02328412954029513, 0.10450834429877287, 0.06758757997733933, 0.04957452661011652, 0.11264338482159242, 0.21816952570878534, 0.126610791471508, 0.1391209590596152, 0.1391220897817924, 0.11065861548044853, 0.15023505125339065, 0.1608488954610413, 0.1271254316182474, 0.11893539361995153, 0.12817447442883512, 0.11592153042155573, 0.10355730884796632, 0.1335929110181523, 0.09620810100153776, 0.08255014274951622, 0.13911281362624084, 0.08029561580016253, 0.967475372515069, 0.968521933532529, 0.9590637184892713, 0.9594315639145341, 0.9597864888963197, 0.9554886569338468, 0.9676471910840817, 0.9527007324383037, 0.9562287862665424, 0.3770615192298513, 0.3479680333637174, 0.3333164324543142, 0.37261494099555303, 0.32080993176639017, 0.3602078066483161, 0.36960894498433317, 0.3350778907386758, 0.3363365833329257, 0.7122762572165303, 0.22633615350243463, 0.22509629812757015, 0.591160772516696, 0.5176286010797431, 0.2774364628326188, 0.6014198458171457, 0.5528750094744018, 0.402581279440834, 0.21391260797211475, 0.17603383511761517, 0.19919578163919738, 0.17861982406409482, 0.13161435204882033, 0.11862317077850015, 0.18288364379682354, 0.21534076167209937, 0.22839570315238034, 0.2068704161590943, 0.21281895796103723, 0.13073329613184104, 0.2493768602181533, 0.1937211907786891, 0.21901579367426627, 0.2542709237451547, 0.1795247487276852, 0.24359869683813884, 0.001153150226992472, 0.0023899126010208382, 0.055743039340345746, 0.08476609922766642, 0.0067952343642259105, 9.999999999998899e-05, 0.0006433123927687134, 9.999999999998899e-05, 0.04969027546579796, 0.1453888664287868, 0.0541297541816681, 0.1076820809402067, 0.10950618251283872, 0.03315763227828172, 0.04253909279811652, 0.09919482921678424, 0.1156166157261983, 0.05061428579792138, 0.0025910502290708015, 0.00941824399372504, 0.033039193552699575, 0.017099728356392396, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007554120665903552, 0.001639661939053072, 0.0001016370955300161, 0.13529508600676765, 0.08992697894099089, 0.14127628120271507, 0.09171959203649327, 0.13305200516899207, 0.08797355487317526, 0.13148987163845072, 0.07553534266732453, 0.07981454783125086, 0.3930919066854772, 0.3888524492831419, 0.4450991780967194, 0.41631561904470904, 0.3718871596634955, 0.39774311838746124, 0.38636084316573827, 0.3768593042961239, 0.4000207481809259, 0.12749652484509988, 0.06780942574337223, 0.11346338735769901, 0.14583511317726006, 0.13156127857063604, 0.14241830075499928, 0.07029191706442528, 0.09709024463790594, 0.09143711775432983, 0.2609683993376042, 0.2821826195671441, 0.1933390217731461, 0.31242269655647015, 0.3067419254016288, 0.19551289918082737, 0.296592042876498, 0.18034689897819867, 0.3249036926830948, 0.29460440122549825, 0.30159506057986474, 0.3022024854858172, 0.3209845365564352, 0.28663170977166974, 0.30115550359544363, 0.29387601207727776, 0.2843095466773753, 0.2909029859190254, 0.24756842461558382, 0.24891280000600757, 0.21171895153354248, 0.21989866002128844, 0.25144480163898075, 0.25944570390918986, 0.22862241346920886, 0.2564616126509668, 0.2616483089002467, 0.2277915315888005, 0.20813443673351562, 0.21619994668599318, 0.24048674070819476, 0.22917922119619794, 0.23069154511186263, 0.30756578164709336, 0.2165353844255743, 0.2396643992656874, 0.18483272472478862, 0.2018560102286805, 0.2061171214862908, 0.22185769869173777, 0.20958690537671465, 0.20893388782897226, 0.19770280663996842, 0.34969930904615887, 0.3273792601632004, 0.17827232240524904, 0.17599425087320308, 0.1659724010650323, 0.6824401508414941, 0.20001462654431656, 0.14809571764093488, 0.6352730802038862, 0.16938733386184235, 0.5990239060867695, 0.628347442556592, 0.2125185048254955, 0.7162544934123605, 0.2096964181384684, 0.6030492644459671, 0.1540255857123901, 0.10501179912654202, 0.5960757756403192, 0.5885775874514341, 0.17767117743615057, 0.1879459311335936, 0.222985061857351, 0.18169676836765492, 0.1938111190990991, 0.18959033043259843, 0.19089804336975535, 0.17660918212417198, 0.18203433837977356, 0.08242053873720712, 0.08074927045796099, 0.09292932849696722, 0.08417366590239139, 0.0937417106826024, 0.09134278085624026, 0.06742660137744882, 0.08666426074352129, 0.08460304379547812]}, "mutation_prompt": null}
{"id": "14f09935-d5e7-4ca9-b3c2-4c08f4be031b", "solution": "import numpy as np\n\nclass HybridQuantumPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for more diversity\n        self.inertia_weight = 0.5  # Adjusted inertia weight for dynamic control\n        self.cognitive_coefficient = 1.8  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Modified social component for exploration\n        self.initial_temp = 2.0  # Higher initial temperature for exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for temperature reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired nonlinear update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.randn(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.randn(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sin(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.3 + 0.4 * (self.budget - self.evaluations) / self.budget  # Expanded dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridQuantumPSO_AdaptiveSA", "description": "Hybrid Quantum PSO with Adaptive SA and Non-linear Velocity Control for enhanced convergence and global search.", "configspace": "", "generation": 35, "fitness": 0.10430173887444762, "feedback": "The algorithm HybridQuantumPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.1708088622880578, 0.16196251136150408, 0.16916661052926518, 0.15892217695229338, 0.16511562309912386, 0.1388991368743675, 0.1589044419012431, 0.16925867988860666, 0.2019227235866834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03552987650069339, 0.04061933791476624, 0.055744117135896554, 0.03652983304197421, 0.03848728606031204, 0.05043986536278755, 0.04583468882158137, 0.039254206754656296, 0.04124493887424541, 0.029307556970874393, 0.04546459260943281, 0.02570914513325373, 0.025845163250164838, 0.03293546946159365, 0.025847768867462206, 0.03719890048998786, 0.030682903360924163, 0.03586326880006696, 0.42939556951991675, 0.41480850987065465, 0.12017191960675555, 0.6699582735357723, 0.5272670002840829, 0.4907207463733837, 0.43263565002883375, 0.4425599990771768, 0.6028643960798481, 0.10408539360708513, 0.08189898969068543, 0.07224783180180439, 0.06593808049931627, 0.08640568330737164, 0.09780424107522467, 0.06475580976564743, 0.061223904060456524, 0.07255978753462733, 0.11291510392527526, 0.13907686636355832, 0.11426382991132866, 0.13537601987897652, 0.1276575923686618, 0.12657468495433244, 0.13539632187018613, 0.11928831297414089, 0.13286724363139202, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006464178083238625, 9.999999999998899e-05, 0.04857795032754442, 0.01222801750249125, 0.006400376991764989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011977418826718211, 9.999999999998899e-05, 0.014216925077665699, 0.00014502801947569033, 0.006057734061328701, 0.00883146883839725, 9.999999999998899e-05, 0.08373341584552474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0325351020011736, 0.08729911871684182, 0.07914310578720851, 0.07107340628282421, 0.09573356363535002, 0.06038230395844402, 0.055986225114699084, 0.05649805707996236, 0.04576697749333858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009137613864964589, 9.999999999998899e-05, 0.0055811937378570375, 9.999999999998899e-05, 0.009950123028219293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00039865746217460085, 0.17813516767116322, 0.1775990915461675, 0.19847552535299606, 0.19794218587729373, 0.18078275857202863, 0.18338813357063477, 0.20192828124547557, 0.17084614383857477, 0.2073004383693937, 0.035478378972364055, 0.031141274524674745, 0.041592276837609465, 0.0477366057316313, 0.03973402260697678, 0.04821108490532766, 0.050357025678611333, 0.041791149841216235, 0.040227968907823874, 0.13270383581013134, 0.1353407091008756, 0.1422349742120257, 0.14682890182089614, 0.15266963712129278, 0.1405703959111102, 0.16029840105109283, 0.12901052410834601, 0.14406162424093016, 0.15626491793403363, 0.14810853606158814, 0.16333894126022575, 0.1602661567280791, 0.16925015828450274, 0.15484761859420282, 0.17161765735867773, 0.17425096571877152, 0.16525892555082433, 0.09275219874854135, 0.11958645219656006, 0.11073072762900049, 0.10508477233692415, 0.12463466329667883, 0.1217187580075606, 0.09932751769590309, 0.12081190114092677, 0.11336035249460275, 0.1604614955300362, 0.17047069693715655, 0.15290498338325775, 0.15465771396154182, 0.1454434257226218, 0.16607458588833834, 0.13918903269606397, 0.14719524060818734, 0.14850260807462623, 0.146022601818811, 0.14793170803854794, 0.13260162878547543, 0.1368669905381148, 0.12200631931889327, 0.1410844479147525, 0.15333015359530222, 0.12691818245739073, 0.1475802919626421, 0.1380993450328435, 0.1695451877380565, 0.2584091637840027, 0.15956123769033403, 0.16695197968899644, 0.17189748365272084, 0.1439718728888394, 0.1553687291353253, 0.1424125179175364, 0.1565733591774855, 0.130313242642897, 0.1611820800432332, 0.13968262396455355, 0.17834042828806362, 0.15403052804408157, 0.1318682439746779, 0.181912658819518, 0.22911639922719673, 0.18673777479433917, 0.17562208634631038, 0.19302462343576776, 0.18678829634469962, 0.19095573739225336, 0.19345971250590654, 0.18068036610732685, 0.18823802154401492, 0.1827555937501959, 0.04938404388640649, 0.05253159951291386, 0.05665610220786821, 0.0455751643110065, 0.04577916370380897, 0.07427424209487732, 0.043656925254757506, 0.04474905532442519, 0.05593636448527728]}, "mutation_prompt": null}
{"id": "f0c14ff3-6188-4530-ae10-6c201dc952ea", "solution": "import numpy as np\n\nclass EnhancedQuantumPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40\n        self.inertia_weight = 0.7  # Slightly increased inertia weight for better balance\n        self.cognitive_coefficient = 1.8  # Reduced cognitive component for moderated personal search\n        self.social_coefficient = 1.2  # Increased social component for more collaboration\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.9  # Slightly slower cooling rate for gradual temperature decrease\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired velocity update with differential exploration\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + 0.1 * np.random.rand(self.dim) * (population[i] - population[np.random.randint(self.population_size)]))\n                \n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedQuantumPSO_ADE", "description": "Enhanced Quantum-inspired PSO with Adaptive Differential Exploration and Dynamic Cooling for improved convergence.", "configspace": "", "generation": 36, "fitness": 0.31926444973583934, "feedback": "The algorithm EnhancedQuantumPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.748771668564737, 0.7242329795058537, 0.7673977427067697, 0.7449330424805434, 0.18922624549859535, 0.7576953327748082, 0.7577712472195246, 0.8023442642923122, 0.7815344647031068, 0.5743110611354685, 0.6063114002207092, 0.5918789571390894, 0.598642312511509, 0.5928110195241489, 0.5974153398676592, 0.047441652837389325, 0.6183826497187284, 0.5941440916271281, 0.2446388323669082, 0.15891528960280343, 0.17034481072769636, 0.14858088789681, 0.12754455751901717, 0.155613369017908, 0.13747999704037817, 0.178939436373309, 0.14252448130297857, 0.1391632720799011, 0.08592996867186031, 0.11002696594086903, 0.14582046818665073, 0.11921903297334979, 0.11295863961279573, 0.12484027907181283, 0.15071245702240943, 0.10797302416227195, 0.9574113390437229, 0.965596577170194, 0.9609583073006392, 0.9554558658774251, 0.9413637540601753, 0.950749897273087, 0.9642718949019129, 0.9283571295835965, 0.9589039080184574, 0.6715581526479045, 0.6611297476418101, 0.5657744543038281, 0.6334721524260434, 0.693429331257686, 0.6603994384329894, 0.643285394128265, 0.5914233627082197, 0.6667530260341494, 0.1709780904289946, 0.8766565735797387, 0.7542136341186906, 0.27869949423120477, 0.21212545927880622, 0.21219781879382882, 0.17453274502281968, 0.1752475857223439, 0.23575933862442355, 0.12952664041042283, 0.29305202849799517, 0.27187460921368023, 0.26404761978291624, 0.28962306757002354, 0.18845656928086307, 0.2617383113237285, 0.4004645702950532, 0.3222068096433336, 0.23312644589419773, 0.1335385964368332, 0.2446708949998191, 0.22807552580262458, 0.33786827728924174, 0.13373422676329394, 0.29688465534440356, 0.33734001540768677, 0.26864840855083194, 0.0041672239517407395, 0.05801877004415601, 0.008405153600743898, 9.999999999998899e-05, 0.006207950933408535, 9.999999999998899e-05, 0.005636079997663579, 9.999999999998899e-05, 0.014953352959660826, 0.10061205150618535, 0.06466853616035184, 0.07219729870202518, 0.09767895279760941, 0.05395177093916648, 0.05205233807543519, 0.1000553415214176, 0.10871006501271807, 0.0741192690993594, 0.1526951716766758, 0.18414638535038108, 0.08399537907275734, 0.22183844392475383, 0.08761851736614301, 0.07380272083870154, 0.09643626362715019, 0.10774900238240714, 0.1417042928741593, 0.2069033803360386, 0.2863439945806354, 0.14397702900384157, 0.11873662742988689, 0.21342397361033683, 0.08842427000063868, 0.21644833941269603, 0.19335506111670464, 0.08282227785776464, 0.5762912839798013, 0.511874317994429, 0.47902140702042784, 0.5221971256217139, 0.5323831202425435, 0.5573144009849251, 0.508826552214215, 0.5456471230665652, 0.5424875833494556, 0.14342042646155373, 0.10926952273449353, 0.11386202315471294, 0.12236191922346806, 0.07891666935648167, 0.10587566836933415, 0.12020478427385839, 0.11009794510729076, 0.09759386328820796, 0.352526229718526, 0.2852829817102336, 0.19152255296779663, 0.23452115125690443, 0.31709625835221045, 0.23685599399452995, 0.3064289388414808, 0.2980360738907468, 0.32889558936825414, 0.38786821981441955, 0.3202473667361463, 0.3659233301215239, 0.36031495788835366, 0.3675600105289436, 0.31170969973686347, 0.2997381614389061, 0.35091843472304385, 0.4085262035598607, 0.22010588977126166, 0.27491327798935683, 0.2657591299682709, 0.22209456872003908, 0.2444906607270516, 0.2209721706291421, 0.36249937635268137, 0.31453564516463706, 0.3316465990233668, 0.21040587996596494, 0.2521788893421244, 0.22229307853826508, 0.22973967714160082, 0.24052899903485847, 0.17887209477166266, 0.22102980158180363, 0.20667366988981906, 0.24087778950823457, 0.1896942208663257, 0.7263888666844447, 0.18081703886524092, 0.25085156910906403, 0.6744538350464296, 0.19119721157557268, 0.19773360067749746, 0.22459464714306976, 0.21413313323341998, 0.8574100151817395, 0.1757298039088253, 0.1863881601899321, 0.8146716559818696, 0.20042453801198923, 0.8119019161925988, 0.14233711311604946, 0.1585585942044092, 0.8373987167670909, 0.8591686897605779, 0.21249663635593707, 0.8301666131557012, 0.2097513432884751, 0.2651134504975413, 0.155434678533369, 0.6167492526436218, 0.16661446446115646, 0.8246857799896075, 0.19944936557230308, 0.18905825966893075, 0.20955563222823126, 0.18133304386992277, 0.18956710305192126, 0.1902116000535008, 0.20773309861110123, 0.20549696049109978, 0.1850337682417632, 0.0840623226900652, 0.09297444930309884, 0.07898494138428303, 0.09768992526019649, 0.09098347927765538, 0.09112701629789521, 0.07693491280664144, 0.0876716512127812, 0.09294470548695988]}, "mutation_prompt": null}
{"id": "d474652e-ca3b-4532-abac-173ecb5a30cc", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_StochasticTunneling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better diversity\n        self.inertia_weight = 0.7  # Further dynamic adaptation for inertia weight\n        self.cognitive_coefficient = 1.8  # Balanced cognitive component\n        self.social_coefficient = 1.2  # Enhanced social component for collaboration\n        self.initial_temp = 1.5  # Higher initial temperature for more exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for gradual temperature reduction\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Increased velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp(-abs(personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n            self.inertia_weight = 0.5 + 0.3 * np.tanh((self.budget - self.evaluations) / self.budget)\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_StochasticTunneling", "description": "A Quantum-inspired PSO further enhanced with stochastic tunneling and adaptive neighborhood influence for improved convergence in diverse landscapes.", "configspace": "", "generation": 37, "fitness": 0.30092752811635753, "feedback": "The algorithm QuantumInspiredPSO_StochasticTunneling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.6096332074007507, 0.6619022918915825, 0.6838756809886243, 0.6825880859028055, 0.6988716134593717, 0.6637354342827623, 0.6276827115806451, 0.6728173959492506, 0.6766415246419161, 0.4855572849225608, 0.49237086790009177, 0.4656977250833003, 0.4675947440432241, 0.504536427771392, 0.5030887051138897, 0.5128671572938748, 0.4870598541718919, 0.4678131999528914, 0.16790735043570204, 0.13323594728103194, 0.1796868863785872, 0.11039257631856636, 0.15426241191687462, 0.15142954656199004, 0.12063070156622602, 0.15385050120525412, 0.13587165800610346, 0.1217872097557181, 0.10785436318966946, 0.10227490080476598, 0.11500334085330544, 0.14244789577601058, 0.149747307070894, 0.13996049537771982, 0.1084593570493475, 0.13705602247175663, 0.9541825185909938, 0.9555530505671257, 0.963457029099027, 0.9412648486418828, 0.9330728592873734, 0.9523096945560918, 0.9534723130200438, 0.9099789666457119, 0.9535622105532565, 0.585877334955498, 0.5098284738251546, 0.48036543059337633, 0.6291515019632656, 0.39090209452745417, 0.15230323675802593, 0.5024884416855555, 0.08717416500549768, 0.5745194391412137, 0.3914779273568856, 0.361725574636111, 0.22464194434895424, 0.1932804556096992, 0.2750150902369364, 0.35382729867086515, 0.21471680534572457, 0.22610996378919457, 0.23444303984238668, 0.23589186512742089, 0.24730435481071167, 0.11398735643612856, 0.2846372480183781, 0.33605384306261654, 0.1224438525477235, 0.1302647693984711, 0.25497198605697213, 0.4062937765661888, 0.238113783853379, 0.21895276407017128, 0.11624272334972174, 0.25286988257201615, 0.12316707895152945, 0.24209848334131334, 0.28247459761648797, 0.257863122106224, 0.2446455522144919, 0.010327891963533009, 0.01658678362563637, 9.999999999998899e-05, 0.035641930511340014, 0.008490689765405679, 0.007817049701267065, 9.999999999998899e-05, 0.0023081048814632688, 0.1429658073620168, 0.14504333621854626, 0.09386177681157093, 0.08140114685833066, 0.07989324119783692, 0.05611332594848206, 0.04675306149061309, 0.10609082948279325, 0.062328678603779, 0.12723777194474228, 0.08715818887240856, 0.031297706848208096, 0.10923038688508546, 0.31205681047940315, 0.08677487163476139, 0.21244493538807663, 0.09271253315632744, 0.22436094917830174, 0.066542234610243, 0.18286260335276572, 0.14116409263963292, 0.27286298684485044, 0.03284601645315122, 0.20331365844427796, 0.11943151282761388, 0.08137160925044151, 0.12344467419104044, 0.13179225040167353, 0.45105388760858245, 0.5437837939279756, 0.5183539963530204, 0.5171688499310515, 0.46398069201088277, 0.5376909846189971, 0.49663431191772867, 0.5115729892665899, 0.5166009612163356, 0.09544456169539228, 0.05963485458580908, 0.12015893292077051, 0.15275390924556864, 0.12012251336410318, 0.14277878395784827, 0.13891491365442488, 0.12181025625283382, 0.09219037001540131, 0.2029824256635363, 0.268614808218565, 0.16212865842277935, 0.23265002421719394, 0.26183489900472745, 0.2901308265536847, 0.26942637246574297, 0.3611723670852688, 0.39725222529894144, 0.37299481637310783, 0.2866800428016473, 0.3386952373009805, 0.32784502190646514, 0.3290377883322835, 0.3248326180320068, 0.30793920456710644, 0.31323604626274304, 0.3571012187892909, 0.23882623206220033, 0.2887994418001445, 0.25529730562609054, 0.17937052581640034, 0.3557484313435224, 0.3666846805180646, 0.284608598024367, 0.24891885688680349, 0.21391917172074704, 0.2237074805956496, 0.23473464652844855, 0.19230058336486067, 0.21293619994529267, 0.19019817477077916, 0.247456759240698, 0.26064454508992807, 0.22334233084166022, 0.27785224478222026, 0.2054545984614642, 0.17655411345218186, 0.20675910940483078, 0.22200917627932604, 0.22073721552217918, 0.18672133183158046, 0.17732896398849718, 0.220453706914866, 0.2005398951364099, 0.7818056157193405, 0.18605171497397266, 0.18385929938270917, 0.8212995455110876, 0.20020731266051794, 0.808504807373966, 0.14165778451063793, 0.1625254561778613, 0.811204480921357, 0.8029189596532271, 0.21181880089761074, 0.6900545739075784, 0.6610281013982726, 0.7185824026828405, 0.1512603826494191, 0.754951654709087, 0.7411863353837176, 0.7758089601099272, 0.20740306218745885, 0.2105747944329568, 0.17765191569337535, 0.19197240342038202, 0.19738566795298684, 0.26041544474072853, 0.2022296068603101, 0.22047626867318226, 0.20466707976420273, 0.10411484955964823, 0.09793207400961235, 0.1096230210328516, 0.09878548699236489, 0.08813912500006649, 0.08467080558095674, 0.10696044828443285, 0.09479503110405474, 0.07681373388270518]}, "mutation_prompt": null}
{"id": "a06a7f3f-89f9-4c42-8aa6-a65d367883b8", "solution": "import numpy as np\n\nclass QuantumEnhancedPSO_StochasticPerturbations:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for diversity\n        self.inertia_weight = 0.7  # Dynamic inertia weight for variability\n        self.cognitive_coefficient = 1.5  # Adjusted for better personal search\n        self.social_coefficient = 1.5  # Balanced social component\n        self.initial_temp = 1.0  # Standard initial temperature for exploration\n        self.cooling_rate = 0.9  # Slower cooling for extended exploration\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                perturbation = np.random.normal(0, 0.1, self.dim)  # Introduce stochastic perturbation\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])) + perturbation, self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Expanded dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumEnhancedPSO_StochasticPerturbations", "description": "Leveraging a Quantum-inspired PSO with adaptive parameters and simulated annealing, incorporating enhanced exploration through dynamic stochastic perturbations.", "configspace": "", "generation": 38, "fitness": 0.21761914500880955, "feedback": "The algorithm QuantumEnhancedPSO_StochasticPerturbations got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.40185387956187923, 0.4155869482094101, 0.3875494717958661, 0.4146888999548479, 0.3916279049442777, 0.3959169284184181, 0.4096215725058785, 0.3768531946707191, 0.3768361450037758, 0.020924107282682458, 0.04940772182837261, 0.007254025612287829, 9.999999999998899e-05, 0.04799160529361801, 0.013171492040150001, 9.999999999998899e-05, 0.03489961631614713, 9.999999999998899e-05, 0.09871254560591147, 0.11817738524439769, 0.0990673961462204, 0.10465929361042581, 0.10001515152574925, 0.13761794100473868, 0.07724715635424895, 0.11815516641293966, 0.15189147395403357, 0.09788203713883192, 0.11562069774390837, 0.10492951148790941, 0.11628256120502412, 0.1032480926229491, 0.09296268866027091, 0.13026467685968512, 0.12153532493506558, 0.09690376067001416, 0.9591904879757835, 0.9543659411587527, 0.9657831303598715, 0.9431067213915861, 0.94609852486296, 0.9468473500178914, 0.9531800951522609, 0.9110316098658662, 0.9518439291701518, 0.27588564084685374, 0.27607737562447343, 0.2710708787246906, 0.2918854060420627, 0.282823612003397, 0.27474780373593943, 0.28402664127549004, 0.28623494004170946, 0.33136581861762493, 0.6000555503778167, 0.22654317889258657, 0.2700631450032669, 0.3272432760105335, 0.2967326991109429, 0.2869606333113829, 0.24443882304585773, 0.26757764293506703, 0.3639331056427726, 0.18305340515127333, 0.12415673746634859, 0.14681661986708316, 0.11973598880392455, 0.18153457567440778, 0.1093368416867001, 0.16070990068173507, 0.16940999369935195, 0.1264413602153458, 0.16089358188113778, 0.12658535447777486, 0.11394517033541107, 0.15609552845134733, 0.10858346856733003, 0.16841449943181108, 0.1472332639672168, 0.18354752859519918, 0.11471068532772166, 0.01735289591375988, 9.999999999998899e-05, 9.999999999998899e-05, 0.040202789291799546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024922953635919676, 0.05810518168456835, 0.08338914244922657, 0.05043415413197416, 0.12580797962694235, 0.10300844444964274, 0.04659319858769417, 0.031246751360689773, 0.14763003619491843, 0.10167579302225027, 0.10725857187827237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10088594824258013, 0.07646358593168456, 0.1425983728418292, 0.055020711390026955, 0.10117953690269677, 0.08147867922319074, 0.10398440309043877, 0.0701002273954564, 0.07994161401900346, 0.3867555630632755, 0.3745878485480715, 0.3747659247210975, 0.3867656707685403, 0.36164500462536053, 0.3716970097958756, 0.37930526548302035, 0.3671664325704679, 0.3723566037373599, 0.10877649156007174, 0.07740059266291732, 0.13880651667551958, 0.10144312726919469, 0.141890027943552, 0.10797167634585458, 0.11201762362799239, 0.1292403794491349, 0.12624913167182406, 0.2195056777717399, 0.18346430256120705, 0.2889275625014798, 0.2690505542164795, 0.26426025041686685, 0.26969839587777966, 0.2386317592545708, 0.1552895149832122, 0.24790147990818112, 0.28340152369132876, 0.2781390627577166, 0.2683856281211877, 0.3003123882855332, 0.28318100203502383, 0.3272206032422912, 0.2600671519567115, 0.28350435603939717, 0.27604631076164876, 0.17305006504705833, 0.23227987040505726, 0.21589791130041014, 0.18328737171873977, 0.17594439716269006, 0.23885597560201366, 0.2263458986850322, 0.20091175590651633, 0.2205881603892036, 0.2014528252588228, 0.18830545048387126, 0.2355269071647733, 0.21980561570514479, 0.251662123180168, 0.24404940735656966, 0.2511943522777902, 0.202636982597318, 0.20982893366567512, 0.21029803607265318, 0.23448872130034215, 0.19456921404984362, 0.27551450416293455, 0.22551789809234712, 0.20602842109391384, 0.21053097402272314, 0.20557745311664088, 0.20934707127658936, 0.5592568919547105, 0.1861435099616503, 0.17556118768768725, 0.5580138217683754, 0.16731751933541417, 0.16643415226355895, 0.16357466577312496, 0.16417519795397917, 0.17618340251929132, 0.5179313623984594, 0.21095008744837962, 0.49230661560391464, 0.1677563583866417, 0.16799974422185693, 0.15312804548145764, 0.5662180045540104, 0.4871053063715025, 0.5017665511600229, 0.18697259099542884, 0.19205184777628526, 0.18641237416505785, 0.17221427758156882, 0.18303607337787609, 0.18793770586415248, 0.18304244144241466, 0.1772902747223084, 0.18396348099182513, 0.0804317759754054, 0.08316983748805795, 0.09255335847251478, 0.0772440499133843, 0.08582790097085102, 0.09230079194536778, 0.08707426608462498, 0.08260860009570004, 0.0844744499353004]}, "mutation_prompt": null}
{"id": "935edd12-e132-466d-ae20-eb7bf6c4b51f", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EliteAM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for more diversity\n        self.inertia_weight = 0.7  # Enhanced inertia weight for dynamic response\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.5  # Balanced social component for exploration\n        self.initial_temp = 1.0  # Standard initial temperature for exploration\n        self.cooling_rate = 0.9  # Moderate cooling rate for temperature reduction\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        elite = None\n        elite_fitness = float('inf')\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n                # Elite selection\n                if fitness < elite_fitness:\n                    elite = population[i].copy()\n                    elite_fitness = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n            # Occasionally replace worst particle with elite\n            if self.evaluations % (self.population_size * 2) == 0 and elite is not None:\n                worst_idx = np.argmax(personal_best_fitness)\n                population[worst_idx] = elite\n                personal_best[worst_idx] = elite\n                personal_best_fitness[worst_idx] = elite_fitness\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EliteAM", "description": "A Quantum-inspired PSO with elite selection and adaptive momentum, enhancing convergence through strategic individual preservation.", "configspace": "", "generation": 39, "fitness": 0.30833479365459243, "feedback": "The algorithm QuantumInspiredPSO_EliteAM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.6056128980724407, 0.5796406761015722, 0.6641129186559855, 0.6022249117769756, 0.6608533011967126, 0.7122162322749985, 0.6843345112337381, 0.6868189799626658, 0.6006996330297099, 0.5408736546714907, 0.5035436380454499, 0.5294332529379708, 0.482900953756507, 0.47841439558442767, 0.5105555384720568, 0.5304246875374735, 0.5573085325792003, 0.5298963970524719, 0.1400983536750633, 0.15114557978705012, 0.15783286180417466, 0.10530106855788524, 0.15649447247104786, 0.14184442251622875, 0.10851016717886142, 0.608356218097127, 0.15687051040896527, 0.11397671288498112, 0.10689460293897957, 0.13636516654084463, 0.06669822729153474, 0.1124935607701445, 0.11251843229959124, 0.12038963645230527, 0.13107256285588975, 0.1379530808990287, 0.9631550663151183, 0.9575360934727623, 0.971909970682146, 0.9481668923978259, 0.9475430109105182, 0.9331742311943444, 0.9540350170697457, 0.9460239457522512, 0.9635291588611227, 0.6265528103580851, 0.6599694032715014, 0.057905137812895524, 0.6247786456021045, 0.15220114851298971, 0.6506870409602428, 0.6205694199962868, 0.5891266011884632, 0.6389457182028027, 0.25354401905962354, 0.8026916045273997, 0.8249887657022364, 0.19517714287585364, 0.20567368361661997, 0.20544137526217698, 0.130498134505854, 0.7712127593287735, 0.23319906205227092, 0.30736144010366917, 0.2902356147726678, 0.3530911254689648, 0.12016094347107686, 0.32815490577524886, 0.31564663930330294, 0.2529012551622457, 0.2905157225469336, 0.2659132581536765, 0.1316024353856512, 0.2653351141818191, 0.2518789689614971, 0.28453358706014, 0.3364602550756871, 0.2960724366659998, 0.2866174669043656, 0.2696048444949988, 0.18188647543884617, 0.019700200781929245, 0.007695888609191015, 9.999999999998899e-05, 0.0013396318185601164, 9.999999999998899e-05, 9.999999999998899e-05, 0.15420029372366284, 9.999999999998899e-05, 0.22012279075670205, 0.13028285034455944, 0.09329847227235988, 0.14158469486050107, 0.06725553659822603, 0.0372245865528108, 0.022471128497773996, 0.06791421681494558, 0.10735614081730072, 0.10514229338906989, 0.24043244395925012, 0.1006637507028636, 0.3010952326949631, 0.08791391483419031, 0.16240424670393327, 0.1178128591562918, 0.15746067055991375, 0.13680279771046755, 0.06651289535377036, 0.27222835269783796, 0.1440808026834206, 0.23708526988994472, 0.046931160336156075, 0.1209918889338496, 0.08512729677153352, 0.29797584493823437, 0.08088700808526994, 0.081686155650315, 0.4804996654778235, 0.4970462933793588, 0.4963754288388902, 0.49631749650595713, 0.4925782204561806, 0.4696665176189887, 0.5295391393161797, 0.49840564708205815, 0.5299373042892317, 0.15346171019183497, 0.07715414194937187, 0.07968169214560328, 0.05543173927123768, 0.13004041718434634, 0.11018413757349732, 0.09050850102887975, 0.13231531287738674, 0.09948630015522453, 0.1851842531972442, 0.28548732978194147, 0.20738839990191293, 0.20634558583374485, 0.5594602716045969, 0.26582158626270513, 0.42622399135461386, 0.18648258332501266, 0.19681970172966456, 0.3311527635912833, 0.42744801332021953, 0.36618741407731437, 0.385905825400495, 0.3670792162753581, 0.35457232761730295, 0.38521567759683495, 0.33000214522430893, 0.38192327136083437, 0.26815658525347164, 0.23510902331597838, 0.25395922433096096, 0.15167169710768302, 0.19709745148195956, 0.28129158952694333, 0.1561840737003598, 0.277145462862617, 0.27945567650011893, 0.21036962556826133, 0.17370251107900492, 0.22854168903193484, 0.25389016011408716, 0.23319702781257035, 0.2606689813491977, 0.2143224021126946, 0.21624609162805086, 0.2487042514852188, 0.5502517812312038, 0.20908294241378833, 0.19047253893512206, 0.2073479605278783, 0.22088585728096255, 0.20696655554195587, 0.2199451921526725, 0.20313185101854414, 0.21919047528860014, 0.8053044133814428, 0.18629149676415968, 0.14688724177923307, 0.7978125704528539, 0.20011623258957356, 0.7956224732730555, 0.14206052497572252, 0.17754380679507054, 0.15793085561841103, 0.8113252989555879, 0.2124421201062361, 0.07352621342521248, 0.8086753424399876, 0.1677824842254193, 0.1538749317716902, 0.7646000896052352, 0.16547642215039027, 0.6863206214385058, 0.20101221943112746, 0.19289905001506324, 0.23153683881273435, 0.28323696633175344, 0.20974038091650615, 0.19263427067241323, 0.22755769591047614, 0.21791141730982877, 0.25462852092283317, 0.10159367179581391, 0.07257502848229092, 0.1042890746210604, 0.10231214393040478, 0.10527792710443806, 0.10395864169452818, 0.12086447741598039, 0.10296014970302603, 0.09244469683447054]}, "mutation_prompt": null}
{"id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 40, "fitness": 0.32461316509706345, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "f73026b9-160e-47d6-a118-48ad227e3c68", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "db27d305-1473-4d1a-9b3a-9345408d1b2e", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_VNS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better diversity\n        self.inertia_weight = 0.6  # Adjusted inertia for refined velocity balance\n        self.cognitive_coefficient = 1.7  # Emphasized cognitive component for personal search\n        self.social_coefficient = 1.3  # Slightly higher social component for exploration\n        self.initial_temp = 1.0  # Balanced initial temperature for exploration\n        self.cooling_rate = 0.85  # Faster cooling rate for quicker convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.sin(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Implementing Variable Neighborhood Search\n            if np.random.rand() < 0.3:  # Introduce randomization to search strategy\n                neighborhood_size = np.random.randint(1, 3)  # Random neighborhood size\n                for j in range(neighborhood_size):\n                    neighbor = np.clip(personal_best[global_best_idx] + np.random.normal(0, 0.1, self.dim), self.bounds[0], self.bounds[1])\n                    neighbor_fitness = func(neighbor)\n                    self.evaluations += 1\n                    if neighbor_fitness < personal_best_fitness[global_best_idx]:\n                        personal_best[global_best_idx] = neighbor\n                        personal_best_fitness[global_best_idx] = neighbor_fitness\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # More dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_VNS", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Variable Neighborhood Search for Improved Solution Quality.", "configspace": "", "generation": 41, "fitness": 0.31773975054946507, "feedback": "The algorithm QuantumInspiredPSO_VNS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7459537713401789, 0.7550586354800684, 0.7882719949870911, 0.7084640259918771, 0.7320908447458522, 0.6975392026373097, 0.7443662142719076, 0.7224458076022308, 0.7259362415927768, 0.5843934344945427, 0.5827695574406456, 0.5877040670943385, 0.6063443868657143, 0.5887065037185879, 0.5936036325845704, 0.5819997516098803, 0.6048249048635492, 0.5740939959896871, 0.15684062944637422, 0.16964596840987456, 0.15057237459006778, 0.11922943165872024, 0.17351132474132358, 0.12144409018389357, 0.1315141607246869, 0.1386987714153285, 0.5966811574845737, 0.13757694877686333, 0.137222952663266, 0.13439439321678037, 0.16413139346888128, 0.14875672572444876, 0.11183200364028212, 0.17562414186859465, 0.1063298039218824, 0.15092183356569822, 0.9129661464272525, 0.9276619705039462, 0.9512869457661666, 0.9284647889443219, 0.9301867359464059, 0.9355356860695399, 0.9476611195656115, 0.9267800901533412, 0.927858976379633, 0.6908250971694535, 0.6150208139221047, 0.648402889157164, 0.5465051679516852, 0.613908119199821, 0.6796731741270712, 0.6905793746061974, 0.6574647694769407, 0.6663704021283747, 0.38142388374908687, 0.2282023901414112, 0.22750240316991843, 0.19408920752806824, 0.21043728948659168, 0.2110327682268205, 0.15093318753189522, 0.2289376734066112, 0.22689375296440395, 0.15236218628422082, 0.33505332531412446, 0.1284716511045828, 0.2307727472662544, 0.23865217797575278, 0.12405155794375966, 0.2416093524873103, 0.23523581168203622, 0.254279135769948, 0.2357485496596463, 0.24411426684370585, 0.22497299734785337, 0.236224013237471, 0.13209610283666917, 0.24779540999761962, 0.25875877311517737, 0.2742804306408405, 0.265109398513492, 9.999999999998899e-05, 0.09330043081462813, 0.07008353247330812, 0.03724952248351365, 0.0003627478782740612, 9.999999999998899e-05, 0.010592838992361076, 0.029849990698806006, 0.008764998682453395, 0.14011269775657442, 0.11012817438900402, 0.12024307721553618, 0.06539919849477316, 0.043512788040703354, 0.05450034482988808, 0.13422524845193107, 0.13433216263463932, 0.16295829591986344, 0.15368184810426555, 0.1729750158122908, 0.16393329606344087, 0.11195708286955175, 0.2974268960045675, 0.2051894697189971, 0.24650483134558576, 0.1396909458204063, 0.06972800672720392, 0.21534472325832654, 0.08469599205954204, 0.26850437970064733, 0.10755171740423997, 0.17848114894002032, 0.07837071361041636, 0.18473721892304018, 0.12464862781762787, 0.11306605428122185, 0.5238507188410543, 0.4768934510682419, 0.49244747430741576, 0.48256356604573325, 0.4871971083203033, 0.524767261485729, 0.5178589392174895, 0.5365702550057732, 0.5800553254058353, 0.10157664907950315, 0.128441722537736, 0.08843631094454663, 0.1498035863862146, 0.10636376584040774, 0.15484079907559956, 0.10247632008931595, 0.12323637270122068, 0.14311311247844827, 0.43817141241996904, 0.41570535179284396, 0.19542006791225208, 0.157523587329084, 0.1721370702413948, 0.34309587527342633, 0.2308735909579953, 0.3830458976446639, 0.20756876816557757, 0.38973480011066763, 0.35963504514903366, 0.3467801116309841, 0.3635451581591941, 0.33833608308572016, 0.3503980497095517, 0.353857436385966, 0.2726073073665488, 0.41577874171451035, 0.25831170449101415, 0.3378231627945648, 0.2115192664307568, 0.2379818158095447, 0.23973683385755828, 0.3164354811691613, 0.26842248499192733, 0.23562325438281484, 0.21862896280837907, 0.23075888607102657, 0.24089986684093057, 0.24980667338386342, 0.2564191889966846, 0.27657228518375077, 0.2315262783893609, 0.2465551735300915, 0.22184293104424635, 0.21276650957253862, 0.195936844038598, 0.6859245795100559, 0.2472287706951073, 0.24875220685476518, 0.2135914654695359, 0.2433418670983356, 0.20194432712782917, 0.2124666766678962, 0.22260997989286457, 0.18613046450644477, 0.1842953734606344, 0.1681396988980156, 0.8692328894845878, 0.16782283173607315, 0.13589521184952535, 0.8456707098572009, 0.16319605673079662, 0.8095055867183438, 0.7832643896575479, 0.21121204732437626, 0.0734843334215457, 0.8488599791149172, 0.16756771149750982, 0.15245194702437437, 0.7492294180153851, 0.7789481116848499, 0.8046198028599609, 0.18702389510741924, 0.17783331430748728, 0.1959490162988572, 0.2021560980522943, 0.21383064192829593, 0.2013088825437983, 0.24097074400181917, 0.18788011436318397, 0.19700391657524663, 0.10332897637068306, 0.10269480301783385, 0.12479032566019033, 0.10641578814246877, 0.09136587203858049, 0.09559817879364618, 0.10371536468716291, 0.08786846388146063, 0.09639877933849239]}, "mutation_prompt": null}
{"id": "3e0c7074-5bad-41dc-91c4-a6829a4fa3eb", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "d19e1707-4620-42dd-82cc-7e10067ebf0a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "01c547af-2217-4040-98f6-91129a085c1c", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "cb579e3c-3313-4d74-9ce3-03bde4511526", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "ccbd7d34-63d4-4e70-a70c-0b790da92f90", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for improved exploration\n        self.cognitive_coefficient = 1.4  # Slightly lower cognitive component\n        self.social_coefficient = 1.3  # Enhanced social component for exploitation\n        self.initial_temp = 1.0  # Lower initial temperature for refined exploration\n        self.cooling_rate = 0.85  # More gradual cooling for comprehensive search\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # More flexible dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveCooling", "description": "A Quantum-inspired PSO using Dynamic SA and Adaptive Cooling for Enhanced Global and Local Search Balance.", "configspace": "", "generation": 46, "fitness": 0.3116017760662015, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7091555443352502, 0.7606957916827419, 0.7236123320339745, 0.7341778705685186, 0.7580033365363221, 0.7790773059454789, 0.7607102068183651, 0.7474675319735955, 0.7372865639307853, 0.5920199984059527, 0.6103395736810546, 0.5749661749717467, 0.5634472345698833, 0.6210590377923417, 0.6151790467747018, 0.631263237141334, 0.597021203671181, 0.5805253704891324, 0.1373583283277856, 0.123270044339581, 0.14309677070075943, 0.11564710679858548, 0.15747590762807318, 0.1530629230005559, 0.14095510607259143, 0.1496609403943403, 0.15021947864850294, 0.10721598463404969, 0.09470972134214406, 0.11348376610697652, 0.14778817116166387, 0.11678525221308356, 0.129347145693803, 0.14298326658936444, 0.11404383623732861, 0.07904264071856593, 0.9449935826965202, 0.9454564309346538, 0.9540770463817749, 0.9497260196785934, 0.9477423901156921, 0.9260387599656568, 0.9504393035382063, 0.9363174836717092, 0.953601324193003, 0.6887924991199501, 0.6817157566931493, 0.5850132011267914, 0.6315966660795043, 0.6318476246806294, 0.7099908581733425, 0.6937893313016371, 0.6885284243064738, 0.6936973867659264, 0.3582912079225785, 0.22957654238714453, 0.2271951978090586, 0.2080950997916533, 0.20624357855516962, 0.19263980167761396, 0.24220107672952707, 0.12620089078336205, 0.3890737668120037, 0.12615139380572726, 0.13191091011385803, 0.3706219935105558, 0.21778706355828537, 0.28220050177432854, 0.145166882250076, 0.24344576368198267, 0.23514576842415325, 0.1301526744600504, 0.23197405258369141, 0.2254246204363064, 0.11529720394881893, 0.26975135281366347, 0.2753946830174536, 0.24470194235444775, 0.28464992602100414, 0.2565091939730487, 0.27178270095269186, 0.00012001703704467293, 0.001273326183058976, 0.07457368955928745, 0.030730412121906747, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597074050777152, 0.13605656746089057, 0.1671700717734198, 0.11666629863140099, 0.05696414865332411, 0.08456032017079507, 0.07391274942702564, 0.04033470399990435, 0.03577159633573612, 0.1235797946083439, 0.06582428431685727, 0.14260462637754645, 0.21792735154910803, 0.07313634605217467, 0.22127721667285394, 0.10154371686778285, 0.07414729340397719, 0.4319225121946091, 0.09494482206321042, 0.20452851968976593, 0.12078757928740724, 0.10530125648099131, 0.1381902536830668, 0.1531477750389949, 0.08575983243563245, 0.14269689895247106, 0.22895593893399413, 0.19946733066784728, 0.17648047284392598, 0.08276767177983091, 0.5381268631319329, 0.5951904465657323, 0.5194610028235576, 0.5238057166711934, 0.49751487872608324, 0.5114856377649808, 0.5707399600051473, 0.5334870316772833, 0.567523480229304, 0.0912571860953878, 0.09964582443554793, 0.12803351076788638, 0.13923800968809008, 0.12148794358334236, 0.07674084156220473, 0.0961660822759266, 0.13645472333172892, 0.09951740247621432, 0.2862737813916577, 0.6075861703960893, 0.23441643878249308, 0.2230869382896814, 0.21127329499522207, 0.25924206571564645, 0.3617524886522445, 0.22795142149807435, 0.3311391730720432, 0.3072287384726252, 0.3401503407228229, 0.37282730143884957, 0.33522569352311626, 0.34111148917679157, 0.3482126586674701, 0.2328180999260936, 0.4409023056661655, 0.2996909655493407, 0.21839068634194003, 0.2751898077262648, 0.26926889215210026, 0.21853653943517048, 0.1818770565034199, 0.27879359018583005, 0.27100753869787586, 0.24683031812249323, 0.31562332814262295, 0.2563302922770707, 0.2505428855683206, 0.25629566743189724, 0.20763272493239837, 0.24648343703124587, 0.26885957473507094, 0.26164770723894504, 0.19638391909771458, 0.21956235926635914, 0.20681173066227454, 0.19685557724906932, 0.2227594051400924, 0.20811563937712185, 0.21049833636458015, 0.20911530287296332, 0.21238646198079736, 0.21385951226523725, 0.21394904659067449, 0.8285010640745496, 0.12267221289861086, 0.17709677167069893, 0.8826714185382597, 0.20019354103078724, 0.16866908384874624, 0.6415314795286076, 0.1617868308115754, 0.8573720850281703, 0.7279143969994852, 0.21356776613075923, 0.07355437834362133, 0.7854646779232777, 0.16844794473087277, 0.15420610853121286, 0.09423833441180451, 0.1650721095283212, 0.8308396510707646, 0.1816294408762552, 0.23080722943843168, 0.2207571513013018, 0.2036559786752078, 0.21795938353350042, 0.23680507340374357, 0.2868180309371413, 0.21789619645477476, 0.2415013109405788, 0.07916181272044609, 0.12378759324061195, 0.09327933789526432, 0.10350674319131792, 0.10499062973920115, 0.09558056215557531, 0.07741103293904017, 0.1044863719155037, 0.10575054989743837]}, "mutation_prompt": null}
{"id": "1ca1a956-9e89-4d2d-910e-9ece3a3ab941", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "da9a3d88-dee8-4995-ab97-46a0c5905c46", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "8989f3d6-39ed-43dc-b63a-2ecbdd189683", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "e5b9e08c-2cd8-48c2-b138-2d040e0d910e", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "6f231a97-d654-49c7-82b1-b2a6200e380a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "7ce3e4e4-ddb5-487d-83dd-e87d3e12cad1", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA_Momentum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Adjusted for increased exploration\n        self.inertia_weight = 0.6  # Optimized inertia for balanced exploration\n        self.cognitive_coefficient = 1.4  # Adjusted for improved local search\n        self.social_coefficient = 1.3  # Enhanced social component for better group dynamics\n        self.momentum = 0.9  # Momentum for velocity smoothing\n        self.initial_temp = 1.0  # Optimized initial temperature\n        self.cooling_rate = 0.85  # Faster cooling for quicker convergence\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Wider initial velocity\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                velocities[i] = (self.momentum * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Smoother dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA_Momentum", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Momentum-Based Dynamic Velocity Control for Enhanced Convergence and Search Efficiency.", "configspace": "", "generation": 52, "fitness": 0.18818747164318153, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA_Momentum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.35203026800572457, 0.36782005233044834, 0.35800311961496123, 0.3588070346881782, 0.18822577289859066, 0.1892019355640986, 0.33386989224234664, 0.3658754447352076, 0.3462247562398879, 9.999999999998899e-05, 0.02360311492861422, 0.02508513015706737, 0.04646089505930939, 0.021916884735546205, 0.029816164665596667, 0.026522970409043944, 0.047815871309403346, 0.017653777203000987, 0.08203024321210195, 0.09680944869240682, 0.09733972153888093, 0.11578580051457887, 0.10067530492850596, 0.06515703226580116, 0.14697032404498456, 0.11431040625004685, 0.05125692022942807, 0.06466156946485169, 0.09716961642808652, 0.09930409229081305, 0.09185435939888265, 0.07972790144929554, 0.10000108454292711, 0.1089892521602942, 0.0889722789545353, 0.09681266940143518, 0.982067281397898, 0.9767355007632768, 0.9884689332984452, 0.9815138966666915, 0.9824325491011056, 0.9832882864089507, 0.9888532259094712, 0.986075728898528, 0.984897005494218, 0.19045780507311982, 0.11208963874531797, 0.058916091527355774, 0.14540829285055112, 0.22524462722756478, 0.14555769314268985, 0.08344918320233796, 0.08808548506189495, 0.08806598730434212, 0.2709381884050098, 0.17050772083565657, 0.2554798893540454, 0.18859859551210156, 0.19013234439204474, 0.2020861953401828, 0.12423507411289736, 0.2287716370884929, 0.2061552221922086, 0.12730973207609586, 0.10621576525639087, 0.13106300391994485, 0.10912283066869699, 0.13714814044476276, 0.08905193046723103, 0.1345040041018718, 0.14618504076274452, 0.1381754425960675, 0.12141266138790563, 0.12451535745339803, 0.07160460730035734, 0.12016595430355481, 0.12260812350277428, 0.11247439756068633, 0.13554445892002132, 0.12155920934325892, 0.11209045004944929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010950578451736637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020877116672102236, 0.09209330736832055, 0.045303756680049045, 0.06797432697590555, 0.08613082401271932, 0.023041551310216346, 0.03516070740016963, 0.024995962935430716, 0.051842916609708856, 0.02760279398496901, 0.0025643258898442323, 9.999999999998899e-05, 0.0015974126498519148, 0.0003812482955684038, 9.999999999998899e-05, 0.012662242415582892, 9.999999999998899e-05, 0.0004137798201769849, 9.999999999998899e-05, 0.1105372461374935, 0.07924303485705109, 0.08768633541898874, 0.0637714306249898, 0.07730765866224232, 0.08703225565790873, 0.04492295400173385, 0.07524600682566729, 0.06000410777255072, 0.3356970076640966, 0.34386768549441105, 0.3286370934869969, 0.20764442169496877, 0.34301255073434356, 0.3388596787641466, 0.32486634190423735, 0.31364627243245935, 0.32605571797811594, 0.07857153026369601, 0.1352398583403407, 0.12495244658099236, 0.07688173915664431, 0.07681776695243048, 0.08247455794044001, 0.05692921181872557, 0.11576069687085344, 0.07513542327936196, 0.17308186388331537, 0.15474029654364962, 0.2527248875017233, 0.19726760792646814, 0.2216265535278914, 0.21424209020239526, 0.18837280999630535, 0.16052637401614633, 0.19123817610759275, 0.2746730633691078, 0.20616726870978463, 0.25417913459027086, 0.24270982696713428, 0.2607505494226451, 0.24640240581051087, 0.2027635020057703, 0.2598560844608113, 0.20080754273731805, 0.18201788252083484, 0.17533807338657204, 0.2132075324290298, 0.19106625173629654, 0.18316548174954006, 0.21416279080157363, 0.20020106337308485, 0.20345592292236048, 0.22383972615668457, 0.19344821399626422, 0.1423462588104425, 0.18101324450737477, 0.20801699004400154, 0.19135085988007328, 0.18966955651104034, 0.18443588267250155, 0.19877621226294462, 0.20130874948532762, 0.18142569482038662, 0.18656249266347513, 0.18513633532779972, 0.1937200033117935, 0.1950193977108644, 0.17540699515767666, 0.19568373140392037, 0.1742721898749815, 0.19177318756420902, 0.4581916906580247, 0.16710239596736443, 0.12391349457445089, 0.4346078356510852, 0.19377399439834386, 0.48028531406532815, 0.35193739163532245, 0.36527952900879257, 0.493244032406602, 0.36290429944759617, 0.20501746296203704, 0.195531924471824, 0.4253966843747057, 0.19247245055617423, 0.29984686761332446, 0.32349004382448376, 0.20458150718542212, 0.3714962986834959, 0.18988976756504483, 0.1736242992145549, 0.17759558150408938, 0.17511208301106107, 0.18467911177904883, 0.18375301635777264, 0.19715366139218127, 0.18119943926228765, 0.17781420113056012, 0.07385071164154633, 0.05672180620340983, 0.0646409748689657, 0.09003080562830346, 0.07117298008633188, 0.07125606781675742, 0.07963689227467452, 0.07557364720758852, 0.07493607387892243]}, "mutation_prompt": null}
{"id": "7ba048ce-99b9-45ae-9b4e-13cc4072235a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "4ef11fdc-b8a6-4c3d-a4ca-6b80b6303871", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "f9d79d69-a34a-480b-a73c-cec504cd0954", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA_Dynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for greater diversity\n        self.inertia_weight = 0.9  # Adjusted inertia weight for more aggressive exploration\n        self.cognitive_coefficient = 1.3  # Tweaked cognitive component for balanced search\n        self.social_coefficient = 1.4  # Slightly higher social component for cooperation\n        self.initial_temp = 1.5  # Increased initial temperature for broader search space\n        self.cooling_rate = 0.95  # More gradual cooling to maintain temperature longer\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Expanded velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Annealing inertia weight strategy\n            self.inertia_weight = 0.6 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic adjustment\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA_Dynamic", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Strategy with Annealing Inertia for Optimized Exploration-Exploitation Balance.", "configspace": "", "generation": 55, "fitness": 0.24060954622927314, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA_Dynamic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.3952402055207873, 0.4039818026084657, 0.37955634571157626, 0.40589115412478083, 0.41297467624119144, 0.39398553969258376, 0.3657445236880784, 0.3925802351486095, 0.40402223659627856, 0.22310173622998009, 0.20431192413076515, 0.22925472758637466, 0.22099935194025366, 0.1936484055236417, 0.22129357993190213, 0.22080820966881431, 0.2852923249753164, 0.22544358852315038, 0.1371746478352548, 0.11273500827471705, 0.10486380911546489, 0.11236404733620697, 0.14790227101326836, 0.12075459074313044, 0.22919164837137096, 0.10439715899934232, 0.13623274291383836, 0.16308791825294833, 0.11857899134871164, 0.12252398385803076, 0.13327615012979677, 0.14268965976293146, 0.09925377235033206, 0.126105021200404, 0.1181933655503501, 0.10375430032394761, 0.958994870996698, 0.9590920610770396, 0.9644701418148164, 0.9495907787169232, 0.9419683504600155, 0.9522240074093131, 0.9570990398906641, 0.9436037234550385, 0.9552901228903704, 0.4069642173773764, 0.3963677512078694, 0.3752586781666254, 0.40143436326430226, 0.14732156565897714, 0.42262416615657317, 0.3820384287481722, 0.3892487181828007, 0.39808390634594326, 0.5924611271607778, 0.2214340261804555, 0.16992585867390575, 0.20741838813600444, 0.19051291324639097, 0.19196187920265984, 0.1236981737074635, 0.16992876942601975, 0.23272980582920655, 0.09755111189717103, 0.18278618052074502, 0.17255433295567113, 0.12113899558653429, 0.19768705358260774, 0.20614796608354014, 0.23448988233794987, 0.20588597166540057, 0.1858154653032723, 0.2198791864533327, 0.1937236444353282, 0.1968252767393902, 0.2040716904224178, 0.122498201140259, 0.19304430807669515, 0.2220539861124332, 0.20798188889856273, 0.20538665043484383, 0.053060643072452285, 0.15290716317213426, 0.0008597333733172396, 0.010773068903477734, 9.999999999998899e-05, 0.013388099918356655, 9.999999999998899e-05, 0.00179815026771446, 9.999999999998899e-05, 0.15683882636206348, 0.05310736301244812, 0.08975069799302415, 0.04426454981854966, 0.07649945762597798, 0.037196178042625205, 0.23100516694575068, 0.0619544151701934, 0.0767576788745633, 0.020265766439636845, 0.12481290970847714, 0.17189151587206675, 0.09459363246591312, 0.053274256483581306, 0.15251456787532802, 0.06592535103595276, 0.08142341603945003, 0.04577474015325478, 0.07318228871711874, 0.13225579862400705, 0.1981576684409736, 0.148200981856643, 0.1364671741667054, 0.16849368294597533, 0.1512960949969282, 0.04516784831562781, 0.07330674384567715, 0.35415428259436044, 0.38845036935937327, 0.338349212831657, 0.3671889331485906, 0.35043441996638736, 0.35492247909368335, 0.3840471144643186, 0.35285939873549865, 0.35873553636988, 0.07395900489887242, 0.08992489738613896, 0.09362889305473487, 0.13181594007664266, 0.09815825350496565, 0.10689837132295832, 0.10479308246724228, 0.08662398167495233, 0.12739972550246326, 0.29653651303082273, 0.2578839661897313, 0.19668567228154255, 0.3016933960212823, 0.19233755866182323, 0.2543952965344849, 0.29826671545630545, 0.33525629462674755, 0.24292821384067942, 0.2908617655425326, 0.28926107836415327, 0.2886788845003164, 0.2880203192430235, 0.2792800704161885, 0.2782763728614125, 0.26757433659124696, 0.25475067909528015, 0.2840085125302194, 0.2411068981689689, 0.258953227047227, 0.20336663590580828, 0.15368191708948198, 0.27876595959101025, 0.2440700690726999, 0.2605358992610074, 0.19265810677253514, 0.23087866838652082, 0.2152294513455174, 0.2472838736574463, 0.23240289962780947, 0.24679602262586886, 0.24186739807565938, 0.24950149028460156, 0.2624802053560362, 0.20622834664736145, 0.20024782963705678, 0.2104862910555534, 0.22494192297305282, 0.20636542193298668, 0.2348061919083505, 0.22945135021060892, 0.2340505252438495, 0.20568498080947628, 0.32516025275427074, 0.19072988314730988, 0.18316456316563834, 0.17632654090940791, 0.1831956590592405, 0.5574225600968039, 0.19660389492106545, 0.16860009071434146, 0.14064976031812781, 0.1578139665973648, 0.5754281222602537, 0.5624852648023626, 0.21072477639771392, 0.5437266450710014, 0.20416163000697696, 0.16651845833222556, 0.1529604121094862, 0.5072423443729683, 0.49022963459662616, 0.567930732338596, 0.2112412208519313, 0.2068278932879266, 0.18395507645595977, 0.2197600622903959, 0.18803352765321402, 0.1878095625618501, 0.19124785771086616, 0.1829856203597664, 0.23012821828499141, 0.09216277973995801, 0.12840208412916376, 0.08494310855528298, 0.08909005976171669, 0.08465904886860987, 0.10120969784233458, 0.09779384498208088, 0.09256857576377042, 0.08694451773727363]}, "mutation_prompt": null}
{"id": "01f94b95-ae08-4541-b6a7-62c5de78b542", "solution": "import numpy as np\n\nclass StochasticQuantumPSO_VNS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for more search agents\n        self.inertia_weight = 0.6  # Refined inertia weight for a balanced exploration-exploitation ratio\n        self.cognitive_coefficient = 1.4  # Reduced cognitive component for broader exploration\n        self.social_coefficient = 1.3  # Increased social component for faster convergence\n        self.initial_temp = 1.5  # Higher initial temperature for enhanced initial exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for prolonged annealing\n        self.vns_radius = 2.0  # Radius for variable neighborhood search\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with stochastic element\n                stochastic_move = np.random.uniform(-1, 1, self.dim)\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])) + 0.1 * stochastic_move, self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n                # Variable Neighborhood Search\n                neighborhood = np.random.uniform(-self.vns_radius, self.vns_radius, self.dim)\n                neighbor_position = np.clip(population[i] + neighborhood, self.bounds[0], self.bounds[1])\n                neighbor_fitness = func(neighbor_position)\n                self.evaluations += 1\n                if neighbor_fitness < personal_best_fitness[i]:\n                    personal_best[i] = neighbor_position\n                    personal_best_fitness[i] = neighbor_fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "StochasticQuantumPSO_VNS", "description": "A Stochastic Quantum-Inspired PSO with Adaptive SA and Variable Neighborhood Search for Enhanced Global Optimization.", "configspace": "", "generation": 56, "fitness": 0.21814446079393257, "feedback": "The algorithm StochasticQuantumPSO_VNS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.39412118218827585, 0.39365904536726704, 0.41957883221672176, 0.40446238366331666, 0.38976979531737177, 0.3779522672174447, 0.4118056578503141, 0.40821061697689975, 0.4228489658348642, 9.999999999998899e-05, 0.06156430798388157, 0.05833727440153802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015454407249471114, 0.05541576138915694, 9.999999999998899e-05, 0.11760733787991395, 0.10202389538429579, 0.09542275157216207, 0.10002312891195231, 0.15808020786647214, 0.10170841247011542, 0.10523331652988233, 0.12719358770487033, 0.09593485472568641, 0.09104142102440294, 0.08880221068902516, 0.09941993045763242, 0.10512566552920821, 0.09367822724616581, 0.10053391932190403, 0.10948437727197446, 0.1047109018473622, 0.11435549259654221, 0.9376191143404626, 0.914368781155192, 0.925464376706932, 0.8817429386844002, 0.8930800077158098, 0.9206155909843355, 0.9331850159403563, 0.8887023982776671, 0.9148913451070335, 0.29082850936271754, 0.27111204609541695, 0.2843886585130685, 0.28178586819405704, 0.2816750687861198, 0.29047605898028017, 0.2851948921023385, 0.2938791137120129, 0.28000076376758387, 0.30171767260807825, 0.27833534108656255, 0.3499123133567906, 0.3834156210561106, 0.3455824753901251, 0.26295834553487496, 0.22307926807250622, 0.3006533217450975, 0.5243577117736076, 0.10328433993992203, 0.11202154783899276, 0.15135959383893083, 0.1941173006471778, 0.1885789316313341, 0.12652295580389894, 0.19964276928443658, 0.24045515998369016, 0.1443466952534045, 0.1576792326441584, 0.16907205423677318, 0.12538946109323224, 0.16646078968371203, 0.12034406685456722, 0.13186698079556514, 0.1627737831339695, 0.1631531487861081, 0.18253428413145345, 0.0001345887823472891, 9.999999999998899e-05, 0.030039108636136902, 0.0009360681602152976, 0.017266564608082402, 9.999999999998899e-05, 0.0130484085474174, 9.999999999998899e-05, 0.03946584759900851, 0.10767450943147738, 0.060067341168092536, 0.15270987291529914, 0.04311487889075938, 0.051069423800852776, 0.0366986545904725, 0.11490037861054847, 0.07541004271100571, 0.052859652962113035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009659200326120332, 9.999999999998899e-05, 9.999999999998899e-05, 0.11033374762760317, 0.10036674866073114, 0.09661946598438476, 0.07906557739163689, 0.06593574190274143, 0.10957954513568424, 0.09569773813704108, 0.09999166848504315, 0.0695078373915945, 0.3756331690315001, 0.36182235797648343, 0.3919615460304866, 0.3792199693815681, 0.3604700499228697, 0.3902344588006237, 0.4048621401283833, 0.3771524273317487, 0.36247706830259996, 0.11400993759582145, 0.07040761410229734, 0.11370710071085688, 0.08892927420387364, 0.11943548096340106, 0.11745068879834908, 0.10076309562520946, 0.13206156551200332, 0.09631851713610573, 0.15368942284027565, 0.26796891537165124, 0.16931864638620786, 0.27975811440919773, 0.17874649042620638, 0.2425032570572685, 0.14443527214468455, 0.2290739544749949, 0.18477572452036162, 0.27351320749916685, 0.2835585565982377, 0.283595012708035, 0.2871529101605065, 0.27709840765750937, 0.2910911257817843, 0.27530259807175417, 0.24479136285530534, 0.29225022664948486, 0.22659746232090683, 0.23829038076775755, 0.23380212874969897, 0.23602931204922728, 0.23947752497118835, 0.22697642104714277, 0.20645802154420578, 0.2325722941572499, 0.21092177384887878, 0.2111640061658563, 0.24526141099391174, 0.20077414154811135, 0.24211679762027338, 0.2243106674066192, 0.2168388210634754, 0.2195853391490441, 0.20939580283309245, 0.20224775372573722, 0.18806140221777434, 0.2206894418678208, 0.18925443539786868, 0.20361968618687665, 0.21229713642136605, 0.19284766676523246, 0.23520114999741648, 0.22095287333565872, 0.20946274841284152, 0.1836304122991369, 0.18324455490854163, 0.150436325436904, 0.5807666759423677, 0.16649556003164767, 0.1960220063115644, 0.37254642261651716, 0.2661539569051241, 0.583197311315085, 0.5105121337200142, 0.49410975094204246, 0.49778072960981057, 0.5176691272392365, 0.16546125390756883, 0.2064354853998539, 0.5023463612549304, 0.10462418371843718, 0.4824907339885198, 0.18922595060991176, 0.18147377604385995, 0.1774110235776103, 0.17755373643661787, 0.1872793730490786, 0.18239697204890482, 0.18111753684341347, 0.1816196447572752, 0.18516051521472, 0.10669382184528109, 0.08929951316638818, 0.0786840727204341, 0.08495487125191481, 0.0854039897665052, 0.08440962641894945, 0.0858529839359029, 0.08103747653987559, 0.08432079338705267]}, "mutation_prompt": null}
{"id": "553e1fe5-0c3a-48ff-917c-0a30e429faef", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "0b0242ed-4fb3-4eb0-9044-d29352f8c58e", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "97192e7f-fa23-4266-b7af-2c7e05b02eda", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveQTEnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for higher diversity\n        self.inertia_weight = 0.6  # Moderate inertia weight for balanced velocity\n        self.cognitive_coefficient = 1.4  # Slightly reduced cognitive component for focused search\n        self.social_coefficient = 1.3  # Enhanced social component for global exploration\n        self.initial_temp = 1.0  # Initial temperature suitable for exploration\n        self.cooling_rate = 0.95  # Slower cooling rate for prolonged exploration\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum tunneling inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with adaptive quantum tunneling\n                tunneling_prob = np.exp(-np.abs(personal_best_fitness[i] - personal_best_fitness[global_best_idx]))\n                if np.random.rand() < tunneling_prob:\n                    population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                else:\n                    population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Adjusted dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveQTEnhancedSA", "description": "A Quantum-inspired PSO with Adaptive Quantum Tunneling and Enhanced SA for Dynamic Exploration-Exploitation Balancing.", "configspace": "", "generation": 59, "fitness": 0.20578465400378912, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveQTEnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.17.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.3017734269612009, 0.33792549388796433, 0.26547052889159084, 0.2847808798452157, 0.29502137288443286, 0.24687476796207197, 0.275618327811905, 0.26918696659464714, 0.27642759884326884, 0.24213744901213707, 0.14269903070947587, 0.1049863643876282, 0.16032365406485538, 0.1720825078726793, 0.1359097096525187, 0.047539433647054596, 0.19218615542056727, 0.1769293094916815, 0.1045849133979817, 0.14461564435407692, 0.15362433560677524, 0.13775499813484893, 0.15505356136544013, 0.12506201597984778, 0.17689760964367307, 0.1758682872825693, 0.11798947250829495, 0.1197721991669709, 0.1069589843803942, 0.11385729426745328, 0.11110078460517836, 0.1051508497582232, 0.1673020323375125, 0.10461947350871759, 0.14440587541827243, 0.11594005488706849, 0.9468344576175121, 0.9268457057315262, 0.9527261592378915, 0.9335868425914735, 0.9278914124719619, 0.9369527652584355, 0.9411228312531844, 0.8749916539894549, 0.9493394491490587, 0.2175852253820416, 0.25234759198451984, 0.21244240785698232, 0.2290676753586659, 0.24844816563883798, 0.20523066567274295, 0.22671140111465604, 0.20506028047018154, 0.22675837315485303, 0.21156307608853908, 0.3302281270998765, 0.20851049121164777, 0.23888468986086364, 0.19210123696795078, 0.20976361132726395, 0.16553520400658983, 0.17538908333386316, 0.23029055787038855, 0.18015968030653873, 0.14578382092821196, 0.22683483084036127, 0.18163559715755473, 0.13065791183516562, 0.1554622514774403, 0.15708480104446898, 0.16345307483732863, 0.13049047097034983, 0.12765840670833462, 0.13322933057057218, 0.13753452217208906, 0.13792554496604625, 0.13075322194629901, 0.1434533029614684, 0.12524846188203043, 0.12355973692263855, 0.15220141555489575, 0.015964062467591633, 0.03584296795333308, 0.02847826167267775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005318890439238166, 0.009215071279623399, 0.14489344684726024, 0.17691268358988577, 0.08966049212224259, 0.11420324918332803, 0.06998640919375287, 0.04650551535074532, 0.023048363624837087, 0.10577922260491046, 0.0840858972906493, 0.05529709565155494, 0.06612045734584937, 0.18937569841277713, 0.2256207946149006, 0.07138359924779902, 0.18067155833569226, 0.11414333268744759, 0.15207174978840288, 0.10749646227140586, 0.13981038057708772, 0.08678964290838254, 0.15852221750834128, 0.1494069995002637, 0.016702460504085304, 0.1451903474039865, 0.05767508993448389, 0.15047691220386628, 0.07876184190051083, 0.07977501668384412, 0.29464097646787446, 0.29529071106341465, 0.2890823277430198, 0.2666349038959879, 0.26968613736816593, 0.30491650405133486, 0.2680577195024213, 0.2624823439652193, 0.277784308819811, 0.1534043299781952, 0.13941284200019832, 0.087633735623591, 0.1730432972639825, 0.09721723990127662, 0.09143163466836235, 0.09464960406806999, 0.12607390134461638, 0.09060660652001784, 0.16864214818513923, 0.199098809593514, 0.18403004916086696, 0.20028087134650552, 0.21511186143867322, 0.2161704212756057, 0.20346602974098682, 0.17959242587996704, 0.21870360313584347, 0.23431093414193727, 0.19016947863093747, 0.2224541619698075, 0.22141780466999428, 0.21575628614036668, 0.20939256788506422, 0.23882386654811416, 0.24146739393190841, 0.20241187582318498, 0.21710644322706152, 0.2129075795379034, 0.20763621530807108, 0.22298444742099088, 0.17257093328462503, 0.21039312465561866, 0.21051666580732853, 0.214529714427928, 0.2012238632174813, 0.2078930181165537, 0.2243496550535411, 0.18260699748505338, 0.19961392546669388, 0.18858351294600695, 0.2058607715587617, 0.23479235065164838, 0.2248097650526767, 0.20129090137912586, 0.1816259811643307, 0.18953002136985964, 0.17063056942657673, 0.18334212174590292, 0.19446638246833148, 0.17592957401025344, 0.19102825866192974, 0.18371907516921226, 0.1654022681046945, 0.42321022182622314, 0.18592929750086606, 0.20674988581028508, 0.3509240533797694, 0.18659616077808328, 0.27030255839763273, 0.2963202271282963, 0.1717732096341662, 0.3420259201268687, 0.365600449506546, 0.20854511182914226, 0.20732001812860656, 0.30601501206055304, 0.2526625672124839, 0.2026289857515069, 0.23665441531759202, 0.22891019084478637, 0.26101322598339227, 0.17781637182307386, 0.18032599138776573, 0.1865055171299821, 0.1876932127126666, 0.19270875930557785, 0.17167047155467552, 0.17361251144252143, 0.20602935030599634, 0.19710224956418987, 0.08455398270232639, 0.07902520733885599, 0.09621488539459644, 0.08810591021118763, 0.10561572566633126, 0.08600426393944616, 0.0892869968142197, 0.08788276570670772, 0.09420264971168346]}, "mutation_prompt": null}
{"id": "594517a8-c482-4419-9001-a461d4e1edf0", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "d09c547b-a293-47cd-897a-f24714f4f4c4", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "24b28be3-54c6-4776-8b77-e1292ff92330", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "fc8611ab-0cd8-4759-9e51-b458885cddcf", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "5d3a044c-3dde-4694-a552-c9756b87f49b", "solution": "import numpy as np\n\nclass EnhancedQuantumPSO_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced diversity\n        self.inertia_weight = 0.6  # Reduced inertia weight for dynamic adaptability\n        self.cognitive_coefficient = 1.4  # Balanced cognitive component for personal influence\n        self.social_coefficient = 1.3  # Slightly increased social component for better exploration\n        self.initial_temp = 1.5  # Higher initial temperature for increased exploration\n        self.cooling_rate = 0.85  # Adaptive cooling rate for faster convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with mutation\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + 0.1 * np.random.normal(size=self.dim))  # Added mutation\n\n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive cooling\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Broader dynamic adjustment\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedQuantumPSO_AdaptiveCooling", "description": "An Enhanced Quantum-inspired PSO with Adaptive Cooling and Mutative Velocity for Improved Convergence and Diversity.", "configspace": "", "generation": 64, "fitness": 0.2219620732037159, "feedback": "The algorithm EnhancedQuantumPSO_AdaptiveCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.48542280335961796, 0.3864215304805012, 0.4014349835424067, 0.3950908126643481, 0.3931859331706915, 0.3858867281515965, 0.40570782674797556, 0.4061537310338107, 0.3922333890189378, 0.021127967315075713, 0.04012195129976204, 0.007228508854609239, 0.0017194262593471787, 0.03828897132376585, 9.999999999998899e-05, 0.00735304377522028, 0.006673327978615973, 9.999999999998899e-05, 0.1299717508585898, 0.12298402361515126, 0.13798060671705115, 0.13878112258881592, 0.07500735950403614, 0.12062043097351471, 0.09195647139063423, 0.12430920178119542, 0.13009204746499548, 0.0782279438192861, 0.09011668585060484, 0.1109260731038283, 0.10815107080725173, 0.11970806890002317, 0.09333646894351855, 0.11914199576197793, 0.09678571368955913, 0.0941852703753433, 0.9560942961085152, 0.9540144059456759, 0.958531399682612, 0.9380343037026767, 0.9273438469305644, 0.9333101438730498, 0.9534073891744314, 0.9330232650870831, 0.9525743094285105, 0.2968444945039427, 0.29816072136481875, 0.2858629427325504, 0.29408039462728053, 0.2961949747440896, 0.2837601526227391, 0.2854604305415791, 0.28690559072557953, 0.298916493781769, 0.9135865914064305, 0.24160663940052374, 0.2993444162340718, 0.5710215015766457, 0.33773461089080503, 0.3288405177621174, 0.22423058378323124, 0.25261822413576607, 0.6648479507310512, 0.11263427306463814, 0.11943429688549279, 0.17363631491744602, 0.121848951139083, 0.1767865872788199, 0.11837262360955048, 0.17084908537738286, 0.1825962515952556, 0.16302435907665436, 0.13891663609184668, 0.18859163092057873, 0.11401602363882923, 0.1603909303921398, 0.19204625731541392, 0.16325472251019746, 0.22958146639317545, 0.16940434599795373, 0.12905872521832717, 0.0012423176397753366, 0.009287560902666914, 0.03249043696618992, 9.999999999998899e-05, 0.04683176648621046, 0.00020120827460101687, 0.016365770413630742, 0.02890442318867603, 0.011880748959029241, 0.10176530578290766, 0.07615763880858573, 0.1506539523944701, 0.07550886572685034, 0.049353174188647375, 0.03169875493356211, 0.06870044998337022, 0.08686346358565877, 0.10902208336303354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05513626077986378, 0.11298031766951389, 0.10562560002671328, 0.08177932722715964, 0.11324581623932628, 0.06635093931559399, 0.08564181612237476, 0.08045303286985561, 0.07570609425204744, 0.3857782206779544, 0.3782797779805894, 0.37707115348254816, 0.407994512078503, 0.36068648614320165, 0.3742345957478197, 0.3757703297239542, 0.3726898262743743, 0.3774705847234079, 0.10614597518247104, 0.10645414192264302, 0.13594099323260256, 0.098823032162351, 0.11574125507970223, 0.10843609074252947, 0.13797804288178928, 0.13121022710625352, 0.09952000401501426, 0.30791825579502596, 0.2576092813066101, 0.18258281736878312, 0.21901785743815416, 0.22631900319020393, 0.2772335193595591, 0.24735277393800403, 0.16673004787772083, 0.25348939894249944, 0.2858975887569837, 0.28295048133455414, 0.28432097610219176, 0.28534546162517704, 0.269939769900126, 0.276936679722793, 0.2873582735974476, 0.2839010001244836, 0.28824025499927186, 0.2407884542312395, 0.21892137635767517, 0.1907882569730187, 0.20229051813173815, 0.19129263728132662, 0.22992560501280246, 0.24890203566178504, 0.23134540563462413, 0.23339047802398094, 0.21837512146131866, 0.18315572382639744, 0.21618503491184538, 0.25051501381884944, 0.22267768029186807, 0.19645050633059824, 0.26196374231490016, 0.21046326080596522, 0.2053927988086931, 0.20249357153133696, 0.2487983909260041, 0.21382805188057374, 0.20023449104283408, 0.22369061204810403, 0.21515661081954696, 0.208084631444161, 0.21452603236239343, 0.1895817995682657, 0.18593741404798125, 0.17692279543654166, 0.15292674251323135, 0.5789005579406898, 0.1990601921480445, 0.5718134060664758, 0.1422684968747806, 0.17594818038940285, 0.5947875375623679, 0.5354372848854612, 0.21265832711808008, 0.07334279843961045, 0.20974058960051278, 0.16820561078702045, 0.15366608796555992, 0.5156526881852721, 0.10434110290857335, 0.545822517442629, 0.17009324632832235, 0.18474647435886482, 0.1798884158417473, 0.1811724277508704, 0.1760254223933041, 0.19603786240484333, 0.1858179134049257, 0.1815519397476132, 0.18630455947559732, 0.07605562669967281, 0.08348724540061181, 0.08047894934773736, 0.08693236125600612, 0.0999337448907025, 0.09723551572356715, 0.08948613254262405, 0.09434768888477663, 0.07201898305660237]}, "mutation_prompt": null}
{"id": "1d9f3215-f4d6-461f-846e-e76d4efdc953", "solution": "import numpy as np\n\nclass RobustQuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for diversity\n        self.inertia_weight = 0.6  # Dynamic inertia weight for balance\n        self.cognitive_coefficient = 1.4  # Reduced cognitive component for group behavior\n        self.social_coefficient = 1.3  # Enhanced social component for global exploration\n        self.initial_temp = 1.5  # Higher initial temperature for exploration\n        self.cooling_rate = 0.95  # More gradual cooling for better exploration-convergence balance\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Slightly narrower velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with bounded certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.minimum(np.abs(velocities[i]), np.abs(np.tanh(velocities[i]))), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # More refined dynamic adjustment\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "RobustQuantumInspiredPSO_AdaptiveSA", "description": "A robust Quantum-inspired PSO with dynamic inertia, enhanced social learning, and adaptive SA for improved convergence stability.", "configspace": "", "generation": 65, "fitness": 0.3095672796024003, "feedback": "The algorithm RobustQuantumInspiredPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7181836801939778, 0.7146961477045978, 0.7425349071381777, 0.7541849652953587, 0.7329964916579617, 0.7425308762777394, 0.7434051692481167, 0.7395149355749339, 0.7357303687204007, 0.5771765421942054, 0.6170671487534356, 0.5574885600164058, 0.600607710010808, 0.6513663068065885, 0.6160267567381745, 0.6279732344834228, 0.5854653411397376, 0.5721172346089851, 0.12273171827095797, 0.12990484736055496, 0.135397300106341, 0.1220984621041562, 0.1571878022540404, 0.15594247394276606, 0.1190488346377151, 0.15532090520420294, 0.14099739044741255, 0.11331734768354562, 0.11975078595088184, 0.11288251686914141, 0.10388530863025858, 0.1076624315126613, 0.1085248058120144, 0.1530076437660487, 0.13758615242433603, 0.10829739861945509, 0.9449935826965202, 0.9454564309346538, 0.9540770463817749, 0.9497260196785934, 0.9477423901156921, 0.9260387599656568, 0.9504393035382063, 0.9363174836717092, 0.9501044885452112, 0.6364857676291489, 0.7131903321937259, 0.5068513296384867, 0.6794951931358499, 0.6664036185072257, 0.6505683788636719, 0.5925008386862137, 0.5641837159960577, 0.6293648053145384, 0.8880183241700853, 0.2290325994702117, 0.2253646235473351, 0.19410201890519108, 0.19241988647412378, 0.19246724477283383, 0.23532173467281936, 0.12472974740972453, 0.7825372517559965, 0.12644610412071544, 0.13167983178183207, 0.3586167794135504, 0.12921082556904495, 0.24551134788876428, 0.18005286719501512, 0.2851746392116502, 0.25534073533613477, 0.26364146428599666, 0.2695896080635839, 0.2243647576418225, 0.11342657210013929, 0.2549837089913898, 0.26155614992902376, 0.28896243190639137, 0.3278364729263564, 0.23858277199864175, 0.2527795162252502, 0.00014169729736746017, 0.00013520065267180748, 0.06727826218003174, 0.033941350734277176, 9.999999999998899e-05, 9.999999999998899e-05, 0.0306999944576275, 0.1348091906126554, 0.1672251625074327, 0.11509490325216487, 0.05787021938971937, 0.08075769932785692, 0.07073539354035041, 0.04094771977519507, 0.033860968745593856, 0.12320543498435932, 0.06655297054670606, 0.13840467355867836, 0.21746145934766936, 0.07320062712113773, 0.22035594288218974, 0.10128288040410138, 0.07416288003905935, 0.42097595779996977, 0.09489834305974854, 0.20451246597952888, 0.12173657958325235, 0.1058797514392128, 0.11009991252762519, 0.14541978909314535, 0.0716754523434584, 0.18062782572019898, 0.1536075087072417, 0.10852910571436292, 0.1707660013351726, 0.08182448396355668, 0.48040953955358967, 0.5113384830052712, 0.5350071202779688, 0.5444178510467237, 0.5421985855978537, 0.519042038041026, 0.585294100366238, 0.5507489799487186, 0.5510557904550626, 0.1079467803890628, 0.0990040508928729, 0.11934236733067105, 0.117475648446832, 0.18377734160519232, 0.07654795735152564, 0.1484611806409204, 0.09321876326687473, 0.09935241224271452, 0.4492248338967152, 0.41510324336133764, 0.2372240976563843, 0.25435290341287153, 0.26324584601328993, 0.43388619467920786, 0.38993171440079, 0.1597644953729105, 0.2702476536179159, 0.3364222189895416, 0.3274100029799445, 0.42793137202253206, 0.4184012666733381, 0.3602449864583651, 0.30224052449745986, 0.37997371612422226, 0.3278875180142924, 0.22435729652618797, 0.23136130253050258, 0.3470124217006685, 0.2764332798213268, 0.1476197261684714, 0.19693921980361662, 0.28268261666291494, 0.32652995068594404, 0.25495269996172665, 0.3019428046468082, 0.24901259058505598, 0.26846197886940304, 0.23599201608398557, 0.22272570345375753, 0.24369089143659883, 0.17734366709169225, 0.2249343813188447, 0.22680741655067227, 0.23359500282783796, 0.1807128658717274, 0.17955281046319338, 0.19144357496285047, 0.18176352992316502, 0.21065857629784024, 0.19559987033425363, 0.19726489219296972, 0.20157685549007753, 0.2485508994562582, 0.8527246501385843, 0.12255836347631499, 0.1770123647946692, 0.8819002368523959, 0.20003369726633602, 0.16865058618334317, 0.14241724597530414, 0.16136881339160625, 0.8561147069333139, 0.8174410558205277, 0.21335412046616065, 0.07354634262096893, 0.2087843029803964, 0.16845333514959526, 0.15407247288637904, 0.09419470134960306, 0.1654443773328128, 0.7986181084354567, 0.20217286148723335, 0.19471352117690965, 0.2188118604160999, 0.22784417525091327, 0.24877683796014383, 0.2508674280205101, 0.2462180251988514, 0.2513502136794856, 0.24095599159115966, 0.106165940899976, 0.12721089814832753, 0.10666758412753641, 0.10164659282623256, 0.08424886048087588, 0.08778398323134584, 0.06444814621096917, 0.1032139613556543, 0.10191779761448982]}, "mutation_prompt": null}
{"id": "6e4f9c0f-6280-4e2b-b51d-18fe5108e4d3", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "2729efb5-307f-42b3-bd95-8a81d3c5bf81", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "bb88e799-a1a3-4c16-bc49-a894d989126a", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA_VarLrn:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for greater diversity\n        self.inertia_weight = 0.6  # Lower inertia weight for improved convergence\n        self.cognitive_coefficient = 1.7  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.4  # Enhanced social component for broader exploration\n        self.initial_temp = 1.0  # Slightly lower initial temperature\n        self.cooling_rate = 0.95  # Slightly slower cooling rate for steady convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Narrower velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with variable learning coefficients\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * (1 + np.random.rand(self.dim) * 0.5) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Wider dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA_VarLrn", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Variable Learning Coefficients for Adaptive Search Strategy.", "configspace": "", "generation": 68, "fitness": 0.2927678970787073, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA_VarLrn got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.6502518001910298, 0.6910105069901316, 0.7271034243699293, 0.6815745385887402, 0.6683901668810003, 0.6572551361658718, 0.6914862732373603, 0.6537112757520657, 0.6552892196656906, 0.44269163362191644, 0.41274673353567626, 0.39853273863602057, 0.4394689957885214, 0.4374410952301653, 0.42481183030624337, 0.4416128635094366, 0.4268599423728392, 0.4474174763761236, 0.1429463940691137, 0.15679058121324763, 0.1317445399249384, 0.14829222627938943, 0.12053505691960431, 0.16321338761963256, 0.11178285343579386, 0.15665277558416435, 0.27561654833109817, 0.10808245140904005, 0.13094243040089637, 0.11816847179563261, 0.11255491613849267, 0.11264542322559412, 0.10763029912942146, 0.12433874108604981, 0.12601682986146856, 0.11961458408253967, 0.9466588488593768, 0.950321691086087, 0.9541348003625807, 0.9497181148746217, 0.9470984124431249, 0.9335620911891516, 0.9516839124811418, 0.9481446347060667, 0.9492365372514581, 0.3219375852740495, 0.3295743576652651, 0.30295531539558074, 0.4001547546580255, 0.3619238399209328, 0.3273766215378884, 0.3550784701964661, 0.31057906355796006, 0.35935598814449077, 0.6233853913058761, 0.5522204838922997, 0.5433644697127109, 0.6302846815766612, 0.8213053988054122, 0.5392542449724433, 0.2275745133405751, 0.5678118089200386, 0.7222527670412577, 0.18353334881728423, 0.26179792326301266, 0.18353458463326722, 0.11039248416405667, 0.22954800753493232, 0.12330091276871136, 0.21042965030612082, 0.18900538707462555, 0.1922795699976032, 0.18261858851306711, 0.20510161934655846, 0.17121304009439775, 0.21295572455138279, 0.28785539754324396, 0.21851309539249408, 0.2345600680424239, 0.2183183799811469, 0.21390316322550595, 0.03052397810717633, 0.0016518602511831348, 0.00028681218390480545, 0.04791641792788359, 0.00217818920793722, 9.999999999998899e-05, 0.030028311621545956, 0.005836640613772204, 0.043809532783061655, 0.2168056178556127, 0.060577990205707866, 0.0924517206627059, 0.06971781183193926, 0.03644098619473202, 0.050557362241103854, 0.0916010433426454, 0.10341809397408575, 0.13898501756963322, 0.13236755021291213, 0.06255362655302854, 0.08565923679444876, 0.08233457000576694, 0.09202673420891128, 0.07974895884660582, 0.10342473454989398, 0.06622844000825445, 0.06460403261034409, 0.2043949460884118, 0.12026842459271048, 0.18386738386982948, 0.11397071055481178, 0.12444434758433143, 0.1661275281203829, 0.19537043461865777, 0.1805685820860734, 0.08028122376281732, 0.5141024986417082, 0.525418337094353, 0.4858499223728764, 0.5322095374507952, 0.4865973567173453, 0.4890272868738236, 0.5550563258601707, 0.4776482829019626, 0.5606389026149132, 0.3148247802433872, 0.14064589438177677, 0.08694470346657857, 0.13993598689210318, 0.16216159829379662, 0.14532999198187702, 0.08719901385641682, 0.11058125714796407, 0.13488114340266422, 0.2652118058256354, 0.20614724033998366, 0.25615730855691377, 0.265195656291893, 0.3360337997533387, 0.25982758156637253, 0.2635532110303127, 0.210313008424163, 0.24680897587577377, 0.30236877796518435, 0.3176659467556583, 0.38014830413988043, 0.3363128324444198, 0.3510727159878355, 0.30327399040067016, 0.3124509499694691, 0.29687153460879634, 0.3328117335334494, 0.2763384620098245, 0.24950307991151843, 0.27828956323827103, 0.27275893432766407, 0.19330893131536608, 0.3061453517994338, 0.21422792200090668, 0.30360488169370736, 0.22655775144127133, 0.24559517878957715, 0.25701452574727424, 0.22782734353940803, 0.24128950473536015, 0.22358357867257062, 0.2224210731548868, 0.22616426583798876, 0.2736295080819683, 0.22761940479247933, 0.20981097460618092, 0.21546342176458255, 0.20250210091681242, 0.20371071999993906, 0.21974181541992455, 0.19339664179849425, 0.2161493389538468, 0.5103205780277081, 0.21443965159361644, 0.7713301458192141, 0.1860160763369948, 0.18323804032430646, 0.7736295866270751, 0.200069726499855, 0.15785033753552546, 0.1416905181278435, 0.6276454925459718, 0.7974851335421237, 0.5340085864328039, 0.21155463342471736, 0.48139967220091007, 0.20736667214064775, 0.15376623515542176, 0.15443693154604865, 0.24254979868766036, 0.16403224644347048, 0.7054966267330376, 0.18055350317775987, 0.2021633972510234, 0.21140377087307138, 0.1918598248679202, 0.1842836861031154, 0.18991619400363569, 0.18772312609172115, 0.190807910937544, 0.18411091152861003, 0.09299113378501411, 0.13933377379499923, 0.08837194972597084, 0.09724909445144381, 0.09847567365202581, 0.09616985749193752, 0.14666248242143498, 0.09500920714341576, 0.09235835595257436]}, "mutation_prompt": null}
{"id": "accdc44c-2a61-4c70-9559-a7d9b351222e", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "1e143c55-ccb0-4c00-8163-2957ddcf41a6", "solution": "import numpy as np\n\nclass HybridQuantumPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for more diversity\n        self.inertia_weight = 0.6  # Balanced inertia weight for better velocity control\n        self.cognitive_coefficient = 1.8  # Enhanced cognitive component for stronger personal search\n        self.social_coefficient = 1.0  # Slightly reduced social component for exploration\n        self.mutation_coefficient = 0.8  # Differential mutation component\n        self.initial_temp = 1.5  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.85  # Adjusted cooling rate for improved convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Broader velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Apply differential mutation\n                r1, r2, r3 = np.random.choice(self.population_size, 3, replace=False)\n                mutant = personal_best[r1] + self.mutation_coefficient * (personal_best[r2] - personal_best[r3])\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.6 + 0.1 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "HybridQuantumPSO_ADM", "description": "Hybrid Quantum-inspired PSO with Adaptive Differential Mutation and Enhanced Annealing for Improved Convergence.", "configspace": "", "generation": 70, "fitness": 0.32129333176614644, "feedback": "The algorithm HybridQuantumPSO_ADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7175852584056515, 0.7209436165932542, 0.7200183611204853, 0.7745641256541076, 0.7757005036133722, 0.7265403100168407, 0.6527405572098943, 0.7288065883869197, 0.6743987931158195, 0.55704099450681, 0.5624292286666779, 0.5425695741133714, 0.5816587900906408, 0.5499919668382083, 0.5907461880407432, 0.5756686988110096, 0.5370860098602623, 0.5213729197888499, 0.15204492993323238, 0.3947849303389659, 0.15834789139864547, 0.116058367741119, 0.12354587922773064, 0.10862070575231442, 0.11827074556930439, 0.17550003275000747, 0.17304208839723978, 0.13703481250912486, 0.12066865492131618, 0.11322924214101293, 0.13777048694145377, 0.11246834856254995, 0.13137606807975977, 0.1344375399803761, 0.15522919688835668, 0.1481110944251366, 0.9528889980811637, 0.956900887130786, 0.9582307587924395, 0.940397011242245, 0.9233535565769065, 0.9281328613675344, 0.9483759406122791, 0.9275833783380739, 0.9541050520385583, 0.6684693470451457, 0.6530331576159415, 0.05779005638563284, 0.6865236082624089, 0.5525820891575288, 0.6028088583985614, 0.6820865084156598, 0.0869793952462069, 0.5911124286077384, 0.8016974900220664, 0.22663627448260226, 0.790116625562077, 0.2142794998078551, 0.21184253739101222, 0.20738896415313368, 0.7939760110729809, 0.1504070198631574, 0.790327721797113, 0.2151117673948998, 0.21651920545372993, 0.2243022802387773, 0.233559763586752, 0.35873406333613167, 0.2410176492553705, 0.29229290778578276, 0.2381482697279651, 0.2737645105206089, 0.2801734731904919, 0.13262078898952345, 0.1305076126846847, 0.2704830439979764, 0.3283834208651475, 0.2925386107933119, 0.4744752059193804, 0.2534812522086488, 0.2858742062587676, 0.0011998487203629393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005766795133135161, 9.999999999998899e-05, 0.00496223369261628, 0.10815317278744752, 0.161329585987547, 0.08327175597802594, 0.10048851118465407, 0.09067910388643174, 0.04547064397311551, 0.013019585688049617, 0.07785573775427579, 0.09444355683625816, 0.05574044962660063, 0.16015060792130786, 0.08157999762294621, 0.11593288425729786, 0.2668981547593804, 0.21839272652279418, 0.13967509945753664, 0.09768816093376664, 0.158407192900766, 0.07500328734376893, 0.2987961327809696, 0.11509600929707253, 0.10734474093609547, 0.27173314137328497, 0.26957632084603167, 0.05900120873606651, 0.11112722852079548, 0.1196162528483603, 0.08097209952131779, 0.5360013453112952, 0.4722290607328391, 0.5221827293468733, 0.57383961080747, 0.5558434480898833, 0.533766293332259, 0.5500255361673843, 0.626992235678542, 0.5685565812917432, 0.06037191908624462, 0.09467397839712377, 0.07967629631742035, 0.140677144933276, 0.09290935776036235, 0.12976038466724382, 0.13692348430395485, 0.1675178256342973, 0.09523173881528546, 0.2582667369247905, 0.14512465856655965, 0.21917647897093306, 0.24576873117839526, 0.306154526376441, 0.32230522741589074, 0.23342588589355717, 0.1828002958867061, 0.3709711781526024, 0.24688589730493227, 0.2370001197196172, 0.2858495500273901, 0.3375845854637979, 0.3205262016604019, 0.3182824776656936, 0.4086704100448335, 0.3673830175920687, 0.32659004488215193, 0.26509423483568295, 0.3257614129200306, 0.27155843680742986, 0.2409309974459909, 0.31009984022647996, 0.3523882782467209, 0.2570887685611004, 0.23784843737936845, 0.239923066856932, 0.25200719795729787, 0.18656543845546514, 0.21960681203796106, 0.21937768084211262, 0.2566405769590743, 0.22962191459006087, 0.25081269926227456, 0.24953536573394597, 0.2537581117281691, 0.22691798361316928, 0.2243436199412343, 0.22542681271336906, 0.221069038898004, 0.6558147367471275, 0.2078883276853729, 0.1962320527108835, 0.20871702173753226, 0.18732355024635383, 0.18576697152725097, 0.8325868622123889, 0.15265478861121062, 0.8728600834109026, 0.19939943000930604, 0.16900036494957638, 0.14262328757602138, 0.16302688480849725, 0.8430448664026784, 0.865036985988077, 0.21143497607555417, 0.8072913088460375, 0.7499836368355727, 0.16776511162877228, 0.8253101482410483, 0.0937750536092975, 0.7963228771244174, 0.7596897219357606, 0.19943459820497011, 0.18451223216183188, 0.1917168990996182, 0.19839039410257064, 0.24073640014691, 0.17195098150549348, 0.19347029794275106, 0.21031162723810126, 0.22272383340638058, 0.09229062711655767, 0.10457540548370525, 0.09964888531335414, 0.09183462865480019, 0.08894613597688239, 0.08676625462411625, 0.12781105705813367, 0.08932690928203324, 0.11475192694424263]}, "mutation_prompt": null}
{"id": "b031e954-66bd-4888-ad78-5de6a039ad25", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_MultiPhaseSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Enhanced diversity with a larger initial population\n        self.inertia_weight = 0.6  # Adapted inertia weight for improved global exploration\n        self.cognitive_coefficient = 1.7  # Increased cognitive component for focused personal search\n        self.social_coefficient = 1.0  # Reduced social component to balance exploration\n        self.initial_temp = 1.5  # Higher initial temperature for increased exploration potential\n        self.cooling_rate = 0.85  # Slightly faster cooling rate for rapid convergence\n        self.final_temp = 0.1  # Final temperature for multi-phase cooling\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Broader velocity range for diversity\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with multi-phase SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * ((self.final_temp / self.initial_temp) ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_MultiPhaseSA", "description": "Quantum-inspired PSO with Multi-Phase Adaptive Cooling SA for Enhanced Global Search and Convergence.", "configspace": "", "generation": 71, "fitness": 0.3071181379057625, "feedback": "The algorithm QuantumInspiredPSO_MultiPhaseSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.8069569832653956, 0.7692367257252617, 0.8149221024000299, 0.7682022009446129, 0.7970838896084513, 0.7590846396820738, 0.7399901190910126, 0.793082843800725, 0.7872517918889689, 0.6441160681796883, 0.6380428295982685, 0.616548362437348, 0.6515431028892956, 0.6300055072673392, 0.6089601493207599, 0.6256287133615033, 0.5997650955083993, 0.5972957647282434, 0.17528030910024095, 0.13236410498745976, 0.17569010206968083, 0.1117249652133332, 0.15382354481357652, 0.15681212426087754, 0.12183063954962892, 0.1280934432990649, 0.16424842496331526, 0.10913165027519622, 0.10395964659503842, 0.09169192894425504, 0.10890349084261997, 0.1396676202527184, 0.08986875366150093, 0.1258636539130059, 0.13180632352629162, 0.11731827429011643, 0.9535591566601879, 0.9535497565101941, 0.959789137275037, 0.9408134242706977, 0.9316448312268697, 0.9488136125679258, 0.9489331194638031, 0.9028562950780129, 0.9452051574533754, 0.735188564910634, 0.5323612551758785, 0.05773452308265281, 0.728498177702602, 0.6935956206879721, 0.7141163920421294, 0.691207769461762, 0.087028862612056, 0.7220613916524069, 0.2295899824850519, 0.227287390667538, 0.22760387294166162, 0.1930478243907614, 0.27784267380163863, 0.2109460953157123, 0.1374953903649766, 0.1738414755909975, 0.23511650665395833, 0.28029667932794244, 0.201927349925495, 0.20850844658239986, 0.12097976646230435, 0.13180267937492351, 0.19514039165267494, 0.2312145643439596, 0.26053566594470856, 0.4087133539579131, 0.23768526995832717, 0.22396751825487748, 0.22784408587836402, 0.13135993727392792, 0.2151104794922637, 0.2737575384285721, 0.2936265488208867, 0.23281590173838285, 0.2648142570289601, 0.012953386727342142, 0.007557169646654649, 0.00651086629311759, 0.0111075674229143, 0.011039085006756766, 9.999999999998899e-05, 0.006375653854869046, 0.049823284630564735, 0.0749051014309543, 0.10484875832326401, 0.05312934805708758, 0.15119396669621765, 0.08853175838768534, 0.03331248639713358, 0.03408519779408359, 0.17799705239533758, 0.08077479623665695, 0.10166910098251847, 0.06628846659262677, 0.08825392542162203, 0.21567138261202268, 0.09576739699971581, 0.20827581888552238, 0.23133735744463324, 0.09636440220642939, 0.1799530189983336, 0.06998884951132622, 0.23514100971584206, 0.13152294839587608, 0.1806634551952353, 0.14368242566642397, 0.12671495800876453, 0.1344623700821459, 0.18675114862792042, 0.15905561939883717, 0.08070889760743538, 0.5386270832208858, 0.49563028659449826, 0.5244956538899586, 0.5826279290561029, 0.4558601084533058, 0.4885355907090235, 0.5806704593831535, 0.5275452143246773, 0.590618952038318, 0.10785587020397613, 0.07213273656764829, 0.13437425071260367, 0.11512616259925768, 0.13886874551157002, 0.09093421647711364, 0.14279199490045535, 0.17611593790503643, 0.15191407534526102, 0.24778859306684375, 0.25736667911172983, 0.19129719291368186, 0.2519378578476298, 0.2984302747861136, 0.5170274310418383, 0.19586713608100959, 0.2527064384645419, 0.18503455791380552, 0.4056472275931806, 0.29879623943188693, 0.4129640064792848, 0.35649760256266605, 0.3020806168183895, 0.34229682747879153, 0.32418912009811807, 0.29860611873840626, 0.25617681264182923, 0.2971228582225016, 0.22856655580317897, 0.3321234242919985, 0.24440127159386715, 0.3525684059315193, 0.28329590578706576, 0.2075984824601742, 0.33543503405613984, 0.3129949287388587, 0.24698781661008173, 0.22505869706526915, 0.22044638553212104, 0.24242821973677442, 0.2317277591307737, 0.1982847862347571, 0.27354443261716843, 0.3404061141306536, 0.20852096788038432, 0.19247086399088598, 0.17997280151869455, 0.1873850876778249, 0.19227788607074514, 0.24904777203677464, 0.16901680555609566, 0.18497344433674334, 0.25024359280510267, 0.2064036922293987, 0.8638009913226072, 0.18698372557590526, 0.15255121921105985, 0.8782479825691766, 0.20065178976995313, 0.1695354885934084, 0.23046618067414193, 0.1633695497049995, 0.1675186749395804, 0.8765625625034953, 0.21134922199681216, 0.6163829310602174, 0.2080997099813381, 0.16810025227570935, 0.15438678920202542, 0.7434646554001395, 0.8405662708339756, 0.8064173043002076, 0.1867766166382785, 0.1999657034236929, 0.20567527462650126, 0.1981886832745403, 0.18831542081798658, 0.1941649717935866, 0.2108322489878266, 0.19150348128331018, 0.20333489313872322, 0.07381947914680076, 0.10802591220353608, 0.10894400271916416, 0.10645211706108926, 0.1107555535247573, 0.10826912208970829, 0.07961654229443116, 0.10246515675883017, 0.0970746985364962]}, "mutation_prompt": null}
{"id": "7ae4e16b-e4b1-4c2e-a537-f384028317d5", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced exploration\n        self.inertia_weight = 0.6  # Slightly lower inertia weight for better control over exploration\n        self.cognitive_coefficient = 1.8  # Stronger cognitive component for personal space exploration\n        self.social_coefficient = 1.5  # Stronger social component for collective convergence\n        self.initial_temp = 1.5  # Higher initial temperature for pronounced exploration\n        self.cooling_rate = 0.85  # Slower cooling for gradual convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Enhanced velocity range for dynamic movement\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with reinforced feedback\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n\n                # Update position with adjusted quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive annealing\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveAnnealing", "description": "A Quantum-inspired PSO with Adaptive Annealing and Reinforced Feedback Mechanism for Enhanced Convergence.", "configspace": "", "generation": 72, "fitness": 0.31810895312998705, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7047786224399993, 0.7068330454777426, 0.6852010704728109, 0.6910964781659837, 0.7059500945682051, 0.6861740633978912, 0.6485712260215684, 0.6998876808443768, 0.7125306464343515, 0.517568756331235, 0.5140152888082425, 0.5368206819004905, 0.5154616369671801, 0.5532570734220079, 0.5141239717452529, 0.5509240175714699, 0.5971255913591591, 0.5812556083476914, 0.15083357113455476, 0.11770376600841359, 0.17324460990859547, 0.10494466472566621, 0.09306652732825127, 0.5129428839938956, 0.08782741362572555, 0.13784345068297332, 0.17455348300213513, 0.11214708503403692, 0.1496339556149815, 0.10945551433711043, 0.0933409422269138, 0.12757913609666705, 0.1045992510944116, 0.11773077111490837, 0.11246968608430286, 0.11048226682446038, 0.9580725834174698, 0.9551772623391016, 0.9606471815275777, 0.9463876016866885, 0.9281261894601116, 0.9253750026949845, 0.947217225425535, 0.9365089402023242, 0.9586447009702626, 0.6394168115279022, 0.6300699686338813, 0.5815470959002127, 0.6223255883048884, 0.6292119799483405, 0.15158344459220685, 0.5798487761185535, 0.6173578954929493, 0.6341201329794679, 0.805354747578175, 0.7891172151568563, 0.3803668622269848, 0.28012352189457934, 0.204634900409985, 0.21665357881139935, 0.7503279129234797, 0.7008242040998665, 0.24149191726061303, 0.2781228936861938, 0.2742295430864927, 0.21772736822364502, 0.22755327935974745, 0.2698804707122764, 0.32458690223802056, 0.27903792101172253, 0.27239456062941547, 0.3288466323027137, 0.22971976033683916, 0.234163667767619, 0.2525103804907127, 0.3213783160831585, 0.12956362207298444, 0.2716329464778441, 0.13192512410947188, 0.26729206590945254, 0.28516843296363237, 0.0009019456215048072, 0.016656317027725853, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011283481706686471, 9.999999999998899e-05, 0.0789675907293389, 0.0007889858183550702, 0.08163653703250295, 0.14832102152714155, 0.08282815845832614, 0.1035271288752394, 0.07094533126611058, 0.0484131744740367, 0.05474568738458785, 0.1563555332107971, 0.11415660437746122, 0.05526626738609297, 0.058203814841554014, 0.051951808040267666, 0.11579158152006896, 0.0768875472459053, 0.0705941603274558, 0.1364219349088791, 0.09017327389167018, 0.18519738039445333, 0.06672994523968734, 0.1259479439145731, 0.10327602663683078, 0.10092647495900442, 0.26254478202683995, 0.15863545984277638, 0.11095291693237574, 0.22956157696590052, 0.10552982599895733, 0.08123850120846532, 0.4989247459669316, 0.5049805956917788, 0.5494470664091933, 0.5127551645778755, 0.4835673106032429, 0.5106753487252818, 0.5033399436515158, 0.53820833347812, 0.4947434562469464, 0.13940188822743949, 0.07760322168292766, 0.10701258952338843, 0.15367896318201313, 0.09192166501602894, 0.11015550774678162, 0.10358260844743306, 0.13750468207942868, 0.08984534954153967, 0.3925070290473557, 0.24360113920454773, 0.2194672794884589, 0.25695226203549704, 0.41813836179545893, 0.38422454795746785, 0.23709937893901778, 0.17729372184530656, 0.46620450124908197, 0.3412994587047582, 0.3384187519771995, 0.3327685578630163, 0.31344953914718277, 0.30950981058962335, 0.3331360431390271, 0.3297444324700166, 0.3492572338665141, 0.3393176616273337, 0.26317157209658426, 0.2792205173185869, 0.3121296258302213, 0.1845534433837429, 0.23143592769942367, 0.2685871443450303, 0.2752989331253549, 0.2954303437587149, 0.3222317943904628, 0.20940106452252227, 0.22634535640352615, 0.1965555847701016, 0.23444021035002272, 0.24174336527150297, 0.20661180520008948, 0.21847483967693437, 0.2321896507628387, 0.23321785600685285, 0.20748539128529664, 0.24274492834319372, 0.21051687590443158, 0.20031464586013803, 0.6060900085209091, 0.18720215930868533, 0.222499910700932, 0.22339006733020328, 0.17568509170886448, 0.8184452753230035, 0.18627182820622368, 0.15330928279205214, 0.8152946041965765, 0.19948940350221023, 0.1469760376649839, 0.6474973939423366, 0.1669638213878889, 0.842867493268364, 0.7581612924284834, 0.21219840145105717, 0.7818472308436409, 0.16702241772142357, 0.16797158046842176, 0.15292059292924964, 0.713420217905071, 0.818272712281399, 0.7443777603906323, 0.1818295558838514, 0.19753863813946082, 0.18963200808679048, 0.17723446939718657, 0.2306123928946886, 0.2201116071700816, 0.19430897006037917, 0.2072544912901939, 0.21666404116941262, 0.08942429260609663, 0.11287989994478231, 0.09705757165879991, 0.09572680764467967, 0.0951526620670653, 0.09453385528149028, 0.09561741221481368, 0.09846029497934394, 0.10373604484961141]}, "mutation_prompt": null}
{"id": "49b49f98-57fb-4e73-bf9d-22f5bc877661", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarm_RobustSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for greater diversity\n        self.inertia_weight = 0.6  # Moderately controlled inertia for better convergence\n        self.cognitive_coefficient = 1.7  # Enhanced cognitive attraction for personal best\n        self.social_coefficient = 1.3  # Slightly increased social component for exploration\n        self.initial_temp = 1.5  # Higher initial temperature for robust exploration\n        self.cooling_rate = 0.85  # More gradual cooling for thorough convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Expanded velocity scope\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with robust SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Enhanced dynamic control\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "AdaptiveQuantumSwarm_RobustSA", "description": "An Adaptive Quantum Swarm with Robust Simulated Annealing and Time-varying Parameters for Enhanced Optimization Dynamics.", "configspace": "", "generation": 73, "fitness": 0.29387284214203535, "feedback": "The algorithm AdaptiveQuantumSwarm_RobustSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7323990690286732, 0.691606522726964, 0.7559090118098905, 0.19030297846352484, 0.7439470375085746, 0.7449070203064074, 0.7419490379072524, 0.7569662343954792, 0.7071399677734649, 0.5363037886873957, 0.037964297874485964, 0.5300771562459001, 0.610201351463062, 0.5774546688348258, 0.5792308997846597, 0.5716802958263482, 0.6025773963656149, 0.6243424551214978, 0.17828978913079774, 0.5969184107784042, 0.14304614391605663, 0.17653221158090526, 0.5401962331869239, 0.17560577517840614, 0.15649753598063476, 0.17769624806615125, 0.14016695763475528, 0.10649806120976568, 0.13207426956893487, 0.4833504535302605, 0.09496228529372497, 0.12329520299492447, 0.13284210011760533, 0.17045731902333572, 0.12480220827382893, 0.1509269622145959, 0.9849889512724317, 0.9859332225591768, 0.9885469456784511, 0.9838338437116122, 0.9812548202854389, 0.9818062908780465, 0.9836292490777002, 0.9858632956549035, 0.982251544715872, 0.6410684363921242, 0.5948113478678714, 0.6417357029926524, 0.6042191278416709, 0.1513268431981083, 0.6750040668568408, 0.12126316130077208, 0.08869197119445016, 0.6329173423133032, 0.22953302193541858, 0.8085399934249231, 0.22422363451194893, 0.2051678041646674, 0.19305658969942396, 0.1933177683390095, 0.8053058932872641, 0.12545654629731784, 0.23498724389677483, 0.2966980380194324, 0.12333020422177665, 0.2050763830267518, 0.1063872696324577, 0.1316164229113982, 0.25759179859183023, 0.24034332366747235, 0.23104412070705038, 0.1293357168128101, 0.18889233522270799, 0.21729867958932936, 0.2194894051058417, 0.2576424515707554, 0.2433991672176251, 0.2629002169667579, 0.278862315673881, 0.09473402536850295, 0.25859034520827284, 0.10790602564955465, 0.006675259855227544, 0.10043550402562051, 0.03216234254129813, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038542037123819872, 0.010551749912724673, 9.999999999998899e-05, 0.13123192691524743, 0.024336892539490895, 0.12833670061563374, 0.06704828228672033, 0.03853792904632625, 0.011373679483408394, 0.050371857165166345, 0.05732665878075205, 0.11159740826375764, 0.03045451881976291, 0.08691743032096388, 0.2889581507000293, 0.07452373888916375, 0.08791713588604055, 0.09476301910005491, 0.09064194184387797, 0.0902002501667083, 0.17944806699127636, 0.2533752928923867, 0.04164894185721879, 0.0692304760100535, 0.00641754994459609, 0.13650351930484173, 0.10754198107631163, 0.07947810946074674, 9.999999999998899e-05, 0.0804759408960608, 0.532467258638919, 0.5129179954290597, 0.5650122674857401, 0.5342912703677667, 0.49443680266275325, 0.4499499604366345, 0.5244667541524153, 0.529301266258702, 0.5425159446203451, 0.11161332366237053, 0.09399842508244494, 0.1558692396041812, 0.1787883828363971, 0.09356976292993457, 0.09952968397694317, 0.11416539126824043, 0.1114845830276241, 0.15650250826296275, 0.24768381941499373, 0.21574740767417144, 0.1941123164901396, 0.25154770168064655, 0.20704557951691127, 0.35989989976076897, 0.2161081664737421, 0.22604948135924163, 0.19741703318832404, 0.25017356531456103, 0.3143411594822576, 0.38117900051717146, 0.32552559831039674, 0.2404060754763474, 0.24015281524621812, 0.33714376618875763, 0.26735066185393874, 0.3884542954026283, 0.17613097205640682, 0.33075238819465314, 0.32466516312511606, 0.18216404405662867, 0.23163841483807823, 0.20407019055184605, 0.22715792620626585, 0.2927018994778581, 0.32958467111163936, 0.22462167153555768, 0.18921169377757263, 0.21047378015432172, 0.2525260164645222, 0.20158257167399984, 0.29024456845322333, 0.23330998880724796, 0.19467325521749912, 0.23945619467439916, 0.24129467630583934, 0.21761798618102413, 0.2251625063040844, 0.6408098294177149, 0.2449949947372475, 0.2095558006549343, 0.18591260254213726, 0.2002644786768678, 0.24367674113132165, 0.8552020789145094, 0.1266614096535723, 0.15355175662648546, 0.17126177597406278, 0.19909748080423684, 0.16732310456781674, 0.14291889994936868, 0.16440136528164806, 0.8665370399971136, 0.6386601935549248, 0.2120660034891736, 0.07350911391876469, 0.6677225367269606, 0.16829448745455788, 0.15318583415555875, 0.6559311991014103, 0.10487388958109045, 0.8084396413850958, 0.19674542290520236, 0.2153074338192742, 0.23642328789737843, 0.19008820177512709, 0.19751737540975178, 0.17941696981403876, 0.21837035389183979, 0.1996261543231007, 0.23772605159036087, 0.09881875985689115, 0.12553038408235206, 0.10878316663786047, 0.07877739740054546, 0.09508603676372873, 0.08860584259278326, 0.08344714989267954, 0.09924003889130562, 0.10018515199613853]}, "mutation_prompt": null}
{"id": "3b9edd99-f0e6-485c-87fb-f139f09981d5", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for improved diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for better exploration-exploitation balance\n        self.cognitive_coefficient = 1.8  # Increased cognitive component for more personal search exploration\n        self.social_coefficient = 1.5  # Increased social component for better global exploration\n        self.initial_temp = 1.5  # Higher initial temperature for enhanced exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for prolonged convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Broader velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with improved quantum certainty\n                population[i] = np.clip(population[i] + np.tanh(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Dual adaptive simulated annealing for personal best update\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight for emphasis on exploitation\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "Enhanced Quantum-inspired PSO with Dual Adaptive Simulated Annealing for Superior Exploration-Exploitation Balance.", "configspace": "", "generation": 74, "fitness": 0.31810895312998705, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7047786224399993, 0.7068330454777426, 0.6852010704728109, 0.6910964781659837, 0.7059500945682051, 0.6861740633978912, 0.6485712260215684, 0.6998876808443768, 0.7125306464343515, 0.517568756331235, 0.5140152888082425, 0.5368206819004905, 0.5154616369671801, 0.5532570734220079, 0.5141239717452529, 0.5509240175714699, 0.5971255913591591, 0.5812556083476914, 0.15083357113455476, 0.11770376600841359, 0.17324460990859547, 0.10494466472566621, 0.09306652732825127, 0.5129428839938956, 0.08782741362572555, 0.13784345068297332, 0.17455348300213513, 0.11214708503403692, 0.1496339556149815, 0.10945551433711043, 0.0933409422269138, 0.12757913609666705, 0.1045992510944116, 0.11773077111490837, 0.11246968608430286, 0.11048226682446038, 0.9580725834174698, 0.9551772623391016, 0.9606471815275777, 0.9463876016866885, 0.9281261894601116, 0.9253750026949845, 0.947217225425535, 0.9365089402023242, 0.9586447009702626, 0.6394168115279022, 0.6300699686338813, 0.5815470959002127, 0.6223255883048884, 0.6292119799483405, 0.15158344459220685, 0.5798487761185535, 0.6173578954929493, 0.6341201329794679, 0.805354747578175, 0.7891172151568563, 0.3803668622269848, 0.28012352189457934, 0.204634900409985, 0.21665357881139935, 0.7503279129234797, 0.7008242040998665, 0.24149191726061303, 0.2781228936861938, 0.2742295430864927, 0.21772736822364502, 0.22755327935974745, 0.2698804707122764, 0.32458690223802056, 0.27903792101172253, 0.27239456062941547, 0.3288466323027137, 0.22971976033683916, 0.234163667767619, 0.2525103804907127, 0.3213783160831585, 0.12956362207298444, 0.2716329464778441, 0.13192512410947188, 0.26729206590945254, 0.28516843296363237, 0.0009019456215048072, 0.016656317027725853, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011283481706686471, 9.999999999998899e-05, 0.0789675907293389, 0.0007889858183550702, 0.08163653703250295, 0.14832102152714155, 0.08282815845832614, 0.1035271288752394, 0.07094533126611058, 0.0484131744740367, 0.05474568738458785, 0.1563555332107971, 0.11415660437746122, 0.05526626738609297, 0.058203814841554014, 0.051951808040267666, 0.11579158152006896, 0.0768875472459053, 0.0705941603274558, 0.1364219349088791, 0.09017327389167018, 0.18519738039445333, 0.06672994523968734, 0.1259479439145731, 0.10327602663683078, 0.10092647495900442, 0.26254478202683995, 0.15863545984277638, 0.11095291693237574, 0.22956157696590052, 0.10552982599895733, 0.08123850120846532, 0.4989247459669316, 0.5049805956917788, 0.5494470664091933, 0.5127551645778755, 0.4835673106032429, 0.5106753487252818, 0.5033399436515158, 0.53820833347812, 0.4947434562469464, 0.13940188822743949, 0.07760322168292766, 0.10701258952338843, 0.15367896318201313, 0.09192166501602894, 0.11015550774678162, 0.10358260844743306, 0.13750468207942868, 0.08984534954153967, 0.3925070290473557, 0.24360113920454773, 0.2194672794884589, 0.25695226203549704, 0.41813836179545893, 0.38422454795746785, 0.23709937893901778, 0.17729372184530656, 0.46620450124908197, 0.3412994587047582, 0.3384187519771995, 0.3327685578630163, 0.31344953914718277, 0.30950981058962335, 0.3331360431390271, 0.3297444324700166, 0.3492572338665141, 0.3393176616273337, 0.26317157209658426, 0.2792205173185869, 0.3121296258302213, 0.1845534433837429, 0.23143592769942367, 0.2685871443450303, 0.2752989331253549, 0.2954303437587149, 0.3222317943904628, 0.20940106452252227, 0.22634535640352615, 0.1965555847701016, 0.23444021035002272, 0.24174336527150297, 0.20661180520008948, 0.21847483967693437, 0.2321896507628387, 0.23321785600685285, 0.20748539128529664, 0.24274492834319372, 0.21051687590443158, 0.20031464586013803, 0.6060900085209091, 0.18720215930868533, 0.222499910700932, 0.22339006733020328, 0.17568509170886448, 0.8184452753230035, 0.18627182820622368, 0.15330928279205214, 0.8152946041965765, 0.19948940350221023, 0.1469760376649839, 0.6474973939423366, 0.1669638213878889, 0.842867493268364, 0.7581612924284834, 0.21219840145105717, 0.7818472308436409, 0.16702241772142357, 0.16797158046842176, 0.15292059292924964, 0.713420217905071, 0.818272712281399, 0.7443777603906323, 0.1818295558838514, 0.19753863813946082, 0.18963200808679048, 0.17723446939718657, 0.2306123928946886, 0.2201116071700816, 0.19430897006037917, 0.2072544912901939, 0.21666404116941262, 0.08942429260609663, 0.11287989994478231, 0.09705757165879991, 0.09572680764467967, 0.0951526620670653, 0.09453385528149028, 0.09561741221481368, 0.09846029497934394, 0.10373604484961141]}, "mutation_prompt": null}
{"id": "dc87570a-a0e7-4a9e-bf44-816b2fb5cb7f", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for better velocity control\n        self.cognitive_coefficient = 1.4  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.3  # Slightly increased social component for exploration\n        self.initial_temp = 1.0  # Adjusted initial temperature for exploration\n        self.cooling_rate = 0.95  # Slower cooling rate for improved convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with stochastic perturbation\n                stochastic_perturbation = np.random.normal(0, 0.1, self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + stochastic_perturbation)\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA, Dynamic Parameter Adjustment, and Stochastic Velocity Perturbation for Improved Convergence.", "configspace": "", "generation": 75, "fitness": 0.21734572942095037, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.3996548663635445, 0.3848927445572231, 0.39988383584473663, 0.42472634525794706, 0.4109171626688565, 0.39235882367636254, 0.40681118158297214, 0.4104086184974133, 0.46211819752472005, 0.00010917606606586361, 9.999999999998899e-05, 0.050956133971790996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038177497027485185, 9.999999999998899e-05, 0.12474084019967446, 0.15499444123049055, 0.10191347592236255, 0.1281866892761273, 0.07011706742170642, 0.13457080522720444, 0.11212104274078571, 0.1298514743936363, 0.1260960233654852, 0.10277446347817332, 0.10666196783691917, 0.0807689342904836, 0.0927131738629492, 0.10206816714823086, 0.09573466107672779, 0.11123141210793852, 0.102839425875354, 0.08391508061945874, 0.9546940264416656, 0.9495992675398042, 0.9622245047482187, 0.9465815470803413, 0.9361464271472641, 0.9396708795845761, 0.9505565254655265, 0.9228017185340484, 0.949494641961016, 0.2846254799999599, 0.2842293026932622, 0.2838972519180867, 0.3146174364694936, 0.31386727397260017, 0.3071664400879335, 0.2923171695151434, 0.29532597335262245, 0.30338435262658625, 0.3504480494486274, 0.38243861685111835, 0.35960222110670037, 0.24188443277260263, 0.3201465924896606, 0.3116628298029387, 0.26899063327670547, 0.2542054115675182, 0.36216489298700794, 0.12657875127322682, 0.15595927715891844, 0.12418584017597645, 0.12276701609670704, 0.2075731132845191, 0.1248904033925412, 0.12836324581520786, 0.18089425095635359, 0.16043286329154438, 0.1317427023878679, 0.18578712824739785, 0.16587514177849338, 0.17322105573255608, 0.111758907309355, 0.1866074200603003, 0.18592256541906182, 0.1846184633343616, 0.12895736488903786, 0.03382109926187582, 0.0036511368426085378, 9.999999999998899e-05, 0.000479709264928907, 9.999999999998899e-05, 9.999999999998899e-05, 0.04267569859451337, 0.08466152405072358, 0.00903676055285918, 0.20366385865776093, 0.03148925040100292, 0.09311179116376755, 0.0767915782675509, 0.03329754732813417, 0.03093316872043328, 0.07493663761789326, 0.06288822034733932, 0.07952251527605347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10134396442286397, 0.10169559184604549, 0.10605311183932009, 0.11661241318511506, 0.09767399837260382, 0.11176740587557943, 0.06910391197106569, 0.08842464111630854, 0.0737175089343024, 0.3863279632156734, 0.37942823161357675, 0.38384961394277106, 0.37684368453480654, 0.3617032288487233, 0.36391215309302827, 0.3933640367717508, 0.36826868313306904, 0.3884236817887625, 0.14634636692597525, 0.07536553765966014, 0.11620783330650752, 0.11413384397848281, 0.11161652075945616, 0.1236164131622165, 0.11578650418162395, 0.12866823446586317, 0.11349640946044803, 0.25219184066492484, 0.26170034937403475, 0.17909899269222518, 0.19909849291349435, 0.2760187242366241, 0.24249772700659056, 0.2902141108101435, 0.23449593158167514, 0.2669783412753882, 0.26829027969969144, 0.2898739577305032, 0.297650033726066, 0.2888911150222443, 0.2169232781925925, 0.2919134434752644, 0.2810280441014126, 0.2858868460184386, 0.2772994752529362, 0.2388101007394835, 0.20350121831946488, 0.22627249786453196, 0.24405469401600421, 0.2094983822681762, 0.22093889651993126, 0.230940264035702, 0.2356089421277815, 0.23942177292778566, 0.25150386988770757, 0.1932341517641989, 0.20191669777564303, 0.23579567817202474, 0.22806093924538973, 0.20211925166157874, 0.2166840927587329, 0.2105451379024228, 0.22218801535396593, 0.20317296048258215, 0.1944564701613375, 0.23806337282656065, 0.2558649463902709, 0.19535906656236357, 0.23033740930149238, 0.21735925965951142, 0.19947888607066389, 0.2095384061068849, 0.575176086159658, 0.17704756300711721, 0.1521725852636966, 0.6160318866259326, 0.19891631823523814, 0.19813154536455102, 0.14185193664369544, 0.16164269959866018, 0.16741338397349714, 0.5580787358664736, 0.21118043429112388, 0.07335610800441061, 0.16796176603710378, 0.16827196602377115, 0.15424518681457233, 0.5592762613452065, 0.10455598636210028, 0.6404207390168857, 0.21097313584923894, 0.17900545262771916, 0.17626159578823442, 0.2037226637770494, 0.1885159747384455, 0.19548958467586186, 0.18860804047880497, 0.18199081397156125, 0.19005770911038866, 0.08263501698789566, 0.08460086642059328, 0.09364250604257196, 0.09250321045086407, 0.0956378125712527, 0.09588633088477849, 0.08111672162394967, 0.08910591465382056, 0.08871152705178464]}, "mutation_prompt": null}
{"id": "ace21e71-ec90-4b03-8a09-6de16d13c8fa", "solution": "import numpy as np\n\nclass HybridQuantumPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced exploration\n        self.inertia_weight = 0.6  # Moderate inertia weight for balanced velocity control\n        self.cognitive_coefficient = 1.4  # Lower cognitive component for global focus\n        self.social_coefficient = 1.3  # Slightly increased social component for improved cooperation\n        self.initial_temp = 1.5  # Higher initial temperature for more robust exploration\n        self.cooling_rate = 0.85  # Slower cooling rate to extend the search duration\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Moderate velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = personal_best[global_best_idx]\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive quantum-inspired velocity update\n                adaptive_coeff = np.random.rand(self.dim) * (0.5 + (self.evaluations / self.budget))\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * adaptive_coeff * (personal_best[i] - population[i])\n                                 + self.social_coefficient * adaptive_coeff * (global_best - population[i]))\n                \n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA and diversity consideration\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx]\n\n            # Dynamic inertia weight adjustment\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget\n\n        return global_best, personal_best_fitness[global_best_idx]", "name": "HybridQuantumPSO_SA", "description": "Hybrid Quantum-inspired PSO and Simulated Annealing with Adaptive Leadership and Diversity Reinforcement.", "configspace": "", "generation": 76, "fitness": 0.29906422993920867, "feedback": "The algorithm HybridQuantumPSO_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7983534881234482, 0.7867011782571417, 0.8110313064736709, 0.7825726859797745, 0.8248584352383901, 0.794673766175232, 0.813741585273559, 0.8182740989501771, 0.7954765576512696, 0.5567505185001389, 0.39962557502810725, 0.4996705117901482, 0.4608640121190474, 0.48630765897993633, 0.5594093794358801, 0.5389126263118571, 0.5486435066230424, 0.4713054183506511, 0.11570786039356629, 0.06998188578386977, 0.08857904214052181, 0.13276802320396053, 0.13238017931261015, 0.15672558505546075, 0.06592482860297044, 0.09543970842647631, 0.13056967852852996, 0.06182745861698191, 0.1238468934092336, 0.11422294590060811, 0.11694112033281168, 0.0750961379354732, 0.059946664185897, 0.11551884271505808, 0.10949957222719242, 0.10322705126633414, 0.9353476901092469, 0.9328533744431289, 0.9542052882234701, 0.9248153249460317, 0.9286618475050734, 0.9171181087911116, 0.9406878912482329, 0.893261248588198, 0.9453027597748531, 0.7581110063564792, 0.6845424846530707, 0.0580505758266987, 0.7699489511260155, 0.7359119334432882, 0.7492694162144478, 0.723114266026746, 0.6710864899014423, 0.744456585615997, 0.21717773136195273, 0.29367264273040117, 0.22698308902108977, 0.19449227639042332, 0.20474104504220125, 0.19191920834345522, 0.2201295245792907, 0.23439102171432125, 0.3931458273623515, 0.1267958284318227, 0.12612617203239895, 0.2540231002164526, 0.12608432873656839, 0.3024174002459885, 0.12239094746380996, 0.20385456868352525, 0.24128125965885172, 0.13258210141513027, 0.22915013504380188, 0.24846618725522618, 0.2055795439967748, 0.24213429492773775, 0.217279207417165, 0.3011202431363852, 0.23825580878490815, 0.13267459341550292, 0.2770262006400751, 9.999999999998899e-05, 0.038777073619467584, 0.14099888512603032, 0.07979585717052873, 9.999999999998899e-05, 9.999999999998899e-05, 0.020434192756891068, 0.009023109286556474, 0.024894429143039964, 0.1210046122690166, 0.10432558251584267, 0.09119701372354716, 0.09019841078529589, 0.06645681734019204, 0.05506520326904718, 0.1402301975203043, 0.0752601486733161, 0.140499470754333, 0.10374123525364232, 0.18537516133398801, 0.12436940245679784, 0.14448132642738853, 0.09438450532138543, 0.07668810902960577, 0.09926240367680561, 0.07113136995967617, 0.07276971741992455, 0.3790066058067477, 0.10460409003670068, 0.23742791445963662, 0.15979911502271515, 0.22907433560942492, 0.15441741596872904, 0.08148317971684305, 0.048345268124738494, 0.08268472821899608, 0.5798500272615299, 0.6447301889448797, 0.5340799995850737, 0.5343905450337512, 0.5478845812993098, 0.5436756268660079, 0.5923548081502349, 0.6180802712763779, 0.5573926220405407, 0.07648759870121047, 0.1041256077752003, 0.07927773457138687, 0.10889806879741204, 0.06476982445646495, 0.13111332134806197, 0.08956464463508651, 0.11057610766157211, 0.11143012193525159, 0.36435620181055306, 0.22076618695292705, 0.23197853459429585, 0.14093338910052045, 0.27288149793582095, 0.2799243254244944, 0.23365541464541606, 0.14166576462078606, 0.3018736291768318, 0.29837132973653446, 0.3786028235535692, 0.2892133878362322, 0.3114052957598572, 0.3129928630386769, 0.31322051065956613, 0.3309993637488199, 0.2524274313123679, 0.3548101549574002, 0.22546373640071893, 0.22472557725396658, 0.2835652775074543, 0.20175427952517966, 0.20784301576366693, 0.26352394340917396, 0.21998054553179647, 0.23422495373040497, 0.24909240663504628, 0.27120632118980004, 0.20123493615637045, 0.22428476208588266, 0.22773407755191843, 0.30571204058899815, 0.2095276064810938, 0.2658570373674789, 0.18643406266074147, 0.2612215050673745, 0.22321653777818407, 0.20786691246839195, 0.22354701278644162, 0.2518746876629784, 0.22264719170321257, 0.20727470516740798, 0.1736046588388086, 0.18017601750622692, 0.1830898371816757, 0.15765186689957922, 0.18736994345957425, 0.18578383811037413, 0.8849704396093403, 0.2004688913026701, 0.8974391941453163, 0.14190528472193997, 0.11029422867650684, 0.17860246107105782, 0.8971614547624482, 0.21301726879387606, 0.12605427682009218, 0.9066018508425848, 0.1677101080526443, 0.14870009402088813, 0.16588115185316654, 0.7976344233453523, 0.7772260847766335, 0.19832247115897728, 0.22451391095294726, 0.22742963014670636, 0.198876860047298, 0.1871408049494574, 0.21388445083952856, 0.20669582778942275, 0.2672408650171465, 0.23947734026533707, 0.07992548440980685, 0.07832878855030556, 0.10029993370450974, 0.1123615928411762, 0.1108217934455592, 0.09630014850800728, 0.09955973982494104, 0.08122939691385767, 0.10202610909830678]}, "mutation_prompt": null}
{"id": "434e6610-2bc1-4239-a3b1-6e141e6b075d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "e07b31f8-1b97-4aff-b764-80e2fee4a443", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced exploration\n        self.inertia_weight = 0.9  # Higher inertia weight for robust velocity persistence\n        self.cognitive_coefficient = 1.4  # Slightly reduced cognitive component to shift balance towards social learning\n        self.social_coefficient = 1.3  # Slightly increased social component to enhance collective search\n        self.initial_temp = 1.5  # Higher initial temperature for more aggressive exploration\n        self.cooling_rate = 0.85  # Further slowed cooling rate for sustained exploration capacity\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Increased velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.6 + 0.3 * (self.budget - self.evaluations) / self.budget  # Broadened dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive Simulated Annealing and Dynamic Inertia Weight Adjustment for Improved Convergence Robustness.", "configspace": "", "generation": 78, "fitness": 0.2518906519866031, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.38942072300624997, 0.40980059499004406, 0.4427657877315736, 0.37437071348411843, 0.41625201536221745, 0.40146092845538806, 0.39379302723738796, 0.41486996996082104, 0.42819941902559167, 0.28419112677679814, 0.2508882821075341, 0.23027830083649037, 0.2217595758390597, 0.2539841958707677, 0.22916135678789995, 0.22448299557503604, 0.26764386428048403, 0.2340802707274704, 0.2500608435551287, 0.1763123315958377, 0.13952469214144547, 0.2877922162906352, 0.2969027802920503, 0.12348822928372061, 0.1538814421864716, 0.12974708052611328, 0.14510658630839168, 0.14047182383764045, 0.10844265303054001, 0.10377849645808457, 0.12710941201793013, 0.13078032592692146, 0.10756550742912097, 0.1178260124201519, 0.11957699012112322, 0.10747323195017, 0.9565954418876023, 0.9588942686246016, 0.9644048659461628, 0.949370875835938, 0.940150813232268, 0.9557418380832493, 0.9569098373707855, 0.9411038617688225, 0.9538850747349623, 0.40384273176510843, 0.3933231807816886, 0.391163741757256, 0.3990760981468926, 0.4371450108548277, 0.26007099114279164, 0.4116988659362477, 0.0871451243482626, 0.405926077795856, 0.5063039797054523, 0.22498232184953726, 0.22193511071593464, 0.20951489582924898, 0.7173363520596587, 0.19028903380544793, 0.21689656423569337, 0.21815549514621957, 0.5973949449642626, 0.19109956385104843, 0.20775389334028938, 0.11626598270290256, 0.195210105408966, 0.12340071928488783, 0.12248814828614174, 0.1914932030802543, 0.21744896669018254, 0.24040496836012648, 0.2125195620744733, 0.19466438430776234, 0.204319021976206, 0.22141450627399673, 0.2355016188227329, 0.21271812092862097, 0.15496388347179235, 0.1723427258444704, 0.20784367477618226, 9.999999999998899e-05, 0.0030567974134900755, 0.0002752460166844939, 0.002047514962143948, 9.999999999998899e-05, 9.999999999998899e-05, 0.019009873631427365, 9.999999999998899e-05, 0.05705823643175667, 0.2046241102366777, 0.04370349471408941, 0.12531990946440763, 0.11340678613252164, 0.01948145702169546, 0.004487423173530458, 0.11793476299608241, 0.09833986466281242, 0.12485530579740678, 0.08236014342389009, 0.05447447434648256, 0.12015184922304711, 0.12315799712268582, 0.05359932154656999, 0.08884154810567091, 0.06947326358491135, 0.04935122564802785, 0.04949736307904207, 0.1782557350854611, 0.09355433777726962, 0.10247563734408849, 0.005466096345605909, 0.08652795229123367, 0.10603788236416112, 0.07393554549906689, 0.1490899488332159, 0.07436476610716547, 0.37336687863554907, 0.3778379729261976, 0.3876982824767805, 0.4155716202503108, 0.40655935041154745, 0.3944405495235387, 0.3773643778630936, 0.38157056469279205, 0.3686158352831692, 0.09677489789584037, 0.08741890736932478, 0.09803422557132513, 0.10962214396871528, 0.11813251942854275, 0.12752393119496996, 0.12901014121822374, 0.1055739233681312, 0.14300687273862678, 0.17071094601813708, 0.2139719556721399, 0.18663606969569924, 0.3191065415311948, 0.23578942234952793, 0.30878828403264247, 0.3209816419361333, 0.2274155617208623, 0.30277772900708444, 0.2700717219364914, 0.2276008622232938, 0.28460304961763094, 0.28213722949806774, 0.2868972170617934, 0.3026385633883739, 0.29004072930163693, 0.29054755554753153, 0.2868029158728562, 0.2518270953388967, 0.27724871172717436, 0.2676840096960874, 0.2735683919015255, 0.21918867524857388, 0.25737186420549074, 0.27042223558071943, 0.2815684600349472, 0.19378443949440305, 0.23212540937992387, 0.24635261425095645, 0.22461973280529368, 0.2471803144644491, 0.23176647508531745, 0.20756084278985276, 0.2580298831177311, 0.22532250768444795, 0.2469665454163349, 0.22690094786689907, 0.35027551108085275, 0.19481336785749415, 0.35391317356031315, 0.1989447359871921, 0.23493216733174682, 0.19346933365704044, 0.20479893138890437, 0.23087168417574444, 0.6258274297222695, 0.1831945812861261, 0.17722913168159815, 0.6575505363066935, 0.19697873352268003, 0.16713466423305567, 0.170698022573874, 0.16348961898908165, 0.6133119172675173, 0.5561276488563386, 0.21053866907213503, 0.42601635103800417, 0.5407714642508494, 0.16624442112192717, 0.15232486450487837, 0.5489890133148734, 0.6003142995905405, 0.16412818187348743, 0.2105862801183478, 0.19505916762881692, 0.239026234352411, 0.19398717261539267, 0.23650064832592388, 0.22488369090455274, 0.21586228046032552, 0.21054435317892062, 0.19651503569027162, 0.09133454771773664, 0.10633271103767761, 0.08874194396748047, 0.07963059091167302, 0.09498489499783902, 0.11628942648646101, 0.09185616594267498, 0.09004052390162764, 0.07921643769156383]}, "mutation_prompt": null}
{"id": "e0fb9dac-853c-4ca9-a1de-1076685156d3", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO_GradientRefinement:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 40  # Slightly adjusted population size for balance\n        self.inertia_weight = 0.6  # Modified inertia weight for effective control\n        self.cognitive_coefficient = 1.7  # Increased cognitive component for better personal search\n        self.social_coefficient = 1.3  # Adjusted social component for exploration\n        self.initial_temp = 1.0  # Reset initial temperature for controlled exploration\n        self.cooling_rate = 0.85  # Modified cooling rate for improved convergence\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired velocity update\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.normal(size=self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.normal(size=self.dim) * (personal_best[global_best_idx] - population[i]))\n\n                # Gradient-based refinement\n                refinement = np.sign(velocities[i]) * np.abs(velocities[i]**2)\n                population[i] = np.clip(population[i] + refinement, self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best with adaptive acceptance\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  \n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "AdaptiveQuantumPSO_GradientRefinement", "description": "An Adaptive Quantum-Guided Particle Swarm Optimization with Gradient-Based Refinement for Enhanced Convergence.", "configspace": "", "generation": 79, "fitness": 0.09548380716760418, "feedback": "The algorithm AdaptiveQuantumPSO_GradientRefinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.11869729595922507, 0.08369641052109289, 0.0917036934772425, 0.1589979785093708, 0.15489413012776532, 0.13182552279170068, 0.11540351632963142, 0.11110848965529929, 0.11363382285470469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009329875936452514, 0.014759626988384622, 0.022422855914199347, 0.01528773992526733, 0.01504626222319716, 0.016893807277703177, 0.03602090840621808, 0.009852094720704363, 0.02818363698857107, 9.999999999998899e-05, 9.999999999998899e-05, 0.03896525352788571, 0.022071610193680646, 0.0004952459975243739, 0.013047071821176925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9882831198507397, 0.9914852284728952, 0.9845395076910258, 0.9959898156327784, 0.9906468035879787, 0.9886107067547749, 0.9918839079331195, 0.9914334181260493, 0.9909045645687342, 0.06274794416174423, 0.022201834349290905, 9.999999999998899e-05, 0.005091494783133754, 0.006224342538072247, 0.009103382048789355, 0.008283210323541068, 0.055412477675372385, 0.02862708374681666, 0.10088065566435012, 0.0635596399538475, 0.059824388882108726, 0.06767121297439083, 0.05232275185338908, 0.1086465047867885, 0.055812345338815295, 0.07418419270526178, 0.05317005402773756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008504226919933688, 0.008757662694590884, 0.009165642362099047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004528572347961557, 9.999999999998899e-05, 0.00013250139065401623, 0.015699433006087005, 9.999999999998899e-05, 0.007032545215471697, 9.999999999998899e-05, 0.003191286820574346, 0.007400956266767955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12411426331616382, 0.1425622740265522, 0.16253221589439182, 0.14756117457807216, 0.11689170640550706, 0.10844724223271318, 0.16112956940342849, 0.11355375906862353, 0.12153388535237541, 0.018457702232889783, 0.049669927540727854, 0.03251747621972334, 0.03266886175302153, 0.0018864469020021257, 0.09972138544443909, 0.007105094213695651, 0.0045991893329253575, 0.0267656688986897, 0.14131876251246844, 0.1471698474199531, 0.13609581073053856, 0.13111807816549303, 0.14064269479282943, 0.12802611861059354, 0.14689651853225782, 0.1243529037161466, 0.10822605639906047, 0.11153999370322365, 0.11143573115986816, 0.14538997594269198, 0.13800672315110074, 0.12847468276117546, 0.11084367023457975, 0.15298337180075028, 0.17377774300845283, 0.13540037849710862, 0.07691059647257481, 0.051438899125645365, 0.05847421449710888, 0.08315971782313247, 0.09501497526629077, 0.06687088421513365, 0.08502452774701619, 0.0997711199450243, 0.09910336020264787, 0.11943364695601921, 0.1050592773611777, 0.13345086981233123, 0.13061093929642442, 0.12299800455437804, 0.11128063849089864, 0.12245976138762271, 0.1070352137823205, 0.12912415300286317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09936085206217726, 0.1011372683903472, 0.11130893851251844, 0.10327364426519292, 0.1207914665021157, 0.11655919630244715, 0.12101289312359809, 0.09643604708838482, 0.15711725458514925, 0.11040265245322212, 0.10267165755511809, 0.10491532026592743, 0.06644305191896716, 0.0442296286835705, 0.06715555863309941, 0.17590648825188182, 0.1692018752930735, 0.11303497883793079, 0.19321408903851023, 0.17168253377905662, 0.18677176930148032, 0.15697976054933482, 0.18084078684298843, 0.15012860390712635, 0.17305026246379052, 0.20421431539822688, 0.1893727886372235, 0.018132741679897535, 0.01800168475464703, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.03358125324750649, 0.016228383701229143, 0.021807429587452853, 0.019125192670852997]}, "mutation_prompt": null}
{"id": "e4eab469-f5ab-41dd-9113-b58a0e29c580", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "c01b9c7d-ddee-4e49-8f03-190bb9ba1bd1", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO_CoopSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Adjusted population size for diversity\n        self.inertia_weight = 0.6  # Lower inertia weight for faster convergence\n        self.cognitive_coefficient = 1.8  # Increased cognitive component for personal search emphasis\n        self.social_coefficient = 1.4  # Increased social component for better collaboration\n        self.initial_temp = 1.0  # Moderate temperature for exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for sustained exploration\n        self.alpha = 0.02  # New parameter for cooperative adjustment\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + self.alpha * np.random.rand(self.dim) * np.mean(population - population[i], axis=0))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.sinh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with cooperative SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.25 * (self.budget - self.evaluations) / self.budget  # Updated dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "AdaptiveQuantumPSO_CoopSA", "description": "Adaptive Quantum-Inspired PSO with Enhanced Cooperative SA for Optimized Exploration-Exploitation Balance.", "configspace": "", "generation": 81, "fitness": 0.1803755043450538, "feedback": "The algorithm AdaptiveQuantumPSO_CoopSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.4122929151462438, 0.4395631862814786, 0.43161782799087156, 0.4649714292547228, 0.29436956072161724, 0.5667542147574063, 0.4369168240336583, 0.45036611711998353, 0.3701791893308912, 0.1021795638755093, 0.029252495227290454, 0.1464069535413942, 0.03913367197626716, 0.044419654381228635, 0.03570885534289736, 0.18360009862312487, 0.17097145488812115, 0.15105475379674915, 0.07910375866066643, 0.0716571308256001, 0.06247830179278757, 0.12613498700489767, 0.12962410939298585, 0.08999885173574385, 0.0815849770462137, 0.142306203126619, 0.05580239943241727, 0.06788094196343186, 0.049337277140610425, 0.07102565656812532, 0.11781758999574343, 0.08266174550789196, 0.07105517378697934, 0.10703496922620781, 0.05296120686936534, 0.07311442175495109, 0.9898776598168763, 0.9896394784539941, 0.9902919115012869, 0.9861373262905785, 0.9896209484499447, 0.9880269063099656, 0.9907403267729611, 0.9880500597782376, 0.9899346102830563, 0.24021523914559195, 0.16989569281423578, 0.056862905161606414, 0.11362414584374925, 0.09755919620368037, 0.14869724397662543, 0.08363508281102461, 0.11648659151545582, 0.05152115279719005, 0.1690374774617025, 0.11688085643183854, 0.4466335357550746, 0.19324752473015783, 0.18987498137482905, 0.11801825062670068, 0.16199822230263505, 0.12353987495684937, 0.14096963508668992, 0.13681536243062675, 0.09756744969266207, 0.10517741581676998, 0.07947552263447921, 0.0917012343216751, 0.0889515339949154, 0.12598780780654528, 0.13339191909928527, 0.1687259936387021, 0.08998647639960422, 0.1156419735690204, 0.1031413588127782, 0.15572738185960333, 0.06591672146524596, 0.06684620866257973, 0.03343148356921688, 9.999999999998899e-05, 0.00957288564343961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05257870245290086, 0.014246987833849922, 0.04686102993395347, 0.0035690022825405343, 9.999999999998899e-05, 0.005703878664976014, 0.04470216489643686, 0.0115227208199572, 0.04363657496891615, 0.019417703792035224, 0.0067738984120491175, 0.03751859560350257, 0.04635480029376304, 0.03453506598206224, 0.028087314955650977, 0.052249844126949774, 0.06732643892913459, 0.041672766344530876, 0.07717153287558887, 0.025789024718726572, 0.0571050807120862, 0.009328539568336458, 0.08284200756415483, 0.12782796765309234, 0.046349941215747426, 0.04731789485525384, 0.07198914743977092, 0.326788588018189, 0.3330432627008466, 0.39579169191605656, 0.38773519937821654, 0.3789618432524908, 0.38814391944448545, 0.3854146585039181, 0.2875931147368992, 0.354071960394992, 0.04834847584815927, 0.08831275066221478, 0.055635784102462504, 0.053498992223257824, 0.06963661301096513, 0.09057094262204701, 0.05271869836097354, 0.08828213305017474, 0.055762774670555015, 0.19048097700163102, 0.21850392702560772, 0.14719506479825561, 0.262458138042443, 0.15259587759177595, 0.2007871371509743, 0.35187476593918143, 0.17605671065717, 0.2217995318121554, 0.2245430843383055, 0.17598337560960642, 0.2182626455666875, 0.22251009198471605, 0.2041599810714484, 0.15389450570568408, 0.1897558148018066, 0.29252534026429455, 0.1630730879687451, 0.15668630605781086, 0.15691601015948997, 0.1742264002345284, 0.15463484500002256, 0.12250220455253624, 0.17233096122280855, 0.28073168102793833, 0.18579338850006477, 0.1368881617073412, 0.1370118535741507, 0.13233719200890104, 0.1608802574153959, 0.18341301690224332, 0.1542568116151759, 0.13435247049552457, 0.1833002406526062, 0.16495299583561407, 0.15143779155432058, 0.18471469883127767, 0.1775715446239423, 0.15757439649057592, 0.1709802149665578, 0.14696723735737705, 0.16939199971501007, 0.1616955836428331, 0.14396346049539388, 0.15714904383461048, 0.530406062191393, 0.1661693968841753, 0.1498190599134105, 0.1795536958298588, 0.1908462002988961, 0.1907100447332628, 0.13954953416379356, 0.14215588065322593, 0.2058086339421249, 0.26046629538132715, 0.19813524486016465, 0.2502209360647062, 0.27409953988591684, 0.2770345576353348, 0.13908011406110599, 0.20141963881024016, 0.20660466568813018, 0.20965751820527667, 0.21073092399758886, 0.18839531810663057, 0.18710903081531804, 0.18285442668492813, 0.19840308246225458, 0.22530962017548506, 0.196725812734858, 0.19151238830616235, 0.2208854759125043, 0.05172055625092653, 0.052440192203145664, 0.08229976234176606, 0.0441936116898205, 0.06660025663359215, 0.04880574799134463, 0.04532954965504654, 0.05856806213580634, 0.06406321144430771]}, "mutation_prompt": null}
{"id": "5d8b0b4e-8a56-4bee-8c13-039c99039028", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "05e0c08d-ec19-43cf-a4d9-23fca5369886", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_LeapfrogSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for broader exploration\n        self.inertia_weight = 0.6  # Adjusted inertia weight for fine-tuned velocity management\n        self.cognitive_coefficient = 1.6  # Enhanced cognitive component for stronger local search\n        self.social_coefficient = 1.3  # Strengthened social component for better global cooperation\n        self.initial_temp = 1.5  # Higher initial temperature for robust exploration\n        self.cooling_rate = 0.85  # Reduced cooling rate for gradual convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.5, 2.5, (self.population_size, self.dim))  # Broadened velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired leapfrog strategy for velocity update\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + np.random.normal(0, 0.1, self.dim))  # Added stochastic perturbation\n                \n                # Proactive diversification in position update\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic range adjustment\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_LeapfrogSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA, Leapfrog Strategy, and Proactive Diversification for Superior Global Search.", "configspace": "", "generation": 83, "fitness": 0.21984675481859567, "feedback": "The algorithm QuantumInspiredPSO_LeapfrogSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.39870467760961315, 0.37845083448387573, 0.41140872898050085, 0.38185627034775993, 0.39821122687642896, 0.41189081268180194, 0.40203351772693585, 0.3977176431661037, 0.4157471719966177, 0.03054087160935126, 0.03833788710516961, 9.999999999998899e-05, 9.999999999998899e-05, 0.08611791313248596, 9.999999999998899e-05, 9.999999999998899e-05, 0.09362951902308447, 9.999999999998899e-05, 0.1125051550652506, 0.11606046462293251, 0.12275856403278862, 0.15391769468669048, 0.13505592375452635, 0.13725687492108207, 0.08251974966788944, 0.13488012050146103, 0.11700317690356865, 0.10007371351512562, 0.10321375809213351, 0.11897870521077725, 0.09568574802436391, 0.10287622450189249, 0.10336088532973409, 0.11582615833274101, 0.08565986948834214, 0.10001156615058171, 0.9583919293602883, 0.9472350704512427, 0.9601806835737609, 0.9415229169802899, 0.9419047656700292, 0.9537228752988878, 0.9547497181804763, 0.9385829555232088, 0.9524520490227667, 0.2890052357545624, 0.29500254085297417, 0.26929930877159125, 0.2838334771406814, 0.29926741794761424, 0.3006341801647163, 0.3040323411018312, 0.2799729506311748, 0.2979913198735178, 0.35491694644242866, 0.3705147638286196, 0.27488477469617645, 0.27020581569389146, 0.20337763469930525, 0.26398001192791476, 0.22824854579131393, 0.3257093344303996, 0.33438792229686376, 0.15027301234296353, 0.1680893426215967, 0.16445546995534954, 0.1507700238595847, 0.12512181872047645, 0.17591598329869051, 0.16436088007651628, 0.1775168286764458, 0.16105547292376887, 0.13672308427799795, 0.19135458628667135, 0.12478699823479578, 0.16303169306806142, 0.14887917984854904, 0.18055011783360075, 0.15634898848636336, 0.21278905248556634, 0.17668996939929815, 0.005173400038344322, 0.008719586162274973, 0.000568906343202058, 0.045831380229109486, 9.999999999998899e-05, 0.03358238591405438, 9.999999999998899e-05, 9.999999999998899e-05, 0.05538545954568597, 0.18383731647997192, 0.06184855620999219, 0.08992447511491575, 0.07754419386213407, 0.029737220562431887, 0.01748736054667821, 0.09611701421575236, 0.05790199841625254, 0.09530505239514009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11325762539713524, 0.10293831707257706, 0.08809097202643901, 0.0466094925763989, 0.13503905315234044, 0.11005112069777856, 0.07595912933763904, 0.10778309583546086, 0.06834036162380053, 0.36372515481911205, 0.38695816549569506, 0.37959718059598646, 0.3894504297299992, 0.37969808624213564, 0.365347717087931, 0.37130893879677784, 0.3809967293270975, 0.3647949429254186, 0.10314853974471228, 0.11650648119474749, 0.09976493636285033, 0.09151914162408303, 0.1260434403366626, 0.13419712308630172, 0.10402483801655582, 0.13340272073763604, 0.13126155594168298, 0.2697214089503165, 0.26011639264026853, 0.178261482224101, 0.23961078368578093, 0.26233975134080945, 0.2700776074617941, 0.26921710180864944, 0.22320426676398464, 0.2172326405358408, 0.27868687931051606, 0.29470645169345755, 0.29179444884752026, 0.2850003316807086, 0.2115180003182805, 0.28089472099315804, 0.2863153856216214, 0.28783860552519713, 0.28427464435090377, 0.18885182683864965, 0.22461348714235918, 0.19225452946878074, 0.24296710296440338, 0.18133713248208305, 0.23509277592867361, 0.2115994622345163, 0.23742964548564793, 0.20701454241914463, 0.2092120767121266, 0.19721239750486275, 0.2539874084506202, 0.21953549539353145, 0.23792524051579644, 0.2494449083271234, 0.21831278639392238, 0.23971017733657896, 0.2522023010777259, 0.2294061989774877, 0.2133509987131832, 0.22703725888020587, 0.21057201670292736, 0.22808697313086224, 0.2081112842295446, 0.19131029411653977, 0.22574719595608828, 0.1948035138846832, 0.5669335500860349, 0.17714424399045325, 0.153005373140214, 0.5845999434517155, 0.1987190921523897, 0.1985479877023233, 0.14179154357569967, 0.16149035388228183, 0.6064537911781432, 0.5795466607285635, 0.21137527294643654, 0.38428872527707025, 0.20904257110064683, 0.1680958795002252, 0.1537280639943014, 0.5180121725216698, 0.1670291287271084, 0.5185709701251109, 0.19128697279941864, 0.23244343005018553, 0.18095644832700075, 0.1736837735659299, 0.17081575992782505, 0.19361330681700295, 0.18606916549350938, 0.18007425377221753, 0.17800917482634726, 0.08909962530089122, 0.06897319823307169, 0.07600559257101469, 0.08858598495171699, 0.09245188135437932, 0.07322216934633685, 0.0926949218023152, 0.07863450282144457, 0.08847260788936107]}, "mutation_prompt": null}
{"id": "c6d94362-ded9-4e12-8087-a36790767213", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "6de38ce8-4263-442a-8de2-42625e1d68be", "solution": "import numpy as np\n\nclass QuantumEnhancedPSO_TemperatureAdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for diverse search\n        self.inertia_weight = 0.6  # Reduced inertia for faster adaptation\n        self.cognitive_coefficient = 1.7  # Enhanced cognitive component for local search\n        self.social_coefficient = 1.3  # Enhanced social component for convergence\n        self.initial_temp = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.85  # Faster cooling rate for quicker convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with temperature-adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Slightly altered dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumEnhancedPSO_TemperatureAdaptiveSA", "description": "A Quantum-Enhanced PSO with Temperature-Adaptive SA and Dynamic Parameters for Balanced Exploration-Exploitation.", "configspace": "", "generation": 85, "fitness": 0.3127220327646252, "feedback": "The algorithm QuantumEnhancedPSO_TemperatureAdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.757688405529245, 0.7149046244551844, 0.767582177632212, 0.746373451326064, 0.7218592984196321, 0.7393206087883841, 0.7192884997012934, 0.734783433252199, 0.727629649964998, 0.5438922116777818, 0.6305754032134947, 0.5956626385423675, 0.6005644323717286, 0.5949540049577458, 0.5971600469074319, 0.5887244200723117, 0.6272097845352889, 0.5474845974676421, 0.17937701185418353, 0.15776796138959837, 0.13737888111514074, 0.1225314430903689, 0.15670931026036417, 0.1413237211216527, 0.11260656707866723, 0.1415597411271543, 0.1559372292690705, 0.1268417887253066, 0.09795664826679529, 0.15084713990460608, 0.13219492041771186, 0.14924535342881995, 0.08713382425930272, 0.1560879634342247, 0.11401140392618347, 0.10105466731181656, 0.9449935826965202, 0.9541310433691605, 0.9540770463817749, 0.9497250748892253, 0.9477434510057143, 0.9309998667087396, 0.9504392880277548, 0.9346212021726215, 0.9501044885452112, 0.6707292489117636, 0.6227700457847278, 0.05791328111484895, 0.6322540353432087, 0.6371672707943801, 0.6736953423055747, 0.6790931510548619, 0.66396160146757, 0.597727448814771, 0.8019826212794279, 0.2279394391455598, 0.3756290572198149, 0.1949081928884856, 0.35303562286437606, 0.21187026223114624, 0.22420944893630657, 0.12465518400654996, 0.7901191900504463, 0.26123599781936824, 0.2842655240571331, 0.24245703473608227, 0.1588682745761576, 0.30305278725401374, 0.11921777116533538, 0.2392940904584947, 0.22220173131279464, 0.1312148291097952, 0.2595039379772205, 0.1996645575680156, 0.2151454098286053, 0.30210337828318545, 0.2491941583913052, 0.2922381294123606, 0.27582288228768026, 0.2372045072086506, 0.25659853585551684, 0.02306530190786016, 9.999999999998899e-05, 0.030687047495748576, 0.04780458842786883, 9.999999999998899e-05, 9.999999999998899e-05, 0.08031729885082839, 0.011492466075588292, 0.03913836102354873, 0.1093258523177939, 0.05589562974395901, 0.08923765672368078, 0.0630753723498989, 0.04513227798302999, 0.029567529893095523, 0.08089596070991611, 0.17278812959072698, 0.10348465220815817, 0.28362620050167975, 0.0558049986248077, 0.1069950580157687, 0.2828655240751943, 0.07374514920372988, 0.22316165304595315, 0.09416131008929629, 0.2226998287394878, 0.06726133648929666, 0.09644964782031462, 0.06465932343576586, 0.21652874905429986, 0.0965523330820226, 0.14476832593426603, 0.2133935872096825, 0.08036387667964096, 0.11989991697166846, 0.08264675780337771, 0.489958165032816, 0.5092120952420127, 0.48838679104634, 0.5062556883589768, 0.4539376395334832, 0.5321882690183919, 0.5533698350439453, 0.5257011354214629, 0.5279342947468046, 0.08384765435901431, 0.1401095268710647, 0.06487401083754829, 0.15925838403014658, 0.15769955434105665, 0.09386433184920384, 0.10826037141927991, 0.11394762152622517, 0.14196669063160916, 0.19021589801966055, 0.39724779323309034, 0.20246561074254543, 0.2983149869168936, 0.470953786690651, 0.3699365325606897, 0.3814966064426055, 0.2040220866507455, 0.3114971343529891, 0.30101638232732, 0.32109395483340863, 0.2401142850322313, 0.27247307173886426, 0.3677737328591226, 0.3009248007468225, 0.2817740226855979, 0.3741239890237881, 0.23240439089112652, 0.20922907162412285, 0.25002435785475086, 0.24099966042887977, 0.2996319783329987, 0.249428351218955, 0.35954320707399523, 0.2547324608783075, 0.24864822239405404, 0.3537817638690627, 0.25381494315131614, 0.19516177797216594, 0.2605158673677558, 0.21803740428960006, 0.2247780031217379, 0.24473119264329035, 0.23530184712189273, 0.22355764950294643, 0.23771261000679855, 0.21391337950766942, 0.19470478359772325, 0.20650455579396532, 0.25035268885130246, 0.6523070710875799, 0.20789559092239873, 0.24675160336464452, 0.2238690599634856, 0.19050590359431474, 0.8560066450501941, 0.18398908317837537, 0.17543071250886821, 0.8788728230634156, 0.19980114693496898, 0.13558683594035337, 0.7634434682932411, 0.16449932198530004, 0.8577593716560856, 0.7994814398106951, 0.2128363249578682, 0.073544449105019, 0.20832092857063833, 0.16866697505946615, 0.15367148212378268, 0.09425770496728114, 0.702884775470323, 0.8140978543031261, 0.1989241438089494, 0.1868249034158569, 0.19890230664940522, 0.27574606931695533, 0.20181657322393687, 0.22960314944155757, 0.2552612796824878, 0.21980346149318974, 0.19619692913523623, 0.09485853540401112, 0.08357749574054318, 0.07478403092827524, 0.09472385432996999, 0.09471072290535798, 0.10308979108145944, 0.10435862293181786, 0.09781660026504846, 0.08895914164654273]}, "mutation_prompt": null}
{"id": "686e400b-3b1b-4231-a54e-7e3be4f180a2", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "533b0541-0208-453d-a713-bcb55f23e86d", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Maintained population size for adequate exploration\n        self.inertia_weight = 0.7  # Optimized inertia weight for balanced velocity control\n        self.cognitive_coefficient = 1.3  # Slight reduction for more group exploration\n        self.social_coefficient = 1.5  # Increased for enhanced social search\n        self.initial_temp = 1.0  # Adjusted initial temperature for controlled exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for extended convergence\n        self.mutation_rate = 0.1  # Introduced mutation rate for adaptive exploration\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with adaptive learning\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty and adaptive mutation\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n                if np.random.rand() < self.mutation_rate:\n                    mutation = np.random.normal(0, 0.1, self.dim)\n                    population[i] = np.clip(population[i] + mutation, self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA_AdaptiveMutation", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA incorporating Adaptive Mutation for Dynamic Exploration and Exploitation Optimization.", "configspace": "", "generation": 87, "fitness": 0.26649767600672275, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA_AdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.5364527641226253, 0.4871098054431766, 0.5022267798409114, 0.4908903788649349, 0.47944503249497816, 0.45181635563429334, 0.5006414486928148, 0.49838763911482964, 0.4962469813450643, 0.2699770977246325, 0.21641498606340615, 0.2799479539791969, 0.3243624218403405, 0.04256386414228985, 0.21753937520145705, 0.2474175751976312, 0.2754829523954786, 0.2909313629190068, 0.08731110794364505, 0.139946691676463, 0.12240063638705401, 0.19057119686337898, 0.08531821047657284, 0.11382640338008898, 0.14192366439171744, 0.09291772668728249, 0.11119928406033908, 0.11370626166495712, 0.10488961329425672, 0.1402223106365993, 0.12922067291565387, 0.0926425776798071, 0.11369197841070855, 0.12726250048187826, 0.11467040443677867, 0.10538708603061042, 0.9543988236195972, 0.9553686804115356, 0.9589929370100149, 0.9551121247727499, 0.9536792056656007, 0.9358940980074375, 0.9601295661078681, 0.9456116831793507, 0.9655741576980522, 0.4559141948174682, 0.4657625811034489, 0.43770346642104774, 0.4802676722890804, 0.48326192620243935, 0.5181839990127292, 0.49526786640498155, 0.4820513154338152, 0.4628792689465214, 0.22892409284968918, 0.6675739222452377, 0.7419967593079464, 0.24555376951558672, 0.3006007319937116, 0.2175454680506579, 0.15048145362697996, 0.2327440849430552, 0.23259667638849235, 0.1321737874663873, 0.12000924152791559, 0.2158270070003877, 0.11771876598148479, 0.128708865679669, 0.33349987421309524, 0.21425521595791674, 0.22162909352129523, 0.22471709193407574, 0.13173398440249784, 0.24545874467122109, 0.22499944321610965, 0.20820230239520743, 0.22542378546013075, 0.2307271767375968, 0.43439007941533236, 0.1360633867927159, 0.23574613410125, 0.005838339198803055, 0.046048265202844996, 0.12171245732847125, 0.05668000640253135, 0.02439470337756755, 9.999999999998899e-05, 0.014582152282817673, 9.999999999998899e-05, 0.03612823311276947, 0.08090286193454854, 0.08295171421992076, 0.07698307741640786, 0.07090890161456176, 0.05121193855074202, 0.05493479297280868, 0.08131716806811695, 0.13861985379846498, 0.21295051133924048, 0.20560662027961507, 0.06742493137229122, 0.13527053631963482, 0.13356105205914215, 0.07324822666228192, 0.06798271083538443, 0.169632287184859, 0.1419342788127146, 0.15074866838058532, 0.07513205935250444, 0.244539212441657, 0.15622947167026124, 0.055437148660956725, 0.24409582315221756, 0.11044157599283277, 0.0856467094189931, 0.1902713531289726, 0.08180446533566299, 0.4191391890030314, 0.4407979457201423, 0.44525294307448815, 0.4543868557817815, 0.42679300249757046, 0.41100734902403735, 0.44375877102526984, 0.43332577739792, 0.42563698185787047, 0.11212299522957714, 0.10779241576539966, 0.08192968105521814, 0.12902118693647657, 0.15883866733285523, 0.10058414599728893, 0.13035105628038635, 0.11185460924391155, 0.11099285154447791, 0.4042374035477273, 0.2639599945605633, 0.2247791844201208, 0.38774402566911625, 0.3787303030515151, 0.21606213898084337, 0.3627856518690442, 0.3691294558546716, 0.37486071975418656, 0.22440005740871827, 0.242290597085431, 0.3059552728145385, 0.31714686954286486, 0.31842933385514993, 0.3488584763968452, 0.2271736952296698, 0.3142920069067283, 0.310682530715755, 0.18200847614855953, 0.1994578895642347, 0.2541976080984847, 0.2628253115945557, 0.2449924760230351, 0.28743741892898644, 0.3078143371533212, 0.2879156144517169, 0.2318907558715969, 0.24045961499272084, 0.23157798520788608, 0.23072177279995376, 0.27021265345789647, 0.19972782238273767, 0.3064286969858806, 0.21479735409598288, 0.2328616433416385, 0.21399423595753742, 0.20829343979194326, 0.19554091861062795, 0.19617953927664744, 0.2163268790227304, 0.19080333908709302, 0.19049394150439503, 0.19797913370573983, 0.18908513549874106, 0.1972448837589562, 0.1874761387655851, 0.1861449599729711, 0.18604435736893887, 0.7843099860038989, 0.19964513772029568, 0.14753348928907417, 0.1424780311526025, 0.17000508705737505, 0.7003204234638365, 0.7456536497637913, 0.2129673107211889, 0.07346761531036738, 0.208208997561241, 0.632407980830231, 0.15361295791106144, 0.09418821364290975, 0.6759225584026798, 0.6418136948982833, 0.22402486658879406, 0.1989711114239726, 0.2188136373173971, 0.2325437908874718, 0.21779044223493016, 0.17778382529696934, 0.20568086146043374, 0.21008874930356503, 0.2109998098442496, 0.09534991127063897, 0.09750592982166528, 0.08894008058603231, 0.09649581104400129, 0.08814922244916601, 0.08938803886761615, 0.1227976354210063, 0.099308668359406, 0.08460229887824211]}, "mutation_prompt": null}
{"id": "244a7e17-0302-455c-b61a-d45290ed170e", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "011c7f72-c014-4607-ad82-a97f06e62cd2", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "50f90abc-2805-4ad7-aea2-0471ef1fe68b", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "6b6d437e-8869-4ea4-b80a-83be429c89c6", "solution": "import numpy as np\n\nclass QuantumEnhancedPSO_AdaptiveVelocity:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Larger population size for increased diversity\n        self.inertia_weight = 0.6  # Reduced inertia weight for better convergence balance\n        self.cognitive_coefficient = 1.4  # Slightly adjusted cognitive component\n        self.social_coefficient = 1.3  # Enhanced social component for better exploration\n        self.initial_temp = 1.3  # Higher initial temperature for more exploration\n        self.cooling_rate = 0.85  # Refined cooling rate for improved solution refinement\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Expanded velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Adaptive velocity scaling\n                velocity_scale = np.tanh(np.linalg.norm(velocities[i]))\n                population[i] = np.clip(population[i] + velocity_scale * np.sign(velocities[i]), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Enhanced dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumEnhancedPSO_AdaptiveVelocity", "description": "Enhanced Quantum PSO with Adaptive Velocity Scaling and Refined Cooling for Improved Convergence.", "configspace": "", "generation": 91, "fitness": 0.1791264076205646, "feedback": "The algorithm QuantumEnhancedPSO_AdaptiveVelocity got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.3004141183743848, 0.2964024062481436, 0.30180456754635276, 0.32003411066573717, 0.33209624708000207, 0.3534231163733481, 0.290096029530025, 0.3157088745275879, 0.2922520431614295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.095830662410478, 0.06935302267499754, 0.09073167816829752, 0.09759709838408892, 0.08384104731980146, 0.08973273551279237, 0.07366996411502658, 0.09504953443576836, 0.09533882123998338, 0.07512672164255452, 0.07962784951631385, 0.07947414478024639, 0.08652333177226479, 0.08071881098476064, 0.10794550615698661, 0.08037453262829275, 0.07577083513455851, 0.08115226594597624, 0.9565316414490556, 0.9520678468540559, 0.9659267527245847, 0.9502288387137094, 0.951509092673752, 0.9553866927577727, 0.9573715450864912, 0.9533539315102935, 0.9543514772984139, 0.1876198256516608, 0.1547811049180724, 0.058135336476789035, 0.19348164197007156, 0.17771431345653, 0.1766673731621652, 0.18943172071567393, 0.2120735302188259, 0.17742619219482936, 0.22109475549208624, 0.21164386956828685, 0.23314842088924648, 0.31704339637593204, 0.2500728570941908, 0.23019271098504202, 0.2315697533357095, 0.22133874572967138, 0.24184081020604875, 0.13437439474092094, 0.06232182979163803, 0.09453182271425864, 0.09571786865964604, 0.07987717367245262, 0.05964129397724138, 0.10352247686100835, 0.09849265620257086, 0.11943641350737122, 0.10045241489239198, 0.10475626993300835, 0.08671771727335542, 0.11639576589057599, 0.1006585223393549, 0.0745278584757938, 0.10069279939671472, 0.1059666118476027, 0.09727949180385931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010509775899670837, 0.1602952394199163, 0.10070978950878051, 0.12349739331421461, 0.0996201576759369, 0.09133019248323215, 0.04109484735445934, 0.08110712183261859, 0.16275199915169347, 0.09904232563458049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042160161555729436, 0.05365985353893998, 0.039905678022165936, 0.0322718091741675, 0.05373269086280141, 0.03443272028317479, 0.036653404993952976, 0.027897182958012134, 0.051919297501742734, 0.29522673259332255, 0.34629982836038975, 0.3373324213387323, 0.2943740008022776, 0.29439629132318557, 0.3206751659681252, 0.29786370313495836, 0.3068501489946518, 0.31182012731117537, 0.08584930643175936, 0.08566229122827407, 0.09376718250712579, 0.09322265238420169, 0.08370494954444407, 0.10400367114091114, 0.08378480906623331, 0.09738953748825097, 0.09073499004162477, 0.13110839833428778, 0.16278949714322422, 0.15989408204839206, 0.14057541085552638, 0.1840760799611949, 0.1621074752415127, 0.16108681695424398, 0.18421128483012195, 0.1472515952711978, 0.2046012154741731, 0.22812947327044886, 0.2267050139173089, 0.24420407940820055, 0.22026391127625933, 0.22780889077598088, 0.23170871205943, 0.23832139282658737, 0.2227796889860455, 0.1873472645609301, 0.16191172907687634, 0.17582505721038155, 0.1660520523579314, 0.23713813313968068, 0.18778948089056013, 0.16358541634279522, 0.2141266688650223, 0.16934354118352224, 0.2062871944900514, 0.18517761683863954, 0.1796432493224671, 0.20380031337150717, 0.2098518644849583, 0.19487945591608935, 0.19357619295343742, 0.19227138272600863, 0.21262858499209347, 0.18961932136778825, 0.17823972269836708, 0.18238061194010746, 0.18220924113329906, 0.18363036853578252, 0.1792074640747745, 0.1861706062709778, 0.18057295465098633, 0.17258571090769492, 0.16668888431779427, 0.17605229313396398, 0.1501017184431419, 0.4204010823043055, 0.18169990195095698, 0.16260477027456088, 0.38483612563580716, 0.19403934572423276, 0.40314421066815775, 0.35321528982798145, 0.1940610281201337, 0.07186615386378781, 0.1908138282377302, 0.1446472418926722, 0.14633216143837924, 0.27680525782892973, 0.3406931519145301, 0.4111306572314144, 0.1853545262739501, 0.1830620453933497, 0.17538688769581112, 0.17963789221299298, 0.18811741411739902, 0.1848177520230352, 0.193674511442823, 0.18620539312877082, 0.1816270916324917, 0.08121997603696673, 0.10408942511005703, 0.08396461477991146, 0.08530675655879472, 0.08601185077319806, 0.09560649097137519, 0.0811019492093652, 0.08443675677653917, 0.09292710182512454]}, "mutation_prompt": null}
{"id": "0e166c08-f401-486a-ab92-e8b75f083c63", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for greater diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for balanced velocity control\n        self.cognitive_coefficient = 1.8  # Enhanced cognitive component for deeper personal search\n        self.social_coefficient = 1.3  # Enhanced social component for better exploration\n        self.initial_temp = 1.0  # Lower initial temperature for more rapid convergence\n        self.cooling_rate = 0.85  # Slightly faster cooling rate for quicker convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with adaptive SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Non-linear dynamic adjustment of inertia weight\n            self.inertia_weight = 0.3 + 0.7 * (1 - (self.evaluations / self.budget) ** 2)  # Non-linear dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveSA", "description": "A Quantum-inspired PSO with Adaptive SA and Non-linear Dynamic Parameter Adjustment for Balanced Exploration-Exploitation.", "configspace": "", "generation": 92, "fitness": 0.21707364767311668, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.43595644971611947, 0.4225263463231952, 0.41967518150549854, 0.43461470903649135, 0.4031669097402958, 0.4384958324376863, 0.40858660607921005, 0.43564952062994455, 0.4349539680521176, 0.14854892053921576, 0.1338931469981841, 0.12964142164410042, 0.15576967759663896, 0.13364112710879783, 0.16863947137304314, 0.11439619184387173, 0.10200224430462512, 0.0742607210977052, 0.11085148213952312, 0.1114298725636419, 0.09816623520010503, 0.12969897823215493, 0.10080296348141893, 0.10496708335863347, 0.11678498007089633, 0.12633492005464486, 0.11657512113230273, 0.08562949894694427, 0.09943011026732362, 0.10575904459174856, 0.09946626544909709, 0.08968087048591333, 0.10309755818517619, 0.1118621491347025, 0.08639683266569465, 0.09126303808259495, 0.9576892317098241, 0.9575504608855802, 0.960981598867287, 0.9533302349709198, 0.9543243066759176, 0.9553488006092778, 0.9578695386907241, 0.9488751289618369, 0.9575984923219959, 0.30153535274337706, 0.28752859900206096, 0.05702407842018742, 0.27745046086239444, 0.28944541222992237, 0.1399769092975186, 0.2925668958922374, 0.08641787929218658, 0.2855154991147829, 0.30128739656392545, 0.4320424667720205, 0.44569190777465206, 0.18691056676693474, 0.4726184137993622, 0.1874089579577809, 0.21096425884251735, 0.39641897118600156, 0.2849783385522183, 0.12379606390746956, 0.1432984958328234, 0.08995472542403982, 0.06771172341510956, 0.16010223838605686, 0.06853845437137263, 0.12238508241773705, 0.13533671704916073, 0.13970556746857365, 0.14221998628253585, 0.13368674414470283, 0.13345158309109806, 0.13035914300419826, 0.13539179097248655, 0.10651677945116844, 0.14804921242896474, 0.1369851887114153, 0.1068807900697113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02110505882816993, 0.03270424993112664, 0.020846181079063664, 0.13220536068775035, 0.05940421523153905, 0.09634353266460172, 0.06962519730398253, 0.02875176829520043, 0.04831323903351059, 0.046762684134645904, 0.07073298729670519, 0.08379633312524515, 0.011589961504481883, 0.01291898239617062, 0.017369859140145993, 0.030795710926879605, 0.027337284415402063, 0.02932508074890572, 0.032131898601908016, 0.07083315370625709, 0.025222355779309646, 0.10337204305319425, 0.0841479542647654, 0.09636046502832174, 0.06048258306837628, 0.08681860931949448, 0.05947476888994663, 0.06920319866321023, 0.0605037083382205, 0.05436122494195317, 0.3654840177666768, 0.3490584832015561, 0.35734436673900405, 0.3606057199381123, 0.37267388389609235, 0.3595890748822559, 0.38300132631219796, 0.35930103649911493, 0.36971775703540055, 0.12411438594836777, 0.0773590114513445, 0.0784116780446601, 0.10240379452188297, 0.09274053566756957, 0.10696560428118251, 0.09387216145927246, 0.09497693196778456, 0.10940438143470932, 0.2564020885307662, 0.1755515244175554, 0.24619309209086337, 0.21717866913297246, 0.19200473336512291, 0.15418669169184052, 0.24911642010907076, 0.21191282529297395, 0.14455115012171715, 0.26678049107985957, 0.21737640311433137, 0.28729457191308927, 0.26814968121435157, 0.2684022295494428, 0.28358580810889655, 0.28960292445113367, 0.28836562178668146, 0.28203159617468365, 0.21276643473511836, 0.2131919026183332, 0.2333590356638804, 0.1467749394969956, 0.21130829491421932, 0.2261335017228896, 0.21811092144464606, 0.2542454867268824, 0.21404078357278755, 0.20208532521296363, 0.22925987321223684, 0.21166556133082937, 0.21115108511672032, 0.20531732103865608, 0.19125055827616666, 0.20338290588412278, 0.2254332282661029, 0.20849069434219702, 0.31470609720979514, 0.20855181713710413, 0.18671239034348786, 0.1845328011903723, 0.20500572916275328, 0.1935597499117111, 0.1923072879265021, 0.18746026914867897, 0.1859376334515066, 0.5463037339493118, 0.17493827906845105, 0.4327359685422464, 0.6301191235947878, 0.19251077355619106, 0.1876707580489677, 0.5448734012960414, 0.15360160209590124, 0.5224248576306181, 0.46204228982772133, 0.20560264221928481, 0.1534904526930988, 0.4582790677975822, 0.1673115585281053, 0.14738722963836448, 0.19028988960418713, 0.43970653409976057, 0.4315845930778862, 0.19113411695735527, 0.18853907287779847, 0.19892490562873621, 0.1827492174263683, 0.1816026471843949, 0.18651437970043339, 0.2047588491252652, 0.19232343987156542, 0.19063272360131556, 0.0825634967726181, 0.07324889237865495, 0.07965958992576272, 0.08228914039474089, 0.07868596143033646, 0.08334629773497382, 0.08747031279647743, 0.07880986540307344, 0.06155438500481536]}, "mutation_prompt": null}
{"id": "991f0641-84ed-4a67-addd-23ebeeb42c14", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_AdaptiveVS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for greater diversity\n        self.inertia_weight = 0.65  # Adjusted inertia weight for balanced velocity control\n        self.cognitive_coefficient = 1.4  # Adjusted cognitive component for individual exploration\n        self.social_coefficient = 1.3  # Enhanced social component for global convergence\n        self.initial_temp = 1.0  # Lower initial temperature for refined convergence\n        self.cooling_rate = 0.85  # Further adjusted cooling rate for optimal convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Dynamic velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities with adaptive scaling\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                scale_factor = np.sqrt(np.sum(velocities[i]**2) / self.dim)\n                velocities[i] /= (scale_factor + 1e-9)\n\n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.6 + 0.15 * (self.budget - self.evaluations) / self.budget  # Modified dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveVS", "description": "A Quantum-inspired PSO with Enhanced Simulated Annealing and Adaptive Velocity Scaling for Efficient Global Search.", "configspace": "", "generation": 93, "fitness": 0.18847203101488785, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveVS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.34280484851172255, 0.3771649219172608, 0.3198633742143704, 0.33359780189483457, 0.3942080012019402, 0.34622655819435444, 0.33652584796230633, 0.33378647655358595, 0.32655374925765046, 9.999999999998899e-05, 0.030650784520303787, 9.999999999998899e-05, 0.0562315772855323, 0.041236368132696044, 0.06077218860504108, 0.03507518168644874, 0.04974879782990704, 0.036851493423863624, 0.11321016892876523, 0.10498734462649484, 0.10224390376247028, 0.09555839360556306, 0.10897719010781015, 0.09568221472201188, 0.0941350564910175, 0.08811867523158567, 0.10796018554701836, 0.0868967333419498, 0.09044694317572033, 0.08516558903024396, 0.09062218460351268, 0.09746870647173056, 0.09793767673286224, 0.09301491853754118, 0.08313445588548929, 0.0851689174151643, 0.9545086007331329, 0.9178705214991566, 0.9593285735862223, 0.9363398640703001, 0.9334940888500912, 0.9071530015477082, 0.9526909726183723, 0.9517548944047075, 0.9421455028262816, 0.2031591253260775, 0.22265631986939638, 0.22420245163905916, 0.19675199083842632, 0.20322646430090896, 0.14752710250348244, 0.2233065700794683, 0.21781663124499562, 0.20370322067627722, 0.2979049771173826, 0.28664779082705694, 0.242326975445311, 0.19287652674918576, 0.2599241223577463, 0.3244397846394712, 0.25131171579719025, 0.25886888999689595, 0.2626772017357253, 0.07013285637338684, 0.0960604779953863, 0.08485515872933136, 0.12459003541199831, 0.11828102085150427, 0.12896240310688134, 0.12633834539308064, 0.13319131683608243, 0.1527366019903773, 0.12132148648344987, 0.13803293964224483, 0.07742416723973056, 0.1223514050361515, 0.12408590185465929, 0.1071616846551291, 0.12535492753558775, 0.1273812403579051, 0.12418670848501623, 0.019233880251636637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16098805094264879, 0.07379191634224758, 0.1423019718043964, 0.053249509904470194, 0.028884716252415066, 0.06383453607917111, 0.09789076048327294, 0.09683979280595156, 0.0703784342977668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05929617619944205, 0.046714994625513984, 0.058603544674962316, 0.06045224138889682, 0.05266312664968553, 0.05170216390356708, 0.051399932248728186, 0.048790307095161745, 0.0573416910364376, 0.31902467856989725, 0.33009384559715294, 0.3161128845594976, 0.3226914291603259, 0.31956529507073983, 0.3141259257096827, 0.33542564935777974, 0.3368844638142935, 0.3240889644497785, 0.09017173087950758, 0.08034001585569095, 0.08775041904541214, 0.08826716314421523, 0.10406379192042825, 0.1016419715903718, 0.11848930230842036, 0.10544859737804035, 0.10526842151029336, 0.1436650461307325, 0.20793993540995526, 0.1412515820176934, 0.20055464305706439, 0.16973522796610319, 0.17863652661795382, 0.14065948991857258, 0.216394111454005, 0.16718516884868118, 0.2513453620015724, 0.2360725428476248, 0.25493236961117116, 0.24593871529399092, 0.22058885510028559, 0.252149473059479, 0.2519256202767578, 0.24580269723824244, 0.24493162412094827, 0.17504044696884224, 0.18235594791420606, 0.17750686708600283, 0.1567247997358865, 0.18658277197920903, 0.19179197200559117, 0.18377215437044014, 0.18127727947333838, 0.17442042209579667, 0.2073345951148714, 0.1897940738125421, 0.19589375145925647, 0.19830636816980673, 0.22900996121524309, 0.22026745554956562, 0.2287769671768397, 0.20588186901776306, 0.20782957297497584, 0.18112245264120297, 0.18398484916784086, 0.1858818259101721, 0.19716620122612172, 0.20305606182454672, 0.20044496238312692, 0.18999896362985047, 0.20292581103922025, 0.17842273645489737, 0.1825904545827557, 0.18233826365190275, 0.15222191917273598, 0.46573890515438265, 0.1959023531508125, 0.48857186580607326, 0.1406880921746415, 0.16350614431374144, 0.1672233163838368, 0.3994647778000916, 0.20599125773710547, 0.42689377359418557, 0.1677593419805149, 0.1675772193243965, 0.15165278334782561, 0.09329523810794949, 0.10318541416174953, 0.33787155874844244, 0.18541001825580683, 0.184326875070994, 0.179548523998322, 0.19229671848933472, 0.17131649685947736, 0.2003311844515664, 0.1739759227132961, 0.18317230719405297, 0.20733970924901501, 0.08336432926031778, 0.10460545850756175, 0.09952589335344386, 0.09515074704764115, 0.0875953664598943, 0.09704867495952696, 0.08853943189782798, 0.09012698136428021, 0.09372916394768183]}, "mutation_prompt": null}
{"id": "0f20fcc8-9560-411f-b532-0b9c88293fe2", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "78ff8995-b5cf-4a60-9beb-d8b1f93445ca", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_Optimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better diversity\n        self.inertia_weight = 0.6  # Reduced inertia weight for better adaptability\n        self.cognitive_coefficient = 1.8  # Increased cognitive component for enhanced personal search\n        self.social_coefficient = 1.5  # Increased social component to boost exploration\n        self.initial_temp = 1.0  # Adjusted initial temperature for balanced exploration\n        self.cooling_rate = 0.95  # Slower cooling for more robust convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.4 + 0.3 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_Optimized", "description": "A Quantum-inspired PSO with Optimized Dynamic Parameters and Enhanced Adaptive SA for Superior Convergence and Robust Exploration-Exploitation Balance.", "configspace": "", "generation": 95, "fitness": 0.299062865311658, "feedback": "The algorithm QuantumInspiredPSO_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7127078439629935, 0.6893105468140197, 0.7196324630555206, 0.6542949131185596, 0.7002056348669903, 0.691986112422417, 0.706932342678718, 0.6534082410260518, 0.6979906736664312, 0.5190929719653703, 0.5324443464945213, 0.530961609917849, 0.5513160481791763, 0.5408917020185368, 0.5451439915677696, 0.5556974721028978, 0.5702319069176398, 0.5195580032028905, 0.15775091738563063, 0.15114330147606436, 0.15046208954596518, 0.15611424097968885, 0.1506379222079246, 0.12899489779823448, 0.1327194046914647, 0.14195665542741132, 0.16452769000680323, 0.12929502871522836, 0.1508145506775792, 0.11733606889266979, 0.1366461061574712, 0.13191260144508232, 0.10132305179244594, 0.17166752720771727, 0.14149885642189142, 0.11013728689071267, 0.9523728920443403, 0.9545052388418883, 0.9541724588937713, 0.9500513580795162, 0.9355910501624597, 0.9409630846971714, 0.9556408319523444, 0.9474107004830528, 0.9534643963164195, 0.6517272054303194, 0.6081585544529439, 0.05794350758792044, 0.6144378781392761, 0.621283614960897, 0.15197680882445241, 0.6228158072019006, 0.5899636223436415, 0.6025387848599045, 0.3724716548101312, 0.22891997125714703, 0.22733697129344477, 0.7705759889811454, 0.2749151671748852, 0.1926073953365719, 0.22947581223270352, 0.20782205547943078, 0.2331425749705035, 0.21305529939162493, 0.24103140975220172, 0.2537862478948407, 0.23529048163485777, 0.1299144406281948, 0.21422866494924786, 0.18781223382161893, 0.2564693761413427, 0.27218812211816, 0.2281126858081438, 0.24228570133735938, 0.2546683806500186, 0.13384447494753093, 0.3010089695905934, 0.28166885162691224, 0.2584473541631761, 0.26956437248831655, 0.12872299585060243, 0.008445296891555154, 0.004287841276586324, 0.15895758727386455, 0.05330334236691292, 0.006910961982205088, 9.999999999998899e-05, 0.11288702641946069, 0.00901725129425246, 9.999999999998899e-05, 0.10583428158350072, 0.06241123853566877, 0.10203204740141103, 0.08425662331571115, 0.025259380514579988, 0.03562789528950416, 0.13345683511851747, 0.07811905686049703, 0.06519953163349124, 0.12803513156289958, 0.09198086626266544, 0.13837757362680403, 0.12663755642394114, 0.2695945181988527, 0.11201949443709813, 0.09168176349506607, 0.11181478072960449, 0.07406700075977102, 0.23792568622503463, 0.12060182173081446, 0.2640962800362986, 0.0901837020269095, 0.23500782226780725, 0.19854572330459885, 0.14696109914685718, 0.08141316914542152, 0.09634818371717135, 0.5156729264408721, 0.4951986591439962, 0.5179675887212878, 0.5259725551070418, 0.4685951388348545, 0.4796596095324249, 0.5287118777341263, 0.5091116252288935, 0.5339274767713322, 0.17627009156552997, 0.13200410955592834, 0.11377367373453962, 0.14309225712183238, 0.14077914674868985, 0.1161933057817085, 0.1173639714797835, 0.14058922611686153, 0.12571590946327837, 0.5223822087086543, 0.19184734690812488, 0.22481561351520207, 0.41545803828512384, 0.426592856188577, 0.43942860411429696, 0.36106227250990663, 0.4238131184352881, 0.1663454301099182, 0.3816550753131942, 0.3181599286395642, 0.35623854255853593, 0.3197270585735057, 0.24932934128715023, 0.3002037724702248, 0.3287400392970633, 0.3577867452044279, 0.3498846895270654, 0.25146920595662203, 0.252994450236133, 0.23041069536114278, 0.333249778536689, 0.27596707211717086, 0.2756947408490652, 0.2576400433065187, 0.3476712434943008, 0.2641313493345129, 0.23021919918974676, 0.20809293961172337, 0.22820346648109324, 0.24778263517956978, 0.2379515474845746, 0.21309134978691857, 0.22738349566734972, 0.2042210886337944, 0.21527822098722704, 0.1874755143600959, 0.24387341005287166, 0.17528842427826896, 0.22111685595937614, 0.2097485976897796, 0.24055474363135432, 0.21363150747222548, 0.1887679850248115, 0.22142194579535912, 0.784320341067443, 0.18644929477514893, 0.15310066257751564, 0.8591549076599097, 0.20038195255300306, 0.13606408880288123, 0.1422649066107773, 0.16711049585603466, 0.8131465570934873, 0.6042633842584875, 0.21281592557839257, 0.07347279246743998, 0.7514889358977488, 0.1535976829572141, 0.15335891632075616, 0.09424585719062484, 0.10456636605030722, 0.7302642226021334, 0.19658319143216774, 0.19860931359212997, 0.19760752428862527, 0.20206280174221614, 0.2123362727049929, 0.20532114731958673, 0.2221991871875949, 0.1737083219329717, 0.18646454776969168, 0.09289493400664817, 0.13652155049016723, 0.08802791874893978, 0.09891412474322203, 0.08774378956887408, 0.10056897393433151, 0.17675768788555102, 0.1059556744265785, 0.09520447586083647]}, "mutation_prompt": null}
{"id": "72219cf0-40b7-47f3-92b9-05ce934137b6", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA_Chaotic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for enhanced diversity\n        self.inertia_weight = 0.65  # Slightly lower inertia weight for responsive velocity control\n        self.cognitive_coefficient = 1.6  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.25  # Enhanced social component for exploration\n        self.initial_temp = 1.4  # Higher initial temperature for greater exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for better convergence\n        self.chaotic_factor = 0.3  # Introduced chaotic factor for diversification\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                chaotic_component = self.chaotic_factor * (np.random.rand(self.dim) - 0.5)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i])\n                                 + chaotic_component)\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.15 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA_Chaotic", "description": "A Quantum-inspired PSO enhanced with Adaptive SA, employing an additional chaotic component for diversified search.", "configspace": "", "generation": 96, "fitness": 0.21865806477411404, "feedback": "The algorithm QuantumInspiredPSO_EnhancedSA_Chaotic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.411780009323818, 0.4115096569077564, 0.3955764786183107, 0.4228559274187522, 0.4225739844285019, 0.39545565806723326, 0.3940083094063014, 0.39099881154583305, 0.42365637119562816, 9.999999999998899e-05, 0.04473300072815323, 0.0685157747591264, 9.999999999998899e-05, 0.02367132721734866, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011163825253863724, 9.999999999998899e-05, 0.13050031753465596, 0.14693437463449133, 0.13220794245783563, 0.12346441138715258, 0.10739068944255536, 0.10603574468387467, 0.10392055751101503, 0.12249626594008145, 0.10691066526379067, 0.10332514713342078, 0.09523683391079885, 0.1095103433617387, 0.11329312893703847, 0.11495325603166329, 0.09863598890735592, 0.10765862636746915, 0.1232643606539141, 0.10112661817409097, 0.95418981688436, 0.9505358041012669, 0.9588638410399764, 0.9396707788363627, 0.9275317078489481, 0.9281753366275517, 0.9490810366423885, 0.9323397336276129, 0.9463074543504156, 0.2966609286308267, 0.2887110612495941, 0.2832935126446875, 0.3026858001111282, 0.3052483401309313, 0.30353539943900887, 0.29030984568251617, 0.3284328237872758, 0.28111701475740425, 0.35878347429762725, 0.3010759451591466, 0.342139815713563, 0.3598657773518019, 0.3574065354513031, 0.28267430290785645, 0.19698152929129764, 0.26410281280415915, 0.3618530259828886, 0.13653175822648622, 0.17335492098357064, 0.18058878610926932, 0.12012062693937786, 0.16363155200079504, 0.1558552200006489, 0.17620470520025833, 0.1585323533471117, 0.16473454831540735, 0.16162322485900582, 0.16178387195355792, 0.10797996539398902, 0.16556344799667555, 0.1787493932132076, 0.17626561225009885, 0.19968486432692079, 0.18959872928186505, 0.1756036049169143, 0.07206424219845975, 0.05099496747170018, 0.007123227736250959, 0.037567304950597236, 0.01840702652066517, 0.0015478572672645852, 0.011910729042777679, 0.004835353088168404, 9.999999999998899e-05, 0.12703061821370032, 0.0707901566654997, 0.15244869927787208, 0.09482905824756016, 0.011871282813420092, 0.028147682886813685, 0.07178286083804619, 0.13056134853294965, 0.061664232981343825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001289554847815122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11547899996489264, 0.10411770963008127, 0.10506146743170919, 0.06745665257740652, 0.10474144696194487, 0.10176675394999823, 0.07241778876536131, 0.07058412522149049, 0.0728448364084543, 0.37564762781150096, 0.4004155218592659, 0.3768710345931302, 0.38498433795092335, 0.37580869356949, 0.4054029111751324, 0.3713997962955248, 0.37577802149726625, 0.3741017016674014, 0.10825764908309121, 0.09805043126881607, 0.10397144621867738, 0.07373120975530423, 0.11151373437575751, 0.10675889694525809, 0.13968679409712714, 0.11092755497507045, 0.09848326578765387, 0.2472256649152944, 0.2586400077209664, 0.16850119867243007, 0.25887618233740695, 0.27368734194576694, 0.26945478384785293, 0.2792796726227099, 0.18732690999251722, 0.16737972192661477, 0.278869725899087, 0.2704649260617894, 0.293537230750185, 0.2807424980298797, 0.2738188635174801, 0.27878591971200783, 0.280878074766292, 0.2738383576967963, 0.2291311305517746, 0.24247407726810533, 0.23237550122771644, 0.22934650501150577, 0.18324524438206657, 0.16680563017182737, 0.2126028864854428, 0.20491557953082462, 0.22669082891220127, 0.21300306826681625, 0.23105918099222933, 0.2102350715794724, 0.22035897968791296, 0.21760817059149062, 0.23132503212223188, 0.20112715182127716, 0.21350075440781957, 0.20939079900333524, 0.20695962860600425, 0.20358562464094343, 0.2000570860751142, 0.18162181909832598, 0.21351291295267794, 0.20893658901873147, 0.1760364772775218, 0.19181632816797534, 0.22757556435012138, 0.19089452711165145, 0.12603141387705707, 0.1862186331883814, 0.15324798052803068, 0.6206883527145368, 0.2002236690249234, 0.6057138108139417, 0.1420292460609438, 0.16326880929805743, 0.6618067991164934, 0.5899463320093381, 0.21208696585379416, 0.5328016968844069, 0.20467621055322427, 0.15409027618090765, 0.20913818061634548, 0.09421826964831415, 0.10448348914279526, 0.5551122131290926, 0.19343997735988983, 0.19322815345039057, 0.17777181237277184, 0.17128690508629074, 0.19436505707106622, 0.1964829774863911, 0.2036351356781957, 0.2065066286244137, 0.1792099409193143, 0.09985267541046727, 0.09539522685018442, 0.09300060763644158, 0.09797139844233804, 0.08745344166377722, 0.08744543128782511, 0.08061668047624992, 0.09874625396458137, 0.08662789049847852]}, "mutation_prompt": null}
{"id": "ed01d1ed-7c34-46a7-a50d-a89a41ff3dbd", "solution": "import numpy as np\n\nclass EnhancedQuantumPSO_AdaptiveTemp:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better diversity\n        self.inertia_weight = 0.8  # Increased inertia for improved exploration\n        self.cognitive_coefficient = 1.4  # Slightly reduced cognitive component for balanced personal search\n        self.social_coefficient = 1.5  # Increased social component for enhanced exploration\n        self.initial_temp = 1.5  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for finer convergence control\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-3.0, 3.0, (self.population_size, self.dim))  # Wider velocity range for more dynamic search\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.6 + 0.3 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range with increased range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "EnhancedQuantumPSO_AdaptiveTemp", "description": "Enhanced Quantum-inspired PSO with Adaptive Temperature and Dynamic Velocity Bounds for Balanced Exploration and Convergence.", "configspace": "", "generation": 97, "fitness": 0.24198684845045765, "feedback": "The algorithm EnhancedQuantumPSO_AdaptiveTemp got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.40593113764237565, 0.38012576942651133, 0.42499971767301603, 0.36834113597821605, 0.37865036430851096, 0.4034440426031001, 0.3834435007446946, 0.417689580766338, 0.37939683597457574, 0.23433204134153207, 0.24115282228607848, 0.19624932575789011, 0.19496368608490267, 0.23099974284148372, 0.2123082170847872, 0.21076589575333116, 0.011566844506305629, 0.22339679637174836, 0.26049878856327546, 0.14545726923534008, 0.14413359767445455, 0.16083905337841187, 0.1538579749016753, 0.1409205911037219, 0.1114261922178783, 0.12450962370905672, 0.18543517149551303, 0.10588083573775298, 0.10524262043423116, 0.10607685492179231, 0.12192513532718818, 0.11774208109575957, 0.13024876220690873, 0.1440544600385112, 0.12869410271655213, 0.10899188668406168, 0.9580910624366192, 0.9585468037753768, 0.9654563468540497, 0.9510023479468176, 0.9519209121449449, 0.9497162767128232, 0.956846989350664, 0.9405251559645803, 0.9576910727796623, 0.3935835681267391, 0.3755487161778044, 0.05729865982049309, 0.3751094817487348, 0.3867273471691818, 0.3882508874224041, 0.3588815496805693, 0.08700143077258438, 0.3488188471226339, 0.1709846723835724, 0.6298476734148332, 0.2167960961860368, 0.22622482799188892, 0.3657003701744188, 0.21671066129673422, 0.6485905395649947, 0.397698460606426, 0.6316347840258526, 0.11563978157314159, 0.19746353255972382, 0.10544439488107604, 0.11240719813690392, 0.2198251658177236, 0.09766075932622575, 0.18160614182910972, 0.19131172998444546, 0.19721423038473307, 0.18826030069764788, 0.18065129835736138, 0.12504496152105526, 0.18242774424127228, 0.17599639191560434, 0.19683188420153952, 0.19569438786309512, 0.1955320733557543, 0.21596172889634146, 0.042462827735937236, 9.999999999998899e-05, 0.0522288292363382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03853269285046468, 9.999999999998899e-05, 0.00700557333591878, 0.1635584462669203, 0.0318589520854905, 0.11009786706958458, 0.12014382198965812, 0.02162531445804594, 0.02757336203894123, 0.09323061794523457, 0.06422684497692077, 0.04811479055304646, 0.1030961515348856, 0.04669883487802906, 0.07288095170953146, 0.059561827197113226, 0.05200719569208723, 0.05112293086996522, 0.06533063104382131, 0.1754983005706905, 0.04715845940934993, 0.11929950860643512, 0.1624819154593311, 0.15130477320850078, 0.019287229979936038, 0.04429030135870349, 0.159143745894622, 0.04488995768113002, 0.18969391007669567, 0.12557165362917044, 0.34372518147734277, 0.3525988321680096, 0.36107261247694533, 0.3591869007928571, 0.3434693785818743, 0.3478838969731084, 0.37245431698589027, 0.3571320597514984, 0.36550961008027794, 0.1091914660390727, 0.09326387549374215, 0.11030637959554279, 0.11429558239961368, 0.09675285912834186, 0.10394817632181308, 0.16820976843393387, 0.11756040792551992, 0.11660961004435555, 0.25306222094806785, 0.2731230090807698, 0.19184803088541558, 0.2360056301299407, 0.22960953242131954, 0.27548273020609126, 0.23085695636328196, 0.2103766262970278, 0.1713329798899338, 0.24286368087828558, 0.263542964509101, 0.29293478490942604, 0.2719566586532014, 0.304432503289328, 0.2740254676959246, 0.2506000540221367, 0.2704919622753248, 0.28560205216942014, 0.23996522366073036, 0.25601433698502296, 0.21511631061512404, 0.264217874170143, 0.15734577298887487, 0.22988345913396646, 0.24298061751873556, 0.26731450686085645, 0.23745127104408026, 0.1950700585032138, 0.1909176854028617, 0.243445570416032, 0.24665529039406497, 0.21074775363155163, 0.2407426815288657, 0.24135932850011832, 0.20421014533291504, 0.2154857316326948, 0.20625697780163588, 0.21280787670257328, 0.23587945719019532, 0.3355194928110472, 0.19819790821140681, 0.1948357852408843, 0.20383115672229302, 0.34174672607620826, 0.1827161823347454, 0.5876443367409265, 0.1843056654823556, 0.15135939941348753, 0.5746623462456324, 0.19752168090190625, 0.5594966767781915, 0.1411267244252873, 0.16431873211408732, 0.6437711643163417, 0.5816362076323425, 0.16927717314905966, 0.527136709045469, 0.5722587671565523, 0.43948375594405165, 0.20221716797329137, 0.10310543430011143, 0.16486717791843508, 0.5043729587542443, 0.2048310865571853, 0.1776811390882309, 0.2078334279824463, 0.19940370155745135, 0.21293608865485936, 0.19400516116036293, 0.17984315351771352, 0.18033892025909792, 0.19261357053826755, 0.09189793820125813, 0.09269818567076238, 0.12350710560158173, 0.09030890063190566, 0.09798398257762708, 0.0848440782863552, 0.09547096729826188, 0.08155616314701897, 0.07645975044793085]}, "mutation_prompt": null}
{"id": "11a3ae51-4914-4ba6-b349-653ba3f186c6", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_EnhancedSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 45  # Slightly increased population size for enhanced diversity\n        self.inertia_weight = 0.7  # Slightly higher inertia weight for improved velocity control\n        self.cognitive_coefficient = 1.5  # Balanced cognitive component for personal search\n        self.social_coefficient = 1.2  # Balanced social component for exploration\n        self.initial_temp = 1.2  # Slightly higher initial temperature for greater exploration\n        self.cooling_rate = 0.9  # Slower cooling rate for better convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-2.0, 2.0, (self.population_size, self.dim))  # Wider velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.2 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_EnhancedSA", "description": "A Quantum-inspired PSO with Enhanced Adaptive SA and Dynamic Parameter Adjustment for Robust Exploration-Exploitation Trade-off.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.7539681938301027, 0.7655962737271554, 0.7429692645677912, 0.745006254810824, 0.7418560464710833, 0.7273580740920368, 0.7121152460519915, 0.7555811605655216, 0.7685860842345034, 0.6456227324158759, 0.6148359062136834, 0.5388518291333082, 0.6015426970783917, 0.6287159025533473, 0.5627754150480775, 0.6156661447804445, 0.5994948180911751, 0.6111834591746692, 0.15295534014125567, 0.1831401513688099, 0.18436851161017043, 0.13956516622922466, 0.12283446953060051, 0.15999092212050148, 0.11044761265162129, 0.14936341003363174, 0.14211846412259, 0.12133197801327877, 0.1206200002782718, 0.12990789275187986, 0.13271724793478734, 0.1275119281342173, 0.12501179324302958, 0.16052174290530252, 0.10840459746672748, 0.12204806716359473, 0.9546283718584316, 0.953571076511324, 0.9582899672875672, 0.9542246148302607, 0.9474862056376222, 0.9313794957690342, 0.9654241519699366, 0.9446866726973782, 0.9555463356283505, 0.7452749947278379, 0.714979192061882, 0.6665896589149185, 0.6734237069167541, 0.6959332549580977, 0.6961157991609077, 0.6692111667481215, 0.6577480555741805, 0.6730420117345733, 0.8911253595857436, 0.8592046575687583, 0.22683420852441272, 0.2797853550529671, 0.1922463227102741, 0.1930862093683121, 0.23219675374004967, 0.12592275148842058, 0.2354844699926063, 0.3323249985722083, 0.12528219085639158, 0.28189021721366625, 0.1057557956689743, 0.21595612214662763, 0.19776757152359992, 0.2580195504754099, 0.3050916098454104, 0.2676373124155218, 0.287045666782061, 0.251529625159, 0.26544253310385957, 0.24058037127060816, 0.270039481597953, 0.2592539538094266, 0.2421531683924778, 0.03423922655428757, 0.2741405391861633, 0.05884193146161576, 0.022615230617945237, 0.01159226292525184, 9.999999999998899e-05, 0.15889522204355, 9.999999999998899e-05, 0.15178281286728013, 9.999999999998899e-05, 0.10585812253040017, 0.10787731593184213, 0.060004607534358545, 0.06978205424485351, 0.04191441298052634, 0.05387377144842054, 0.08023022887873121, 0.10160143693745649, 0.06402148860633339, 0.07393799913350829, 0.12291641347708626, 0.11912779783863481, 0.10574070344115738, 0.2496673304008329, 0.0822376446170403, 0.07656819089830258, 0.09818729296692741, 0.18824515763409178, 0.06851354503944662, 0.3236808246265276, 0.07336988122742782, 0.1699068289406196, 0.16665773093608482, 0.09395375506931891, 0.20359581545411287, 0.173707608470118, 0.22637539444236654, 0.08315177612322278, 0.5472326232415172, 0.5588370623052366, 0.5070654985080645, 0.5049679096460892, 0.20715415470335452, 0.5065759974980798, 0.5504462776939247, 0.5257398374313709, 0.5662237496888654, 0.11351242758785152, 0.07519622443612572, 0.1296699677853438, 0.15398663346467178, 0.1007991670498708, 0.18564217817038753, 0.12068925099240002, 0.140056025000853, 0.11658585807206223, 0.35721980038520906, 0.5316459299157024, 0.20756359017220616, 0.2492869571211389, 0.262506569155061, 0.45783676529119943, 0.2747147961547911, 0.21010249797995972, 0.2805747915430232, 0.3796693215548649, 0.38172814277285505, 0.3053679158269086, 0.30327277583555634, 0.3449981102481756, 0.2838809989090755, 0.4339875328261662, 0.3361578094338674, 0.24418574796747616, 0.2515609398389139, 0.23767151875239845, 0.2415574663954343, 0.36381881050467235, 0.18785956781173385, 0.3486358080903491, 0.2558701631016792, 0.3725049120532914, 0.2306201344935832, 0.24454333595364675, 0.21842341731608594, 0.2118326161546903, 0.23294051338631228, 0.1977997537409677, 0.235400101248465, 0.2519525423292782, 0.2959184462684451, 0.1844436456762092, 0.22831695526396, 0.6508909441141466, 0.1962171426892474, 0.1844758505025036, 0.20766764979077967, 0.2078442307103584, 0.24960389136967764, 0.22737217082760797, 0.2227251321301863, 0.12651196605864, 0.1870564357915676, 0.1868107975998845, 0.882123144800417, 0.20096477986799133, 0.8615718918882176, 0.1773810868793, 0.1697885675718942, 0.881773393324996, 0.7388198705001844, 0.21247382978816753, 0.7147638998987605, 0.21097479157091326, 0.8416039663636259, 0.15445690333798934, 0.8058177278134278, 0.1656660395570947, 0.8263729378517837, 0.21317861080026168, 0.20996420245601366, 0.19722127579308368, 0.20584043689429865, 0.2014584897451469, 0.2213161247948604, 0.19093833058677234, 0.21460480968022178, 0.19064789595233433, 0.09678376518851384, 0.10594463346638983, 0.09278825589662343, 0.08336838379325995, 0.10580941845250269, 0.12429702886854488, 0.12141445448038957, 0.10144744878514245, 0.08003136410531075]}, "mutation_prompt": null}
{"id": "b1aaaad8-fa37-44d0-b74e-c35ff73a8bee", "solution": "# Description: A Quantum-inspired PSO with Time-Variant Strategy and Adaptive SA for Enhanced Optimization Efficiency.\n\nimport numpy as np\n\nclass QuantumInspiredPSO_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.population_size = 50  # Increased population size for better diversity\n        self.inertia_weight = 0.6  # Adjusted inertia weight for improved balance\n        self.cognitive_coefficient = 1.7  # Enhanced cognitive component for personal search\n        self.social_coefficient = 1.3  # Enhanced social component for exploration\n        self.initial_temp = 1.0  # Adjusted initial temperature for better stability\n        self.cooling_rate = 0.95  # Adjusted cooling rate for faster convergence\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1.5, 1.5, (self.population_size, self.dim))  # Adjusted velocity range\n        personal_best = population.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        global_best_idx = np.argmin(personal_best_fitness)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Quantum-inspired update for velocities\n                q_factor = np.sin(self.evaluations / self.budget * np.pi / 2)  # Time-variant factor\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + q_factor * self.cognitive_coefficient * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                                 + (1 - q_factor) * self.social_coefficient * np.random.rand(self.dim) * (personal_best[global_best_idx] - population[i]))\n                \n                # Update position with quantum certainty\n                population[i] = np.clip(population[i] + np.sign(velocities[i]) * np.abs(np.tanh(velocities[i])), self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                fitness = func(population[i])\n                self.evaluations += 1\n                \n                # Update personal best with enhanced SA\n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = fitness\n                else:\n                    current_temp = self.initial_temp * (self.cooling_rate ** (self.evaluations / self.budget))\n                    acceptance_prob = np.exp((personal_best_fitness[i] - fitness) / (current_temp + 1e-10))\n                    if np.random.rand() < acceptance_prob:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = fitness\n\n            # Update global best\n            global_best_idx = np.argmin(personal_best_fitness)\n\n            # Dynamic adjustment of inertia weight\n            self.inertia_weight = 0.5 + 0.1 * (self.budget - self.evaluations) / self.budget  # Refined dynamic range\n\n        return personal_best[global_best_idx], personal_best_fitness[global_best_idx]", "name": "QuantumInspiredPSO_AdaptiveSA", "description": "A Quantum-inspired PSO with Time-Variant Strategy and Adaptive SA for Enhanced Optimization Efficiency.", "configspace": "", "generation": 99, "fitness": 0.2650709079944318, "feedback": "The algorithm QuantumInspiredPSO_AdaptiveSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "d1f37cf8-f4fe-4b8d-9c9c-01fa09d6f94c", "metadata": {"aucs": [0.8226691456804373, 0.8252077283230537, 0.8137590664714891, 0.8324270158167769, 0.5221827872761835, 0.8483587513913227, 0.850782171183491, 0.848167318710887, 0.8313537475638083, 0.13591402270507424, 0.3782166772553536, 0.02967259646338849, 0.14075227110808552, 0.04463191148786205, 0.3335112831546002, 0.10726819959994938, 0.06715719073377546, 0.18801520944828953, 0.10569712661220187, 0.11821065346025239, 0.09228003167846532, 0.0720602832515459, 0.10526753705436054, 0.11672441587738125, 0.080201816854225, 0.09960872730297465, 0.07916800589745421, 0.08624845663454872, 0.09088110405867134, 0.08783788520828295, 0.09652537915127413, 0.11595699224376677, 0.06384481183318202, 0.14280966049547383, 0.11688944745290297, 0.06156827514123653, 0.9369195324187929, 0.9481234286129527, 0.9299935584694338, 0.9429362810687931, 0.9318313267687564, 0.9413689514410232, 0.9440358535198723, 0.893999196147656, 0.9460288322867761, 0.5770042088377522, 0.2549087390061825, 0.23659780998779167, 0.5736749354478148, 0.25265325319508647, 0.27689780431578936, 0.45924749981764756, 0.0872983442075782, 0.7122330758052204, 0.23044935988202464, 0.2159920286786876, 0.2140011665354704, 0.2061511375037134, 0.21266176707919504, 0.19293327863135423, 0.23294198512844955, 0.126183922173549, 0.2446918645227545, 0.21982609675009146, 0.21159269827720972, 0.12480294732497532, 0.12535854684655368, 0.20875303666740197, 0.10570828918681274, 0.17740554229475924, 0.17470707588842693, 0.1321739154631938, 0.20011368568988297, 0.15089164035521208, 0.1561334778204757, 0.1931661569320292, 0.14924164985269328, 0.21099192085181206, 0.12968833107392652, 0.18764372823320719, 0.20433603166737202, 9.999999999998899e-05, 0.013525620056705878, 0.08576345341824942, 0.056475927363952905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15228506169484313, 0.055556455894595125, 0.1619960741398756, 0.03386187396040585, 0.05784588031978599, 0.08852785576460775, 0.0306018073165355, 0.011905536800830174, 0.08685529593052721, 0.06012580175908455, 0.045261301786003405, 0.149608777508749, 0.07919794315770579, 0.19379245484337093, 0.30056368194019356, 0.07738907475724499, 0.2019689825227371, 0.21601005849156496, 0.17196375494868066, 0.18809740130297958, 0.09533512315196346, 0.09274418436769061, 0.06296407114121139, 0.046531291786707674, 0.1340745609456122, 0.17545220746408963, 0.23001267367145894, 0.15324308570363787, 0.08228447004040207, 0.42550148878824134, 0.5758490189919655, 0.48220942513530407, 0.4954124749128046, 0.46445433388241775, 0.4862808001549227, 0.5132891180978499, 0.5137037020583863, 0.426164273547776, 0.0767735914491966, 0.0715320321829136, 0.08698101228561395, 0.1421921593650275, 0.09490765569470472, 0.09704093445191198, 0.07659650060057444, 0.1243765321899728, 0.0928683862726204, 0.22374223066776877, 0.23347654558849185, 0.1654355733256775, 0.4018567541018029, 0.38165333348855934, 0.24283971597329512, 0.27626733361017064, 0.2256842148974526, 0.2027579889910074, 0.35874414798037246, 0.26784975222786933, 0.23349982723083917, 0.29993948975144136, 0.3820179926902517, 0.31593975963785337, 0.24869274925829654, 0.30444388271955714, 0.362169748260721, 0.26599215615921146, 0.23395418064444728, 0.24880845580809285, 0.2096165149326885, 0.32658924503880293, 0.3197327114250553, 0.25351036341738686, 0.3049109706245211, 0.21436274982383374, 0.21323920288073983, 0.2262254475179145, 0.18545059297785882, 0.23068337847624665, 0.22468013603529702, 0.18683230095530223, 0.2562830320804049, 0.21640071014793638, 0.24446180559824893, 0.1903375525880029, 0.1874261681248438, 0.20217517139491603, 0.1919994940409261, 0.24891108709576149, 0.1909258061835728, 0.1976836290555376, 0.17783047691685783, 0.19658954302156106, 0.9112387019450998, 0.1773752758223558, 0.1426655957265357, 0.9067303443984551, 0.2002459704574331, 0.1687776687372945, 0.14227528730954708, 0.16391369320647098, 0.16727629183978876, 0.9010518450250715, 0.21251724927654625, 0.07353163806276897, 0.7302581086141882, 0.16816276610499026, 0.15478454860046498, 0.7738157745699366, 0.16634083379122477, 0.8623096028171153, 0.24939514197327073, 0.22415188431749633, 0.22611390297325495, 0.2148594326659874, 0.3271905334710866, 0.19922487589875448, 0.26825982814419347, 0.24247859827543838, 0.2441557472999597, 0.0831090866424321, 0.11117553498392085, 0.08616403410792539, 0.08244292031225597, 0.08753559707989023, 0.07968171996363593, 0.08739395748125867, 0.0877357804887049, 0.083875629782726]}, "mutation_prompt": null}
