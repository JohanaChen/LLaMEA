{"id": "9e726ac8-40df-491b-904e-0b16b3034867", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "An adaptive Particle Swarm Optimization (PSO) with dynamic parameter adjustment for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.17443608011526524, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8832006264622564, 0.656220315587755, 0.8583684243522477, 0.4396054699393732, 0.7111902402435237, 0.3436154022408283, 0.9254496746878413, 0.6442775393459138, 0.18605285253019388, 0.09443862665350622, 0.006210654640491309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08051076605368523, 0.07696750045195877, 0.1623948221093371, 0.11794849470104563, 0.11255762445153017, 0.09363615395132929, 0.0675416706374462, 0.10658795207987792, 0.0928111046393757, 0.08299870579058333, 0.10449963446710153, 0.051182912892884236, 0.10562688767326833, 0.05722509971243506, 0.05682463586555442, 0.06997946023808166, 0.10094918362073058, 0.0917732666342852, 0.10410415444662124, 0.10203779977813132, 0.1406822757478804, 0.07769746331555727, 0.07873292019733402, 0.06919814867025342, 0.11107825211987798, 0.08337752034553325, 0.07943357318820454, 0.15123778481746541, 0.10593940767873011, 0.025039831508841037, 0.20641602411995008, 0.14678738128330948, 0.13846250275552252, 0.14497408304898995, 0.06961907145122315, 0.1837858379657663, 0.31570841028773433, 0.9511681231638481, 0.2169362117431629, 0.27003639790408973, 0.2822811989238828, 0.20861823824582393, 0.15237701986966035, 0.17744501429251736, 0.10272942886201386, 9.999999999998899e-05, 0.14309674708755793, 0.14122988455252938, 9.999999999998899e-05, 0.02660308946224399, 0.10484196641433863, 0.1278577058430228, 0.13001144828872457, 0.04116889548735703, 0.52156156604544, 0.1375557708482853, 0.1287837321314309, 0.1291439887084238, 0.06978659836809276, 0.1297883337878537, 0.12943457599117425, 0.13057278904549785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04558562877783612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08570112819246445, 0.05506801278387752, 0.0965523941675589, 0.08256133851653502, 0.02509148011050677, 0.03497910421801809, 0.05653449202200467, 0.0543503648505983, 0.07443432439207642, 0.3702281530000169, 9.999999999998899e-05, 9.999999999998899e-05, 0.15742268946987603, 0.10283062928806885, 9.999999999998899e-05, 0.1461268667164488, 0.08189164290693807, 0.11384021682534018, 0.16746562466699288, 0.13947840338032225, 0.18144759844945557, 0.04730961289765856, 0.3770060454828371, 0.07728966923412461, 0.11627636087872928, 0.08991775433851157, 0.08432314567168031, 0.3519756933108682, 0.3517094842248495, 0.5175091103972962, 0.4215199834968182, 0.25093311906180105, 0.38775121311834704, 0.2564486659209344, 0.5035762319640891, 0.49325051164920153, 0.11685531214044254, 0.0698999121604551, 0.0585241719590609, 0.08862055168601524, 0.1001978397991623, 0.10861619922148968, 0.07764072679719936, 0.09899091562215545, 0.0872608261635005, 0.15706097831082133, 0.18944132589477158, 0.16503992169453996, 0.25332504359338404, 0.16121063488093457, 0.16988408733805993, 0.11596653063552165, 0.12358894564937328, 0.27567544695479973, 0.2919929373863289, 0.2895464086363084, 0.22992126559370674, 0.33098680743097797, 0.2440628211591993, 0.27212472347893757, 0.19727294320878141, 0.2841512993454085, 0.22367830220829332, 0.23851218562871923, 0.0733947961650665, 0.16627666505725303, 0.1803988965226505, 0.22922088059198253, 0.20768504027517143, 0.22790415706818834, 0.289385019498714, 0.2092032049123682, 0.20653742157133137, 0.17750430572446907, 0.24738725949310325, 0.26872107826175384, 0.2007787206804541, 0.26130882432844005, 0.21785325577651027, 0.22276961532931194, 0.22580072563347198, 0.16697204360504203, 0.18621710993616747, 0.18239449776838845, 0.16047201766818275, 0.1907894546109874, 0.181246186210143, 0.17614138238655574, 0.17760740753041193, 0.17952573457309606, 0.18741426018992724, 0.18781324254947462, 0.15356284006083842, 0.5416326306204176, 0.20029895467816938, 0.1353851125729123, 0.14249117565290859, 0.13693465714237096, 0.862991478233982, 0.3820343907005639, 0.21188932985138542, 0.17236896205191665, 0.10363304475158597, 0.3702185869125081, 0.1550410495334822, 0.10467030679619638, 0.2644167250062013, 0.1810694403545411, 0.178967519368478, 0.18684687015617352, 0.18222553226299165, 0.19291688233855753, 0.19038255908955592, 0.18095485361254537, 0.1843907364383176, 0.18049448184643002, 0.19978244491390262, 0.06348528831306033, 0.08206714653368652, 0.08534938157654792, 0.10053824425864388, 0.09040578620226136, 0.08037217847613753, 0.04453373760917967, 0.07770674330095739, 0.08088840035189715]}, "mutation_prompt": null}
{"id": "3d5e73cc-9df6-443a-9d99-506b1d108c4e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "An adaptive Particle Swarm Optimization (PSO) with dynamic parameter adjustment for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e726ac8-40df-491b-904e-0b16b3034867", "metadata": {"aucs": [0.8832006264622564, 0.656220315587755, 0.8583684243522477, 0.4396054699393732, 0.7111902402435237, 0.3436154022408283, 0.9254496746878413, 0.6442775393459138, 0.18605285253019388, 0.09443862665350622, 0.006210654640491309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08051076605368523, 0.07696750045195877, 0.1623948221093371, 0.11794849470104563, 0.11255762445153017, 0.09363615395132929, 0.0675416706374462, 0.10658795207987792, 0.0928111046393757, 0.08299870579058333, 0.10449963446710153, 0.051182912892884236, 0.10562688767326833, 0.05722509971243506, 0.05682463586555442, 0.06997946023808166, 0.10094918362073058, 0.0917732666342852, 0.10410415444662124, 0.10203779977813132, 0.1406822757478804, 0.07769746331555727, 0.07873292019733402, 0.06919814867025342, 0.11107825211987798, 0.08337752034553325, 0.07943357318820454, 0.15123778481746541, 0.10593940767873011, 0.025039831508841037, 0.20641602411995008, 0.14678738128330948, 0.13846250275552252, 0.14497408304898995, 0.06961907145122315, 0.1837858379657663, 0.31570841028773433, 0.9511681231638481, 0.2169362117431629, 0.27003639790408973, 0.2822811989238828, 0.20861823824582393, 0.15237701986966035, 0.17744501429251736, 0.10272942886201386, 9.999999999998899e-05, 0.14309674708755793, 0.14122988455252938, 9.999999999998899e-05, 0.02660308946224399, 0.10484196641433863, 0.1278577058430228, 0.13001144828872457, 0.04116889548735703, 0.52156156604544, 0.1375557708482853, 0.1287837321314309, 0.1291439887084238, 0.06978659836809276, 0.1297883337878537, 0.12943457599117425, 0.13057278904549785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04558562877783612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08570112819246445, 0.05506801278387752, 0.0965523941675589, 0.08256133851653502, 0.02509148011050677, 0.03497910421801809, 0.05653449202200467, 0.0543503648505983, 0.07443432439207642, 0.3702281530000169, 9.999999999998899e-05, 9.999999999998899e-05, 0.15742268946987603, 0.10283062928806885, 9.999999999998899e-05, 0.1461268667164488, 0.08189164290693807, 0.11384021682534018, 0.16746562466699288, 0.13947840338032225, 0.18144759844945557, 0.04730961289765856, 0.3770060454828371, 0.07728966923412461, 0.11627636087872928, 0.08991775433851157, 0.08432314567168031, 0.3519756933108682, 0.3517094842248495, 0.5175091103972962, 0.4215199834968182, 0.25093311906180105, 0.38775121311834704, 0.2564486659209344, 0.5035762319640891, 0.49325051164920153, 0.11685531214044254, 0.0698999121604551, 0.0585241719590609, 0.08862055168601524, 0.1001978397991623, 0.10861619922148968, 0.07764072679719936, 0.09899091562215545, 0.0872608261635005, 0.15706097831082133, 0.18944132589477158, 0.16503992169453996, 0.25332504359338404, 0.16121063488093457, 0.16988408733805993, 0.11596653063552165, 0.12358894564937328, 0.27567544695479973, 0.2919929373863289, 0.2895464086363084, 0.22992126559370674, 0.33098680743097797, 0.2440628211591993, 0.27212472347893757, 0.19727294320878141, 0.2841512993454085, 0.22367830220829332, 0.23851218562871923, 0.0733947961650665, 0.16627666505725303, 0.1803988965226505, 0.22922088059198253, 0.20768504027517143, 0.22790415706818834, 0.289385019498714, 0.2092032049123682, 0.20653742157133137, 0.17750430572446907, 0.24738725949310325, 0.26872107826175384, 0.2007787206804541, 0.26130882432844005, 0.21785325577651027, 0.22276961532931194, 0.22580072563347198, 0.16697204360504203, 0.18621710993616747, 0.18239449776838845, 0.16047201766818275, 0.1907894546109874, 0.181246186210143, 0.17614138238655574, 0.17760740753041193, 0.17952573457309606, 0.18741426018992724, 0.18781324254947462, 0.15356284006083842, 0.5416326306204176, 0.20029895467816938, 0.1353851125729123, 0.14249117565290859, 0.13693465714237096, 0.862991478233982, 0.3820343907005639, 0.21188932985138542, 0.17236896205191665, 0.10363304475158597, 0.3702185869125081, 0.1550410495334822, 0.10467030679619638, 0.2644167250062013, 0.1810694403545411, 0.178967519368478, 0.18684687015617352, 0.18222553226299165, 0.19291688233855753, 0.19038255908955592, 0.18095485361254537, 0.1843907364383176, 0.18049448184643002, 0.19978244491390262, 0.06348528831306033, 0.08206714653368652, 0.08534938157654792, 0.10053824425864388, 0.09040578620226136, 0.08037217847613753, 0.04453373760917967, 0.07770674330095739, 0.08088840035189715]}, "mutation_prompt": null}
{"id": "7baf099e-8e88-47c6-bca8-417d51783190", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "An adaptive Particle Swarm Optimization (PSO) with dynamic parameter adjustment for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e726ac8-40df-491b-904e-0b16b3034867", "metadata": {"aucs": [0.8832006264622564, 0.656220315587755, 0.8583684243522477, 0.4396054699393732, 0.7111902402435237, 0.3436154022408283, 0.9254496746878413, 0.6442775393459138, 0.18605285253019388, 0.09443862665350622, 0.006210654640491309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08051076605368523, 0.07696750045195877, 0.1623948221093371, 0.11794849470104563, 0.11255762445153017, 0.09363615395132929, 0.0675416706374462, 0.10658795207987792, 0.0928111046393757, 0.08299870579058333, 0.10449963446710153, 0.051182912892884236, 0.10562688767326833, 0.05722509971243506, 0.05682463586555442, 0.06997946023808166, 0.10094918362073058, 0.0917732666342852, 0.10410415444662124, 0.10203779977813132, 0.1406822757478804, 0.07769746331555727, 0.07873292019733402, 0.06919814867025342, 0.11107825211987798, 0.08337752034553325, 0.07943357318820454, 0.15123778481746541, 0.10593940767873011, 0.025039831508841037, 0.20641602411995008, 0.14678738128330948, 0.13846250275552252, 0.14497408304898995, 0.06961907145122315, 0.1837858379657663, 0.31570841028773433, 0.9511681231638481, 0.2169362117431629, 0.27003639790408973, 0.2822811989238828, 0.20861823824582393, 0.15237701986966035, 0.17744501429251736, 0.10272942886201386, 9.999999999998899e-05, 0.14309674708755793, 0.14122988455252938, 9.999999999998899e-05, 0.02660308946224399, 0.10484196641433863, 0.1278577058430228, 0.13001144828872457, 0.04116889548735703, 0.52156156604544, 0.1375557708482853, 0.1287837321314309, 0.1291439887084238, 0.06978659836809276, 0.1297883337878537, 0.12943457599117425, 0.13057278904549785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04558562877783612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08570112819246445, 0.05506801278387752, 0.0965523941675589, 0.08256133851653502, 0.02509148011050677, 0.03497910421801809, 0.05653449202200467, 0.0543503648505983, 0.07443432439207642, 0.3702281530000169, 9.999999999998899e-05, 9.999999999998899e-05, 0.15742268946987603, 0.10283062928806885, 9.999999999998899e-05, 0.1461268667164488, 0.08189164290693807, 0.11384021682534018, 0.16746562466699288, 0.13947840338032225, 0.18144759844945557, 0.04730961289765856, 0.3770060454828371, 0.07728966923412461, 0.11627636087872928, 0.08991775433851157, 0.08432314567168031, 0.3519756933108682, 0.3517094842248495, 0.5175091103972962, 0.4215199834968182, 0.25093311906180105, 0.38775121311834704, 0.2564486659209344, 0.5035762319640891, 0.49325051164920153, 0.11685531214044254, 0.0698999121604551, 0.0585241719590609, 0.08862055168601524, 0.1001978397991623, 0.10861619922148968, 0.07764072679719936, 0.09899091562215545, 0.0872608261635005, 0.15706097831082133, 0.18944132589477158, 0.16503992169453996, 0.25332504359338404, 0.16121063488093457, 0.16988408733805993, 0.11596653063552165, 0.12358894564937328, 0.27567544695479973, 0.2919929373863289, 0.2895464086363084, 0.22992126559370674, 0.33098680743097797, 0.2440628211591993, 0.27212472347893757, 0.19727294320878141, 0.2841512993454085, 0.22367830220829332, 0.23851218562871923, 0.0733947961650665, 0.16627666505725303, 0.1803988965226505, 0.22922088059198253, 0.20768504027517143, 0.22790415706818834, 0.289385019498714, 0.2092032049123682, 0.20653742157133137, 0.17750430572446907, 0.24738725949310325, 0.26872107826175384, 0.2007787206804541, 0.26130882432844005, 0.21785325577651027, 0.22276961532931194, 0.22580072563347198, 0.16697204360504203, 0.18621710993616747, 0.18239449776838845, 0.16047201766818275, 0.1907894546109874, 0.181246186210143, 0.17614138238655574, 0.17760740753041193, 0.17952573457309606, 0.18741426018992724, 0.18781324254947462, 0.15356284006083842, 0.5416326306204176, 0.20029895467816938, 0.1353851125729123, 0.14249117565290859, 0.13693465714237096, 0.862991478233982, 0.3820343907005639, 0.21188932985138542, 0.17236896205191665, 0.10363304475158597, 0.3702185869125081, 0.1550410495334822, 0.10467030679619638, 0.2644167250062013, 0.1810694403545411, 0.178967519368478, 0.18684687015617352, 0.18222553226299165, 0.19291688233855753, 0.19038255908955592, 0.18095485361254537, 0.1843907364383176, 0.18049448184643002, 0.19978244491390262, 0.06348528831306033, 0.08206714653368652, 0.08534938157654792, 0.10053824425864388, 0.09040578620226136, 0.08037217847613753, 0.04453373760917967, 0.07770674330095739, 0.08088840035189715]}, "mutation_prompt": null}
{"id": "30ccd4d4-7eee-4707-a8db-f536be4d5a0e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) strategy for robust exploration and exploitation in dynamic landscapes.", "configspace": "", "generation": 3, "fitness": 0.3189908510165913, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "9e726ac8-40df-491b-904e-0b16b3034867", "metadata": {"aucs": [0.8548884578584873, 0.8434726337844923, 0.8518715990520422, 0.8350674775548892, 0.8514107764142864, 0.8298390982770749, 0.8595782854992262, 0.857274841647653, 0.8352512452561048, 0.7203563391349965, 0.7264571075769795, 0.7090406326024044, 0.6687668292180373, 0.7029631039031776, 0.5879304401872066, 0.6601136311039321, 0.70786541321465, 0.6064162438317552, 0.17555229780988646, 0.13915572193271897, 0.15348173105347251, 0.12354564085234865, 0.11858636091304509, 0.1207492207712848, 0.13712593139656748, 0.11131817916086273, 0.1745525129431107, 0.10950823583311708, 0.09968977985826044, 0.13393638976516653, 0.10418426600339115, 0.1023449671253247, 0.13602461950231703, 0.10602897954177493, 0.1348427915943401, 0.06363238498304558, 0.9546918174677735, 0.9482171188609636, 0.938005954348393, 0.9479479478609418, 0.967284625891413, 0.932925808043597, 0.9396106459690274, 0.933877649173864, 0.9413254895452431, 0.6899961124492737, 0.654482511826781, 0.4207223489865657, 0.18113552656189102, 0.6471895787472974, 0.5844437355361787, 0.4709179438406068, 0.48106279093174875, 0.5927815081917468, 0.3705229601509167, 0.37462559519106187, 0.8488069340632607, 0.21877946049346975, 0.20973811584054947, 0.2698706437095417, 0.3831400322604783, 0.8475310829390598, 0.23241664680209273, 0.18104104034078894, 0.09949273639142664, 0.1526050988806712, 0.12190947476148373, 0.17139408339717976, 0.15692286895107987, 0.242180507127142, 0.15266653471213687, 0.17527081423357338, 0.12978898644857673, 0.12768723884391953, 0.13130426979418752, 0.13199850026738458, 0.16074511094992738, 0.14656368553318355, 0.2237760131422355, 0.18293531272108643, 0.20891325919930337, 0.031579149157034636, 0.014685353846569327, 0.008710362007295025, 0.04184592071595439, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012298280360970582, 0.0004419037555227767, 0.028242757782364625, 0.12824166275814408, 0.05300474709528913, 0.1074683343360956, 0.0934470160541534, 0.052840448053361966, 0.04924002316499443, 0.13277918812181655, 0.09988569663381963, 0.07664603910266465, 0.055278392782763475, 0.2658333980470664, 0.13226680228255405, 0.11463789973171712, 0.08968773712568145, 0.12332409520016241, 0.09570102396205471, 0.12143063736844306, 0.16402675391698307, 0.1112236574441886, 0.16816932956471153, 0.23710893812550682, 0.08795486852016454, 0.2348796124633683, 0.11667408917861177, 0.1785010842454431, 0.25817351827196344, 0.08079390268416187, 0.6596596216426727, 0.536600097820392, 0.5463954011467407, 0.5269487823544895, 0.5080968800938883, 0.5956794866206978, 0.6075069193071566, 0.6332349510998092, 0.5984092564590536, 0.12506571524834686, 0.11662904840820443, 0.10269094834777281, 0.1477071624827364, 0.13394276239029856, 0.15340994109418682, 0.1110630196340695, 0.12074605102486624, 0.15088392521974925, 0.1494188110129291, 0.2614555476741868, 0.12534213253719084, 0.1966857532832088, 0.3248563625157994, 0.3790352186509478, 0.15999406087291734, 0.22298091305621193, 0.23059624096191278, 0.3726827057588742, 0.3924116845396628, 0.30634152907497314, 0.3703785887552452, 0.5120642037501056, 0.5905111703190771, 0.6249393849234683, 0.6638773729397851, 0.6668228983286842, 0.2884071540050932, 0.31636423120730484, 0.3099645643472331, 0.3304848266361552, 0.29139201873005394, 0.3270258930180049, 0.2700911924562692, 0.30446783190200966, 0.2589696517623574, 0.21062646555368303, 0.1935577400937889, 0.22939217321975236, 0.246831342849556, 0.19241947194481868, 0.2047740769488583, 0.2626585160846887, 0.21108230885125756, 0.20675303796257238, 0.1896954732143783, 0.2146675191545978, 0.2066267982589517, 0.21955679738478207, 0.24346382973090686, 0.2200367179953232, 0.19687025669413571, 0.19528332126301406, 0.20374547526532893, 0.18550987516133632, 0.1853474625739382, 0.147184276576227, 0.9137184112129123, 0.16886685418182956, 0.1954025912746269, 0.14145786397269489, 0.8225263155524938, 0.902599807754158, 0.7811508776003169, 0.2102843271780005, 0.20569988240863635, 0.6314874920249823, 0.5288092680238288, 0.615993447626399, 0.10428735181807902, 0.5982390037172479, 0.2112117460813231, 0.18829957915570383, 0.18050036897307964, 0.17524479621092992, 0.183747330877019, 0.1793588422491672, 0.19459499503611277, 0.19644364836249217, 0.18935330263766226, 0.20199157573152915, 0.08188614974576724, 0.08869479605885422, 0.09921190812989389, 0.09312076325813612, 0.0884492893209553, 0.08110049768953254, 0.08919717171108155, 0.093210524219414, 0.08934372951897951]}, "mutation_prompt": null}
{"id": "a1bc275c-3c5e-4d5f-b63b-be2d3e3eef9e", "solution": "import numpy as np\n\nclass RefinedHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9, initial_temperature=100.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n        self.temperature = initial_temperature\n        self.cooling_rate = cooling_rate\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Differential Evolution Mutation and Crossover with Simulated Annealing\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n\n                # Simulated annealing acceptance criterion\n                delta_score = trial_score - fitness[i]\n                if trial_score < fitness[i] or np.random.rand() < np.exp(-delta_score / self.temperature):\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            self.temperature *= self.cooling_rate\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedHybridPSO_DE", "description": "A refined hybrid PSO and DE algorithm integrating simulated annealing for better convergence in diverse landscapes.", "configspace": "", "generation": 4, "fitness": 0.2294999841385467, "feedback": "The algorithm RefinedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "30ccd4d4-7eee-4707-a8db-f536be4d5a0e", "metadata": {"aucs": [0.3178602528466513, 0.34418176131872524, 0.3284109171970713, 0.32983503598366015, 0.3318698110797149, 0.33735437556591086, 0.39835854959345585, 0.3311028415010845, 0.3279721286244327, 0.32051866442911736, 0.2984784977792908, 0.30484936326084566, 0.25756810101797756, 0.3034579607930261, 0.2660137472480165, 0.28107291685889424, 0.2818936632245894, 0.27623438631187125, 0.1036147018797372, 0.10831932507020725, 0.10481222943196444, 0.16214340369904479, 0.11486541196754585, 0.12025368754976062, 0.10725806286610062, 0.11292233229106363, 0.13510893311927807, 0.0986430488085478, 0.12170883921618703, 0.10747429961775556, 0.09984800458052245, 0.09939915215533257, 0.11795438633476729, 0.09427029349833227, 0.1043971796687061, 0.12930191309401928, 0.944587347058322, 0.9668371780324838, 0.9418420640879167, 0.925682794328736, 0.9477025253789778, 0.9273578011608775, 0.9436381886574119, 0.9290574408964501, 0.9421337901544972, 0.4610001880343487, 0.4362533267296951, 0.45220420648199433, 0.429175319437092, 0.4351935887711381, 0.4208584851786883, 0.414741350218817, 0.32604500350910715, 0.4574385044251916, 0.5049785332950563, 0.46723190055313624, 0.4256154283018142, 0.24212917593615024, 0.47464402467836186, 0.5519931523819939, 0.3274801566317791, 0.46514701984924167, 0.43792894471053345, 0.1653502259484112, 0.14079267587056343, 0.1185871323791644, 0.12993567500419634, 0.22143778430552818, 0.12613225605715506, 0.15699306602115126, 0.12599887424538758, 0.17037777858064806, 0.12615216566987786, 0.162783537926116, 0.14718712720807037, 0.18662298317603332, 0.22801002754559208, 0.14366717359280645, 0.17554115775580104, 0.18430076447681076, 0.19414066848285283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005496858474504096, 0.02005540592241395, 9.999999999998899e-05, 9.999999999998899e-05, 0.03384249800750916, 9.999999999998899e-05, 0.10731512913014407, 0.04304047714787829, 0.18405862462896982, 0.07259444709997387, 0.04414132571536089, 0.14230643163651224, 0.07109516325826704, 0.12742394154491288, 0.11657123966092986, 0.03396590040770131, 0.06853327867504577, 0.08103820894268521, 0.07754396538072472, 0.0743265399987606, 0.09432014411088108, 0.18861149783556153, 0.08522333133884819, 0.09195305110413665, 0.10497967763310989, 0.12875419812789624, 0.15836949181442594, 0.17197166192336122, 0.18237941459418594, 0.18321149063728925, 0.13492860176840282, 0.0750593675406881, 0.0770805203837821, 0.3026515612745434, 0.3140017607385541, 0.30367067059807507, 0.3134234034923048, 0.3220310434213083, 0.31386441894674144, 0.32269696951665083, 0.3019989625139854, 0.31626957811690404, 0.09981841058528129, 0.09852864659601979, 0.09926804510820875, 0.10399755534974575, 0.10978906680984657, 0.1105202195931364, 0.10971751460940649, 0.09796955608455393, 0.12692717177503132, 0.13662521448161113, 0.19699261850817085, 0.1610714645987389, 0.14001859063670907, 0.23443319696231923, 0.14256601255768142, 0.12608172269335394, 0.16282742905885628, 0.14017145483871596, 0.23030681869552538, 0.23790886240647102, 0.24864294957771216, 0.23216820976662478, 0.23734657551590377, 0.21299756426876315, 0.2379643035611696, 0.24656346913121807, 0.24162529561422474, 0.19438500306605522, 0.22735698172813978, 0.20669124153821927, 0.23335949829552005, 0.20848298480561667, 0.19993837537561132, 0.21681252118532968, 0.21258760183874859, 0.21840723869247058, 0.18779862578238682, 0.16765320009705176, 0.18393627941913615, 0.2096950536169997, 0.20346637574116866, 0.18721575361725118, 0.18510102672117823, 0.17187283672836728, 0.19271254263005144, 0.21336415034536116, 0.1917907919203663, 0.23456170641752327, 0.2188280487572749, 0.20780733119956196, 0.1807348977421992, 0.1966734807772481, 0.21508213581383584, 0.20313296539605974, 0.15947163405420528, 0.17590031234609083, 0.1453306092403247, 0.17334726337938433, 0.1875778967611894, 0.5133485364463612, 0.17670480129738642, 0.1550979372068163, 0.5136518412630336, 0.38737297981990504, 0.20324548341358095, 0.19792548834857637, 0.3031828626073111, 0.1982111641894403, 0.4080616172329715, 0.20110398328864998, 0.19145225099583774, 0.34904141477335615, 0.19140711714990843, 0.18466788155035063, 0.17654353694242164, 0.18658845037749017, 0.18229232871152712, 0.1690302562814009, 0.18605683983840438, 0.17463866143423434, 0.19365128213946803, 0.0799550045704529, 0.08225814503165496, 0.08014931787259316, 0.07979495054364394, 0.08627883060467234, 0.07803789057537291, 0.07812818743759764, 0.08101027236443148, 0.08049318215624257]}, "mutation_prompt": null}
{"id": "56f56e01-0533-4d2b-a94b-5c1a20c2d20e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.elite_archive = []\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n                self.elite_archive.append(self.global_best_position)\n\n            # Use fitness variance to adaptively adjust omega\n            fitness_variance = np.var(fitness)\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget)) * (1 + fitness_variance)\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSO_DE", "description": "An enhanced adaptive hybrid PSO-DE algorithm that dynamically adjusts exploration-exploitation balance using fitness variance and elite archiving.", "configspace": "", "generation": 5, "fitness": 0.0847481983205239, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.20.", "error": "", "parent_id": "30ccd4d4-7eee-4707-a8db-f536be4d5a0e", "metadata": {"aucs": [0.11869729595922507, 0.08108763387163931, 0.09169502728636048, 0.09431231635004056, 0.10750000009520266, 0.11042008850345264, 0.0998473575412605, 0.07431300570909605, 0.06863468668670525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0145722547340974, 0.00527563863363445, 0.01054446805214615, 0.006493004426576632, 0.006570620486345824, 0.018150078853178986, 0.007693168839137066, 0.010575797721479652, 0.0, 0.0, 0.0, 0.019501673109901807, 0.0003952856330659005, 0.0, 0.014664865741498057, 0.0, 0.0, 0.9950283193989229, 0.9945185586333168, 0.992975426541366, 0.9851337510899169, 0.9949413993290779, 0.9853312790366081, 0.9948846314210799, 0.9936923701363614, 0.9927593395373384, 0.06265423285318483, 0.0, 0.0, 0.0, 0.00021551809517039722, 0.0, 0.0, 0.011194453811892213, 0.0, 0.10018685869134347, 0.08215483554008829, 0.05973037536276826, 0.0666174982477209, 0.0727584940520748, 0.0, 0.026181922061941254, 0.05921649636375004, 0.05138446795508245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10879119250413838, 0.15748132322738906, 0.14829537673702797, 0.10270171191040733, 0.10265315387643659, 0.09571399605663411, 0.16104568613239922, 0.0970737923041346, 0.12096781839002757, 0.0, 0.0022662772065968895, 0.021886321886525173, 0.032572129909406056, 0.0, 0.017501683791198763, 0.0, 0.0, 0.026668336265767145, 0.10909482490400535, 0.09335437931137225, 0.11842175776965747, 0.09855305120349966, 0.10852972522114013, 0.10798713552628325, 0.08808199726801991, 0.08099219012337167, 0.08170491672072189, 0.09597227240604955, 0.0961601813401779, 0.16130937881350305, 0.13792052181380932, 0.11371875507613027, 0.10435826762183109, 0.12019368026052235, 0.17377774300845283, 0.11374251144948266, 0.0597616311262531, 0.038891908633002625, 0.08389423256585504, 0.056862900510085135, 0.06397588397005816, 0.06333484497584252, 0.0836401558119857, 0.09968109929814906, 0.06403167692629863, 0.11934558904176884, 0.09379139630456323, 0.13336421106428553, 0.11026790024321287, 0.08771080209620796, 0.1088798074549181, 0.12237199858743841, 0.09008691248962364, 0.12610897469204096, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07627374752427407, 0.076418204409467, 0.08167024703901915, 0.07327841830047488, 0.1207914665021157, 0.06661401029160186, 0.1070176662487543, 0.10511484148144368, 0.11397030242026862, 0.11040265245322212, 0.10267165755511809, 0.06932034027342138, 0.0506857903344724, 0.03738259240699027, 0.05903250263678039, 0.06877206854707929, 0.07931892490532777, 0.04143420019681854, 0.1511513840711246, 0.14769301886980135, 0.1628666737967437, 0.14982164316200974, 0.1499632284227529, 0.15949447864534816, 0.14969714796693134, 0.14492964072596592, 0.14768014236158156, 0.013617939348936514, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 0.03803354422653826, 0.017643830485487344]}, "mutation_prompt": null}
{"id": "b044cd30-e04a-408e-8661-6756aa59ea44", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            # Adaptive inertia weight\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget)) + 0.1\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover with dynamic F\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                F_dynamic = self.F + 0.2 * np.random.rand()\n                mutant = self.positions[indices[0]] + F_dynamic * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with dynamic parameter tuning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.3063030390774131, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "30ccd4d4-7eee-4707-a8db-f536be4d5a0e", "metadata": {"aucs": [0.83208008979977, 0.8242089927609921, 0.8066649627191362, 0.8251437558769334, 0.8091570967270242, 0.8330754727224109, 0.8395934709013273, 0.8274948248058708, 0.8156180212567754, 0.5831699026165995, 0.6600462191569076, 0.5977095306528748, 0.6525197942787022, 0.6027318739141452, 0.5958019472889362, 0.6714096327998489, 0.6389525858691822, 0.5497333398694383, 0.11486850953800554, 0.12773151583185705, 0.12155676515026304, 0.10104699240472037, 0.10698112141934468, 0.13935473983295565, 0.11846043745592327, 0.13900756072443488, 0.08281527229622765, 0.10910914472606514, 0.07972562755952661, 0.1116876449493941, 0.10125530881764644, 0.10060502767474244, 0.10440126894530732, 0.1037640945551297, 0.11488749234100559, 0.10377839776037412, 0.9388039434052511, 0.9516081779943256, 0.973352270134652, 0.9574788456413887, 0.9406454315416236, 0.9404807779006485, 0.9679177045914776, 0.9578782839216688, 0.966761418129202, 0.6210217009466233, 0.6786174132681716, 0.43876212317565577, 0.6308423605672355, 0.6637994663718276, 0.14966944283338013, 0.6979068024358865, 0.38496963516196114, 0.6122915457133539, 0.8380131665207952, 0.8305681222771707, 0.8239554298931433, 0.21154636136062144, 0.19022174961120586, 0.20788977834082967, 0.8016223155982295, 0.16337385271440386, 0.7429100329835364, 0.1771525637391096, 0.13800839355135652, 0.10893517919418061, 0.13997267823934922, 0.14406056206058515, 0.19352343114577086, 0.17187201716738487, 0.12683751255447573, 0.15964544392238056, 0.20863709220451332, 0.23509333758660622, 0.13607981787636203, 0.1640319154606239, 0.207439676550095, 0.12519108438033566, 0.22934917667809918, 0.19200572808919836, 0.16422870907330545, 0.0009891143721931783, 0.09363358871552885, 0.0634275130005093, 0.0004345256439630685, 9.999999999998899e-05, 9.999999999998899e-05, 0.007331737396342408, 0.006084269646828622, 9.999999999998899e-05, 0.10271957391098585, 0.15355085310940353, 0.14450461508457535, 0.11238713872163886, 0.08549477847097953, 0.03914958525462697, 0.12363428595059744, 0.1289475698853384, 0.10912137149368795, 0.03808474262044059, 0.18417543460994468, 0.05955386677127772, 0.1709220530701414, 0.11310133242437748, 0.07225434468475489, 0.09725177603590618, 0.09068299955961667, 0.09580767701289983, 0.15237778993467488, 0.13086470319253618, 0.11221519076762798, 0.22405583309799215, 0.15068170340973486, 0.15317336966837303, 0.1093430427199481, 0.11287728260024399, 0.0793125809448737, 0.6016236329857549, 0.6065265856981632, 0.5677937387717229, 0.6184943308631738, 0.572281549374436, 0.52068205508658, 0.610497641289451, 0.5835198998816336, 0.5283145628173137, 0.12797492734533333, 0.11002680913788665, 0.08273805665351208, 0.10879446353780353, 0.11243830762796792, 0.1073228878627075, 0.12227503403382034, 0.1594894805709428, 0.08448485353288326, 0.22248581313514182, 0.2859165503608935, 0.18174816674760264, 0.30608046179422066, 0.1702106910888046, 0.2405412879519354, 0.40456098886711533, 0.14417877287159375, 0.22251322291095443, 0.3693824822087355, 0.4360718710622328, 0.4476824660715699, 0.3089067077450218, 0.3292792659973869, 0.41655374333561435, 0.24289713335354535, 0.630168423523231, 0.49617812359341007, 0.31562805975675157, 0.2583707181491053, 0.2806357516294836, 0.22339482469282956, 0.2991607110909408, 0.379764988661648, 0.25758607018678614, 0.3814860629686815, 0.2857558982819697, 0.20150140031551722, 0.2082114177689105, 0.1946908349644848, 0.2219513361204205, 0.21531421019437125, 0.19940184432709684, 0.20454739129575183, 0.23494765032552178, 0.23841377745754322, 0.21643015581038305, 0.21470389694677317, 0.1903665382270845, 0.21948062135998447, 0.2317970788544237, 0.1868388499748459, 0.19121614669380083, 0.20348072381294546, 0.18792864801378373, 0.16404129417520985, 0.18446812604256446, 0.15192965543982972, 0.169929231601333, 0.8579720287037772, 0.16306461689098029, 0.1406318023003621, 0.1745759621394234, 0.17353151784748155, 0.8375456456380379, 0.20919816054217222, 0.2045431748656119, 0.20887767101804622, 0.16742503313573176, 0.20246655751929366, 0.7147546600351165, 0.20949680750569, 0.6898996135995044, 0.182277464821324, 0.19550176653928197, 0.1885244495250008, 0.18192265908662275, 0.1822253172705688, 0.18809444261525587, 0.1869160781719421, 0.19392341026173632, 0.177665754814616, 0.0906180454777068, 0.07673515195872493, 0.09135117640622503, 0.08711952639527432, 0.08683560369115162, 0.07980313035749953, 0.084272230347741, 0.08255397539796194, 0.08755694872012898]}, "mutation_prompt": null}
{"id": "dae7b6a3-48b0-48b4-a8a9-37d375ea4515", "solution": "import numpy as np\n\nclass HybridPSO_DE_Improved:\n    def __init__(self, budget, dim, pop_size=60, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = -5.0 + (5.0 - (-5.0)) * (np.mod(np.arange(1, self.pop_size * self.dim + 1) * 0.61803398875, 1)).reshape(self.pop_size, self.dim)\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (0.5 + 0.5 * np.cos(np.pi * (self.evaluations / self.budget)))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE_Improved", "description": "An improved hybrid PSO-DE algorithm with adaptive parameters and chaotic initialization for enhanced exploration and convergence.", "configspace": "", "generation": 7, "fitness": 0.30534937769912596, "feedback": "The algorithm HybridPSO_DE_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "30ccd4d4-7eee-4707-a8db-f536be4d5a0e", "metadata": {"aucs": [0.8252020359692956, 0.8098846160691222, 0.8209169499534288, 0.8004727232643652, 0.8120477233012836, 0.8163163606565564, 0.8144135692441941, 0.8164059020241163, 0.8193142337491807, 0.6267888716819932, 0.6379740695929601, 0.6317967533605928, 0.6407340979328788, 0.6180935018787677, 0.6286795727418686, 0.5166437030990618, 0.46334477969789856, 0.606361712142932, 0.1206124332866284, 0.10737770139953629, 0.1293319888843587, 0.1054425676493056, 0.11278309885542481, 0.12239953322474084, 0.1011047317167435, 0.13131118147322596, 0.16993753558559743, 0.08999007965912009, 0.10361847313331018, 0.10873342229776062, 0.13078366479200054, 0.04651694926850436, 0.11259847572645654, 0.1274581635730474, 0.11908065187885697, 0.14000389626374232, 0.9541945598197445, 0.939195631551381, 0.9287041117980808, 0.9380999476630705, 0.9526147617209362, 0.9619467906711321, 0.9186064204990176, 0.9072075475603876, 0.9400858379969294, 0.6056225980131602, 0.6417842909948489, 0.6257132780004411, 0.5894633081038272, 0.6770706481826653, 0.6307823749051737, 0.4001281335688627, 0.5678198230324418, 0.5324990187506653, 0.22112057281740705, 0.773078964128547, 0.7803868915393096, 0.1908230834787279, 0.35831952599502404, 0.20296248109540138, 0.7534133334374178, 0.22930886159938346, 0.3760847836148673, 0.1732235078493688, 0.1496119593289088, 0.1624122431704358, 0.11582147498712858, 0.171069515771212, 0.12387125145378797, 0.16244722023889024, 0.12608066132174722, 0.1391267626431023, 0.12982632995533638, 0.13192230626905965, 0.21697634731877058, 0.19296986359450752, 0.18772035952599309, 0.25330708348068787, 0.1939516298638212, 0.17544213154907007, 0.18500044654757697, 9.999999999998899e-05, 0.05654678273641933, 9.999999999998899e-05, 9.999999999998899e-05, 0.08134741346191654, 9.999999999998899e-05, 0.019349185949263825, 0.08006664498413463, 9.999999999998899e-05, 0.11597528825324754, 0.04697908454788735, 0.1233154870509321, 0.013359466850369817, 0.006108213485325198, 0.032632232343039136, 0.08810859795885262, 0.05952125955675058, 0.12227261878994322, 0.07461722314697705, 0.07996701326532418, 0.22654909653578792, 0.10086447010428323, 0.08376165778874345, 0.06881686839317813, 0.23673237444409423, 0.08854756796189744, 0.12745871829591737, 0.08611746813513932, 0.06976776475852053, 0.17351340720580133, 0.1591409714950598, 0.10042309947963801, 0.18234752699542955, 0.11105068204607904, 0.30020374097102887, 0.11159492797305726, 0.5853274865841688, 0.524119370445719, 0.546080686077401, 0.5597529953747105, 0.5838245701485207, 0.5972010386457582, 0.5120012850237319, 0.5579287839171272, 0.5323258075942819, 0.09824165003896945, 0.11397765805216498, 0.13618676652887773, 0.13336534100587982, 0.11627409973280989, 0.29100188371024815, 0.10559648102328734, 0.10894913371060333, 0.09589606381257021, 0.25507493803437786, 0.14110564129307546, 0.24562415879427446, 0.2478143164693889, 0.20140717896143967, 0.2738680870304486, 0.287066525829449, 0.22212113934139166, 0.17709281493195828, 0.2694957118241803, 0.6174298947239709, 0.5541251090943577, 0.2181935352936043, 0.46976608600103886, 0.3805278004732723, 0.47939630121866816, 0.5877048387180981, 0.589291031125564, 0.24176494176256247, 0.3174388196034488, 0.29698586728605103, 0.20539664039062355, 0.2294736663810064, 0.2535442883115685, 0.34076068294345496, 0.3591074806850738, 0.40811883425738715, 0.2258639519306429, 0.1990483618812453, 0.20139948478589764, 0.20821014175451713, 0.21554416762746365, 0.20807854833654593, 0.1972917754148399, 0.22923525737342176, 0.21133707524618417, 0.19919521004666907, 0.19095009758985104, 0.17843489417271607, 0.21708437464364638, 0.196204340659207, 0.21797040613293217, 0.20305769186539935, 0.20091420261803206, 0.19332515067041545, 0.13148619089447677, 0.18474046390126342, 0.20932764726694308, 0.19827100594563485, 0.7806834929570166, 0.20826331947120458, 0.840526186249202, 0.2099882371934395, 0.8525739760563446, 0.15221086460076716, 0.7400225139430341, 0.12542713746788536, 0.16606954169402965, 0.3164970801390947, 0.16574962503249757, 0.1628850548126306, 0.5402641535120503, 0.2084041012677157, 0.173423570166773, 0.18641521036852093, 0.17277354011759782, 0.20420875053543186, 0.18695407649269535, 0.17432641699224727, 0.19731080592382644, 0.17162391546442834, 0.17962230474763097, 0.08548327018817414, 0.09073043876737263, 0.08297046445038447, 0.08728371663199519, 0.09052434271873355, 0.08757223206603926, 0.079708145155722, 0.07376244062485127, 0.07663752883621255]}, "mutation_prompt": null}
{"id": "350b8f19-c7df-4e76-9e1d-8428a1f865d1", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * (np.random.rand() if self.evaluations < self.budget / 2 else 1)\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSO_DE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameter control for dynamic balance between exploration and exploitation.", "configspace": "", "generation": 8, "fitness": 0.34126127861761835, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "30ccd4d4-7eee-4707-a8db-f536be4d5a0e", "metadata": {"aucs": [0.7805372089457778, 0.7727669783233688, 0.7868599066100636, 0.7658883658115523, 0.781253926836466, 0.7756574625556727, 0.8023532285757792, 0.7828967566665764, 0.7844048942897357, 0.586917834879607, 0.608170670523396, 0.5911254644059216, 0.5973396503110316, 0.621526383625251, 0.6018019585301566, 0.5980680452284542, 0.6347885979113823, 0.5834780120117268, 0.12253022670918634, 0.13112046113074516, 0.14860312800174547, 0.11972261488110003, 0.138772060302355, 0.14340923390225302, 0.14294909647224974, 0.1610343284385528, 0.13330563883900182, 0.09085835208706672, 0.09712110677901709, 0.10167642925459364, 0.13598022150995692, 0.11850531987520685, 0.12867348763286968, 0.1031053787701256, 0.11470514178144564, 0.09309270021985228, 0.9153194493736908, 0.9442776904408918, 0.9404565817706221, 0.9677567847274021, 0.797014660164982, 0.8531323356455938, 0.9261459872223592, 0.8491028259151416, 0.9486282241385574, 0.570178892929217, 0.41466040607265386, 0.4219189491980071, 0.5349551656938316, 0.5286358522365973, 0.44676329553707905, 0.5150939580711694, 0.386382008529639, 0.45681072622395236, 0.8135083925506045, 0.7743696065564077, 0.6936475787711607, 0.21646497609022186, 0.8005244244036906, 0.7712804922745979, 0.7803520711094472, 0.7138889685501519, 0.7252494939763188, 0.39463226247921335, 0.11797463745930037, 0.3129808881421098, 0.17801432431532338, 0.19574604006497998, 0.28154543274442245, 0.2161776700058453, 0.19196535271185133, 0.15594302596766207, 0.17451746755284836, 0.15807120817772735, 0.13208903314980047, 0.18802307259005369, 0.3133501817773239, 0.2783065766187631, 0.3090232648811543, 0.18787452540131266, 0.13341327333963904, 0.03074087545356874, 0.07632744037394534, 0.047048755831577194, 0.10095300737351609, 0.0048504640564495105, 0.05530535558969296, 0.12856775451606828, 0.1022048367095495, 0.07071125259604105, 0.19965763138785986, 0.15551508175833118, 0.18059656238000155, 0.08317008837203554, 0.15944761328237478, 0.11326803758729198, 0.15885064165400964, 0.13590944579570952, 0.14686242065560196, 0.09446427685786474, 0.14559635970634577, 0.04139909159021149, 0.07106651422540344, 0.08590099638365556, 0.09487334875405362, 0.2532641286774797, 0.3001096992521204, 0.07889641485323884, 0.12627163165130273, 0.16460361241353816, 0.15402390610523142, 0.23889275910617247, 0.15507625829767424, 0.25704946114833094, 0.2732935097082303, 0.22707604915691848, 0.10417137557477218, 0.5970457393926474, 0.5701504620104805, 0.5682643652072034, 0.617832391804559, 0.5362089756952453, 0.5956530132141116, 0.6247102923621872, 0.5498949079807274, 0.590371380531056, 0.12045651562058446, 0.1011819101391408, 0.1111691785506781, 0.3147628921613883, 0.3916167431108555, 0.11891673434089678, 0.1505856710472837, 0.14069605170526556, 0.1329013247040739, 0.13651285731016138, 0.14944755233305784, 0.1667208778616388, 0.1355164948642461, 0.14794329406309747, 0.13724928444655793, 0.16210183553912016, 0.16171644388287276, 0.1515332112950677, 0.45154667174861995, 0.4845587403105298, 0.4330506616303994, 0.4964435606395815, 0.4534901145538873, 0.46334441823277417, 0.4769934785641966, 0.47916157449146435, 0.4607285584365465, 0.34654956997442543, 0.3786459073732662, 0.30380483500467625, 0.3784580390813892, 0.2771107922121424, 0.29112296026542994, 0.39276393729813885, 0.3312688717621447, 0.34533123904244245, 0.2673101921273604, 0.22338671416176936, 0.2197989131493413, 0.20705777016879678, 0.19301431829566695, 0.22852136891960817, 0.22289099555522895, 0.21603978258833045, 0.22050209056868653, 0.22310738411550113, 0.436773294576013, 0.20517709444179244, 0.22474410922030386, 0.2212213120439902, 0.17287409934431275, 0.4332950465528326, 0.18991692746362965, 0.21306311062696293, 0.8205420086477213, 0.16361327788381386, 0.18222008688689717, 0.8239580657141573, 0.19220508227735156, 0.19172983247896247, 0.6982539202617701, 0.7802512486467243, 0.8480617724679413, 0.2037241004934066, 0.20732938969323367, 0.672066654546954, 0.7530164728976854, 0.6763074685034429, 0.1514618514872651, 0.5657906216956589, 0.6653092020228344, 0.7718501481188402, 0.1874224308679645, 0.19249033721510656, 0.18174063107230476, 0.19660141063038994, 0.18039634145378292, 0.17189544685328872, 0.1814387105457217, 0.18722605912856005, 0.19328569382962457, 0.08434865948734493, 0.0817084341175669, 0.08657360898773203, 0.09013071941281692, 0.11371278623068681, 0.08481968317539212, 0.10238824855766337, 0.08335298657314794, 0.077798965806681]}, "mutation_prompt": null}
{"id": "9da2fb0b-161f-425f-98f9-aa3367c8b768", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * (np.random.rand() if self.evaluations < self.budget / 2 else 1)\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSO_DE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameter control for dynamic balance between exploration and exploitation.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "350b8f19-c7df-4e76-9e1d-8428a1f865d1", "metadata": {"aucs": [0.7805372089457778, 0.7727669783233688, 0.7868599066100636, 0.7658883658115523, 0.781253926836466, 0.7756574625556727, 0.8023532285757792, 0.7828967566665764, 0.7844048942897357, 0.586917834879607, 0.608170670523396, 0.5911254644059216, 0.5973396503110316, 0.621526383625251, 0.6018019585301566, 0.5980680452284542, 0.6347885979113823, 0.5834780120117268, 0.12253022670918634, 0.13112046113074516, 0.14860312800174547, 0.11972261488110003, 0.138772060302355, 0.14340923390225302, 0.14294909647224974, 0.1610343284385528, 0.13330563883900182, 0.09085835208706672, 0.09712110677901709, 0.10167642925459364, 0.13598022150995692, 0.11850531987520685, 0.12867348763286968, 0.1031053787701256, 0.11470514178144564, 0.09309270021985228, 0.9153194493736908, 0.9442776904408918, 0.9404565817706221, 0.9677567847274021, 0.797014660164982, 0.8531323356455938, 0.9261459872223592, 0.8491028259151416, 0.9486282241385574, 0.570178892929217, 0.41466040607265386, 0.4219189491980071, 0.5349551656938316, 0.5286358522365973, 0.44676329553707905, 0.5150939580711694, 0.386382008529639, 0.45681072622395236, 0.8135083925506045, 0.7743696065564077, 0.6936475787711607, 0.21646497609022186, 0.8005244244036906, 0.7712804922745979, 0.7803520711094472, 0.7138889685501519, 0.7252494939763188, 0.39463226247921335, 0.11797463745930037, 0.3129808881421098, 0.17801432431532338, 0.19574604006497998, 0.28154543274442245, 0.2161776700058453, 0.19196535271185133, 0.15594302596766207, 0.17451746755284836, 0.15807120817772735, 0.13208903314980047, 0.18802307259005369, 0.3133501817773239, 0.2783065766187631, 0.3090232648811543, 0.18787452540131266, 0.13341327333963904, 0.03074087545356874, 0.07632744037394534, 0.047048755831577194, 0.10095300737351609, 0.0048504640564495105, 0.05530535558969296, 0.12856775451606828, 0.1022048367095495, 0.07071125259604105, 0.19965763138785986, 0.15551508175833118, 0.18059656238000155, 0.08317008837203554, 0.15944761328237478, 0.11326803758729198, 0.15885064165400964, 0.13590944579570952, 0.14686242065560196, 0.09446427685786474, 0.14559635970634577, 0.04139909159021149, 0.07106651422540344, 0.08590099638365556, 0.09487334875405362, 0.2532641286774797, 0.3001096992521204, 0.07889641485323884, 0.12627163165130273, 0.16460361241353816, 0.15402390610523142, 0.23889275910617247, 0.15507625829767424, 0.25704946114833094, 0.2732935097082303, 0.22707604915691848, 0.10417137557477218, 0.5970457393926474, 0.5701504620104805, 0.5682643652072034, 0.617832391804559, 0.5362089756952453, 0.5956530132141116, 0.6247102923621872, 0.5498949079807274, 0.590371380531056, 0.12045651562058446, 0.1011819101391408, 0.1111691785506781, 0.3147628921613883, 0.3916167431108555, 0.11891673434089678, 0.1505856710472837, 0.14069605170526556, 0.1329013247040739, 0.13651285731016138, 0.14944755233305784, 0.1667208778616388, 0.1355164948642461, 0.14794329406309747, 0.13724928444655793, 0.16210183553912016, 0.16171644388287276, 0.1515332112950677, 0.45154667174861995, 0.4845587403105298, 0.4330506616303994, 0.4964435606395815, 0.4534901145538873, 0.46334441823277417, 0.4769934785641966, 0.47916157449146435, 0.4607285584365465, 0.34654956997442543, 0.3786459073732662, 0.30380483500467625, 0.3784580390813892, 0.2771107922121424, 0.29112296026542994, 0.39276393729813885, 0.3312688717621447, 0.34533123904244245, 0.2673101921273604, 0.22338671416176936, 0.2197989131493413, 0.20705777016879678, 0.19301431829566695, 0.22852136891960817, 0.22289099555522895, 0.21603978258833045, 0.22050209056868653, 0.22310738411550113, 0.436773294576013, 0.20517709444179244, 0.22474410922030386, 0.2212213120439902, 0.17287409934431275, 0.4332950465528326, 0.18991692746362965, 0.21306311062696293, 0.8205420086477213, 0.16361327788381386, 0.18222008688689717, 0.8239580657141573, 0.19220508227735156, 0.19172983247896247, 0.6982539202617701, 0.7802512486467243, 0.8480617724679413, 0.2037241004934066, 0.20732938969323367, 0.672066654546954, 0.7530164728976854, 0.6763074685034429, 0.1514618514872651, 0.5657906216956589, 0.6653092020228344, 0.7718501481188402, 0.1874224308679645, 0.19249033721510656, 0.18174063107230476, 0.19660141063038994, 0.18039634145378292, 0.17189544685328872, 0.1814387105457217, 0.18722605912856005, 0.19328569382962457, 0.08434865948734493, 0.0817084341175669, 0.08657360898773203, 0.09013071941281692, 0.11371278623068681, 0.08481968317539212, 0.10238824855766337, 0.08335298657314794, 0.077798965806681]}, "mutation_prompt": null}
{"id": "ca2f6097-1552-46e3-832e-8f1de1b79896", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget) ** 2)\n            dynamic_phi_g = self.phi_g * (0.5 + 0.5 * np.random.rand())\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSO_DE", "description": "A hybrid PSO-DE with adaptive inertia and dynamic mutation control for improved convergence.", "configspace": "", "generation": 10, "fitness": 0.3362642303478913, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "350b8f19-c7df-4e76-9e1d-8428a1f865d1", "metadata": {"aucs": [0.8429420904646213, 0.8240143082710012, 0.811479711674013, 0.8309241774958906, 0.8162173268575611, 0.8316861927408905, 0.8256578947851153, 0.8222979937260912, 0.8353640511400485, 0.5851579688762596, 0.6617870929733607, 0.6676968967328496, 0.6323979221014038, 0.6338423310029835, 0.6585964331131491, 0.6638082395607394, 0.6435434179558177, 0.6550888101838401, 0.14385923340409212, 0.14788785203974786, 0.12499734247947547, 0.16878042841285967, 0.1439330895083729, 0.13565602701442125, 0.11291495018063868, 0.13458463468667303, 0.14557674012951594, 0.5185300436379883, 0.10867471268621831, 0.11737159891463211, 0.1036717367719675, 0.1281477188860225, 0.08790734208357731, 0.16845019662266314, 0.12391152877927203, 0.12635381572138282, 0.966151848003785, 0.9440244418952884, 0.9406698155136503, 0.9497720908492495, 0.8784953500000826, 0.9380516780432204, 0.9514351205674876, 0.9079014980711213, 0.9286582260086305, 0.6197016250121918, 0.5816514247449376, 0.5779206656097213, 0.6839313622626324, 0.657389181821626, 0.6166008904749947, 0.6002477741714578, 0.43460530025638766, 0.665101806197494, 0.833859907082979, 0.7860702786028024, 0.7959208225042407, 0.27653684037954596, 0.20773046069389878, 0.2692227914187493, 0.7813721730232809, 0.819141727199899, 0.8262527789685332, 0.1854996263681955, 0.34062061576227476, 0.1304278200443414, 0.14090374270299022, 0.17544380074164634, 0.12554682414972762, 0.16267217921628585, 0.16646690864466507, 0.15714246770079665, 0.24491675238143085, 0.181940415407988, 0.18088081334613582, 0.15588049362264178, 0.15161516970564548, 0.18339229138354596, 0.21444890167329422, 0.1268203002911068, 0.12294988931622242, 0.013681330532352876, 0.013848881008829972, 0.06448279875030605, 0.05086997507831825, 0.08148521070373593, 0.03448577067426084, 0.07729162129663059, 0.03806036243260846, 0.15512424667937907, 0.19045041551853592, 0.10738541498831333, 0.11103238509656643, 0.09244411632957839, 0.07365713512657512, 0.07325341406018193, 0.11649385069119234, 0.12014451884705135, 0.07652648764577241, 0.09474531983769408, 0.10305790950647475, 0.1317601588147116, 0.07777967498926353, 0.09563706432409069, 0.20033172878133498, 0.22373058063683127, 0.16577000753227966, 0.32093508629587886, 0.10836330609230627, 0.16881399099035665, 0.1516935239580851, 0.2222167616738433, 0.3238711420945196, 0.20482267273928523, 0.21244131714767, 0.1497451916371798, 0.09188198194027386, 0.5912385206873013, 0.5817125734555384, 0.5745709803492877, 0.5933705017276056, 0.6325221683942166, 0.5813119319023048, 0.6149280374198565, 0.6170327435438767, 0.5407204205440043, 0.13273972604678963, 0.14354974398700782, 0.10212049903452858, 0.13573357925662988, 0.12918795736646893, 0.12040741336624072, 0.14526797729649366, 0.160811149819156, 0.11771621074546235, 0.18775960626414168, 0.1508649107619634, 0.13012577393412716, 0.15837040916281753, 0.16993269051670945, 0.13155651370355737, 0.23153466225291264, 0.14045392100650878, 0.14152944699414238, 0.4354987096609316, 0.5192943724860788, 0.5232277834480494, 0.38914843939410526, 0.21424969981322106, 0.5120181996739153, 0.5185718576860088, 0.6300590661526032, 0.5713800217441342, 0.25032513995042205, 0.20171110419969074, 0.28671719999631584, 0.2662423268068588, 0.25303764247072136, 0.35900429810789813, 0.368067867378039, 0.3652061560278673, 0.2360715175684701, 0.200092078913361, 0.22227574860972288, 0.21517073750895055, 0.231913833268387, 0.2095320614045172, 0.2039477250727708, 0.21665455456805072, 0.21307328075353282, 0.19441321882929896, 0.20114620832435526, 0.18087453371906292, 0.19216534768428328, 0.20449586983302448, 0.18839756567745514, 0.20011489523196013, 0.19341478450535754, 0.6861932956048634, 0.2145651434521888, 0.8306765254731755, 0.17298557789631652, 0.8507186682880401, 0.849943985806343, 0.1962074260954888, 0.15861062322751973, 0.14103789802445665, 0.8197807432609552, 0.8758436969865859, 0.834906441534335, 0.2084891018647269, 0.7986766299107175, 0.45163760816116993, 0.1659071395243964, 0.14964589515568727, 0.10434212061078962, 0.20573340039984533, 0.21010276109754977, 0.17749328593330516, 0.18894421055584076, 0.2061930639559706, 0.19228106903860864, 0.18157106195480044, 0.17672793020432875, 0.17995572257524128, 0.18458697557680903, 0.1868427786314163, 0.10200056236792876, 0.08409954408954345, 0.08773228428002255, 0.07735552726077999, 0.0874119051723572, 0.09059403603649574, 0.09092177841192628, 0.08788711268528804, 0.09187221012538505]}, "mutation_prompt": null}
{"id": "866a7131-86c4-46a5-8e5c-39ac6b531614", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * (np.random.rand() if self.evaluations < self.budget / 2 else 1)\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSO_DE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameter control for dynamic balance between exploration and exploitation.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "350b8f19-c7df-4e76-9e1d-8428a1f865d1", "metadata": {"aucs": [0.7805372089457778, 0.7727669783233688, 0.7868599066100636, 0.7658883658115523, 0.781253926836466, 0.7756574625556727, 0.8023532285757792, 0.7828967566665764, 0.7844048942897357, 0.586917834879607, 0.608170670523396, 0.5911254644059216, 0.5973396503110316, 0.621526383625251, 0.6018019585301566, 0.5980680452284542, 0.6347885979113823, 0.5834780120117268, 0.12253022670918634, 0.13112046113074516, 0.14860312800174547, 0.11972261488110003, 0.138772060302355, 0.14340923390225302, 0.14294909647224974, 0.1610343284385528, 0.13330563883900182, 0.09085835208706672, 0.09712110677901709, 0.10167642925459364, 0.13598022150995692, 0.11850531987520685, 0.12867348763286968, 0.1031053787701256, 0.11470514178144564, 0.09309270021985228, 0.9153194493736908, 0.9442776904408918, 0.9404565817706221, 0.9677567847274021, 0.797014660164982, 0.8531323356455938, 0.9261459872223592, 0.8491028259151416, 0.9486282241385574, 0.570178892929217, 0.41466040607265386, 0.4219189491980071, 0.5349551656938316, 0.5286358522365973, 0.44676329553707905, 0.5150939580711694, 0.386382008529639, 0.45681072622395236, 0.8135083925506045, 0.7743696065564077, 0.6936475787711607, 0.21646497609022186, 0.8005244244036906, 0.7712804922745979, 0.7803520711094472, 0.7138889685501519, 0.7252494939763188, 0.39463226247921335, 0.11797463745930037, 0.3129808881421098, 0.17801432431532338, 0.19574604006497998, 0.28154543274442245, 0.2161776700058453, 0.19196535271185133, 0.15594302596766207, 0.17451746755284836, 0.15807120817772735, 0.13208903314980047, 0.18802307259005369, 0.3133501817773239, 0.2783065766187631, 0.3090232648811543, 0.18787452540131266, 0.13341327333963904, 0.03074087545356874, 0.07632744037394534, 0.047048755831577194, 0.10095300737351609, 0.0048504640564495105, 0.05530535558969296, 0.12856775451606828, 0.1022048367095495, 0.07071125259604105, 0.19965763138785986, 0.15551508175833118, 0.18059656238000155, 0.08317008837203554, 0.15944761328237478, 0.11326803758729198, 0.15885064165400964, 0.13590944579570952, 0.14686242065560196, 0.09446427685786474, 0.14559635970634577, 0.04139909159021149, 0.07106651422540344, 0.08590099638365556, 0.09487334875405362, 0.2532641286774797, 0.3001096992521204, 0.07889641485323884, 0.12627163165130273, 0.16460361241353816, 0.15402390610523142, 0.23889275910617247, 0.15507625829767424, 0.25704946114833094, 0.2732935097082303, 0.22707604915691848, 0.10417137557477218, 0.5970457393926474, 0.5701504620104805, 0.5682643652072034, 0.617832391804559, 0.5362089756952453, 0.5956530132141116, 0.6247102923621872, 0.5498949079807274, 0.590371380531056, 0.12045651562058446, 0.1011819101391408, 0.1111691785506781, 0.3147628921613883, 0.3916167431108555, 0.11891673434089678, 0.1505856710472837, 0.14069605170526556, 0.1329013247040739, 0.13651285731016138, 0.14944755233305784, 0.1667208778616388, 0.1355164948642461, 0.14794329406309747, 0.13724928444655793, 0.16210183553912016, 0.16171644388287276, 0.1515332112950677, 0.45154667174861995, 0.4845587403105298, 0.4330506616303994, 0.4964435606395815, 0.4534901145538873, 0.46334441823277417, 0.4769934785641966, 0.47916157449146435, 0.4607285584365465, 0.34654956997442543, 0.3786459073732662, 0.30380483500467625, 0.3784580390813892, 0.2771107922121424, 0.29112296026542994, 0.39276393729813885, 0.3312688717621447, 0.34533123904244245, 0.2673101921273604, 0.22338671416176936, 0.2197989131493413, 0.20705777016879678, 0.19301431829566695, 0.22852136891960817, 0.22289099555522895, 0.21603978258833045, 0.22050209056868653, 0.22310738411550113, 0.436773294576013, 0.20517709444179244, 0.22474410922030386, 0.2212213120439902, 0.17287409934431275, 0.4332950465528326, 0.18991692746362965, 0.21306311062696293, 0.8205420086477213, 0.16361327788381386, 0.18222008688689717, 0.8239580657141573, 0.19220508227735156, 0.19172983247896247, 0.6982539202617701, 0.7802512486467243, 0.8480617724679413, 0.2037241004934066, 0.20732938969323367, 0.672066654546954, 0.7530164728976854, 0.6763074685034429, 0.1514618514872651, 0.5657906216956589, 0.6653092020228344, 0.7718501481188402, 0.1874224308679645, 0.19249033721510656, 0.18174063107230476, 0.19660141063038994, 0.18039634145378292, 0.17189544685328872, 0.1814387105457217, 0.18722605912856005, 0.19328569382962457, 0.08434865948734493, 0.0817084341175669, 0.08657360898773203, 0.09013071941281692, 0.11371278623068681, 0.08481968317539212, 0.10238824855766337, 0.08335298657314794, 0.077798965806681]}, "mutation_prompt": null}
{"id": "d4722b0e-55ae-43e0-ad9b-a8123ebf9b47", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * np.random.rand()\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A novel PSO-DE hybrid with adaptive exploration-exploitation balance using dynamic neighborhood and adaptive mutation strategies.", "configspace": "", "generation": 12, "fitness": 0.3393913705936566, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "350b8f19-c7df-4e76-9e1d-8428a1f865d1", "metadata": {"aucs": [0.7805372089457778, 0.7727669783233688, 0.7868599066100636, 0.7657382334803833, 0.781253926836466, 0.7756574625556727, 0.8023532285757792, 0.7828967566665764, 0.7844048942897357, 0.5791618174658444, 0.6025814076348737, 0.5819474561520193, 0.5851398917395984, 0.6157233635972671, 0.5922917173013366, 0.590175234571106, 0.6271347343724079, 0.5672392913498436, 0.11845733213868026, 0.13095153743960308, 0.14108726109959902, 0.1149978797382617, 0.13878050614250137, 0.1424940824378257, 0.1537532938346582, 0.1602337157739443, 0.13244885714423194, 0.09084369151571137, 0.09676291407027526, 0.10167832737103288, 0.13598005593097806, 0.11852888343001722, 0.12854462672437006, 0.10786689951381412, 0.11838138314232782, 0.09301735009836576, 0.9153194493736908, 0.9442776904408918, 0.9404565817706221, 0.9677567847274021, 0.797014660164982, 0.8531323356455938, 0.9261459872223592, 0.8491028259151416, 0.9486282241385574, 0.5616348398915179, 0.3857125482624516, 0.42450330090942356, 0.5035753149163777, 0.4662387537230256, 0.4603187138260437, 0.504406932429458, 0.4036313310356162, 0.4309823234550145, 0.8135083925506045, 0.7743696065564077, 0.6936475787711607, 0.21646497609022186, 0.8005244244036906, 0.7712804922745979, 0.7803520711094472, 0.7138889685501519, 0.7252494939763188, 0.4313253862994737, 0.11845096284152501, 0.35690383469429354, 0.18623677847265818, 0.20756809287521172, 0.3590909699157875, 0.21931410672027207, 0.2245902112839966, 0.1622147025738392, 0.17933877047640823, 0.17187317016563886, 0.13851596984091907, 0.19143622450381736, 0.349064171431153, 0.2911074134112779, 0.3204751195085259, 0.19423958286074205, 0.13778201459254436, 0.02920386935069086, 0.0727262327910837, 0.05003776084391098, 0.10096748579072323, 0.004838036718535332, 0.06109111508910592, 0.12856266055866017, 0.10549256429724196, 0.07036809958383805, 0.20401194525816368, 0.16121685640990668, 0.1754113482699713, 0.07761839126903436, 0.15967010807063087, 0.09161083888946109, 0.14156758643629996, 0.12723867425282331, 0.1458994643678807, 0.09457810718624204, 0.1452683274318617, 0.041434080583531485, 0.07107915787653896, 0.08595833688134447, 0.09525065848309644, 0.26195425559924024, 0.2951341574908666, 0.07889535752591437, 0.12712674946965274, 0.16511152169313903, 0.15471110015429768, 0.23885391612185436, 0.15694893189224846, 0.23146218194153256, 0.2721193495218752, 0.22689059335448702, 0.11033323083747304, 0.6015791809635043, 0.5716260321916643, 0.5691098752760037, 0.6096785772810345, 0.5435568933621452, 0.5858983876194642, 0.6322314069197517, 0.5596424444974283, 0.5765028387483357, 0.1158363328654497, 0.09865548028044291, 0.11002780498805476, 0.2259327143144344, 0.2698688227087297, 0.11891673434089678, 0.15032952481151385, 0.14623353564625252, 0.12902475542205227, 0.12636517613891707, 0.14889065989750982, 0.16935892922631934, 0.13416640854322393, 0.1417651310264717, 0.13728025304501845, 0.16152177861544825, 0.16364284257391115, 0.15492921064598209, 0.4351749775251681, 0.44009108536237984, 0.44379154839530843, 0.49060059905544473, 0.44195480376703367, 0.3910349540144554, 0.4607020115994196, 0.47878028493946523, 0.47882606110523807, 0.2985567973339077, 0.3895309430588303, 0.2969170415481125, 0.38760141577901785, 0.28280947913410337, 0.2947652655523134, 0.4013978122058386, 0.3594689654486868, 0.3534284136623682, 0.2673101921273604, 0.23558405742383481, 0.21736186514005162, 0.20705777016879678, 0.20402176680708062, 0.21420515884350366, 0.2238237484594775, 0.21362788048158177, 0.2142314411478774, 0.2231044387750568, 0.35933959451602926, 0.20517353776060632, 0.22452750813405153, 0.2212142898153051, 0.1718181380922531, 0.3926706573069785, 0.19197410183798014, 0.21085881543869145, 0.8205420086477213, 0.1636135258171404, 0.18222005149598508, 0.8239580657141573, 0.1922050818875689, 0.1917298325091531, 0.6982460332378743, 0.7802512486467243, 0.8480617724679413, 0.20372410043949707, 0.20732938968284975, 0.6749035533723117, 0.7529308299086577, 0.6758044940668178, 0.1514618500317909, 0.5900241248101876, 0.6589735788958262, 0.7718501481188402, 0.1874224308679645, 0.19362715737447722, 0.18817706095377373, 0.19471046516802093, 0.18234198229855336, 0.17181368663695862, 0.18585999748493753, 0.17808179381782552, 0.19328569382962457, 0.08197077850336631, 0.08234795648157378, 0.08257405055332112, 0.09013071941281692, 0.11559846751302116, 0.08165398269274249, 0.10156470178631227, 0.08681571893982054, 0.07585331554375863]}, "mutation_prompt": null}
{"id": "052d1ea6-df00-42e5-b8a9-09db2f08bd76", "solution": "import numpy as np\n\nclass AdaptiveStochasticPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * (np.random.rand() if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveStochasticPSO_DE", "description": "An adaptive PSO-DE algorithm with stochastic parameter tuning and enhanced mutation strategies for improved convergence.", "configspace": "", "generation": 13, "fitness": 0.34171904916482476, "feedback": "The algorithm AdaptiveStochasticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "350b8f19-c7df-4e76-9e1d-8428a1f865d1", "metadata": {"aucs": [0.7832800154713191, 0.7863527265002026, 0.8041901013063244, 0.7880612679950794, 0.794795976673966, 0.7970375379738872, 0.7879744245538611, 0.7882129948384136, 0.7968935016988983, 0.5971881500983175, 0.6004775006510268, 0.6163258503488713, 0.5981365335858555, 0.5929718073019117, 0.6377006680051389, 0.6212646398650322, 0.6186063016556613, 0.5855467359197704, 0.13624071412762517, 0.11878547437135689, 0.1317336139077886, 0.12713691427020601, 0.12799893306161125, 0.1452384290729538, 0.17174298931033227, 0.1562077083559016, 0.2896854605688832, 0.12138913275870689, 0.09210566796100561, 0.0966430579783275, 0.1290097309088991, 0.1247688217067342, 0.13022424749078743, 0.10693357577926288, 0.11180222748721536, 0.10837441128505143, 0.8432275392131171, 0.9595726315550066, 0.9720383248665656, 0.9729651023940916, 0.9242889694429139, 0.9142387550175304, 0.9179229139645143, 0.9234419760163505, 0.9385806301484114, 0.49607873483287557, 0.5153000058294901, 0.5194312893900878, 0.5522738197116435, 0.5357441185779767, 0.5542062531249067, 0.4674480404832482, 0.4684818180879682, 0.4698435588755001, 0.8437923998966407, 0.815793881947166, 0.3662323041738841, 0.8310439890357537, 0.7972775775865105, 0.21246922978788196, 0.7916388584452229, 0.7992716701867723, 0.7914999821447906, 0.3025807501980876, 0.11125706045224815, 0.1229327141911517, 0.12470654881735244, 0.15961827085440905, 0.16222508103560207, 0.22822882527521582, 0.149938059424634, 0.16739602382632024, 0.23314052080792735, 0.17273718493499746, 0.16653910611642164, 0.27192929512486785, 0.251378739072709, 0.16763452657878553, 0.1975632399155819, 0.2037573761389022, 0.22430906646775983, 0.0006123903078909532, 0.13272006160661842, 0.05853343109184794, 0.056438040048407134, 9.999999999998899e-05, 0.006161954128422242, 0.03920705575977412, 0.032768180117713874, 0.06073227006260529, 0.15070127732952754, 0.1024237345084974, 0.17444134280456824, 0.05346312387920393, 0.05852610951602544, 0.044243262855251264, 0.11970228921823767, 0.08875139068015392, 0.08116000575469262, 0.1287687472926876, 0.10026433649214961, 0.044899567696378706, 0.06681970088182443, 0.16135831230868225, 0.19326452660370186, 0.1563672729480975, 0.1954079083944229, 0.3605334487405931, 0.23518052462302763, 0.2006725412024417, 0.1816076703626105, 0.18698850585462512, 0.2870435479356902, 0.23835076390071508, 0.18967631328149215, 0.1047393458932615, 0.1475372033742517, 0.6082138960149035, 0.5828861723630931, 0.6057756764446145, 0.5713515594619889, 0.5943744271665184, 0.6092660947013764, 0.6143862415610815, 0.6133971580109965, 0.5938425819353927, 0.13810670195686103, 0.13606240711255346, 0.14226880266919928, 0.1485075053963839, 0.14416239396248476, 0.14053187199257422, 0.1336666687334338, 0.14020681537281576, 0.14619520173584422, 0.1475924899347334, 0.18815858794988516, 0.15725268626131106, 0.26680038561493913, 0.1820179712104676, 0.13362599888904203, 0.16870378121901308, 0.17177235676100788, 0.1575569799089701, 0.4114937994599833, 0.4567080537052667, 0.4441819011257928, 0.5127515510361138, 0.4702395715617367, 0.37376118322303986, 0.44560618859271506, 0.48353071697995476, 0.4972639050837836, 0.3304569568004241, 0.35796851520495554, 0.3113074450362042, 0.3340987181597944, 0.2883052276615522, 0.3532766087462549, 0.2569485693501602, 0.3474933027393249, 0.35915977021645007, 0.21537652896100234, 0.21478739208227027, 0.22008172562183426, 0.20832368653248245, 0.20343689706247647, 0.22033109885920799, 0.23205495761847383, 0.2257209992434036, 0.21115455263230065, 0.5442501283583407, 0.5586069145739594, 0.21956452866277665, 0.623930141334466, 0.17707560484199025, 0.2307318072486082, 0.19755262026102938, 0.6129264056255099, 0.5535595045737389, 0.8073248567344309, 0.8138691335761143, 0.1664195312154647, 0.17603762359287267, 0.1657947296229879, 0.19315248621190972, 0.196025842663745, 0.810742096636988, 0.8398910922155387, 0.725247487413516, 0.16689744400002926, 0.7482948800793908, 0.2072270498172245, 0.38212871376619884, 0.4558440226346465, 0.5123750633504097, 0.19980998340801848, 0.7739191872607052, 0.1896303620580706, 0.19776344640937304, 0.18051905271062174, 0.1760673329657042, 0.17835209525011264, 0.19259543421541347, 0.1877129868789248, 0.1730772636326121, 0.1842805213844062, 0.09523137527722758, 0.0903388846741272, 0.08509773816809774, 0.08902980729379883, 0.07931244427150264, 0.0870979028638188, 0.09344868222025848, 0.09384910824613601, 0.08302729749080884]}, "mutation_prompt": null}
{"id": "a725848f-3300-4351-83cc-e27488470312", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * (np.random.rand() if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover with dynamic crossover rate\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.CR * (1 - self.evaluations/self.budget), mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "An enhanced adaptive PSO-DE algorithm utilizing stochastic neighborhood learning and dynamic crossover for robust optimization.", "configspace": "", "generation": 14, "fitness": 0.3128958798785181, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "052d1ea6-df00-42e5-b8a9-09db2f08bd76", "metadata": {"aucs": [0.7989727366301077, 0.7907638624882671, 0.799684088448539, 0.7787649613737117, 0.7945191383737442, 0.813055023587294, 0.7957101046887101, 0.7969601210427442, 0.7982013166836458, 0.621639446752989, 0.5970445503906728, 0.631087375180641, 0.5919012993345387, 0.6032172838011807, 0.620546333914085, 0.5957676170702437, 0.6136837552627514, 0.6089366682093289, 0.2912999059271044, 0.1461697661717828, 0.1448947681811985, 0.2093001868697022, 0.2470896601508572, 0.13567961810028828, 0.14265398690457243, 0.302492449845448, 0.14775577099408144, 0.13248502285936814, 0.11693127191642616, 0.12661308454667286, 0.12871056035279693, 0.12196086237803161, 0.12829767306109519, 0.11176158129316105, 0.14242043444027708, 0.11126465490584336, 0.8177511552878125, 0.9500446907765121, 0.9673345109920999, 0.9499133661713831, 0.9284514981630613, 0.92863049323564, 0.9228967152935048, 0.92581940381975, 0.9430768953096725, 0.4679415732019072, 0.3701818995456009, 0.3469940062821918, 0.4055033212899428, 0.3346928521304672, 0.32355340758071205, 0.31085632264556384, 0.2854174172984445, 0.3933090508450682, 0.8273549173128272, 0.7898660520777312, 0.3273513265484288, 0.8295209240630951, 0.7787323390435646, 0.205570656713009, 0.7987844539812299, 0.8115580494892182, 0.729567578211266, 0.14460423146816814, 0.10678381384051683, 0.15222960708415012, 0.2679086351710922, 0.14029721646640214, 0.1664761151727967, 0.17098011650828726, 0.16299622872486286, 0.16028923087392155, 0.21370766967383548, 0.14723740401296548, 0.18377176386014116, 0.13974968018293144, 0.17562076076087274, 0.1336561029112705, 0.3127230967827992, 0.1765054202203743, 0.16443594408210305, 0.09191771974346152, 0.007519950233967343, 0.15697414861334724, 0.050046664430581256, 9.999999999998899e-05, 0.033210977233769534, 0.07108833233225109, 0.03371148670984625, 0.003616025040936055, 0.12452206256649911, 0.13384308240900555, 0.14960026443219143, 0.05880183513912507, 0.12635413159481068, 0.09726145405965636, 0.15293307863594396, 0.16099851264281262, 0.1540549438905795, 0.16445064719540392, 0.2097084462245713, 0.07012834139487456, 0.07691155917168435, 0.09354999246915596, 0.11781042675393472, 0.0968581635215805, 0.14435811753532402, 0.1502012075567314, 0.14159256281611599, 0.1841570170325586, 0.13009371940852055, 0.059929273423676155, 0.18896060766525913, 0.1254729997950761, 0.3336151938495544, 0.14595623173223726, 0.09499574226985519, 0.5444371393655545, 0.46943443316413447, 0.507878861743851, 0.4901482547778099, 0.596746176531509, 0.5691488020139832, 0.5558085927958065, 0.5328470595013147, 0.6298207985891064, 0.13502646203888158, 0.10594732448417366, 0.15405125776574446, 0.1380906484846941, 0.11064594443978226, 0.13103380508021745, 0.12238580510103003, 0.1217005800257226, 0.14298654281240775, 0.14061887507000648, 0.16312207368070664, 0.16204563729130583, 0.18946275958741277, 0.17720583299841108, 0.1737804287437048, 0.21173091156017632, 0.22192603802442268, 0.15660252012365183, 0.46845371306375083, 0.3460777002892639, 0.35950429322607236, 0.4586148625376091, 0.36531308141289, 0.4202822170070585, 0.4256105065845367, 0.5021884137180179, 0.5062686010406134, 0.3360777753404818, 0.37753069026826414, 0.32785479989493305, 0.2813121658611927, 0.22292077878362793, 0.21553295388452798, 0.3416618865517951, 0.296114042336161, 0.3906965530249493, 0.23249079856595012, 0.20811735648001983, 0.22935158145669066, 0.2450014941118418, 0.24689395416620297, 0.20305824439133435, 0.2278050194172716, 0.2343619623240185, 0.24742361857737405, 0.18478344312099282, 0.1863118580357681, 0.22516965548272017, 0.20488636897243084, 0.5907803763159308, 0.21097325373200626, 0.20918242281042176, 0.22352979809400453, 0.19362728702947063, 0.18039785613098025, 0.18290296718566346, 0.1826088968873798, 0.17540134211754754, 0.18554726836842828, 0.7374271998633981, 0.19354303604615686, 0.7885218891944051, 0.7984639062393916, 0.20703206089670256, 0.15265906625763748, 0.2885450405943827, 0.20772300035499425, 0.20374246300354493, 0.27419200692643886, 0.5584428657828653, 0.44537751757856114, 0.20603711926199553, 0.1896303620580706, 0.18660799224679636, 0.2434892126597743, 0.18116810281561668, 0.18338551135492287, 0.17978162516947105, 0.18197341576787374, 0.18245792113918513, 0.17819544649928865, 0.08857804998980334, 0.09251836147017334, 0.09720347693971398, 0.08284922586393373, 0.11148288816133078, 0.08735570177096619, 0.09098051852510236, 0.0988042906094796, 0.09589557755820821]}, "mutation_prompt": null}
{"id": "8709a415-ea05-4c46-bd69-24ee5c42a0cd", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * np.random.uniform(0.6, 1.0) * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * (np.random.uniform(0.7, 1.3) if self.evaluations < self.budget / 2 else np.random.uniform(0.9, 1.1))\n            self.velocities = inertia_weight * self.velocities \\\n                              + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                              + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Differential Evolution Mutation and Crossover with Gaussian Perturbation\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive inertia, dynamic crossover, and Gaussian perturbation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.25630223191605095, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "052d1ea6-df00-42e5-b8a9-09db2f08bd76", "metadata": {"aucs": [0.7314012875558397, 0.5295966987303871, 0.5553797645189806, 0.8667477523042536, 0.5664112099646239, 0.5490910439139461, 0.6315368450169142, 0.6932359726253408, 0.7278618399301793, 0.11167009556961982, 0.05104348532845071, 0.012346128247401666, 0.12210411890413275, 0.10287263459344809, 9.999999999998899e-05, 0.09267148273496839, 0.14757637325700657, 0.09235630369871783, 0.11432989260946014, 0.2953513390800424, 0.1329525492627407, 0.14166319333239896, 0.11526138410389808, 0.13838132734695952, 0.0911551069366231, 0.1278764409228279, 0.1549604023679524, 0.11803257396296363, 0.10177616944489709, 0.10430003624763706, 0.10218636025671568, 0.09833170078719866, 0.10385125767902137, 0.13928886215950642, 0.11674928484300251, 0.1284475307962888, 0.9514385399908509, 0.9309726052954268, 0.8968023018872163, 0.9650670130766573, 0.9312742471620316, 0.942567924854577, 0.9487522062727455, 0.9309344144858918, 0.9262550122094226, 0.3070520942793934, 0.28160969268786795, 0.3338608825314836, 0.3533749622322204, 0.3306427258024902, 0.32916938206934554, 0.33626947328658874, 0.32422654592691813, 0.3370057313543453, 0.7350682084411946, 0.6359237059926, 0.7950018847137978, 0.21784861574297754, 0.273717377387659, 0.2085081227621598, 0.1254977296297759, 0.22868690042579942, 0.21778364594678945, 0.15733710967234116, 0.1213651615588549, 0.1536134695631839, 0.15920337015866748, 0.16087945610060417, 0.15542525089020676, 0.16953685821792752, 0.2783312175071623, 0.1737909881122045, 0.1278110726484596, 0.16433815803088714, 0.15594516237199918, 0.12381298170091726, 0.16180131829591515, 0.13055430437833182, 0.17268782914149983, 0.12132397759024593, 0.1859448047554917, 9.999999999998899e-05, 0.07801483334346015, 0.0006900200220092412, 0.019800594787977577, 9.999999999998899e-05, 0.08381914666669621, 9.999999999998899e-05, 0.08658363272347669, 0.04428443663367454, 0.2098464713683018, 0.10184594947532821, 0.14741624634182793, 0.053497305496014946, 0.06300486136849615, 0.020852011941168147, 0.07367970926415568, 0.141643628125535, 0.16906991535316573, 0.23018780026526486, 0.06392529718202256, 0.10431957059961494, 0.11909304471982085, 0.1758627296205867, 0.07498538366491503, 0.10024079241863071, 0.10665923501865349, 0.09337349813786355, 0.16464918231204462, 0.13802587933255794, 0.15269677814778682, 0.11824721261007831, 0.22777106095251254, 0.11480764908619967, 0.06364732041523657, 0.07284522488526779, 0.07955140874202826, 0.4507866022567859, 0.4592103447466138, 0.46485810767617053, 0.5265381236196873, 0.5041573903280461, 0.4752201367399521, 0.4857662238328053, 0.5123567091870534, 0.5062340850860562, 0.13524047572533004, 0.1526788565273164, 0.12670723772372516, 0.08863558808672645, 0.11286232255969231, 0.12946921155735513, 0.09871119543326246, 0.1247183037555808, 0.16912232482822187, 0.2997908054487075, 0.18114060063525317, 0.1748219647935253, 0.1368498194791946, 0.22551510530677743, 0.2695845626024953, 0.24982664174516545, 0.15816445257290457, 0.20829116745556353, 0.26365390628314755, 0.34152035146853654, 0.43948791610044413, 0.36048779460214797, 0.3318637312792535, 0.3488468682171816, 0.3506696026819702, 0.33981427456857505, 0.3289503290786111, 0.2877132085173877, 0.26356132541652155, 0.25015204837946325, 0.2457600025060408, 0.29533485549693983, 0.2300368630361036, 0.2468047656511999, 0.2950272160309654, 0.2720596670305395, 0.2001292048286245, 0.22710489921461208, 0.22757844940198002, 0.2110995766827165, 0.2076243307938801, 0.22548833791834766, 0.22050336716726426, 0.21740284930139786, 0.20140845907393445, 0.20689356010482096, 0.2092717948308025, 0.19940656807083434, 0.18089725495281506, 0.2135677264057515, 0.24768246927653825, 0.2029592437565898, 0.1937995793731495, 0.18190928916409832, 0.8795680867798247, 0.18529213526290622, 0.20748187148557262, 0.8041751934511949, 0.1981425367084776, 0.1976318970074591, 0.14098495174558845, 0.748852712080267, 0.1696370146550733, 0.47019304672067996, 0.21121490065440152, 0.19962814705569487, 0.5192887391483514, 0.11178646306591711, 0.16863160991261594, 0.2083386357665037, 0.3607105241885319, 0.3389592992721503, 0.1795924958524352, 0.1778378738438896, 0.18008322345757766, 0.18823767651725953, 0.18200190542563588, 0.1925352615169752, 0.18546659962655598, 0.1723145201535241, 0.19944433649297721, 0.11031818768706891, 0.090056324222627, 0.07989521600570593, 0.09030254570058371, 0.08305791078516345, 0.08631098890787692, 0.09056435348779157, 0.09614816856695818, 0.08971597708219126]}, "mutation_prompt": null}
{"id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.35634008513351734, "feedback": "The algorithm AdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "052d1ea6-df00-42e5-b8a9-09db2f08bd76", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "e9c269d4-91a0-4979-adec-8636645fbc57", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        chaos_sequence = np.random.rand(self.budget)  # Chaotic sequence for parameter adaptation\n        chaos_scale = 4.0\n        \n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                chaos_index = self.evaluations % self.budget\n                inertia_weight = self.omega * chaos_scale * chaos_sequence[chaos_index] * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced Adaptive Multi-Strategy based on PSO-DE with chaotic maps and dimensional mutation for efficient convergence.", "configspace": "", "generation": 17, "fitness": 0.24683105705714872, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.5286331708137284, 0.5541674794696101, 0.5524396225972208, 0.5698100064593719, 0.5981598279372728, 0.5937804967966689, 0.5743320289561487, 0.6206489827789375, 0.587492808041422, 0.3763645074404117, 0.3819547281756177, 0.3867544039192159, 0.3476111353187479, 0.3810944730329804, 0.3398754425771674, 0.32733191505669246, 0.39254359933313854, 0.3399211470144451, 0.0897317934019144, 0.11144848689339582, 0.0968221656956102, 0.15875703031160537, 0.11740955189466262, 0.1050149566032178, 0.1120899849430963, 0.11931057822509084, 0.10297356982514483, 0.07333946492232912, 0.07895997014018519, 0.09811081633038043, 0.09836791169945225, 0.08601638867143357, 0.08237973560272294, 0.08823144449289644, 0.08031268221638654, 0.08096927756921146, 0.9828818734810829, 0.9878315081789789, 0.9737918278361002, 0.9701121850994027, 0.9623053123687197, 0.9607649399181354, 0.984114332500596, 0.9853651012344061, 0.9651252082175591, 0.2998368227028624, 0.32215600655414467, 0.37742285024668076, 0.4029697986060422, 0.3064097750323783, 0.32780564272701374, 0.3441815257614327, 0.33347039481432683, 0.3182952768407268, 0.513879538738909, 0.497950393936748, 0.5053242420263577, 0.19730232131729308, 0.2336438439389238, 0.4128195988847624, 0.5304629478400358, 0.5178201457313798, 0.4846944100975815, 0.10547866761444491, 0.1535238933710985, 0.07198097442393114, 0.1092724144844418, 0.11970371339792796, 0.08750584534580963, 0.12904833543661443, 0.08942700413695004, 0.10318724129505741, 0.09481828132451942, 0.09208635544382793, 0.05966790835444902, 0.10728165655286703, 0.24333087193336256, 0.10888219009629663, 0.14613896326318754, 0.11697647049685389, 0.10390165341088509, 0.025972920217358086, 0.0001881488443912227, 0.014191456933095314, 0.0008991161527470704, 0.003327756589687869, 0.00453662861740034, 0.010224258670599728, 9.999999999998899e-05, 0.012211289980632478, 0.09313803656902253, 0.09496000861063936, 0.08512161172805555, 0.11431557123877523, 0.011480727936930224, 0.10256941275996923, 0.04750718412384136, 0.06256231885067831, 0.046936392696354634, 0.1011596543481964, 0.07793823656809729, 0.07121494966445518, 0.04682887410105452, 0.07216526068885054, 0.07198286514247121, 0.05041762102910852, 0.11753490592079019, 0.048712339678309347, 0.12467091477668912, 0.09495734510705911, 0.047567103849653125, 0.10354167005121939, 0.12251581079712137, 0.17269777442034773, 0.14697832405878508, 0.12705661267249746, 0.09260156673436215, 0.3792232283123913, 0.4049405959774024, 0.4339130687483854, 0.46092489804720804, 0.43139753607289144, 0.38944286701169806, 0.45710171167067326, 0.436887904858423, 0.4128595127676905, 0.07212190667187568, 0.0844357584757095, 0.06827108314074104, 0.0913594146433726, 0.1024158341730177, 0.09589037362425912, 0.08893218762358424, 0.09287227379670371, 0.09057255140046072, 0.1493167854981008, 0.1441563861115679, 0.13556634207472906, 0.1375218928170172, 0.12561452948877272, 0.15663976952353498, 0.15281525938297713, 0.1589061608880893, 0.1508456348493381, 0.31887226354956133, 0.3396204572623469, 0.31017070922876455, 0.3474659293989488, 0.3527482818731609, 0.2699168318424887, 0.3747062320736352, 0.3875576071378798, 0.3916453871873842, 0.19336391755815208, 0.30553922789455035, 0.20665556399576024, 0.15841968069034174, 0.20047310897270043, 0.15356404077381924, 0.20904475462621164, 0.2722371961679898, 0.17742094839872558, 0.20828179095463673, 0.1939838740740384, 0.18086736746835952, 0.19875726148517237, 0.1931868007042985, 0.18219691034032526, 0.17358331670558114, 0.18780886906248473, 0.1960559721986137, 0.18888666550638633, 0.19596690390885552, 0.19487396810283952, 0.16770117176476595, 0.21828546250079894, 0.1781482140891103, 0.19046964942218636, 0.17588186019604746, 0.18652149186325384, 0.6138712838217423, 0.16566440549895212, 0.14548314047765942, 0.5476194103872281, 0.18942212664572022, 0.16624354004228148, 0.5169192987077653, 0.5324413629271569, 0.561230108340375, 0.2597322572336891, 0.16469095654687393, 0.30531729310088274, 0.1858095658209573, 0.4309220079457944, 0.5545798531453698, 0.20135183422077196, 0.5292032656549462, 0.19854119407071424, 0.19141742238607384, 0.18681134214024864, 0.21579476522574037, 0.17543231193719655, 0.18677856343972343, 0.17421479932741735, 0.197283306673398, 0.17699365051083915, 0.1976559740116247, 0.07277501174186896, 0.07518438222290225, 0.07179520699908515, 0.07634650998182002, 0.07067699020518159, 0.07671224996079329, 0.07080789774524254, 0.0746658181852845, 0.0743975401281266]}, "mutation_prompt": null}
{"id": "0525477e-5e62-420f-953a-7edd90b559aa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.9 * (1 - (self.evaluations / self.budget)) + 0.1 * np.random.uniform(0.5, 1.0))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, np.random.randint(2, 4))\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid PSO-DE with adaptive learning rate and dynamic subpopulation strategy for enhanced convergence.", "configspace": "", "generation": 18, "fitness": 0.3561957091145498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8474203936265976, 0.8370925664571842, 0.8498596307596844, 0.8482350080440497, 0.8512719009285494, 0.837031796075025, 0.8490083908909242, 0.853215116067291, 0.8438464677326722, 0.7156004318098474, 0.7043978164356988, 0.6860463274692657, 0.7252941209947728, 0.6653918385497559, 0.6949794784809668, 0.6999386228325775, 0.7208549135902653, 0.7014064639295603, 0.1521094720627949, 0.13855802831598063, 0.13214674047965125, 0.12942122823225854, 0.10345147455256642, 0.13917311338404048, 0.13252933727009308, 0.11191668118876696, 0.1409686906676092, 0.11097593561153951, 0.13260185091784515, 0.11298323070781113, 0.10745430075578044, 0.13856985852828363, 0.1238241975038904, 0.08645709873636953, 0.10420729067347168, 0.10700408624074187, 0.9613207260804123, 0.9731866503244997, 0.970359952545729, 0.9480098057786672, 0.9559142613970271, 0.9877462292779283, 0.9876971509533533, 0.9605081771474457, 0.9670687450912964, 0.6779643692977154, 0.6980684922890157, 0.7124096540900479, 0.6400965677660221, 0.5908446477874549, 0.7114681361697504, 0.6623848700021537, 0.22396685239021985, 0.6397949455834342, 0.8687236144751798, 0.8434994326453213, 0.8151788580421231, 0.21229046234870574, 0.18848411175607138, 0.8293835529972788, 0.8398321916715358, 0.8442498272380181, 0.8396393698094826, 0.19150260655855045, 0.11151773423724731, 0.18473405570673507, 0.1841869646014208, 0.1639523550677754, 0.15296523029103737, 0.16398769804858981, 0.29620345012532223, 0.16252138962713558, 0.17413420080283182, 0.12945462940246721, 0.1131229219303661, 0.18049500839059052, 0.1493868984849156, 0.19841435584717826, 0.12790179567584548, 0.12298922770918741, 0.1352162716425157, 9.999999999998899e-05, 0.06708464309732953, 0.012056484926899258, 0.035640077199997955, 9.999999999998899e-05, 9.999999999998899e-05, 0.03554145675005271, 0.1475542930196172, 0.05574654032138693, 0.11288705036736879, 0.05047949257488049, 0.11933807977658539, 0.07935747144147642, 0.011341350410176143, 0.08766916555474658, 0.11865873690651374, 0.06921959833194491, 0.08998517159904529, 0.09235386189915173, 0.06932556579044435, 0.051244669937404064, 0.1281004421007318, 0.09392846928949761, 0.07389902650322744, 0.09311796513598714, 0.09631775104498896, 0.2031320716259989, 0.14287990596684863, 0.23674959316606903, 0.2749629776256036, 0.11065581107767053, 0.28549855295096904, 0.2115025396932222, 0.17938435018688292, 0.17179071034017523, 0.21003771224307932, 0.5922462259061502, 0.5138914782016062, 0.6060698909840272, 0.5938540157916673, 0.5733595333531609, 0.6542999670957671, 0.5406411218669662, 0.5905466314465748, 0.5816737057486483, 0.11423121618140797, 0.14146511890874258, 0.11392994580921711, 0.1386407610051501, 0.14845501216242263, 0.5102144631155483, 0.1418454164906039, 0.1639377254380805, 0.12379450579252371, 0.12921081498210985, 0.20032800122017347, 0.19677114212371383, 0.40195796492978275, 0.2871466952674373, 0.16195454769833595, 0.12858778959636163, 0.1296474417679645, 0.17673583531762072, 0.5059087624339477, 0.45891367957787, 0.6407481843316944, 0.4258153201003967, 0.5602444832035203, 0.635690845290023, 0.6374367288206537, 0.6740539580613015, 0.6366812448427271, 0.3359445736752633, 0.2648859846806062, 0.2689506158477356, 0.4242426634775984, 0.4369673000128712, 0.31935867039038957, 0.3454721962805233, 0.2893253133327528, 0.42051774154914323, 0.1944199628560246, 0.20302140708661487, 0.21170029345203545, 0.20536802649135877, 0.25885607259682863, 0.19215466325883912, 0.2087304806921193, 0.2285148078498741, 0.20723921995707206, 0.21878446983433197, 0.23984748118634613, 0.5983053716727271, 0.23787371901676402, 0.20366087737153826, 0.21945414799097585, 0.23604063022136546, 0.1895507072225182, 0.21280910923362517, 0.8900367288907617, 0.8752980000616655, 0.8642277814836307, 0.8877539911261174, 0.19819872302394537, 0.1649953362510822, 0.8530200164518882, 0.1733139212220942, 0.8805849398192002, 0.6258652781868838, 0.16841829698291855, 0.6290574758524713, 0.20296085450944368, 0.1655093210763896, 0.4351485495579356, 0.20807043498252786, 0.7320202379958918, 0.820719524565384, 0.17321112876830902, 0.18302668563755364, 0.18481543809736134, 0.18551672497406124, 0.22175413166765068, 0.18170473009244348, 0.18671224395220465, 0.1786448005820166, 0.19959464141271355, 0.08707881444146282, 0.0876069162003843, 0.10847228101777551, 0.08872866830812676, 0.085757944693715, 0.08580833725202575, 0.0880585649901906, 0.08682300235441942, 0.1010680816926095]}, "mutation_prompt": null}
{"id": "b5b30808-0f73-4739-8fa7-8d8f4f9bd0bf", "solution": "import numpy as np\n\nclass EnhancedPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                # Adjust inertia weight with nonlinear decay\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget) ** 2)\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                \n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO_DE", "description": "A novel synergy of PSO and DE dynamically adjusting exploration-exploitation to enhance convergence in varied optimization landscapes.", "configspace": "", "generation": 19, "fitness": 0.3431111535408601, "feedback": "The algorithm EnhancedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8426732435760258, 0.8245660983879142, 0.8458751065445064, 0.8446081817190718, 0.8378771239755298, 0.832549868651617, 0.8402427424531642, 0.841831389145031, 0.8309201942036226, 0.6963358100901298, 0.7122185200235951, 0.6476572318406495, 0.6964458909227824, 0.681730762365732, 0.653078085688683, 0.6729226736524707, 0.667308856614922, 0.6614760709519649, 0.11146528060051808, 0.15297744481680364, 0.14619651511047393, 0.12435166854931101, 0.12194283528764338, 0.13180343032574315, 0.10956728404028726, 0.15694856277426494, 0.17273648589938362, 0.10755298593348195, 0.1449362252421008, 0.10600411367846319, 0.14824632605126642, 0.12937247371523264, 0.1095880525098113, 0.11255042340191868, 0.10735738649950433, 0.12167820239327887, 0.9735742162720219, 0.9811667495993327, 0.9580184732158946, 0.9494230225997784, 0.9785416746816271, 0.9796510838819531, 0.9692005385264155, 0.9663815764266597, 0.9713832311940258, 0.7336893201159034, 0.7228803920893994, 0.5718594223484699, 0.6777946871786804, 0.7100099250823841, 0.6776592418290042, 0.6648751209768908, 0.48565907958398125, 0.7004214939882325, 0.8654398684570379, 0.8310743902412888, 0.8488570266386037, 0.20999300897070383, 0.8332382735763177, 0.8445477580099867, 0.22586509325457682, 0.8102806760816065, 0.8310166547443811, 0.16675069300630907, 0.1621823779651973, 0.18693560816465593, 0.17830609140780274, 0.18571171030355338, 0.1965885454417413, 0.2200924012505857, 0.12615884658208398, 0.19105106992076148, 0.2252645957645475, 0.23261293668662697, 0.1725485430540381, 0.21851717334980947, 0.17878228774766103, 0.1344282257182675, 0.1867274061539841, 0.22691229120187617, 0.12958333526792087, 0.0034934132976585097, 0.1289254586465728, 0.06199783899344036, 0.014431915538999474, 0.052159340467331616, 0.01792402892697975, 0.052253751488484546, 0.006555504634643716, 0.03615111615900224, 0.13704681984438627, 0.08493864460563705, 0.1349437393660009, 0.09026544156535254, 0.14296578136902027, 0.077627276271654, 0.20891898579320411, 0.1065769353765258, 0.09342751467227006, 0.10447733328386133, 0.0910337153202807, 0.3130088983683471, 0.07269820449851339, 0.10572881475268026, 0.08164115702860586, 0.0645558819865073, 0.15359890428568412, 0.07566693896034138, 0.2031970053713289, 0.17513401646378968, 0.31111752126579817, 0.15542005209745569, 0.22074523759963827, 0.13802733394897493, 0.0789280678756501, 0.23704004750688823, 0.09575944348102328, 0.5978757888517747, 0.5737565384039958, 0.6404465380670904, 0.548743885949018, 0.5746455871504625, 0.586374107314769, 0.593353636618089, 0.6178507955264385, 0.601037899191797, 0.12517839955341592, 0.11759485571315675, 0.14339473386872703, 0.1350342137647922, 0.1001679053383634, 0.15138332131685617, 0.11108798547819443, 0.12978034110690528, 0.1338620815331122, 0.21402484999632465, 0.35238030855695823, 0.17557264489993518, 0.22527172382827587, 0.1549319050532849, 0.17997738881411673, 0.2206520068896578, 0.15853264106809295, 0.16726777777352997, 0.6349526524473866, 0.36865850162097735, 0.5458891881190768, 0.5526531148534349, 0.44379717163843935, 0.5832913573425373, 0.5605774364534928, 0.5438197984265836, 0.61560665921391, 0.3619121544981726, 0.346341170358363, 0.2755710909720456, 0.27377918778708477, 0.26591471590765847, 0.32670329708474966, 0.2606593079484749, 0.25919979259777914, 0.41486802676761214, 0.20847574656076262, 0.21170728891031065, 0.20224745397830513, 0.219230612080345, 0.2143464061785062, 0.19936674865219395, 0.2794040282778134, 0.22237975722824166, 0.20746338988453794, 0.21854977981964252, 0.1865195158845877, 0.6873759495858759, 0.21024845243500467, 0.1939098914478431, 0.2414227385305353, 0.21925631673386226, 0.20827341926427623, 0.17428428932044115, 0.1662553534972936, 0.18121517739401982, 0.15231188248287253, 0.17110035896666065, 0.19987274397821042, 0.8625524219842441, 0.7586005437073118, 0.7052207078053709, 0.8801310996024514, 0.8467587316164722, 0.20838377971792799, 0.15173250935831406, 0.20635373788350408, 0.16272274312181234, 0.7827684660798638, 0.20971087824764223, 0.207860002440308, 0.20686405045918554, 0.172402283385501, 0.18555290328668683, 0.2091337154969658, 0.17340720882411975, 0.1786149013388082, 0.18433236021599164, 0.18348850598078215, 0.17376439067940352, 0.19804351873806836, 0.08327663288530007, 0.08081404905570566, 0.08938013864141925, 0.0771007894597775, 0.0842252994592323, 0.08141242988783703, 0.07899622516322802, 0.09327826544416895, 0.08990232079929994]}, "mutation_prompt": null}
{"id": "de9dc9ff-208c-43ca-b804-6245a0c53563", "solution": "import numpy as np\n\nclass ChaoticHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n        self.chaos_seq = np.random.rand() * 4.0  # Initial chaos sequence\n\n    def chaotic_map(self):\n        self.chaos_seq = 4.0 * self.chaos_seq * (1.0 - self.chaos_seq)\n        return self.chaos_seq\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * self.chaotic_map() * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR * self.chaotic_map(), mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "ChaoticHybridPSO_DE", "description": "A hybrid PSO-DE with dynamic inertia and self-adaptive crossover leveraging chaotic maps for global convergence enhancement.", "configspace": "", "generation": 20, "fitness": 0.15194998324283443, "feedback": "The algorithm ChaoticHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.23.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.12103449904261288, 0.8747917001257257, 0.10715956547595085, 0.09420972956910878, 0.8709568492676047, 0.11029630567471427, 0.09974581048145315, 0.8673899402074645, 0.08703010637395381, 0.0, 0.22885404101910523, 0.0, 0.0, 0.6981732231799916, 0.0, 0.0, 0.22367000153545014, 0.0, 0.006347962769893245, 0.13693932637926387, 0.014828812317136175, 0.016494236691419473, 0.12939963025900103, 0.01239342723132053, 0.018150078853208074, 0.180569246169351, 0.01057579772144146, 0.0010630432153622138, 0.10668896128286454, 0.0, 0.026466701789158442, 0.11865609638959596, 0.0, 0.014630823446689645, 0.103154985790056, 0.0, 0.9872527851917321, 0.9963175083613757, 0.9901286767244364, 0.986750519742271, 0.7387655208029924, 0.9872935713549852, 0.9873040668925267, 0.8185015807908074, 0.9872024078419445, 0.06254075979859297, 0.3036068773011116, 0.02452162621609566, 0.07236553077278729, 0.19858962410982384, 0.03593801327832913, 0.0, 0.13035880949855183, 0.0, 0.10018685869137445, 0.9141655977216442, 0.059711322735317984, 0.06707539674601781, 0.2779645109878238, 0.024954585211952707, 0.04477783271347213, 0.23260076673230656, 0.023712287401398524, 0.0, 0.11901452091738085, 0.0, 0.0, 0.14975799136796397, 0.0, 0.0, 0.2027743160713259, 0.0, 0.0, 0.1266970765143085, 0.0, 0.0, 0.16744227421123303, 0.0, 0.0, 0.1410441968197378, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.010676809422187739, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.08097266938490633, 0.0, 0.0, 0.01933049396496933, 0.0, 0.0, 0.17854961435027705, 0.0, 0.0, 0.16396260077477254, 0.0, 0.0, 0.10447417878604082, 0.0, 0.0, 0.28150898414469205, 0.0, 0.0, 0.24889777193212914, 0.0, 0.0, 0.07450757051317136, 0.0, 0.0, 0.09541511429259864, 0.0, 0.13128193589782022, 0.5925816521565357, 0.1510358333600723, 0.10729878336004872, 0.5270746024679555, 0.10633992226825029, 0.1609569018385959, 0.5564387768476926, 0.1319041428002753, 0.01345637112857112, 0.07703723634944548, 0.021831391854722826, 0.03250544544111267, 0.10737870088680435, 0.017501683791087297, 0.008299994746568728, 0.13533314193903623, 0.0309289371314877, 0.08486447284900711, 0.2353592171442923, 0.1181948405772153, 0.09846289938815755, 0.2979802645302494, 0.10782543235050401, 0.08799080449358732, 0.18956807402697418, 0.07717165476235166, 0.13330029897248064, 0.3852878666121312, 0.16126451860838786, 0.14303095338431793, 0.5453564445088914, 0.12925247973915588, 0.14252604876498132, 0.2857589059442096, 0.12183931197399012, 0.059764405702543044, 0.25132690815488157, 0.08387158502275449, 0.07366468186662167, 0.22005903622572287, 0.06333484497581088, 0.09008569058744365, 0.24255747464772281, 0.06403167692628742, 0.11929407239785073, 0.2095642073350783, 0.13615316830699853, 0.12170859164800041, 0.22843100349011614, 0.10888020768212847, 0.1223719985875239, 0.22451115950546452, 0.12610897469222526, 0.0, 0.20296041552839816, 0.0, 0.0, 0.17604492250412151, 0.0, 0.0, 0.1761202626651075, 0.0, 0.07750124600503694, 0.1675363079266352, 0.08157840845419484, 0.07317045702340097, 0.19962637404957073, 0.08448932227173467, 0.10684168378379799, 0.8902329963543566, 0.07317265312370869, 0.11019151946898564, 0.3238970701024362, 0.0691724053561471, 0.06064648897967129, 0.16606342230754312, 0.058904475846450755, 0.06572598669365848, 0.37343604183641743, 0.04133833534602638, 0.13471522306137618, 0.21023750986768086, 0.1475449842687223, 0.14971718697727232, 0.19054813857708275, 0.13222675560717156, 0.18934763800469812, 0.18417568285986596, 0.14680476350944305, 0.026072153778600615, 0.10093267224179103, 0.03129662407793299, 0.03375912388367708, 0.09681806884785693, 0.028939207011786094, 0.03000167222010308, 0.08842645992404508, 0.02355796610732719]}, "mutation_prompt": null}
{"id": "c35ba079-dd19-46c2-a05f-854d969481fc", "solution": "import numpy as np\n\nclass StochasticAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "StochasticAdaptivePSO_DE", "description": "A hybrid PSO-DE with stochastic adaptation and dual-phase exploration to enhance solution diversity and convergence speed.", "configspace": "", "generation": 21, "fitness": 0.3398445931850914, "feedback": "The algorithm StochasticAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.853839461616598, 0.8618881628581684, 0.8492216110928, 0.8622675462796491, 0.8588192028137535, 0.860824972208647, 0.8530046421759854, 0.8612503947096035, 0.8549213572644468, 0.7174761264475519, 0.7256893213670492, 0.7010089740315515, 0.7312208972620918, 0.7154612465495078, 0.6434394352292979, 0.7279525186983322, 0.7215895931423179, 0.7012043661173244, 0.1373918918187308, 0.13562515443489354, 0.14885071340896416, 0.1208585493195855, 0.12610958643932513, 0.1356716714409174, 0.13725606362943166, 0.133861101252437, 0.13215702152211084, 0.1463231476454805, 0.13886269551161456, 0.12346500153491002, 0.0905814433539901, 0.13677538918085552, 0.12550345413316266, 0.13315087918248847, 0.10491840284263543, 0.10446575579653872, 0.9412771977896502, 0.9886124887378074, 0.9206063058015993, 0.9256967014199619, 0.9364289019017593, 0.9877346070621263, 0.987687212809344, 0.9477603863082936, 0.9510020781103435, 0.6802923715440465, 0.37682788098127173, 0.607703476467697, 0.6618752431056486, 0.6974437803522726, 0.49118680855876196, 0.4969910098703011, 0.6072269956891758, 0.4454098676608287, 0.8271735106517882, 0.8516248004506928, 0.7873026116759966, 0.2722049845337001, 0.2731741047071814, 0.2720872745505887, 0.8896734675090452, 0.17744792446071755, 0.8635592368376172, 0.15289252040579993, 0.11550784027368388, 0.1647093699722605, 0.2995657531884628, 0.24874213791782696, 0.1552085644814999, 0.15786166870311413, 0.3139403765027686, 0.16967779228443292, 0.14897298261243652, 0.18603624878622582, 0.1280242367321489, 0.12925922731872375, 0.19530324901519658, 0.13386151554707226, 0.13066430262938888, 0.15426406569155393, 0.12921912668886903, 0.051832569806653406, 0.020528914984041857, 0.17809005141160505, 0.03669181623178208, 0.0827634864036012, 0.0232157649345065, 0.13675979405316596, 0.14410719091958635, 0.06146941992551058, 0.09920459829859085, 0.05457790178774835, 0.11088843387669023, 0.09454482314541346, 0.052727954890923634, 0.07409146481912632, 0.15594281486221484, 0.10172789166290108, 0.1706204391450432, 0.16666389636007084, 0.11730858029289504, 0.19737104954025741, 0.11261549002738325, 0.09153798604034868, 0.08021951659469939, 0.17530880205018262, 0.22421807791446935, 0.11096524387894402, 0.2474621842686715, 0.17424436727140546, 0.21368448426031494, 0.05089786154612852, 0.1699768866914939, 0.3091070312174393, 0.4331767787201878, 0.15429796530730577, 0.08688336320574364, 0.5206367161240516, 0.5750549755828536, 0.5617897718496073, 0.6462921669297753, 0.5272187988759682, 0.5246881604293352, 0.6160096362898095, 0.5968052439040001, 0.5898193835276194, 0.11723094319572935, 0.15677410792005797, 0.1619943927170585, 0.1069624025321908, 0.09938888693504633, 0.17486560708242815, 0.16739459475381502, 0.13512374743781552, 0.12976747413616463, 0.5577926785637239, 0.12889337098765719, 0.22530757266283785, 0.1436449651789391, 0.23218309547443117, 0.31672684064730205, 0.2600998661796313, 0.22259211046153293, 0.2742637988825276, 0.3063702415184998, 0.657528134152471, 0.47554447502751795, 0.32411642959149223, 0.35364112305293505, 0.579128077443767, 0.6765311461544847, 0.6595978634740657, 0.5012871258192417, 0.3798979427937892, 0.3379259892992257, 0.3174360064392262, 0.31240140771479374, 0.4555877084083024, 0.40070052451867466, 0.2948894908971129, 0.2128596364426648, 0.29440265132589505, 0.24477843319400316, 0.22210558788468604, 0.20666044293446806, 0.19765485288074058, 0.21844857182628152, 0.2076550523177736, 0.2128430610573364, 0.22806829902567394, 0.20397146799567145, 0.19896595346204915, 0.20529469110603416, 0.19416361578815955, 0.19653178841449936, 0.23916405438335087, 0.20415542187498847, 0.24187515627656164, 0.20941633475530075, 0.19431316107793506, 0.8943007488787674, 0.15596592930028075, 0.15137880215762356, 0.9119991929984613, 0.19890724612701183, 0.14684392920925782, 0.8832926734083085, 0.1679569923884039, 0.20920726794550626, 0.6031380777365083, 0.6075261286725018, 0.8178803043179917, 0.20866252222683834, 0.16057406950401987, 0.1650047431711773, 0.4110129002073557, 0.6407160045130691, 0.2855421075394604, 0.1851130599783406, 0.1826722149322545, 0.1797364468998952, 0.1931999003736058, 0.18538131464485086, 0.17698011744697506, 0.21518758901620838, 0.17577719159174776, 0.18175228517980369, 0.08779712439115173, 0.08573447950646218, 0.09482040339246522, 0.08214026805635499, 0.08670136024263664, 0.08861001390607637, 0.10319544401883662, 0.0914967067408321, 0.09663848080763271]}, "mutation_prompt": null}
{"id": "9185967f-f2b4-48d8-ab9e-a21e63fc913e", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, np.random.randint(2, 5))\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "Enhanced Adaptive PSO-DE with dynamic population size and adaptive learning rates for improved convergence and diversity maintenance.", "configspace": "", "generation": 22, "fitness": 0.3341001276353667, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.860495429735298, 0.8633340216379626, 0.8714857280954024, 0.8664079587334341, 0.8672956627204911, 0.8586197629049624, 0.8696680690357872, 0.8786755521591042, 0.8605110260548446, 0.7167761960839283, 0.7638438995682942, 0.744306850632338, 0.719813391916835, 0.7488929340646238, 0.7283471304551907, 0.613311674805835, 0.7131211846211121, 0.6961297696613968, 0.1489552131723172, 0.15422481580021652, 0.11386124012841159, 0.12146703800121905, 0.11927914843506138, 0.14897150872590792, 0.12850247589370378, 0.12269153696826762, 0.1531243511673288, 0.1258504395839627, 0.15555181460759615, 0.11767841827239756, 0.10775814757307767, 0.1049536520526908, 0.09619209380236649, 0.10157825047974312, 0.10836522564545048, 0.13937341850823048, 0.9525444524940159, 0.9566463554771715, 0.9800438202980521, 0.9300533117107126, 0.9713238641120355, 0.966797922474497, 0.9345915702622866, 0.9615132404407069, 0.9642753180061634, 0.528587075308616, 0.4825698261881681, 0.6418800580049685, 0.7295006642359516, 0.3091584425424474, 0.6783465369757283, 0.5766755305872016, 0.22305896148617976, 0.35725433021164366, 0.8631488241894494, 0.8822041711927622, 0.3801409668896365, 0.21221866613202878, 0.2116989518134591, 0.209587058713802, 0.2259019547666079, 0.23102561781134734, 0.8497848559346735, 0.2819296825594063, 0.10795336216158735, 0.15835893248757182, 0.14987459915079437, 0.1910139122620651, 0.18721965056521483, 0.14813374048003847, 0.19721722171618206, 0.181722721853816, 0.14318912305200215, 0.17129557631808856, 0.129881565328547, 0.15374112739765333, 0.12818861317385832, 0.15271281297196926, 0.19849472032186533, 0.13222402103718, 0.14241937001778715, 0.12243147414646571, 0.009336900856202424, 0.005970020554122102, 0.019470058832391834, 0.013784075057867273, 0.023108744481385668, 0.006927645169351848, 0.05847897781288591, 0.17456829121357986, 0.07422167013776904, 0.055565707092919414, 0.11986798944086008, 0.046529207103414905, 0.04342954808917876, 0.022614092663634566, 0.1212812794097754, 0.07216545570973065, 0.10295987417116703, 0.12646439699043477, 0.13487735525716815, 0.1265745758230059, 0.18186278230663355, 0.0941091893935152, 0.1804008575558229, 0.09783010180622842, 0.1363826934353829, 0.20276280475088293, 0.1549070436625074, 0.33992369573891723, 0.14785187099790986, 0.20626363596788244, 0.16372520041304184, 0.17539635683768706, 0.16169475466561944, 0.20997134091945302, 0.08471853865678969, 0.539836782946204, 0.5951573897828257, 0.5342450867395416, 0.5948555684961634, 0.502600153847484, 0.553594692846564, 0.6496883323514272, 0.6282032754168936, 0.519152615455424, 0.10218708760742079, 0.11365925774882002, 0.11736382003997692, 0.432700111372072, 0.10509650868672638, 0.17752741512707892, 0.14913742796061957, 0.14923583436619958, 0.14862612216130944, 0.4142170685291703, 0.1704125615377725, 0.18677045227430167, 0.30796619920060475, 0.22827152009123886, 0.2719880489222506, 0.7516967299806346, 0.2071162186069706, 0.15329393588419737, 0.43459994197475027, 0.5200120942002097, 0.4858843901163198, 0.4539010556227958, 0.2835103907290999, 0.5962209267129288, 0.4808966077993342, 0.23221218427699641, 0.6144754094155751, 0.4337642079410442, 0.3304287128783747, 0.3350487046932058, 0.35443801483487336, 0.5038855289606184, 0.22746632597659833, 0.3219433958449107, 0.30283593306533607, 0.36849187100368186, 0.21307155043831916, 0.20156733764168078, 0.20779532556669178, 0.2424336429346181, 0.25305249743894076, 0.21512776016089474, 0.23329276251219255, 0.1930333594036766, 0.22600268404229884, 0.2432010512457583, 0.19303692770613712, 0.19220815814207148, 0.24747593322437567, 0.1894037159752644, 0.20449611693331504, 0.20519205614972547, 0.20386146323555288, 0.2227429259544944, 0.913997621600619, 0.8705076325744425, 0.18389352052216668, 0.8830816754007961, 0.20001612516668688, 0.8731620399638101, 0.8996907803947592, 0.16817376842209875, 0.9157909195917935, 0.8945182819264543, 0.21021172206270733, 0.2081689034316333, 0.21039033859468792, 0.20688756695394184, 0.15141183918721346, 0.1608433806032452, 0.1039575971839155, 0.3882637348255381, 0.18365446984495826, 0.20635269147780155, 0.1913217693144541, 0.1830339749111094, 0.23103557565739663, 0.17562127613568423, 0.19464122883057655, 0.17111641163218427, 0.1892241223012867, 0.08596773746041508, 0.09899666869975787, 0.08936608518564171, 0.09660954627746576, 0.09517809841023372, 0.08932909807156197, 0.09182053784869437, 0.09179810768519314, 0.09203519841341057]}, "mutation_prompt": null}
{"id": "0d0b8ac7-2a36-4926-a5e0-79f7ccfb4856", "solution": "import numpy as np\n\nclass EnhancedChaosPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        # Chaotic initialization using logistic map\n        chaos_map = np.random.rand(pop_size, dim)\n        self.positions = 5.0 * (2 * chaos_map - 1)  # Scale to [-5, 5]\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop_idx, subpop in enumerate(self.subpopulations):\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                # Adaptive inertia and cognitive component based on evaluations\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                dynamic_phi_p = self.phi_p * np.random.uniform(0.9, 1.1)\n                \n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + dynamic_phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2 if self.evaluations < self.budget / 2 else 3)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedChaosPSO_DE", "description": "An enhanced PSO-DE algorithm featuring adaptive learning rates, chaos theory-inspired initialization, and dynamic subpopulation management for improved convergence.", "configspace": "", "generation": 23, "fitness": 0.34133327009471504, "feedback": "The algorithm EnhancedChaosPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.853069692028685, 0.8505588712327143, 0.8387037121069179, 0.8469993674520314, 0.8550154372286686, 0.8353619786001946, 0.8557227085678978, 0.8401967974771618, 0.8312269747228171, 0.7176091308338441, 0.4506449235054629, 0.7054703579326842, 0.711305936413129, 0.6735775787280931, 0.6841442201824003, 0.7076733964728872, 0.7214402670921926, 0.6662910945205096, 0.12964720561361698, 0.16361366850361847, 0.1602301047544823, 0.123092169888677, 0.10552748337571993, 0.12151897058353645, 0.11938748261015719, 0.13195313767407846, 0.1469681619262042, 0.1496908513546501, 0.13413027228312968, 0.12182230301665531, 0.12135096494298525, 0.13110081579118338, 0.12609793598155883, 0.14520528150042922, 0.10272042736300357, 0.09327056675976964, 0.9611646092013508, 0.9887239019896208, 0.9399387283460009, 0.9611027971708496, 0.9690198144856119, 0.9877503965794144, 0.9876913935125272, 0.9324693742438522, 0.9747334830643745, 0.731508802044522, 0.7116598101685505, 0.3481576937334877, 0.6455612940517867, 0.7533571023303004, 0.7235646385315646, 0.6366180732800744, 0.5190052062183714, 0.6410332138185035, 0.226836101673478, 0.8579460488536288, 0.8097839906089404, 0.844104478455493, 0.8251974536791429, 0.21137939835383246, 0.8169009313386607, 0.8422147955578716, 0.818659117492734, 0.12590321330150278, 0.12904311653330147, 0.15265172630006585, 0.18711541129533937, 0.2085895324352509, 0.17924969966649806, 0.13166248004705972, 0.17340325930379674, 0.18719973774997534, 0.12898353448444555, 0.18345721275707616, 0.22048721827253803, 0.18838504432856096, 0.14560160809944755, 0.18694943905905193, 0.1757569214332383, 0.1448042753850406, 0.17515028944993993, 9.999999999998899e-05, 0.09397401005678152, 0.09874983036518115, 0.028660880159282587, 0.020663024120463502, 9.999999999998899e-05, 0.06741848673194906, 0.07500266245557452, 0.0777977140203735, 0.1240526318570131, 0.11058073843852345, 0.11198226030231251, 0.10752195204063864, 0.1572791609816322, 0.1805687477855712, 0.11495442107473541, 0.1115901843110283, 0.09131028394104401, 0.09161342919141202, 0.03899084299712918, 0.05448346947203586, 0.08728372920891303, 0.08438474623271286, 0.17012718407754368, 0.07859112838732052, 0.10041072324784162, 0.07009071538615042, 0.20826117634284214, 0.19589924357991007, 0.09146215876345376, 0.06309819430918107, 0.3235286943561969, 0.1261380638105939, 0.11933882900644699, 0.2443939894799454, 0.1259116710421302, 0.5807315979431522, 0.5208653694899856, 0.5817990485995119, 0.5693424430354006, 0.5577575043283254, 0.545663396563915, 0.6667639036105164, 0.6085276967937643, 0.5757133836705624, 0.11082859638983844, 0.13220584480470332, 0.1371872111161625, 0.14392590168115726, 0.12521583731290375, 0.1260539154244681, 0.11480113492422372, 0.15850782329455126, 0.09415461944738746, 0.1420528943693098, 0.4229472599976756, 0.15216733502842839, 0.14337211416288298, 0.3060635578143931, 0.17915895054661146, 0.19534801211902975, 0.31142823729688385, 0.17568109369447138, 0.46397836187071995, 0.3759500742155456, 0.6520754744603606, 0.3351412911261423, 0.5186585945843104, 0.4505438554545058, 0.6164449205900044, 0.5256159295116108, 0.5593483678706168, 0.27886083557594255, 0.2985900458309042, 0.22376081290313432, 0.4917417904229804, 0.2958666731352845, 0.38558011769251255, 0.3303356200401255, 0.30504277380601375, 0.281871123564723, 0.23646648532091052, 0.22550054729746194, 0.19522923698526784, 0.2406977325880404, 0.220690928583276, 0.2124450391543603, 0.2207343865511192, 0.22607119041222312, 0.2085451551052665, 0.22154089821634915, 0.18747822806119696, 0.1822346968285784, 0.19475395579762633, 0.18660835377237395, 0.21818180017259803, 0.18774244320808897, 0.22100315390306935, 0.24547707353800852, 0.8745199660153442, 0.17489745340380392, 0.15261079081790052, 0.8960908824025088, 0.19848360418548705, 0.17217622831283785, 0.8579306085960858, 0.8718298793633046, 0.8882549770547024, 0.8325331405623728, 0.20822952100840375, 0.5551331007623661, 0.7866553810277004, 0.1625896547547061, 0.15363535922142524, 0.1516238237007177, 0.11220703800472898, 0.16174367853723193, 0.18585298062546174, 0.18101796533335623, 0.1829920266573477, 0.1857680337099994, 0.17686429970368922, 0.18665571944197623, 0.1854142548683475, 0.1765233139050999, 0.17721199384970443, 0.08068776999608485, 0.09019915894476549, 0.08674460439431952, 0.08359980566930592, 0.07583499364560287, 0.0963500806374008, 0.0851251804326455, 0.08631987196850155, 0.08547495208944589]}, "mutation_prompt": null}
{"id": "e96f6d15-45ac-4451-a8ab-0dcdba7f7410", "solution": "import numpy as np\n\nclass SynergisticPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.7, 1.3) if self.evaluations < self.budget / 2 else np.random.uniform(0.6, 1.4))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "SynergisticPSO_DE", "description": "Synergistic PSO-DE with adaptive inertia and self-organizing subpopulations for enhanced exploration and exploitation.", "configspace": "", "generation": 24, "fitness": 0.3281747797349722, "feedback": "The algorithm SynergisticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8627153187525841, 0.8658706326698339, 0.8566150658816258, 0.8600097414976051, 0.8717306138852694, 0.8511011839412974, 0.8650129593281681, 0.8444972971476068, 0.8455914518009662, 0.7276648490790583, 0.7250907124290524, 0.7367304552109666, 0.7384947855366681, 0.7348233303758969, 0.6118831765365185, 0.7444115376281519, 0.7126924556289871, 0.7265344031095584, 0.1468460844940127, 0.1518045886151156, 0.15395485962866517, 0.11448370309664935, 0.13727169712600096, 0.1358986996383914, 0.1360039499289304, 0.14254237651869084, 0.17399219125808107, 0.11380887832039166, 0.17264711639950003, 0.11057691695082361, 0.09358556877162316, 0.11683938477901923, 0.10680614064197291, 0.125587331592252, 0.10167073379680092, 0.1673711185230643, 0.9277353732107471, 0.9887013122475881, 0.9399127327809829, 0.9043183971274029, 0.9169456786950251, 0.9877381530988645, 0.9817213339869003, 0.9320712452927947, 0.9329853342044954, 0.6787185970099407, 0.29757015888649674, 0.43296854540743057, 0.4636161881369584, 0.5451966947784843, 0.4866087634828816, 0.47221211203404734, 0.48232699488469755, 0.6710896241364597, 0.38548461449819016, 0.22729054322545827, 0.865406363867449, 0.37748797096994735, 0.20886886948095174, 0.2093582721024574, 0.2324693384240687, 0.8659924741539312, 0.8159831138246596, 0.1511226965871738, 0.1538940247596844, 0.16011777563136453, 0.20920382518937963, 0.16966782458385565, 0.1316307246302082, 0.13855565199374065, 0.16523149405945603, 0.12541656255766798, 0.19513045610562207, 0.18961735574754834, 0.17856798739741242, 0.13080174679299383, 0.17080695968532544, 0.1494936702356594, 0.21721446673498368, 0.15544811369062395, 0.18949399340550377, 0.008048516300162567, 0.04382840296768187, 0.014140749278933384, 0.050761051520527456, 0.044760089875780285, 0.03222444029217186, 0.07120165720664517, 0.11677745503538628, 0.01012046546373313, 0.1225845386529949, 0.07064881863681172, 0.22785183507610185, 0.10657164228004601, 0.05172090023126241, 0.09883832431344619, 0.1011246077051674, 0.07992026013152265, 0.08536220304501096, 0.14612621285986283, 0.09400721074928953, 0.24392674599712516, 0.1012670576721364, 0.09479015031530469, 0.2255818069769866, 0.2189474011617749, 0.18371861186174032, 0.2263778886757558, 0.2264696478985343, 0.274853359634713, 0.10401758141131412, 0.05194825311088569, 0.2273414240210343, 0.30317866163254314, 0.17492981172017663, 0.09319365163753812, 0.1104775717171711, 0.5597686193078567, 0.5308797693124345, 0.5556986658266129, 0.5130933902961154, 0.6076115205140249, 0.6168905246987626, 0.652587965947812, 0.5831403664169933, 0.6080671708119654, 0.11182060866357135, 0.16085316119796556, 0.12037056792569456, 0.15016954479091404, 0.12202425317934718, 0.11959957605583404, 0.13449736499208342, 0.12283178260495098, 0.1703811886319363, 0.16596320022702526, 0.3245803164232277, 0.20401390935486974, 0.15360747955959286, 0.2722012223120369, 0.16603087799543592, 0.18127174089727827, 0.24279096730895744, 0.13989447456079684, 0.4023610471029434, 0.3064311906613503, 0.5541501923482328, 0.5926213377495632, 0.6432850658435164, 0.49664162653360244, 0.6833338146601924, 0.5912143054114662, 0.6781568693064846, 0.30207212754871937, 0.2100031178783619, 0.47573074929755765, 0.254321276689193, 0.3650848231022692, 0.2588741481097807, 0.2590963745475158, 0.3815091149742743, 0.30455813456157055, 0.2528471828238529, 0.21785521596465007, 0.2936563091710527, 0.2004920152656009, 0.23595850907598948, 0.19371106934800608, 0.241565959749226, 0.20677877409448542, 0.22173722026309584, 0.20555864735169516, 0.19416930085649564, 0.2242805362433289, 0.20843603482077866, 0.20244700936588012, 0.18355718549955446, 0.20707855378847806, 0.20678562990920024, 0.19823404843573067, 0.8919546346763009, 0.17350164559571002, 0.19393714616997582, 0.9040835108272248, 0.1995045313133882, 0.16688005541042406, 0.6660932684272878, 0.1606676995662557, 0.8710610653022648, 0.8859972528771634, 0.1675591674640715, 0.5102958900820023, 0.33677350624066005, 0.15368476391521146, 0.1660914018806834, 0.2108561322915241, 0.10379426735257746, 0.4609118223411328, 0.17991935287318805, 0.18494263066867855, 0.18002613779200238, 0.18901412720763766, 0.18679266190249755, 0.18842485145567844, 0.18577652216078, 0.17942983570367865, 0.18170463351022115, 0.0895150397267993, 0.08720426912314638, 0.0807144305789459, 0.08524700706487132, 0.08740025748216251, 0.12206092152144643, 0.09598168764117221, 0.09450412968902111, 0.08521696942581658]}, "mutation_prompt": null}
{"id": "7e721953-7295-4ac1-90ca-bcad9504ac58", "solution": "import numpy as np\n\nclass HybridPSO_DE_Adaptive:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)  # Changed to 3 subpopulations\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.6, 1.0) * (1 - (self.evaluations / self.budget))  # Adjusted range\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 3)  # Ensure consistent segmentation\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Dynamic boundary control\n                boundary_adjustment = np.random.uniform(-0.1, 0.1, self.dim)\n                subpop[:] = np.clip(subpop + boundary_adjustment, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE_Adaptive", "description": "A hybrid PSO-DE with segmented adaptive strategy and dynamic boundary control for diverse and efficient search.", "configspace": "", "generation": 25, "fitness": 0.26492556387536714, "feedback": "The algorithm HybridPSO_DE_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.5234846641898241, 0.48306391416163275, 0.5302255169046786, 0.4918895689451902, 0.5266301753951859, 0.4828452187828265, 0.47736475884007645, 0.4852574189378558, 0.4977738391428066, 0.08318120771652504, 0.06481212271398196, 0.09233100403041539, 0.16406402073536774, 0.08746385828849379, 0.0770271108375602, 0.08766079662108717, 0.0781010690460775, 0.05890807301558876, 0.14250104079222314, 0.1264725845652923, 0.13085401749064496, 0.10603351726893528, 0.11402779833288745, 0.10778823542670124, 0.13911439944773685, 0.1604239677817092, 0.12622715923260697, 0.10499221706148254, 0.10325120810648913, 0.1133230381653102, 0.1143297440027784, 0.10385834501803837, 0.12130197685470434, 0.12597489118673133, 0.10653116662264239, 0.11234265201580274, 0.9616310696080062, 0.9773062247517778, 0.9638678762050168, 0.9173358650328735, 0.9764009541373988, 0.9423712086766183, 0.9664477904946827, 0.9338040182888453, 0.9472560177469616, 0.3560311572773549, 0.33659582211527017, 0.3286235022437598, 0.341067793465727, 0.3070409172816462, 0.34565627265741594, 0.3390346257798398, 0.33462778402523086, 0.37172122467001323, 0.7647328310039041, 0.833333453336937, 0.7042949162463701, 0.45429471229126717, 0.7796169668315227, 0.27193700234356544, 0.23216171530388963, 0.5888947767358563, 0.6050508528954193, 0.21227950950062713, 0.2465513554172455, 0.18265966938294842, 0.21557502524662464, 0.1758806644588371, 0.16146298219637434, 0.18346667156232255, 0.1968757602604878, 0.1880912038608762, 0.23591941637667557, 0.18209958277728888, 0.17130812164646447, 0.1722506584857827, 0.1672152973054939, 0.17581981061355068, 0.1705981137915027, 0.1725658835828059, 0.18455180431921359, 9.999999999998899e-05, 0.04870337407546399, 9.999999999998899e-05, 0.04012303647431359, 0.004830026130942522, 0.01821960902973152, 0.0007206919564479719, 9.999999999998899e-05, 0.029866386370713705, 0.17292823220777087, 0.08184260947608468, 0.1376546947654882, 0.102893126174325, 0.14199938144116164, 0.07633512245905516, 0.13489648840250124, 0.09168779029570562, 0.14060429438590893, 9.999999999998899e-05, 9.999999999998899e-05, 0.005047076627811453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1300350471758236, 0.14040548914973172, 0.12965273842983516, 0.12921627618608678, 0.15628672513049313, 0.13692560070836368, 0.11464433091948323, 0.13726256431289108, 0.10774333164526817, 0.452417162016848, 0.4434379642506955, 0.45545005977090813, 0.4450254002615843, 0.452009488483175, 0.4221200462993513, 0.45286047601499035, 0.4398267646102486, 0.4422074547433871, 0.12039612127251131, 0.13937621239984743, 0.11806408747786212, 0.1310408169103079, 0.11652365897359418, 0.13444820223395293, 0.102656906608242, 0.12166063179494391, 0.13007735582887747, 0.19217007119125828, 0.25865962904687445, 0.1582068286523146, 0.14869883845114185, 0.15044078374915681, 0.202336019494055, 0.2712431190270207, 0.1463057711422312, 0.21337207877247766, 0.32032849188980084, 0.32656986959151313, 0.29660305643496154, 0.31169521591924254, 0.32354563953406656, 0.32209518223801015, 0.32437829277941266, 0.3133262361463418, 0.31591244792573026, 0.23740033902894464, 0.27029737193280334, 0.215358307522022, 0.2478895264376897, 0.23739154106983107, 0.25398562847076245, 0.21631340531257137, 0.25832359826563245, 0.26086603507280604, 0.23182813368908928, 0.23333960209234805, 0.2154154880523772, 0.21858696690715762, 0.22996111859040413, 0.21511567753395489, 0.25714298650986256, 0.20940063127248099, 0.23602961709990988, 0.2083680040890391, 0.20264816726449386, 0.2031592484098924, 0.2351868529646396, 0.19963761990658602, 0.19066013985220776, 0.23156206568242454, 0.23110838508172415, 0.1843585868551666, 0.7696806511144767, 0.6798646873814107, 0.15308958857572563, 0.17166935028821895, 0.1992982332944474, 0.1984184423917944, 0.7976126033025838, 0.7760277805438409, 0.7215374849461591, 0.671244255529591, 0.6338488309139596, 0.5374515441985065, 0.6794136585926951, 0.48158254289258107, 0.1640490923818515, 0.12629726952570963, 0.5418267553781015, 0.38736478327472046, 0.19270682165805142, 0.18922419765242526, 0.18304005196947315, 0.18454007633949043, 0.18626837492460846, 0.1811484750804533, 0.19019579228551398, 0.2136584481070326, 0.20444047324131354, 0.09266456889784547, 0.09829417173534238, 0.0896474420406066, 0.08703866510199898, 0.09375577623532316, 0.08948014957952488, 0.09446509577800921, 0.08967787602999255, 0.08721113515057699]}, "mutation_prompt": null}
{"id": "6458c2fa-0862-4ff5-96ea-82318286c25f", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.9 + 0.2 * np.random.rand()) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive inertia and dynamic mutation strategies for enhanced convergence.", "configspace": "", "generation": 26, "fitness": 0.34904789701307853, "feedback": "The algorithm AdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8454637748356536, 0.8534458713023922, 0.8523744467364236, 0.8498525223447785, 0.8488278346892675, 0.8461074324584182, 0.8482964408291251, 0.8454670428725704, 0.8453836169518214, 0.7045460233788363, 0.7103881219464615, 0.7193442211480835, 0.679526746454213, 0.6821706769133706, 0.6940268397612879, 0.5466723217242714, 0.708204382475233, 0.6812737564633655, 0.10631219904016675, 0.11626482146446471, 0.17058189334681761, 0.5435238598944405, 0.1594893976126579, 0.1479830795767999, 0.1381666508531635, 0.14763424318125895, 0.15301134634466795, 0.09790108033946221, 0.1251621565257608, 0.1303457313399673, 0.08945022576744555, 0.1080870137349439, 0.12973373123072574, 0.09491276821128392, 0.10319003294401297, 0.08824553292924397, 0.9701106212381198, 0.988625947477996, 0.9539355077283131, 0.9564331360217142, 0.950580341113641, 0.9877504271600875, 0.9876937738551159, 0.9680635848199851, 0.9620443651268666, 0.5953839089275184, 0.6460011532941294, 0.6824128847459463, 0.703835695824373, 0.616537386489783, 0.6890138651435245, 0.4610387750501572, 0.6616131095547598, 0.7149018823888507, 0.8484748415200974, 0.816878609027511, 0.8396884894155648, 0.35902499085445916, 0.3646963175161656, 0.34633054535012586, 0.84476378413392, 0.8337829244438065, 0.24040886583410614, 0.1403938329874942, 0.1648087184212189, 0.24778075364881114, 0.12621415515506762, 0.1607840989696182, 0.1598291779069414, 0.1949742956662599, 0.18878702698231298, 0.1765312774285942, 0.15103891000669478, 0.12610824894265205, 0.12618014473253825, 0.16304989429424, 0.21432300932039972, 0.16165894222978294, 0.3360681470732514, 0.17671936125953724, 0.16314764033307505, 9.999999999998899e-05, 0.03444688761282211, 0.09089527368712857, 0.04390907255466425, 0.05975242356427568, 0.0829354759854607, 0.005002136790132838, 9.999999999998899e-05, 9.999999999998899e-05, 0.09831377620062487, 0.107862539161663, 0.16920115226811427, 0.13711387640466, 0.022081237011635668, 0.045271456589051184, 0.08799988001255477, 0.05246241505157645, 0.09830752607513116, 0.06939254725579891, 0.07149629781833211, 0.08961842296874334, 0.16601088826115706, 0.08649518790300803, 0.12655805516792296, 0.16181921565421686, 0.17868889843550984, 0.07586231157812695, 0.12417928061432681, 0.3682733281276015, 0.15628214355015357, 0.020843630291111137, 0.17323045301920215, 0.1334890155724563, 0.14532349085838447, 0.13804289577902162, 0.13894477252098625, 0.583881102118502, 0.5709926419697658, 0.5586368835252682, 0.6098389601722325, 0.5759704743365766, 0.6393879017039351, 0.581330673522723, 0.6111258154270216, 0.6799338647902897, 0.14447631080959966, 0.13181188192963167, 0.13067075112379867, 0.1564160307284228, 0.15140920535055014, 0.502912281434171, 0.1669040472005181, 0.11408408045567708, 0.11246948413185054, 0.16443242192445284, 0.24493655687461113, 0.13739482106931356, 0.15405101527827214, 0.2931588909492331, 0.16390824452475738, 0.18881150980061256, 0.13402253621603266, 0.13431336492225787, 0.5943976766413628, 0.30245750680550887, 0.6478055667536355, 0.34889160432768107, 0.4456290103024536, 0.49639565590274437, 0.41079842373805053, 0.5488417547256172, 0.5033541805143218, 0.2744401371293027, 0.26923636329683764, 0.42960497324586977, 0.38625082742021555, 0.25677473883421187, 0.2805548438148082, 0.3864522167896227, 0.38301265022496755, 0.3950601901981289, 0.2071823659469184, 0.20699379523156136, 0.20476390064802186, 0.22192313220635929, 0.20720928445027298, 0.22126971716124466, 0.2350435815888815, 0.21009714228101262, 0.26340233291824666, 0.713713896644121, 0.2138138743588972, 0.20763556333761313, 0.19688775607783038, 0.648714564705148, 0.20383462138294095, 0.20114397868507183, 0.24070204513306204, 0.22053191308947329, 0.8660454300756145, 0.7949045413818514, 0.1525169348063823, 0.9002327810939823, 0.19863778626869866, 0.19624343640854425, 0.8675357983060182, 0.1704911558463016, 0.889377479788198, 0.6790518475174081, 0.5202210329323552, 0.16336084969739118, 0.20991621174982134, 0.20444028393120028, 0.16587363452314763, 0.8209983232476155, 0.804344808729202, 0.31952432450394685, 0.1922988155099904, 0.18725416024270747, 0.1731076727064701, 0.18032696078498012, 0.19229624012442992, 0.1786425156985384, 0.19511213063919708, 0.2120103678703955, 0.1751277792604875, 0.0857453845819669, 0.0903004857876889, 0.10923084330790911, 0.08323089577207288, 0.09484331377638466, 0.08644252498047267, 0.08737644140791911, 0.09145638680706614, 0.0935254645729805]}, "mutation_prompt": null}
{"id": "67326904-8701-43d7-b22c-4187de785aff", "solution": "import numpy as np\n\nclass RefinedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=60, omega=0.6, phi_p=0.4, phi_g=0.6, F=0.9, CR=0.85):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.8) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.95, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.85, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedAdaptivePSO_DE", "description": "A refined PSO-DE hybrid with adaptive randomization and variable mutation strategies to enhance convergence speed and solution diversity.", "configspace": "", "generation": 27, "fitness": 0.3282212193247547, "feedback": "The algorithm RefinedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8548685580800718, 0.851400833979484, 0.8519209423796671, 0.8403191531850687, 0.8514032553402828, 0.8494031565063298, 0.8437612286163119, 0.8410572028093527, 0.8297955568703973, 0.5240206690073821, 0.7093550209672262, 0.6659965146899851, 0.7046141444855454, 0.6310385349154204, 0.6647601196722507, 0.5914685924943025, 0.6769163981770028, 0.6448012527472481, 0.1508485991004902, 0.15075549687403478, 0.13980257577515898, 0.09928461641720188, 0.1430731463377739, 0.14507659809352247, 0.15275971699810365, 0.12799454703340818, 0.14745687393111206, 0.11273773849792013, 0.10813755205831499, 0.13214954642919874, 0.10299461043001079, 0.11593165573172959, 0.08668894429547203, 0.17354837821187452, 0.11895881679562714, 0.1037815901830037, 0.9596333235547665, 0.9093282810273873, 0.973610373807969, 0.9580321924977299, 0.953966777902682, 0.9640334182482453, 0.9646482256196496, 0.9738387568298371, 0.9641051765790107, 0.6610653615500706, 0.7211872094385807, 0.4491729721659623, 0.22905439243420256, 0.6643756533227371, 0.6897836839054604, 0.35050054630238425, 0.5736893421114273, 0.29701569694919894, 0.22565940443329546, 0.8429163578138787, 0.8171981335730112, 0.2765570603191604, 0.8923749351278464, 0.8749128931597424, 0.2168923960179875, 0.23271375950971118, 0.8353569613950349, 0.25494194218113486, 0.2131656588676487, 0.1584395535869224, 0.16657538802938343, 0.15926621032216648, 0.16063422182079523, 0.14705406047411929, 0.20292947219568014, 0.15433211567177008, 0.14452078861521744, 0.16351502854607503, 0.12617391296134084, 0.31737304452415294, 0.19600409535161434, 0.17159179883863074, 0.20126263258327937, 0.18114295273297343, 0.12593477616582127, 9.999999999998899e-05, 0.04547607189067915, 9.999999999998899e-05, 0.021100365804550547, 0.07474615228780424, 0.025810946497996756, 9.999999999998899e-05, 0.030343941345137515, 9.999999999998899e-05, 0.08940978196197669, 0.06799046747632942, 0.07207122290081092, 0.08477512911215634, 0.11874739041938887, 0.07447228640544767, 0.1088622813320862, 0.11322715462118726, 0.07333242066782042, 0.13948826637164125, 0.1770055379486719, 0.09491086984724939, 0.11084245608630972, 0.1532977077211206, 0.14133211646911992, 0.22220746209170583, 0.1323278276590516, 0.12954789828500657, 0.3670087203830733, 0.09676429003151354, 0.10506555962482655, 0.15106500990387717, 0.16081165884573234, 0.11532165625936253, 0.2858161793241487, 0.1706207251309817, 0.11013898291429991, 0.5737247638838581, 0.531611626619186, 0.5176141751375962, 0.60315585098348, 0.5115759085082274, 0.5825395428562332, 0.5416180472012488, 0.5832894434700561, 0.5220089468496938, 0.12305760899155271, 0.13894592485242996, 0.09131217365414213, 0.13412081733210357, 0.16674366423751363, 0.10952254924693827, 0.12968816847981146, 0.11295761692505679, 0.16762948597645788, 0.17582071623871598, 0.1790418866594231, 0.17712701795223762, 0.3656369472022215, 0.33788868526616167, 0.1892418149300954, 0.3537237584769225, 0.15128039742655497, 0.3077384774529718, 0.29356980718114967, 0.29443436391367284, 0.4346876457980472, 0.5280473871975176, 0.3688765580410899, 0.5835808241901571, 0.49200382206951443, 0.5730053707692113, 0.6055320898940587, 0.2830959062897418, 0.24069714172588452, 0.29928521726750246, 0.44991758720472796, 0.5468378226085011, 0.25919236770398635, 0.35461163532111983, 0.2923385907784075, 0.18988344972275872, 0.21795118971146132, 0.1872855316362686, 0.20315633298287217, 0.20197149732847441, 0.2096659614162132, 0.21066195103709562, 0.24469808455165687, 0.23802882568165862, 0.21594269911134312, 0.7026514278178995, 0.19438494349701585, 0.1849676969870886, 0.18429262790125045, 0.2026293588082021, 0.22488211020182336, 0.20608333871405982, 0.19743174618293058, 0.19188763277789755, 0.8843651662795948, 0.18595959421685726, 0.18219590684562958, 0.8797479831435125, 0.1980308357209758, 0.8956324442910364, 0.17240502274022418, 0.15538091762432682, 0.8560499497208323, 0.6984679364043098, 0.2072141764863703, 0.5371774518862527, 0.20692515771333864, 0.1656916494129408, 0.20560420851329353, 0.20902728941252857, 0.31749385337662284, 0.3835330600677085, 0.18870226426152514, 0.19165477902203554, 0.19921801617841706, 0.1836684060160877, 0.17242535090362943, 0.17669449428129014, 0.18592208766198226, 0.19539258288554384, 0.18441849119912646, 0.11294805618856296, 0.08714943656455476, 0.1288280856121612, 0.09396602976171509, 0.08203654144952943, 0.0931017003779907, 0.10211474100392459, 0.08587558234226211, 0.0842759489431153]}, "mutation_prompt": null}
{"id": "72ffdcc4-c2a0-4697-b286-ebf8a251a7ed", "solution": "import numpy as np\n\nclass AdaptivePerturbPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.6, phi_p=0.7, phi_g=0.9, F=0.85, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1.2 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (1.0 + np.random.uniform(0.05, 0.15) if self.evaluations < self.budget / 3 else 1.0)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with perturbation\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant += np.random.uniform(-0.1, 0.1, self.dim)  # Random perturbation\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePerturbPSO_DE", "description": "A novel PSO-DE hybrid with adaptive strategies and random perturbations to enhance diversity and convergence.", "configspace": "", "generation": 28, "fitness": 0.23177972118691847, "feedback": "The algorithm AdaptivePerturbPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.6672479280269603, 0.6456800180546169, 0.6402130659130412, 0.6748178529913893, 0.7237623338917536, 0.657184287772344, 0.6487060376319205, 0.6923736839713365, 0.6873417525028627, 0.03195482727106769, 0.4441104198101071, 0.25427927052722354, 0.11071291341131706, 0.04927786853090421, 0.4776439957872013, 0.001938431273143748, 0.1113420078547408, 0.052006878955446534, 0.08703665946078454, 0.10411692404436812, 0.09531215174669627, 0.10475285326987305, 0.08692047863198804, 0.1265094542589924, 0.1137078437680521, 0.105231197949745, 0.1029273637542959, 0.08429418624354823, 0.09484877990241691, 0.07998305826463892, 0.08062000316994344, 0.10224921052353897, 0.08991483455070792, 0.08789995782800342, 0.08114693242999527, 0.0859731559150878, 0.9791350779379254, 0.9868307651287317, 0.9855558594621616, 0.9745741422210885, 0.9748498296264159, 0.9795924044082019, 0.9843119850447878, 0.9751213607166034, 0.9778829230276036, 0.3233364078106069, 0.2759363253446785, 0.3408028221113878, 0.27076334617208797, 0.278484784659048, 0.26044220840468246, 0.33616501625564943, 0.3077332324144847, 0.256227872551716, 0.6740239327219895, 0.21642873421298336, 0.28938565034094077, 0.24762941908144864, 0.40657542899121224, 0.2533259381126821, 0.5470356921484376, 0.2111582863949678, 0.6068095140598411, 0.17515320128317957, 0.12950173089771055, 0.14026741076116633, 0.15401542807700408, 0.09412675169712315, 0.13444682098611993, 0.14914926538836792, 0.14276529924994297, 0.16034643223725942, 0.09622990402556153, 0.1089428442578646, 0.15270596321893337, 0.11598478984565375, 0.1124850161846469, 0.14251433821762804, 0.15200979931425174, 0.11458463834528088, 0.13399592047495223, 9.999999999998899e-05, 0.031169820964353168, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010414373016087719, 0.010244327565802624, 0.0347518255391247, 9.999999999998899e-05, 0.02105339372563797, 0.06747502042135145, 0.07705296238694992, 0.06529205389492376, 0.06774391554613846, 9.999999999998899e-05, 0.018789423807400785, 0.10845723196618162, 0.05170328707138783, 0.06306883750613457, 0.024051799372530325, 0.20262002647825483, 0.03627460771138613, 0.0597540218167667, 0.04988089699563569, 0.06180327969590049, 0.06879817970322788, 0.06686488923789058, 0.05837587741711725, 0.06312885576071381, 0.051161113838903316, 0.1803498489742137, 0.2202743851012695, 0.0906458837480486, 0.12416864274307193, 0.05067479722057511, 0.050603092969148, 0.05567821601403444, 0.4405947333485911, 0.4348752217813572, 0.43459086852645, 0.39979615864787754, 0.4543147190817146, 0.4137458034636885, 0.4150914334738347, 0.3987357114141049, 0.4009631338709163, 0.10981389844530531, 0.09819439300572508, 0.09389033381399481, 0.08710024051639631, 0.10660781563168054, 0.10239812598412501, 0.09639702601249678, 0.0818893407965876, 0.108498730620055, 0.14088675846306598, 0.21842294062686163, 0.16098942760626855, 0.12470160010555664, 0.1513663506758538, 0.17686729400024193, 0.14689925793751335, 0.1363605942680599, 0.20681128887214684, 0.3174534193123373, 0.26444097354288254, 0.3310832684292391, 0.28680361569989865, 0.3061293947522158, 0.2548973725224286, 0.29066678485976316, 0.3464648178158398, 0.2999094227454999, 0.2039165959948156, 0.29135217907221544, 0.205264003009211, 0.19369608291815, 0.15730875517720722, 0.25654946326955674, 0.21464313376924693, 0.24304640841983338, 0.20880834426349515, 0.18554186333328038, 0.19455750243922465, 0.175052043118897, 0.19352844880768783, 0.18802992327209678, 0.19730283824732808, 0.1799917566351391, 0.17833726861379295, 0.192069387193604, 0.1928472937165273, 0.17116043252785185, 0.20020175981092814, 0.1747610669468751, 0.16575637325774073, 0.19790326837602057, 0.1682159142909575, 0.1948339045753068, 0.17539834320182923, 0.16296449854751827, 0.6882105548780365, 0.15041737835509628, 0.6759717045231262, 0.1893984800835945, 0.1280899263996914, 0.13874186551974488, 0.1715260362776153, 0.2084225500300958, 0.3556635756366824, 0.18827813784984093, 0.18482332096380638, 0.35216293181717184, 0.37173014400360493, 0.13308815327896906, 0.3721602024219688, 0.20561925422723126, 0.20937807783931728, 0.17599572968304988, 0.1760680814268928, 0.18375065150189407, 0.1802219546898416, 0.19000233832837632, 0.17250074663701798, 0.17715975504451686, 0.18042958772606577, 0.17986417559039614, 0.0733575804730835, 0.07862113497881673, 0.0786857962784836, 0.07872057734473914, 0.08125052496636542, 0.06787785734733731, 0.07391088126056766, 0.07379914925112152, 0.07093204362401762]}, "mutation_prompt": null}
{"id": "9b75c682-f337-403d-9f1b-10f25d78be26", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.6, phi_p=0.6, phi_g=0.7, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.3)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "Enhanced PSO-DE with adaptive inertia, dynamic scaling, and variable crossover for improved convergence and robustness.", "configspace": "", "generation": 29, "fitness": 0.3161673636088313, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8241025939717533, 0.8163843670779428, 0.8010224136752905, 0.8153574580915852, 0.8170683435874231, 0.7895079998035217, 0.7894374972124139, 0.8110923967942235, 0.831026804451654, 0.689287266844237, 0.6824881878597309, 0.6076433443979237, 0.6299123722172575, 0.6582706700611911, 0.6314565700094104, 0.5833504134932941, 0.6453979480103338, 0.5593676759239243, 0.1260690847460152, 0.1513291694931912, 0.11428829511354777, 0.12442795465219458, 0.11406567625330821, 0.12888140555694094, 0.11664435613115076, 0.1345224887116303, 0.11160866871713371, 0.11928397888788189, 0.10349839823169937, 0.12730809693584744, 0.11261834284713002, 0.1393819114138829, 0.1050927127628889, 0.0963646357799689, 0.09989650202852696, 0.10959288075344897, 0.9709319387912034, 0.9819970470156005, 0.9789397366568208, 0.9758768206099433, 0.9744373780793415, 0.976212769090435, 0.9752829326981628, 0.957433944491229, 0.9751616346226725, 0.6811883770954441, 0.7020867223670709, 0.6754089726731063, 0.6551506815787197, 0.6009610221785733, 0.6526100308294721, 0.6746511346693769, 0.6677864789334331, 0.6324542310561259, 0.21975179160052838, 0.8146548078504238, 0.8292866225366784, 0.2643398935935335, 0.20196636998081707, 0.36003487453996463, 0.8355464012949301, 0.22963490418530785, 0.22485917942497868, 0.12258545928546905, 0.1560251896592585, 0.1532929650973336, 0.16186363029282236, 0.19191073840071082, 0.12521502755959668, 0.20495284689537407, 0.19982934986484768, 0.1625430784603541, 0.20342582746371596, 0.13891621271764365, 0.17559733665773092, 0.20451477398100404, 0.22327039373731083, 0.21407519476991133, 0.11123596643443745, 0.13605712999362274, 0.17687478300811732, 0.00423865538577739, 0.022666924600218907, 0.04259745737269294, 9.999999999998899e-05, 0.0022295874978992547, 9.999999999998899e-05, 0.00587299077353598, 9.999999999998899e-05, 9.999999999998899e-05, 0.07858627959678455, 0.06316588678650736, 0.11320748278858739, 0.0946278092988172, 0.0009486721621029259, 0.03892464363820347, 0.10167770787601171, 0.15973024301310235, 0.07786872848445858, 0.03189282834764384, 0.20309253680983752, 0.04689053982334568, 0.10312582418490168, 0.06984723565245221, 0.07089727558890968, 0.10960898689230614, 0.06431600052804587, 0.06367833481795226, 0.15051089617095836, 0.23979501218873478, 0.12414608679344186, 0.06585737213235265, 0.13964511089469156, 0.10797420838550664, 0.055201771045166215, 0.10249165805832305, 0.2791160547655208, 0.504475977117687, 0.5505296259659451, 0.5615136702612415, 0.534853020785586, 0.48747569645490485, 0.5568191718658037, 0.5952689492447825, 0.5620670827280669, 0.5456041015908751, 0.1169200531618324, 0.1213777540859976, 0.11495200639379799, 0.11657697983747273, 0.11290812387550853, 0.1263781059786141, 0.10679181585795361, 0.14072587671706238, 0.1339206419195147, 0.13854725147154945, 0.15425836170705265, 0.17773625969596774, 0.27890975106852334, 0.2186300958467493, 0.16106502330286854, 0.38503897770625795, 0.15548181603062128, 0.2643875190976712, 0.4465079468453699, 0.44454535185566924, 0.3403287274756658, 0.5016870575781645, 0.5946032592561215, 0.4547410702726392, 0.47289643264137915, 0.5637202458503279, 0.5516440581111159, 0.25374956749857636, 0.2627154667093745, 0.306083594545154, 0.34729667389896157, 0.18557101380263097, 0.30285779690744163, 0.3238606155252135, 0.3606955676439817, 0.33538900055390064, 0.21529430754523649, 0.19071857600451403, 0.18996019259353025, 0.1875277176168081, 0.20167636488301988, 0.20149166542357677, 0.18567176696932153, 0.20207618918821346, 0.25533392586244597, 0.228339566984457, 0.20366522551085042, 0.18448041582947938, 0.2247493398082434, 0.21211676553600012, 0.20955435644426812, 0.2270943022041091, 0.21075016959305493, 0.19747781599241432, 0.1831035804323029, 0.16600594943435953, 0.15182055234637537, 0.8768535437642551, 0.1980311701458659, 0.16747972772690334, 0.7581593291048909, 0.18244483821629132, 0.8490405269466883, 0.7385428478168488, 0.6920224662633687, 0.20374123965766977, 0.43423815671688504, 0.42028684919934634, 0.20716048629659745, 0.20678407115255482, 0.2054789504436414, 0.8293601150120277, 0.1839257876610616, 0.17700606493043802, 0.18173728299280412, 0.18513081298907808, 0.19065017819371965, 0.17257050478506475, 0.17964743173370812, 0.19923079674176847, 0.1858191725961077, 0.07816395690814892, 0.08791547345615813, 0.09711053348511578, 0.09083153281127321, 0.07826260684233699, 0.08682443070571044, 0.08370974014522903, 0.0755323338478936, 0.0847293896964757]}, "mutation_prompt": null}
{"id": "0e0d8625-0768-45e9-b25a-b3f5756f12cb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.6, phi_p=0.6, phi_g=0.7, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with probabilistic selection\n                for i in range(len(subpop)):\n                    if np.random.rand() < 0.1:  # Introduce probabilistic selection of mutation strategy\n                        indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                        mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    else:\n                        indices = np.random.choice(np.arange(len(subpop)), 2, replace=False)\n                        mutant = subpop[i] + self.F * (subpop[indices[0]] - subpop[indices[1]])\n                    \n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced Adaptive Multi-Strategy Optimization with Probabilistic Differential Evolution and Swarm Dynamics for Versatile Solution Discovery.", "configspace": "", "generation": 30, "fitness": 0.3069448832517813, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8398816801600851, 0.8434217986683288, 0.8612080015967312, 0.8566907523404312, 0.8565430419176941, 0.8518371370574468, 0.8541783021103639, 0.8524726915326863, 0.8486479655666017, 0.684395121523607, 0.6783443667670168, 0.6746641910175554, 0.6915627170045222, 0.6070669797252956, 0.61603301470266, 0.6929528069373885, 0.7212481197913082, 0.6552028745217554, 0.14848129526448173, 0.11225268157964075, 0.1155111792356649, 0.1383766976214189, 0.14386832934240879, 0.1300889899680716, 0.14654080693757732, 0.12736504919986325, 0.10775355399783859, 0.10930147682843105, 0.11522134335927225, 0.13452692503989183, 0.16847596001256593, 0.11688268030709115, 0.10109450394183694, 0.10504780193782803, 0.11297817439629887, 0.12215122925536814, 0.9709565710026783, 0.9650376089748829, 0.9777859826329226, 0.9615839375183785, 0.9594239562622172, 0.9576653346569949, 0.9671605383697088, 0.9676307518459533, 0.9613699111745949, 0.6523200758135604, 0.7511246437431874, 0.7041224496182744, 0.6696431497586632, 0.6572506842573583, 0.710571958620788, 0.5298693906049481, 0.39078526154073867, 0.6696750934150099, 0.38603258791236594, 0.3779759247567652, 0.22173074409225202, 0.3541769016700007, 0.2700679980490638, 0.8716164257062289, 0.17304589256536096, 0.2318403214365241, 0.34082285063732953, 0.26244593709343433, 0.12925108204071223, 0.1560438915791137, 0.1726020529892629, 0.13374210571363432, 0.23331278096266916, 0.1771301681570019, 0.1527683396945425, 0.15468526274433259, 0.14880305520631942, 0.13114664657769903, 0.12745200605012197, 0.1638869222163688, 0.19149411799637184, 0.1943832774977291, 0.13063278741404194, 0.1874627550372011, 0.12440376773150508, 9.999999999998899e-05, 0.05644082283804619, 0.08533428104626561, 0.038074690069422656, 9.999999999998899e-05, 9.999999999998899e-05, 0.014595718448164319, 0.0007158646632173804, 0.06120491967441233, 0.04612353313621187, 0.048039769508192554, 0.12613673032363748, 0.08721207502044293, 0.051912417293695, 0.03463156009868307, 0.1112801307134268, 0.14307466920232714, 0.07381265881654331, 0.06016696407676658, 0.05026708921048162, 0.12827064954806267, 0.08096824017365911, 0.30979664449790567, 0.07200047133210408, 0.09437195738294157, 0.16277852642212076, 0.14244133933526404, 0.15918130559588084, 0.0693482692484213, 0.07970403786597469, 0.06336564670131717, 0.1572805693996564, 0.04019533352941285, 0.12644207725505097, 0.13927658572640245, 0.0964326711093636, 0.5943433299895076, 0.5190658488981652, 0.5445715000971965, 0.525178294105749, 0.5165577519153561, 0.6068805344290598, 0.5058063379720199, 0.5797959909795058, 0.5459211454373989, 0.10041346781882987, 0.1268779345627885, 0.08144326602884389, 0.10744408843414643, 0.09581988788313245, 0.10380747176387572, 0.09542207515663248, 0.13149392937887971, 0.07991680655392397, 0.17966719792785313, 0.20040716151096927, 0.18251753968331785, 0.18305746419066793, 0.24926725285073803, 0.14288191558560337, 0.2679930141136736, 0.2130666186158885, 0.2411850666624934, 0.3588963331609746, 0.3564000119682229, 0.3757920529413261, 0.40685788595192696, 0.32670460530887124, 0.26722570621341357, 0.3863453280776956, 0.49251641927603573, 0.5010050892704023, 0.2788909470146027, 0.21004375258124441, 0.29191011005670864, 0.25424043825049714, 0.2212934485166117, 0.28433293620879296, 0.3062554286178073, 0.257078958876526, 0.2790773357704829, 0.2002993020046583, 0.21945548622327538, 0.23336135843773442, 0.24163387302660833, 0.21059073901786352, 0.21003699146461363, 0.2243449964291998, 0.22100829929230004, 0.186666240372109, 0.18422523235776833, 0.24791581635426863, 0.19834785300817936, 0.2044978487845065, 0.24326261462378485, 0.18232769586741493, 0.19203601247251811, 0.20751238014890028, 0.18150159530431798, 0.8602957970622144, 0.12067421136914269, 0.1471323417667456, 0.9134608518727307, 0.19903584619640013, 0.19464549347219506, 0.8400088766847895, 0.1533269221907123, 0.8509007896340518, 0.20920901173205986, 0.38068149324610256, 0.3644327566318071, 0.22940688471480197, 0.16629407978850408, 0.661199169509875, 0.1041748225767114, 0.20738572980717807, 0.30574295456770406, 0.18451774271382726, 0.2060043082158457, 0.18344415225912547, 0.18813520261875194, 0.1807107685317445, 0.19792911262771806, 0.18646375010948368, 0.17839353680907621, 0.1779551139560932, 0.0957791650864277, 0.08352005591820999, 0.08757393305518768, 0.08261136914631628, 0.07386734541280471, 0.07132220583799187, 0.09132718812877794, 0.09528310826572739, 0.08617231130023306]}, "mutation_prompt": null}
{"id": "51af2276-afd2-4996-a463-4b99464f9c20", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.4, phi_g=0.6, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A hybrid PSO-DE with adaptive inertia and dynamic mutation scaling for enhanced convergence and exploration balance.", "configspace": "", "generation": 31, "fitness": 0.2891109592606207, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8104107855353693, 0.7653593065468948, 0.8091399827161192, 0.7783669779093355, 0.8077442334971788, 0.7431590887709577, 0.7892283884785629, 0.8026416897100596, 0.21534464254371188, 0.5650905233722223, 0.549130399092274, 9.999999999998899e-05, 0.6003919515305102, 0.5265051925026996, 0.5880043431138022, 0.6398607953879183, 0.6335115726780198, 0.47537150771144354, 0.12309646331660073, 0.09649028555455663, 0.10394675522188823, 0.12579894775611722, 0.12308467589807148, 0.09995214091764026, 0.10801661762985693, 0.10068267353812532, 0.10245295525583864, 0.10379217431820398, 0.10494720532922108, 0.10426764858149784, 0.07809166418111002, 0.09276095396905426, 0.10166878376487198, 0.11365245424563797, 0.10371391073408909, 0.08660098991661158, 0.9663287585904825, 0.96666662333422, 0.9738255512859785, 0.9456049375438038, 0.9583401989125732, 0.9592492318519666, 0.9650351673675588, 0.9476470995372596, 0.9541515717463059, 0.6135703375875057, 0.5067028310036576, 0.5866624686956552, 0.5152737082240797, 0.5984025763941434, 0.582807278494748, 0.09014397771845728, 0.6320656436359762, 0.6563638821749325, 0.2098461789818552, 0.22150262437761903, 0.8035651104594945, 0.1908309216229762, 0.3642534370485204, 0.13993776608443476, 0.3698295050053645, 0.22414856172297104, 0.7888336920686932, 0.15126805952769717, 0.16786995256722825, 0.21235454771372797, 0.12391499863805366, 0.1395753941605259, 0.15461192460854722, 0.12317378181576022, 0.17821343613634366, 0.16449289524031496, 0.12429006643363283, 0.18674678232416142, 0.2126646023219525, 0.12446843834515753, 0.18605827289386812, 0.15916234294364406, 0.12091337041117056, 0.19262992104172538, 0.1716799094473277, 0.0610134930202475, 9.999999999998899e-05, 9.999999999998899e-05, 0.04781206227365842, 9.999999999998899e-05, 9.999999999998899e-05, 0.003266092620358485, 0.13201189040129047, 0.0415967137679627, 0.05385472291861482, 0.0828017386883746, 0.15676012176622156, 0.07536527011653138, 0.02636511570814759, 0.0645488065114187, 0.05527066301764283, 0.09606158867100056, 0.11523791756673285, 9.999999999998899e-05, 0.06195969683407698, 9.999999999998899e-05, 0.06279435924958021, 0.07656553760750395, 0.0890893483626749, 0.08688858240000208, 0.17970840408095357, 0.2063971039607797, 0.08894448790329079, 0.09602631124491579, 0.04070490294771045, 0.27587956196332697, 0.15674705638703978, 0.14679606103832776, 0.08363877243517093, 0.08752873417452833, 0.07731332399635849, 0.5548757472156131, 0.5455178780327212, 0.4935713686946601, 0.4650804164578929, 0.5293011043864326, 0.544821235817438, 0.49890091132334613, 0.5713792985609578, 0.5612746324692497, 0.12427243836146207, 0.051763296303460105, 0.12870582951996656, 0.08985619351940399, 0.10031334738161057, 0.12910260138962892, 0.1248242408129534, 0.13946832692112077, 0.09145051970582607, 0.15602916040088566, 0.1672320615666697, 0.47265303699621786, 0.14895385669871353, 0.24111282488754893, 0.2849326009665658, 0.34953241425106596, 0.24491696736273727, 0.21020218436143212, 0.4218028089910184, 0.24637659388540345, 0.25243804437422046, 0.4184581909966776, 0.2874191501642753, 0.24906716367903237, 0.33984915271673677, 0.27982196490706723, 0.5165013060631427, 0.25643588699575837, 0.23091533638393613, 0.26340913730321713, 0.3390519480490909, 0.19743379704172248, 0.3085446160106492, 0.26051158922201756, 0.2268902900654165, 0.24145306636852715, 0.1910172184666058, 0.1846671204909507, 0.22078404357372505, 0.21855173064336997, 0.18910146140326722, 0.2593778230082756, 0.18224251912577683, 0.1871279334142344, 0.2272886323402079, 0.2349418882880644, 0.1801027621489344, 0.18579751850927817, 0.6335727153063647, 0.18531107717264306, 0.2098442733726661, 0.19342734868957068, 0.18908246309018828, 0.20514384771074068, 0.5202549924895199, 0.18665579734359672, 0.15047476100227686, 0.8546309818119704, 0.19833835531109167, 0.7760385246193391, 0.8585132853677298, 0.16123771791633446, 0.8460864205899208, 0.691204095955111, 0.21013913664138484, 0.16367252990785108, 0.20534036063611938, 0.22480588727719109, 0.09360894121155339, 0.20618445880752212, 0.6497302292723036, 0.15118542182434902, 0.17173452142802903, 0.1907121893131446, 0.17771246487181502, 0.18626720019133813, 0.18728378044718064, 0.18296355835362133, 0.18731432116100322, 0.19471105724981974, 0.1839133829510029, 0.1263430225758364, 0.0762564715776487, 0.07980401086078004, 0.05327884777209513, 0.0839345282476417, 0.07964717618948292, 0.09667782950737203, 0.09183569168880623, 0.08806287268134261]}, "mutation_prompt": null}
{"id": "39b4efe6-a164-4784-9002-da3c9040a2d5", "solution": "import numpy as np\n\nclass SynergisticPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.5, phi_g=0.5, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.2) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "SynergisticPSO_DE", "description": "Synergistic PSO-DE with adaptive inertia and stochastic subpopulation collaboration for enhanced optimization.", "configspace": "", "generation": 32, "fitness": 0.33258430034244124, "feedback": "The algorithm SynergisticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8413912554820675, 0.8251437111735968, 0.826078829728299, 0.8358099059324907, 0.8302908707692178, 0.8287333398498011, 0.8336699184873237, 0.8408488815295438, 0.8107409132128096, 0.6637477248795791, 0.6792098154752497, 0.6356454329879975, 0.646393412227817, 0.6456742874543658, 0.6714514711739237, 0.6674530695966648, 0.6913894992521803, 0.6447087456743195, 0.1269707201782776, 0.1500927334975366, 0.15106884007018795, 0.11248597832660312, 0.12862430076199183, 0.11233461185716331, 0.16118731357454452, 0.1236523139742951, 0.14455660309497564, 0.11780179285634462, 0.14147933140951774, 0.12481612094213124, 0.12436014125618366, 0.1304009946623964, 0.10464510404376093, 0.11949911345048747, 0.1047684854350377, 0.12149977354241603, 0.9555962296727195, 0.9889968582106283, 0.9692954518577968, 0.957263472644883, 0.9516052097799194, 0.9877450737334094, 0.9715162396417417, 0.9574299970485146, 0.9687231735452819, 0.684612356185774, 0.6617969245414517, 0.619346908531047, 0.7182913806496016, 0.6226494957390543, 0.6109010746034542, 0.6709696489524186, 0.4749605360871475, 0.5880515791236394, 0.8487952722576567, 0.3788363280891599, 0.22453644273772788, 0.21728506937215875, 0.20816339630036385, 0.7874271985762007, 0.8141099524791573, 0.807944806313625, 0.8263856132673691, 0.16629142688590692, 0.19354737818346557, 0.19681943084943243, 0.12751277583444465, 0.18077856917975155, 0.12103870348477663, 0.311678457459696, 0.186052627571203, 0.16431331239273272, 0.17892979117785635, 0.1641315262445936, 0.21580307439734747, 0.17233429661753852, 0.19881940324363534, 0.13219776027393404, 0.2420832639385072, 0.14234667138912083, 0.1955953677230886, 9.999999999998899e-05, 0.08200688342015161, 0.101029060289064, 0.038957265886989445, 9.999999999998899e-05, 9.999999999998899e-05, 0.0517969564312003, 0.160863342556122, 0.0345591748879478, 0.1555014279408935, 0.09499885049878698, 0.11705145330283229, 0.09763906681268764, 0.04546578451724381, 0.1546120960509879, 0.18670942111629196, 0.07473386631108603, 0.11216325525258564, 0.18438510477022607, 0.12878082056585027, 0.04387608119912689, 0.07125076297348021, 0.0712471107874173, 0.23165962420474084, 0.2402926984226358, 0.17646117323816068, 0.08423804774244614, 0.12330167905948297, 0.11670354954635243, 0.09737728625818076, 0.04954880035008313, 0.2271080857268467, 0.2158423080402342, 0.19557810240605378, 0.05753490518993842, 0.08708369493653012, 0.515314369352503, 0.5361412540726591, 0.5565002920599205, 0.5283039956180813, 0.5750724349043956, 0.5443028472234428, 0.5240971446858274, 0.6228069053490566, 0.6152887278843697, 0.1139200691112413, 0.13029995288977902, 0.10745698407009108, 0.13376183330228453, 0.11958413217697794, 0.12011464265801841, 0.1236431027089655, 0.11454993856084872, 0.14298710669355064, 0.14522250901852218, 0.13337494815095963, 0.1631512227608113, 0.2235555318611343, 0.15141729042733876, 0.17624423964469804, 0.14571054409317818, 0.15346370074058435, 0.15080450839287007, 0.6060957147101771, 0.4939427660909197, 0.5862649685118229, 0.38656677184163135, 0.517895155200695, 0.5713366123019852, 0.5433677967410137, 0.6182036698127011, 0.5265259918234293, 0.30894502695371096, 0.3550845468074362, 0.20741735446633036, 0.3442822696544182, 0.2959276664117396, 0.26042151397756175, 0.24021175101154313, 0.2841733963434039, 0.2122021993005101, 0.21857072954641077, 0.21248097821000578, 0.20048271786981253, 0.18497639136622412, 0.1960065714957061, 0.23788794585829343, 0.2424458074737299, 0.1910139502283793, 0.22900586223145647, 0.20362510537887812, 0.19382159693060752, 0.18514033094909188, 0.5862667260823435, 0.21503395607062648, 0.21369245790395008, 0.19487003282949367, 0.6031651882566533, 0.2358380247272439, 0.1632422995122229, 0.20708730093177896, 0.14490165315456738, 0.8610975983517769, 0.19884271679950483, 0.16370354598697945, 0.7816228076965036, 0.7997235492571275, 0.884932642034986, 0.68348468946204, 0.16657214039379775, 0.11077508241590717, 0.206796304002128, 0.7792099136854722, 0.16422757037666724, 0.20716003527118043, 0.37916278120848157, 0.5735833102422583, 0.18995655299779635, 0.18752233565854148, 0.1905894628166106, 0.1964759458295855, 0.19671358193379707, 0.18408878030076203, 0.18046080218517546, 0.1890754213211413, 0.18649608788376904, 0.08523136874462012, 0.0811815611627208, 0.10435333739227048, 0.08023243110842504, 0.08518650001127903, 0.09703956964074134, 0.08816845536687556, 0.09374332910131522, 0.08249501064375742]}, "mutation_prompt": null}
{"id": "2746436e-ff94-4822-b21a-0debd74aae2a", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE_Enhanced:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Randomly restart worst particles occasionally\n                if np.random.rand() < 0.05:\n                    worst_indices = np.argsort(fitness)[-3:]\n                    subpop[worst_indices] = np.random.uniform(-5.0, 5.0, (3, self.dim))\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE_Enhanced", "description": "Hybrid exploration-exploitation algorithm blending adaptive PSO with DE and random restarts for improved global search.", "configspace": "", "generation": 33, "fitness": 0.33748136424596503, "feedback": "The algorithm AdaptiveMultiPSO_DE_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8649392900533666, 0.8533271756614891, 0.8596241788048284, 0.8661319080844909, 0.8608363585129416, 0.8576516468749543, 0.8510389824480084, 0.8569624461367902, 0.8505597578573849, 0.7359691676263105, 0.7415632827972074, 0.7346091246929134, 0.7074628047384621, 0.6661531969082471, 0.7190772429740148, 0.6952847635588066, 0.698027870132226, 0.6593898982474287, 0.09867639354659674, 0.16460980133119207, 0.13480930905526944, 0.1481528812339964, 0.153921623230604, 0.15223299881183172, 0.1118990635587579, 0.1298981792990096, 0.13678487553080887, 0.12374877697053344, 0.1290748799836805, 0.1359750550840072, 0.11647852057533148, 0.08956850400915373, 0.1369364761630375, 0.1511012454231503, 0.11114395253563758, 0.10577041978068669, 0.9169283462680814, 0.9801208301835685, 0.9324775757847227, 0.9394927323996194, 0.9375732109270339, 0.9767465074746989, 0.9747528762353617, 0.9401544323221227, 0.9503333428121485, 0.5094466767836316, 0.48243152329149297, 0.4820297571833976, 0.687058314002766, 0.5386989702635656, 0.4676321021605355, 0.6076049674182207, 0.5567817234546105, 0.38241766490998574, 0.8037498066865082, 0.22590713205950808, 0.8399753273608448, 0.21213566267460005, 0.37451184270631344, 0.8624873896819127, 0.17418287786639153, 0.23066474775843504, 0.8608312628765787, 0.24707762486846718, 0.22516566674723604, 0.1496713039510139, 0.16021619094527872, 0.13180594338894513, 0.15321814575793358, 0.1947378746270899, 0.14295480293745222, 0.17056678834278705, 0.22209458115122438, 0.14229819803778498, 0.3650549059540944, 0.1727827947939682, 0.15270829240067707, 0.221950372987884, 0.20089716957476578, 0.1280077546761067, 0.12973662992651136, 9.999999999998899e-05, 0.01366372488906531, 0.06364723805329942, 0.005584943728605296, 0.06197483881564059, 9.999999999998899e-05, 0.05026439965870455, 9.999999999998899e-05, 9.999999999998899e-05, 0.2192283589021382, 0.10522351979810651, 0.1398496208955916, 0.059124873439675873, 0.08727149014791502, 0.09849618861133791, 0.06916558388770477, 0.09645536728292936, 0.07545369993315632, 0.15204170502078795, 0.10780367140934577, 0.15036295598316263, 0.11494060851294785, 0.1770800619940286, 0.1108018120453087, 0.3515025564874783, 0.24253321142539175, 0.17987210481221916, 0.11753622708576439, 0.07072659262900272, 0.2389247281527177, 0.09380033217367778, 0.32115045103971973, 0.182635096641519, 0.2932058927174417, 0.2759713291602025, 0.09897631190518219, 0.5781709516333229, 0.5343693724736782, 0.6207132933316123, 0.6520477899457929, 0.4964261709683956, 0.6028210544918289, 0.5647576021359226, 0.6396634780718919, 0.5726770206706107, 0.11423650609098746, 0.15123505018030559, 0.14235314786836084, 0.1355926732742777, 0.1275466350837896, 0.17482372221024323, 0.13865895070048906, 0.1748534094927543, 0.1129481834769045, 0.14193175920134604, 0.25363533025081475, 0.15510191779440008, 0.16981975872104982, 0.4387763026796394, 0.18662277030429764, 0.38292555593960476, 0.17843449073115603, 0.5097781593110391, 0.5327900194110837, 0.5423171243464269, 0.4723237755649805, 0.3336717516414024, 0.44905111993514124, 0.2713946935738717, 0.5598351234311755, 0.6081310763397263, 0.6751908228906774, 0.2687421520125609, 0.3342074725694604, 0.4549652460872249, 0.382606523686314, 0.3010893920369926, 0.30311054781549107, 0.35291964089225214, 0.31082532066429147, 0.26417719571389464, 0.21388963272143724, 0.2028032312312137, 0.22574885287688617, 0.25890193852554844, 0.21255016412127803, 0.20582050187575596, 0.2304698486128678, 0.18892885928081515, 0.1955297114706711, 0.22328777841254954, 0.23518020240676485, 0.19842534201532558, 0.1947287594842464, 0.19862229912248908, 0.2299144109358039, 0.1831880254248457, 0.2018835311339966, 0.21805093951989418, 0.8892406766272027, 0.17333140442209294, 0.20146522240580245, 0.9107937909159268, 0.1997502909669585, 0.19794255989824383, 0.8917323861047062, 0.8637835940395315, 0.15705480762422597, 0.5131843706365362, 0.21054941026222207, 0.6003089518199514, 0.8117953693806907, 0.16632182966544473, 0.1541045528981384, 0.21023469430610242, 0.8147544784065808, 0.21040267280749114, 0.1783159647061926, 0.18339256305202012, 0.18496035832487034, 0.18145687509378072, 0.20993109847947677, 0.1802419340712189, 0.18736577420729827, 0.18794813384039133, 0.18377171647819268, 0.08448292878031238, 0.10376482766089357, 0.09706769440732965, 0.08420240840367221, 0.09421274374818511, 0.08807314173014025, 0.11791474093559595, 0.09832826450145182, 0.09446416661090329]}, "mutation_prompt": null}
{"id": "00ab2c77-1da4-4a1b-b6a5-8670ee70a34d", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=60, omega=0.7, phi_p=0.6, phi_g=0.6, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)  # Changed to 3 subpopulations\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - 0.5 * (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, np.random.choice([2, 3]))  # Dynamic subpopulation split\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "Enhanced PSO-DE with dynamic split-subpopulation management and adaptive parameter tuning for improved optimization.", "configspace": "", "generation": 34, "fitness": 0.2529053941218833, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.6678790252644742, 0.6541688356504451, 0.6687908971342136, 0.6576138278161952, 0.6886645852806388, 0.665787863214955, 0.6658427258976093, 0.6003814020007439, 0.6372359743638403, 0.38245398322042234, 0.32008622481392335, 0.3603601303064161, 0.3393084824617745, 0.28971939327866203, 0.404526412947263, 0.36893380311081403, 0.35970933078776113, 0.4328776936513524, 0.08635452684529354, 0.09726840289340943, 0.08840503642861697, 0.10360542730766242, 0.08525108115465463, 0.09610191800579049, 0.08531880631618771, 0.08499350746885681, 0.0983287765282097, 0.08835276480054255, 0.08162223866985818, 0.09130682848287597, 0.07821582284257111, 0.07786537574737706, 0.07507456979972138, 0.10069845312060421, 0.09957467709157664, 0.08910655638631926, 0.9652445780488116, 0.971613911178193, 0.9789444544922752, 0.9645123790980439, 0.9842044783928291, 0.9696993534460999, 0.9761439509330804, 0.985888513175947, 0.9701012959667332, 0.43531190364228145, 0.38723314846724766, 0.3218954653724724, 0.3377843468741779, 0.362000137481054, 0.3390840114216166, 0.3023269180682908, 0.3665417400925851, 0.41909799995872166, 0.5042269365008931, 0.5011827356974851, 0.4247961030027474, 0.5512757259140948, 0.5831191878249811, 0.24715519378851958, 0.42723314148727465, 0.5210548777690218, 0.5324867031453034, 0.17480072032321803, 0.15523524078597806, 0.16832173017227092, 0.1813261374074273, 0.16789176403090844, 0.11197820829044036, 0.174272687543384, 0.1834388533556982, 0.12302449978711083, 0.18726364392455286, 0.1938041059346911, 0.1025483486339781, 0.16456936286316703, 0.1488733531312142, 0.1534274927085768, 0.1984461354752982, 0.16202990356498526, 0.17313320086792539, 0.0016864299939203242, 0.008906929354474014, 9.999999999998899e-05, 0.01207405407603368, 0.00038229959101732103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003083730869222201, 0.09139725483689654, 0.05470198964828632, 0.07399659855438911, 0.08440347408892734, 0.026867974354027102, 0.016386983857115567, 0.07470598952003493, 0.07550106191460415, 0.08245152253511445, 0.014079924614340933, 0.023436904772468736, 0.029196501510851514, 0.08172732189381238, 0.04372849797711731, 0.10734568403310163, 0.05413438950489069, 0.05246680667533854, 0.060578925753203894, 0.11944997312740491, 0.17051449360888404, 0.1054066125608919, 0.18596656884469953, 0.14083081321811441, 0.1279481314582518, 0.11315110082930624, 0.09746542200451658, 0.14518706740350207, 0.43681287599299334, 0.4661583590852739, 0.46264861232731036, 0.4476081651891237, 0.4694715674007053, 0.4589358381497187, 0.44160947769953285, 0.4613840772421911, 0.4546178633153659, 0.08660902949183624, 0.09943937004129932, 0.07460884945769519, 0.08688296558426956, 0.0886912704405528, 0.08947437177469852, 0.08976089281723876, 0.0847955609197405, 0.09510398469744974, 0.1292556802958139, 0.15087470367765432, 0.14906674570792, 0.13990708399536744, 0.12755220902281272, 0.17026431863628844, 0.1734830145037124, 0.13610329977443003, 0.13798242720578346, 0.3423992042536841, 0.30775169217397447, 0.31497611091505096, 0.3277664644686554, 0.30139671848298166, 0.27467402832203425, 0.3450916895969677, 0.37653263831352657, 0.35907845549660056, 0.21027432939184287, 0.2501873210262797, 0.24053837325399696, 0.21639741816521774, 0.1617347983122447, 0.2285275836850933, 0.2557527332919389, 0.24013345020250976, 0.23544545508552106, 0.20227806075198584, 0.19620942778163497, 0.176049438261342, 0.1917948511575952, 0.21699392580222032, 0.18620342359826536, 0.18715259620696167, 0.19317416957318922, 0.18653003430045278, 0.17335043982747012, 0.1688933381740657, 0.20289207390312036, 0.17310197114105808, 0.20863822017816402, 0.19949843668670142, 0.18076565104249476, 0.1795090687248494, 0.17242134228634443, 0.5845659612517189, 0.1989360316163794, 0.14946434577451495, 0.17512242977398595, 0.48081547953076287, 0.15448979616076564, 0.1806114663428562, 0.4124522940667398, 0.5051426473836629, 0.48627496354253996, 0.20493439568409344, 0.16558285702247755, 0.1979676442387962, 0.37801800453438117, 0.11748291983509607, 0.2102960670155377, 0.36158755746014326, 0.45254316536728956, 0.16787554912024238, 0.21090595168786697, 0.17485474071721796, 0.17419319815083545, 0.1799771535878152, 0.16397859530677905, 0.1820774162520894, 0.1809769039710878, 0.19024495118017093, 0.06908056022692977, 0.0924612400379099, 0.07724897742485048, 0.07963752018472392, 0.07940596230059127, 0.07324621973902745, 0.07033586104603695, 0.07378655252901611, 0.07465618564334275]}, "mutation_prompt": null}
{"id": "69c05939-b1a6-43b0-93da-c24d133de84f", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.6, phi_g=0.7, F=0.85, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.6, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An adaptive PSO-DE hybrid with dynamic population segmentation and velocity update rules for enhanced exploration-exploitation balance.", "configspace": "", "generation": 35, "fitness": 0.3264268918385105, "feedback": "The algorithm AdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.874708498042165, 0.8703935902443387, 0.8551122849879027, 0.8750344119671197, 0.8531452250824376, 0.8528735135593983, 0.8611076916662095, 0.8639958471605897, 0.8586222095512291, 0.7105501136237219, 0.7454320204217476, 0.7500925290900589, 0.7433699126877209, 0.7169172409930546, 0.7343008439053272, 0.6040921932408891, 0.760031841283798, 0.6855395644908342, 0.15321297920308297, 0.1494851437184681, 0.1258967422660151, 0.12276366456233367, 0.15990104079924317, 0.14122018480964904, 0.1204501154905725, 0.11835299189017334, 0.13747890339238056, 0.12394742627267463, 0.10998243557829013, 0.1011802991059707, 0.1084420044504073, 0.117800735273771, 0.17650163943588082, 0.13345167333813557, 0.11940331232041212, 0.11681596179001119, 0.9755889259651185, 0.988280740340528, 0.9509727122647115, 0.9460610119548128, 0.953874727564313, 0.9876486585431323, 0.9795771691202938, 0.9555537599729517, 0.9750333229642051, 0.6995360584047572, 0.7294545577217699, 0.6670015676867567, 0.6957064923844466, 0.745732536689359, 0.2752798280276927, 0.7337093283419269, 0.7321661403980986, 0.7093872220379976, 0.2263698030914315, 0.8460885973830544, 0.36398368066795184, 0.2749910821390886, 0.18963412530581103, 0.21110870943692805, 0.8670301764107378, 0.39360694797215023, 0.21727341154306867, 0.2574168059486377, 0.1593472965023659, 0.24907388080029336, 0.3232235060137506, 0.1716561866182006, 0.1290647906736383, 0.1659032800672694, 0.32217703734677894, 0.19361626950582145, 0.147273627071434, 0.2025652325896018, 0.19402860219150586, 0.21283615017695445, 0.1881443492820376, 0.2598154924939119, 0.13818884341225424, 0.11708762678587159, 0.20802931544430592, 9.999999999998899e-05, 0.00878045274837147, 0.07389447508192026, 0.036754508873647285, 0.10668275897596302, 9.999999999998899e-05, 0.025347154113152692, 0.15231109566040413, 9.999999999998899e-05, 0.10486039579908646, 0.029677488071690128, 0.06493976705659132, 0.09794940807536945, 0.03228546957767431, 0.10638565611816286, 0.0964082606233182, 0.115143985760354, 0.034003531834713385, 0.15912375950393032, 0.10346954518063689, 0.0494251633930155, 0.10091551124689846, 0.08813611555106204, 0.18371774027417231, 0.12675581907540512, 0.10991452985155248, 0.21475773892864825, 0.2567567413217947, 0.2756979414469217, 0.2041624053724066, 0.027709218073886266, 0.19886892770478448, 0.1740621766831013, 0.22384071881581835, 0.18226980098120704, 0.09758323785515388, 0.5970271506873673, 0.5520559498491978, 0.563231100557742, 0.6299080682025235, 0.5244840191530287, 0.5826200967550983, 0.608405045624677, 0.5159493923870956, 0.5662855465234624, 0.1374678332232957, 0.12830180724711449, 0.09582438342700694, 0.10797907002801388, 0.11841506877243424, 0.10912162607648301, 0.11129005654415836, 0.10961472631887137, 0.1431247845615652, 0.17759977185100484, 0.18201222450127563, 0.15229218336311712, 0.19359106146585592, 0.30412460995276913, 0.1391987391552164, 0.21871444235421345, 0.21719969781362447, 0.18920485633324247, 0.46290415029652443, 0.565462932031171, 0.49131155196778487, 0.46207406154729913, 0.5713801764110322, 0.5064593721099515, 0.41321212810701546, 0.5747220541512652, 0.4809788725975195, 0.23850522080759684, 0.22631471828650884, 0.2845346294154002, 0.329397569695993, 0.41263937142698204, 0.27834139716743, 0.25056532041065216, 0.3534642090889917, 0.35564496625668907, 0.21035114516277065, 0.2104302525142563, 0.2375244901932536, 0.22134848653136996, 0.21622716704494716, 0.19318507972835175, 0.22855666713341505, 0.2098391706224163, 0.22524401512242165, 0.2208242041150157, 0.218817472625348, 0.197480462944419, 0.2028611795590034, 0.1879818957316387, 0.24656160116594183, 0.19067915367172616, 0.20390947282945504, 0.22173753248139405, 0.18497898258247958, 0.16463155773018046, 0.1841367229350015, 0.8967416034289452, 0.19890940795136314, 0.1674585863823771, 0.8682428248083501, 0.1596981312944361, 0.8790217174446718, 0.7324369852381183, 0.20959055306660535, 0.16586991629431214, 0.20862883783304675, 0.1655952370685524, 0.40859279254430536, 0.37646956450231805, 0.16353859963765482, 0.44405517491824653, 0.18664399385045183, 0.1842591427595781, 0.20858469837818727, 0.18383476910718777, 0.17561244917449637, 0.2053691163150061, 0.1848971954781493, 0.17775236850254728, 0.1892225006291709, 0.09323354906205095, 0.08905263494409688, 0.0896138279830806, 0.08508951000124765, 0.08794965654422049, 0.08764452811324186, 0.08834585220790958, 0.09489082911061208, 0.09650148302908679]}, "mutation_prompt": null}
{"id": "db3519f6-b725-4cae-bff3-4f7e1e2c0905", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "f073371e-8ba3-453d-939d-872216010367", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=60, omega=0.7, phi_p=0.6, phi_g=0.6, F=0.9, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)  # Increased diversity with more subpopulations\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.2) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "An enhanced metaheuristic combining adaptive PSO-DE with stochastic population splitting and dynamic inertia for improved convergence.", "configspace": "", "generation": 37, "fitness": 0.32954523374372435, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8087338883367652, 0.8156095942986671, 0.7840739947846465, 0.8179814532436024, 0.801709268061094, 0.7988290077180646, 0.8099757665594104, 0.8018127272053223, 0.8110827940856244, 0.6447204213132949, 0.6399323449250478, 0.6410083625557599, 0.6266842475576262, 0.611165993792615, 0.6523878808909473, 0.6270558965068149, 0.6468392558109202, 0.5947002982677513, 0.16925088401530264, 0.11274587017594384, 0.12396694873997827, 0.12947874798669, 0.12163788355952598, 0.15680571558525624, 0.15612226867761914, 0.1072521443582859, 0.11528729539082272, 0.12082901200731355, 0.10778476730700026, 0.09960605736894979, 0.09128661606732535, 0.12221130895605725, 0.1146055677827198, 0.10608337181780958, 0.12505684075214452, 0.10597340227101248, 0.970420191014285, 0.9699107214121291, 0.9725369009830989, 0.9692293992415003, 0.9702861483774061, 0.962506862699091, 0.9734882026323652, 0.9859785020624968, 0.9729276235424498, 0.6613158506894806, 0.620703191188539, 0.6588879148723896, 0.6605827677950133, 0.617943713456327, 0.6514112884653405, 0.5670832560182055, 0.5590363112035284, 0.6405924417444825, 0.7576291191058944, 0.7729714107471005, 0.7396034391571715, 0.25708854812686754, 0.25192358163799866, 0.20863531103440247, 0.7783868694672931, 0.6981990970497924, 0.23126448499758412, 0.24969554447978592, 0.28109782657479787, 0.12378996393079067, 0.17156009207407985, 0.18708830480177374, 0.14939063700905442, 0.1636500003218353, 0.21889691696763003, 0.15117897347058074, 0.2174046925355121, 0.11290681453109863, 0.1150180698372425, 0.19909711262941399, 0.24160750842050338, 0.12631840577101772, 0.18126088146379604, 0.004349092424613121, 0.21548167214990477, 0.02342842705399728, 0.02744055863319461, 0.02655453054442236, 0.03180171700175327, 9.999999999998899e-05, 0.005802388170082273, 0.025906399509906808, 0.0758289294576211, 0.10601552764675781, 0.08986459181209827, 0.03838555464909299, 0.07304917046725368, 0.11256714601011408, 0.09217602740590514, 0.023614172312869552, 0.13414388796196985, 0.06738890721706359, 0.06272832656547145, 0.10556375254229411, 0.030399322928593597, 0.031654799112185494, 0.06745182876086142, 0.12773796799211035, 0.16483740485731946, 0.10136220812369079, 0.16756435421852278, 0.1278886321352951, 0.14742301568029492, 0.12010744752315117, 0.3232128878405538, 0.18490221200061474, 0.08300067361128527, 0.17645175850467, 0.2007159825691348, 0.09453628918928858, 0.10297465462907529, 0.5723436119930874, 0.5376826390379017, 0.5649312518406494, 0.5587123497730215, 0.5522464783157619, 0.5076796749619518, 0.5693118393881349, 0.5849061312526073, 0.561668309204088, 0.10687123278858945, 0.12296107100156628, 0.10282078006000606, 0.16967291225010017, 0.09853015997934822, 0.14377429757920168, 0.10113394289857935, 0.13901925578465757, 0.10796122179655854, 0.15521344416887461, 0.14743529506133257, 0.16791969990488764, 0.23983794277918935, 0.21146998748104018, 0.13098942046297635, 0.2479507670772908, 0.23019973621435053, 0.2694852296656136, 0.5128001119743245, 0.4070443127481762, 0.5828183068799275, 0.36605538978352137, 0.36246444990520577, 0.37052391195332635, 0.47330772430075563, 0.5371712802276349, 0.5551726029743187, 0.23771820895338847, 0.3366488141253482, 0.33077772940674666, 0.3360676007623692, 0.2896537517267924, 0.22370039690379895, 0.3555358940453093, 0.4944473251574012, 0.3853747050327231, 0.22062722509240118, 0.20737238822487092, 0.18163815226604252, 0.22198249188133612, 0.21391357826630297, 0.20725856326259373, 0.20333035728691007, 0.20316999081310705, 0.20116582650434567, 0.21337612411907902, 0.2141179201377894, 0.18289167678150153, 0.20322541711546582, 0.22780451122189527, 0.18739391244322656, 0.20907816191658135, 0.2117569609058042, 0.20175819946291262, 0.8133242050916517, 0.8179762677470369, 0.8540846884403452, 0.8520771215824852, 0.19626332830536053, 0.19504275171925534, 0.1577513914882247, 0.7987815610903364, 0.8443589643868047, 0.6293575287142936, 0.20697803371982437, 0.20725045405160225, 0.20504520317454356, 0.16740991671173766, 0.754669764018298, 0.10397367581686445, 0.6581566180121767, 0.8026274685260983, 0.2031766474642145, 0.17182881172852815, 0.18629701567500656, 0.18763632222333715, 0.1923258312762398, 0.20472573054248555, 0.18865460732777184, 0.19019693672111793, 0.17158196814840954, 0.09527744825531537, 0.0877915870235163, 0.07861264981135951, 0.08487437613751458, 0.08299527134978746, 0.07897525636054248, 0.08244950113004945, 0.0907352248337383, 0.08142869126607688]}, "mutation_prompt": null}
{"id": "348b3e65-c9fd-4946-9335-29488df129a1", "solution": "import numpy as np\n\nclass ChaoticAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n        self.chaos_factor = np.random.rand(self.pop_size, self.dim)\n\n    def logistic_map(self, x):\n        return 4.0 * x * (1 - x)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop) \\\n                    + self.chaos_factor[:len(subpop)]\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n                self.chaos_factor = self.logistic_map(self.chaos_factor)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "ChaoticAdaptivePSO_DE", "description": "An adaptive PSO-DE algorithm with enhanced exploration using chaotic maps and resilience to premature convergence.", "configspace": "", "generation": 38, "fitness": 0.10843706349822245, "feedback": "The algorithm ChaoticAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.13.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.16459736803251068, 0.19153938227743184, 0.1686100571303074, 0.23281211977859007, 0.19866557072109803, 0.23578730873507903, 0.17055218727241572, 0.17342119478748175, 0.16857806130897512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04384825737236986, 0.06358869727044725, 0.06049908129341508, 0.062093487647194134, 0.054305807459926636, 0.06499229344291302, 0.038205327306393366, 0.054264853825365944, 0.0498658536346025, 0.039950251374418655, 0.04422984133439711, 0.0677237672970652, 0.03356792982259138, 0.03157387252735877, 0.04244968282704431, 0.041160507042188876, 0.03752541890369687, 0.037791626601011874, 0.9529484254251187, 0.9706070379967008, 0.9602785971234405, 0.11686504376304618, 0.12740860615511718, 0.44374844983344397, 0.12574524804844245, 0.15394029148371935, 0.17969852455340274, 0.12611607354293064, 0.10533724284140022, 0.10492235173542208, 0.10354727785865525, 0.10361793158183408, 0.08429640014384188, 0.08086935976710463, 0.08274549768499129, 0.08618444360776434, 0.1562698685821935, 0.13277569041859338, 0.14001888959558495, 0.12123283118996497, 0.12115769007506894, 0.12347073753602922, 0.10166549395045255, 0.1872833881919418, 0.1126437549973176, 9.999999999998899e-05, 0.006291683610998522, 9.999999999998899e-05, 0.02342785969262462, 0.0029805898583401547, 0.0809512571664458, 0.05937784510995714, 0.026295199521172985, 0.005423775168733158, 9.999999999998899e-05, 9.999999999998899e-05, 0.007172489530008042, 0.048201129868818526, 0.0005556859564328498, 0.0013940508066094814, 0.016879915314679805, 0.02965679556780998, 0.001864616898755056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05329906243019211, 0.032924381751535337, 0.06648104543981503, 0.014150988624413552, 0.010763980837985021, 0.07546008104264001, 0.021853456896724688, 0.05074913174840967, 0.06893583176190676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051506659365231355, 9.999999999998899e-05, 0.0033020537002296235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2045310682691226, 0.19922681053425628, 0.1986792108876706, 0.24930776795817078, 0.2444695775475001, 0.1794446699661154, 0.2527693100461821, 0.1628941874588551, 0.20042836833568067, 0.048943573004988306, 0.05528836747071986, 0.052078744368563856, 0.048642430979951135, 0.04959552421156932, 0.04215731257270927, 0.06239012040587277, 0.042426515145291166, 0.07556221864675772, 0.11799817495761433, 0.16542735198797853, 0.12938294165802744, 0.1356747328240797, 0.14480123166011216, 0.14131001475106875, 0.15835831634637365, 0.14340150381180816, 0.15538528913103544, 0.1777333659601964, 0.16739434212499216, 0.18060456544994763, 0.16233055353933634, 0.1418673036971706, 0.14877669027924856, 0.16787247638565694, 0.18258547051902807, 0.156505092309698, 0.10968235181424257, 0.11672457173784512, 0.13319787916015957, 0.10106066887645992, 0.10801043664122112, 0.10256248285959069, 0.11086193888859597, 0.11405909139504766, 0.1094312269518567, 0.13175162063256196, 0.14437258241260864, 0.1906800628190075, 0.14638679415695754, 0.16530829331046004, 0.1399466157001794, 0.14536554657560208, 0.15780604035939194, 0.16060071526672948, 0.14471617217878008, 0.15073148930889058, 0.15848739547269675, 0.1689821192732719, 0.15729168598822485, 0.12753094740304838, 0.1492152900046685, 0.159306903973905, 0.14943285191766698, 0.15454055497321662, 0.15972548071780257, 0.12356196583833423, 0.143970024679269, 0.1566082950958515, 0.15603922738684195, 0.15610978759260874, 0.13201501771634416, 0.2280677520692891, 0.2245587201358732, 0.16801263789256626, 0.17318816644834245, 0.13067060328446112, 0.09959669915502467, 0.1452774248197236, 0.13044093621181962, 0.2213230888880905, 0.24289767076641033, 0.16754377848341262, 0.17293117935203917, 0.19094791246486487, 0.18185621618854164, 0.17390116695833968, 0.1877622389215512, 0.19469420705131357, 0.17976356756526257, 0.1974558311495691, 0.05216138480508237, 0.06974609947783517, 0.06598300028129944, 0.047655466326399276, 0.05060600503344126, 0.05458857047638921, 0.06788497971715568, 0.07179582630128223, 0.05383673215580442]}, "mutation_prompt": null}
{"id": "053a5ca8-4165-4330-ae62-069a2a9f7cb1", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.6, 1.2) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 3 else np.random.uniform(0.9, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A hybrid PSO-DE algorithm with dynamic inertia and mutation adaptation to enhance convergence and robustness.", "configspace": "", "generation": 39, "fitness": 0.34520364830169087, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8549346080969742, 0.8381695151809313, 0.859568160900594, 0.8476741554525073, 0.8356493086316309, 0.8513860658306417, 0.850881478463738, 0.8530414352586984, 0.8458237612897223, 0.7053461201745117, 0.690570147815099, 0.7199680023830584, 0.7395556433985072, 0.6711755267541866, 0.690007747382201, 0.7152672066035455, 0.5973965274214447, 0.6829090973252722, 0.12735856536740287, 0.11049772998587992, 0.12529039033070444, 0.16845354539237145, 0.11633494394687882, 0.4584872145376264, 0.1451842668421487, 0.13929247011699375, 0.15248698555410833, 0.14552727043587255, 0.1348720337492052, 0.10856283825944812, 0.12149822157859103, 0.11306437147805792, 0.143157730157372, 0.1025542096388381, 0.13454252707401193, 0.08902471411440915, 0.9574617296705308, 0.9886182237159105, 0.937007877133706, 0.9579513859033632, 0.9465588044588733, 0.9877425395838946, 0.9876922875529991, 0.9569167683008037, 0.9615086299135069, 0.6554096343736973, 0.6560680271209578, 0.6927040216023609, 0.6717315597886855, 0.7041886671521427, 0.27088891568724016, 0.4025252140300374, 0.6275363606839846, 0.7121976335518811, 0.8099668484024577, 0.7969597321772459, 0.8486010843153908, 0.37015922996611383, 0.27306456930018586, 0.8598330404139692, 0.2317025693509679, 0.8557048195900323, 0.8527924156566229, 0.12497937027090333, 0.14141223321049878, 0.21083847947131396, 0.275907446911391, 0.17111500645935906, 0.1242718739299411, 0.185489409123762, 0.15197096417821743, 0.18437176324756333, 0.17777264819512673, 0.19905241903167536, 0.2891238601952242, 0.16760211000110936, 0.17831224643845522, 0.17435222516299942, 0.22036293760134318, 0.20359797313742933, 0.16678808341516327, 9.999999999998899e-05, 9.999999999998899e-05, 0.12794840564337373, 0.047251169475933996, 0.00755112387642054, 0.03638248578588976, 9.999999999998899e-05, 9.999999999998899e-05, 0.05875179539272435, 0.12644313963960085, 0.16842987786477626, 0.15400264147369502, 0.10909323573403473, 0.11726690660636674, 0.08699473673956148, 0.1522470588524455, 0.12109299433026188, 0.16584207217739821, 0.12198710941963908, 0.15143805230043728, 0.0817823826887285, 0.1185482624251204, 0.11711996065013897, 0.29673963272999115, 0.23657020067498302, 0.0932491355234808, 0.10710278610414248, 0.1844887749760824, 0.2190442608940718, 0.1308421038960379, 0.08691361111430451, 0.2550568494048795, 0.14648066118552994, 0.11877495658901882, 0.15302012143009158, 0.1206722641145076, 0.5730963365906273, 0.5935727167008651, 0.6003474249265586, 0.5913862766381988, 0.5793671268458789, 0.5675521613902128, 0.5715071346946806, 0.5848671277781354, 0.6019670522726199, 0.1374540886179333, 0.12384394521131703, 0.11663221802232804, 0.10840677607520177, 0.1676240603296394, 0.11933728974223157, 0.15993422042930938, 0.5987359345922427, 0.13493417527034612, 0.2017847226940216, 0.1403867391997684, 0.22352525162090653, 0.2436348728250297, 0.19190704799288727, 0.16247273802306517, 0.48702310830163764, 0.23392677504055936, 0.16912189908091746, 0.5020013639239462, 0.4551717418242598, 0.4459827873785933, 0.4300413888889437, 0.2648611734852391, 0.42580963996256116, 0.658186965102218, 0.6743996390705975, 0.6507503110946049, 0.40588834008899877, 0.2578712662362578, 0.34109643004858936, 0.2821242362032864, 0.3420919859426985, 0.25791332968578473, 0.3911233955445085, 0.34045094079826266, 0.28917915195657684, 0.2535215543359687, 0.20768772488563936, 0.2568541697738693, 0.21213434027212874, 0.2325738468110522, 0.20794730100569336, 0.21282371809373213, 0.2039873126316034, 0.2270074117244275, 0.22706055089500943, 0.21752300453061657, 0.21355499908015074, 0.2031495558700277, 0.21263305194255389, 0.2137074853945342, 0.21002419083093216, 0.2379827353731343, 0.20581692624077264, 0.889481595146979, 0.1737469711314329, 0.1857204402748236, 0.8882900452167812, 0.19919173516998812, 0.1462816292885296, 0.826973417091891, 0.8233425402477587, 0.9054394053705858, 0.8632056231178955, 0.16748422517259587, 0.20700228074865623, 0.2091392770477185, 0.15097068142944503, 0.15088244289167452, 0.21040659235184467, 0.10346462703505077, 0.6015048947854995, 0.18584509480797617, 0.18696337630318927, 0.18496220050406287, 0.17561528460171738, 0.1959397022852999, 0.17696417134247933, 0.19405329142223993, 0.17887145416434524, 0.17121048381054826, 0.09663284125244065, 0.09912164739119822, 0.09537603136879247, 0.0889617418202946, 0.09003757107572818, 0.08368527643214452, 0.101306107144301, 0.08395209833955264, 0.09082110172898561]}, "mutation_prompt": null}
{"id": "c1c57479-dfa3-474e-9219-b8ba276f9f72", "solution": "import numpy as np\n\nclass HybridPSO_DE_Ensemble:\n    def __init__(self, budget, dim, pop_size=50, omega_start=0.9, omega_end=0.4, phi_p=0.5, phi_g=0.7, F_start=0.5, F_end=1.0, CR_start=0.7, CR_end=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega_start = omega_start\n        self.omega_end = omega_end\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F_start = F_start\n        self.F_end = F_end\n        self.CR_start = CR_start\n        self.CR_end = CR_end\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 4)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega_start - (self.omega_start - self.omega_end) * (self.evaluations / self.budget)\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                \n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 4)\n\n                F_dynamic = self.F_start + (self.F_end - self.F_start) * (self.evaluations / self.budget)\n                CR_dynamic = self.CR_start + (self.CR_end - self.CR_start) * (self.evaluations / self.budget)\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + F_dynamic * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < CR_dynamic, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE_Ensemble", "description": "Hybrid PSO-DE with adaptive inertia, self-adaptive DE parameters, and ensemble learning for enhanced convergence.", "configspace": "", "generation": 40, "fitness": 0.17652896460210743, "feedback": "The algorithm HybridPSO_DE_Ensemble got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.35628152685971204, 0.36190905582176724, 0.38033095154796426, 0.4494393984720385, 0.4083479124956968, 0.4731575386897263, 0.43696190070414, 0.43739294408118, 0.39125081726354716, 0.1759780219258923, 0.15855728837866767, 0.10691457141656668, 0.06352679193112798, 0.10189524396996275, 0.09019212396603693, 0.09459445313377923, 0.09511180122439944, 0.1156725824621272, 0.08457356092881396, 0.06750384513999963, 0.06091104375341949, 0.0625548160358862, 0.05920514323535275, 0.0686597939061212, 0.06883671554343695, 0.06572430419478026, 0.06986963952300151, 0.05857418282710236, 0.04098651062481129, 0.05487223219672288, 0.05498058854653953, 0.05276272012810568, 0.04668650470283142, 0.05669303336067788, 0.04775137982191957, 0.04728146094267727, 0.980961345100473, 0.9915613130922968, 0.9895961208647513, 0.9792767917314642, 0.9642373719609697, 0.9783395557110851, 0.9826874947986006, 0.9766422469291794, 0.9736385271340147, 0.19730239399553307, 0.20860438254484948, 0.20028532334493743, 0.18173309812778815, 0.20454949784055287, 0.1716062442667391, 0.19289583410808775, 0.09591174812456116, 0.1780434659007769, 0.1725207129563947, 0.28973358351848943, 0.16615804380858878, 0.26774320310421995, 0.3689083689546766, 0.30417581039359554, 0.3705172131704284, 0.31489606081843635, 0.29232621526121094, 0.10675103389721807, 0.06588286594367343, 0.09285555182795213, 0.08933094427682775, 0.07910855666233274, 0.0782848712897527, 0.08539647481320622, 0.06092566265603838, 0.0826840912578205, 0.0514472428512599, 0.06758221441169954, 0.07814667953826171, 0.08768124167506886, 0.04222109862117618, 0.06038416172266203, 0.0696351403241322, 0.05166831319258003, 0.06869058598608879, 9.999999999998899e-05, 0.0004345481044607524, 0.00010397899561254142, 0.011657289734361642, 0.0005443407673862977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09311064874161712, 0.011625021955024017, 0.06716872339840863, 0.06953831761650475, 0.004114927623114051, 0.017611939340824057, 0.06345197175156392, 0.05174542925357606, 0.05054883910855168, 0.012458666108632888, 0.013471686559629048, 0.0187446164943762, 0.010658744981912993, 0.018912320889341583, 0.024379352882055394, 0.012138135995061194, 0.026973086315181694, 0.015308547598940514, 0.07460535579220595, 0.05849417302167326, 0.020674022037388773, 0.05642155561133966, 0.06775042234158446, 0.06433127150920359, 0.024527319476649656, 0.057019876674678005, 0.040078125291096556, 0.320250422711861, 0.32499296604050343, 0.3075861659100013, 0.35519598687997234, 0.30271210080754185, 0.3514137983261798, 0.3134629581946824, 0.32008587068336924, 0.3429100953467279, 0.0747891800034648, 0.07833801577677513, 0.0756191805166121, 0.0807326047517527, 0.06759404224700971, 0.07765971308830899, 0.05448085805864378, 0.06418033745426333, 0.059407695822483064, 0.14375896065363136, 0.13288926402040746, 0.1513529668476058, 0.15746542339859948, 0.1707537706202793, 0.1529419430656348, 0.19100341905371876, 0.17532786738753114, 0.13949074574329312, 0.22697653708676024, 0.20750490141978872, 0.2715176084487334, 0.22976375767434742, 0.17640490680159016, 0.21543373917522035, 0.24838115273455663, 0.23941112416893962, 0.17573814318339753, 0.16480189409037083, 0.1755693419718345, 0.1543167675686724, 0.15154706263499962, 0.19598013241788448, 0.15002162017211218, 0.1635954297135147, 0.18974599878105824, 0.17993512318064442, 0.16720134893434457, 0.15971159278806313, 0.16247503935379615, 0.16716310879557916, 0.16192632380766137, 0.15490426563859705, 0.16691350433187235, 0.16748636150922924, 0.16424066950039928, 0.14453647491753785, 0.1317659857679171, 0.13699213153206025, 0.17269698516009846, 0.12957761634896925, 0.16715332515111736, 0.15862186957171176, 0.14050412410226631, 0.14324154153458368, 0.17144654105321055, 0.1571466680759167, 0.14505156017674403, 0.17143994537002305, 0.17006848102090422, 0.14544671363287653, 0.28633274281889975, 0.31359300218178154, 0.163390725373727, 0.1672376193237527, 0.17141304478955788, 0.26682838375651396, 0.13690996105692954, 0.16374565383517092, 0.2831307967167709, 0.2004964536801338, 0.20217771248140204, 0.18795402302684028, 0.17164064369181997, 0.18189632125085087, 0.1792187165060234, 0.1883764408892078, 0.1919281107422457, 0.19205704094500964, 0.1803631231759849, 0.18086769386248147, 0.17874478098270852, 0.05836493650528374, 0.05669495785300538, 0.07313127707589062, 0.056072698573687574, 0.06139356650295613, 0.052855122892993545, 0.06321509128309721, 0.0621045696191912, 0.058793015711585794]}, "mutation_prompt": null}
{"id": "34ca7228-ae60-4397-9408-47c826a03de0", "solution": "import numpy as np\n\nclass HybridAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.9 - (0.4 * (self.evaluations / self.budget)))\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridAdaptivePSO_DE", "description": "A hybrid PSO-DE with adaptive subpopulation management and nonlinear inertia for enhanced exploration and convergence.", "configspace": "", "generation": 41, "fitness": 0.34923529477346843, "feedback": "The algorithm HybridAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8541002757148014, 0.8471546902656213, 0.8488340799751569, 0.8522373918010837, 0.8592416528755328, 0.8462890594931217, 0.843403907682676, 0.8414083534438653, 0.84608514552271, 0.7246866026078406, 0.7197989406017982, 0.6980007713789866, 0.7099033615678247, 0.70561820812942, 0.6759919302442639, 0.7296986032474991, 0.6804937939692131, 0.6898354953344918, 0.10332439621068679, 0.1253203377451475, 0.1422696453204968, 0.1414106924803653, 0.12397074990179513, 0.12695552647033015, 0.14067234484270397, 0.1314838311166937, 0.12493438282793923, 0.10365297550620634, 0.12740598585757978, 0.11098750015285863, 0.14538741740236583, 0.10559701731411786, 0.10716679808865215, 0.10950346050848092, 0.1064407615119699, 0.09391629033276772, 0.9361696696048725, 0.9812326451760275, 0.9403898304641595, 0.9386224017718056, 0.9785215562379926, 0.9732033264293851, 0.9592262245341407, 0.9664212767706925, 0.9740674983697224, 0.7318490989101699, 0.7447082632286176, 0.627514694320518, 0.6843962092952434, 0.7302047968954398, 0.6654883834653873, 0.6608733642462237, 0.6426707943053777, 0.5019820603435713, 0.8404283868113196, 0.8493239808876867, 0.8502714145326951, 0.2730876496328938, 0.8420821404189067, 0.8429337909189414, 0.17130281509620615, 0.831206625839417, 0.23095670561665627, 0.17002374114542818, 0.1526134643858591, 0.1489977863082419, 0.41671577128074033, 0.1650034822502897, 0.1606678214459707, 0.16569491960487526, 0.1309417252456726, 0.12883446599758808, 0.15789177505025853, 0.2033582288499236, 0.12973800746197228, 0.1858697419162687, 0.12984608373230877, 0.13259172876484715, 0.22573265129354203, 0.20172248671692328, 0.19189743235968104, 0.060182488033318604, 0.049576530323228174, 0.1646434575726906, 0.010013770276885214, 0.13227683850087613, 0.022755105812340526, 0.035694216634816645, 9.999999999998899e-05, 0.008274863413155975, 0.08037218111742295, 0.08217231747160969, 0.17556739384248288, 0.15782466933583295, 0.05373006652433465, 0.0944182188270164, 0.10049707461290946, 0.1482024777968447, 0.10498705930549312, 0.15627274501166033, 0.034139351074431, 0.1274308607990412, 0.2358433437161227, 0.1989849962888769, 0.1315801636467695, 0.16559756886027555, 0.25434731394170274, 0.06886378670871562, 0.4000127164737982, 0.15746817626658216, 0.1831053724381101, 0.1877534003133835, 0.1894886296300773, 0.10956667693319755, 0.09204564563190887, 0.25144650879668784, 0.16018580873956767, 0.553226159285949, 0.6077971861658856, 0.5919420649584615, 0.6606150304736751, 0.6313370193013278, 0.631662526449304, 0.5792867676421187, 0.6202301093080852, 0.598958485904055, 0.1183987658261969, 0.1346037617498892, 0.11500725421293378, 0.17052969020504805, 0.14268131223884506, 0.1091921528687968, 0.12431148465384667, 0.11524079879920901, 0.11236962818285878, 0.18636092247982783, 0.17266338710889917, 0.13880575529421024, 0.6315503233473432, 0.1537667034986453, 0.1290669732060281, 0.15451460320162824, 0.20447667131199798, 0.2376122319848789, 0.5720302703765934, 0.4881984843032183, 0.5645755017861442, 0.48387949934705665, 0.6575593192922505, 0.5079054008405073, 0.4832158588011657, 0.5144078845565907, 0.6407702912106183, 0.2975700311034204, 0.34839204398420065, 0.2848268818438001, 0.37723117197951384, 0.28300098655363415, 0.3186905470230358, 0.5732645942817121, 0.38037865025709794, 0.470746432743375, 0.2011866137481697, 0.23477973598854507, 0.22462835584455565, 0.23568121110781326, 0.21986444942870587, 0.24232649424992758, 0.2200235673320523, 0.2286567233588055, 0.21770709527043197, 0.21097085466086707, 0.19350897535719302, 0.23827799667946192, 0.21377631402764696, 0.2087403126115258, 0.19206989335860525, 0.22434386509793436, 0.19707107323041073, 0.1888754654929169, 0.1847289062101607, 0.18297530867750345, 0.15247581932947973, 0.878029305616419, 0.20035963985821104, 0.8243610349203496, 0.1588253614729227, 0.855895406755278, 0.7996759608372372, 0.8523496448286385, 0.16542092279215026, 0.20582195536357872, 0.20800044065366952, 0.815707091933755, 0.16521644618788656, 0.21013183865275697, 0.8715698699898529, 0.20757586796406347, 0.19115029678562934, 0.1808001250727529, 0.18075816148460377, 0.18306493976186355, 0.18474584627216362, 0.18086999932772618, 0.18093556405178612, 0.18035593536443595, 0.1750871144562559, 0.08591089457421819, 0.09762749797788906, 0.09299451459587982, 0.08052550419716409, 0.08646264437592655, 0.09159473642590288, 0.08282297126145399, 0.09364575125967345, 0.0851286449368015]}, "mutation_prompt": null}
{"id": "9e54c70a-92f8-4db8-824f-4e3503a838ff", "solution": "import numpy as np\n\nclass HybridPSO_DE_Adaptive:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Dynamically adjust subpopulation sizes\n            self.subpopulations = np.array_split(self.positions, np.random.choice([2, 3]))\n\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                # Implement a linear decay for inertia weight\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE_Adaptive", "description": "Hybrid PSO-DE with adaptive subpopulation sizes and inertia weight decay for enhanced optimization efficiency.", "configspace": "", "generation": 42, "fitness": 0.3421462379584799, "feedback": "The algorithm HybridPSO_DE_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8535764804581576, 0.8482904932614959, 0.8356867982949738, 0.8460486997700508, 0.8503616462432914, 0.8537086033632881, 0.8501462092464165, 0.851425304671904, 0.8409571428353682, 0.7139201467142278, 0.6747202407852341, 0.6366941845378418, 0.688935946829426, 0.6144303026157565, 0.6234722222421825, 0.6813305264630856, 0.6815658216994207, 0.5585029859677586, 0.14849013885104323, 0.13221560119941156, 0.13535209315952212, 0.13010560728808196, 0.15278206501923253, 0.10621573301550757, 0.13547175464713368, 0.13224710794357175, 0.13207327173008976, 0.12553766933555666, 0.12366086999281012, 0.10590668788278002, 0.1322475119531753, 0.10485915991189687, 0.10252791971673192, 0.11568023365667957, 0.13152363764022068, 0.11322398969352088, 0.9645211403260509, 0.9881665932738545, 0.9659560818604411, 0.963195700256954, 0.9662378176139489, 0.9654885912262285, 0.965733059303754, 0.9515566946622016, 0.9537243089837375, 0.716733851187523, 0.7107673497752152, 0.7144346742798157, 0.7444164589985708, 0.7053894764636218, 0.7190447525804105, 0.7372161856788471, 0.5704428826395136, 0.47157035075294895, 0.8460231205590285, 0.2234225299679965, 0.225738409598638, 0.27402154786902067, 0.27239937753349097, 0.269796039984881, 0.13549857622324635, 0.8373936624195357, 0.23338705002422433, 0.20865462131168344, 0.15201265271370246, 0.12417235281936412, 0.17903650647807223, 0.3603934465811517, 0.18501496366658754, 0.16295627507637633, 0.1532399147113438, 0.16363675468507188, 0.11486133374811525, 0.20057635750944658, 0.130209439291043, 0.12960496081642725, 0.20585696993327562, 0.2537062300649582, 0.21239211040823025, 0.24707626520103754, 0.13711431772424132, 9.999999999998899e-05, 0.1042450858349192, 0.013964347279639466, 0.08253762013600496, 0.00944473281081959, 0.015477000355459514, 0.07578132933392911, 9.999999999998899e-05, 0.0011311266219150573, 0.18219829143440824, 0.022802030007411656, 0.08621624312138432, 0.06808931761498338, 0.010117963028739685, 0.03616361247509581, 0.1336107552755348, 0.07265172643760853, 0.04166463302916912, 0.17860526042029523, 0.31242753950396307, 0.16146383779040918, 0.08904741989645604, 0.21776429311255763, 0.08920189681480772, 0.14204981309633824, 0.2087366777185804, 0.12428708445077208, 0.22714597400364733, 0.15799037175089292, 0.33447169094489226, 0.1259371519896435, 0.18895637814344368, 0.1223285205419592, 0.18070449256143273, 0.24657152162823548, 0.1663955156917276, 0.5673065046353769, 0.5578886159680723, 0.5346496569369747, 0.5041458755328275, 0.5571311130037915, 0.5934053721082957, 0.5519337484061573, 0.5938976395148841, 0.5834754728477893, 0.1424295119464032, 0.13687463240082942, 0.08810503847563289, 0.1343430541803209, 0.1279987108542222, 0.11478167092818348, 0.1350840697893576, 0.11672223214565602, 0.1269413043507417, 0.12817468475986593, 0.16451766803253776, 0.1818156828038262, 0.46251769663384434, 0.18109539232737548, 0.13300124456221474, 0.15419312317602796, 0.2014256464137365, 0.3488378188161222, 0.6201395886803092, 0.6194106109115078, 0.46014846913006735, 0.5242070842864374, 0.48925532710898145, 0.6414684477589281, 0.5372335626546179, 0.6649647028713139, 0.6316558102355585, 0.344013144412441, 0.27678311266705014, 0.2423169289055982, 0.37664368809280024, 0.38880250919579884, 0.27431438715941814, 0.5580484002847037, 0.38258590419136385, 0.25266863543278717, 0.24495053840844616, 0.21265187431818233, 0.19853826671433117, 0.2356099420262323, 0.19866658556034622, 0.2079844743847532, 0.20013139898725174, 0.24171684791207249, 0.25811420610265967, 0.18969762913973065, 0.1935325421511388, 0.19333294265840806, 0.24502525900918426, 0.2460755057728733, 0.2235420156609127, 0.6440277512801182, 0.2166119599879649, 0.17985407303108936, 0.8438054472911829, 0.155674916514573, 0.15313775003070573, 0.8754946476487994, 0.8632984502387617, 0.16649505089350858, 0.14070319823500888, 0.8681627149552518, 0.8788085777927287, 0.6433748545983208, 0.20426794185013264, 0.36360339863354774, 0.8527663916278162, 0.16708469642200563, 0.20852212679635274, 0.593714284123563, 0.7878731674097943, 0.5640474093444708, 0.20354542818100285, 0.17074962093021073, 0.16945605652595463, 0.18050723410052905, 0.17218774747853272, 0.1834969790204708, 0.1762608596698707, 0.17205755282301038, 0.19623123265326703, 0.08231484990307214, 0.08745881051027193, 0.0890879529173435, 0.08725488078363708, 0.09449476423915892, 0.08875043527317539, 0.09203030523938394, 0.08655202948409368, 0.09583050597795373]}, "mutation_prompt": null}
{"id": "7105c0e3-e2ff-46c8-a827-e3e4d50acc5d", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.5 + 0.5 * np.random.rand()) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Hybrid Particle Swarm Optimization and Differential Evolution with adaptive inertia and mutation strategies for enhanced global search and convergence.", "configspace": "", "generation": 43, "fitness": 0.34797266577168173, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8564408418345972, 0.8612375997407528, 0.8580342838206733, 0.8615081878768588, 0.8474671144679939, 0.8638345039213498, 0.8572309324463944, 0.8520200866776433, 0.8609349778985728, 0.7248547047314116, 0.7170609819520113, 0.7079363076062825, 0.7317600189211875, 0.7416309319698726, 0.6948948907087862, 0.7097741285690722, 0.705259943990268, 0.6458598250898208, 0.12057256295899443, 0.6911257766956156, 0.1334294086879878, 0.13328058687635624, 0.14665097611712918, 0.11757428801398073, 0.14399238280908488, 0.15324669928128076, 0.1363259969544972, 0.11320026846768783, 0.13305763861449027, 0.14354486561501567, 0.10697862016542936, 0.11079332990123625, 0.1268514718461773, 0.09490777519049165, 0.12385296927640543, 0.11235602927362764, 0.9473138054548536, 0.9886150955044023, 0.9161009952782342, 0.9508353327020498, 0.9525950157562912, 0.9877374895034985, 0.987690192652937, 0.913744453031809, 0.9632694163793581, 0.635768871159258, 0.6143121161377294, 0.5791697365851358, 0.7453766042407934, 0.6638435207925204, 0.6726682399732179, 0.7033184652473956, 0.46633995789323446, 0.6772623016612856, 0.8837664974289086, 0.22430688035905444, 0.857354698433249, 0.2751765291435557, 0.8358857117120055, 0.8534184110459581, 0.8457886615570949, 0.23193856357058296, 0.8750049766802783, 0.21724173533753766, 0.1463243741292869, 0.18604757711368725, 0.36967815262014037, 0.15371271829752953, 0.18506348279939366, 0.1300017905547285, 0.12966277649536462, 0.17724815761865975, 0.16924512975747608, 0.15260855637538095, 0.1264521273332614, 0.1297153626313713, 0.17304380848491652, 0.13227696482860096, 0.13946100268149986, 0.17291466598290317, 0.19074541265048717, 0.0005671570140109994, 9.999999999998899e-05, 0.010173859262421314, 0.002953042038824405, 0.06523057010935285, 0.010231627058228554, 0.08168728213203069, 0.08673320367930915, 0.13567453281851416, 0.14672089608511107, 0.08935799799490307, 0.1513250953570725, 0.08562605788246214, 0.085507363619032, 0.12182817381931232, 0.08267138398199991, 0.06972691712910306, 0.21237241791917827, 0.05727279406671737, 0.13178976204408066, 0.1822593768414532, 0.1167842916069961, 0.08787423056980792, 0.17317732755061843, 0.21834219698116686, 0.15678888358981347, 0.17435264127602934, 0.09755512038833858, 0.13653206618170044, 0.1909813793640609, 0.2535244515662948, 0.2063454735024658, 0.1786862761751956, 0.16196963910704765, 0.16100743276668306, 0.10456146602198402, 0.5848739832425991, 0.5959394101731369, 0.6234334845813791, 0.5880361657247717, 0.6486925314276877, 0.528866658659842, 0.5583936708620765, 0.5512598972460254, 0.5609919117598821, 0.1781857263431118, 0.13316923314598317, 0.11556614236183982, 0.11323836098400075, 0.16845766719293354, 0.1330676949909737, 0.11591177578555034, 0.16659788747805782, 0.11636252184268525, 0.21523795083831943, 0.24732871730238992, 0.15294531206042206, 0.14152810424161977, 0.16591986008277582, 0.4376585059147604, 0.3045438603823618, 0.20314734262483924, 0.2664375511070831, 0.5849356419767975, 0.645056231157966, 0.4134734341437416, 0.41018014709896533, 0.529725372052783, 0.5779216192989045, 0.5922866076334435, 0.5717318027812122, 0.40191852916799375, 0.2470031490308766, 0.37653194540965984, 0.30873489023638145, 0.3272433262480735, 0.430980879263422, 0.33680749721570524, 0.3548124097069044, 0.2840862616597577, 0.34834346629880075, 0.22580528575437542, 0.20543856405746597, 0.22233844229003308, 0.1865027648439863, 0.2189755193907411, 0.20490735253370218, 0.24896548443084277, 0.2257244847105484, 0.2087764000707114, 0.24754915675264133, 0.2420118717873555, 0.2196567536399221, 0.6981448632288809, 0.6480304817176346, 0.20870990104386322, 0.19799691798499797, 0.2176912892410281, 0.22076840142337883, 0.8946530731975817, 0.1835911159781758, 0.18552789266878156, 0.9131753408157722, 0.1990739988541581, 0.1927608817517128, 0.8773307350212954, 0.16972787433838388, 0.2091969976659519, 0.7336037645155562, 0.2051898644842335, 0.20484401268179475, 0.20767030706515388, 0.16598678444768444, 0.16516145886723066, 0.10446541329321224, 0.7621609298785079, 0.5363108632569961, 0.18883743937195763, 0.19791050959688172, 0.19738087535519377, 0.1732488270928476, 0.17718425455153297, 0.19503435466913943, 0.1850863634596721, 0.18422844815759276, 0.19772127923603455, 0.09240552245719469, 0.09796428272625324, 0.13357627125391736, 0.08605670309476132, 0.08414580868748889, 0.0784902546916797, 0.0884949455809576, 0.09604821111805473, 0.0944704411120274]}, "mutation_prompt": null}
{"id": "b6ddf38f-37e5-41da-b7cc-b70a44c9a2df", "solution": "import numpy as np\n\nclass EnhancedPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.6, phi_p=0.6, phi_g=0.7, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget)) + np.random.normal(0, 0.1)\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.95, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.85, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with diversity control\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    if np.random.rand() < 0.1:  # Add randomness to mutation strategy\n                        mutant = subpop[indices[0]] + self.F * (subpop[np.random.choice(indices)] - subpop[indices[2]])\n                    else:\n                        mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO_DE", "description": "An enhanced PSO-DE with adaptive parameter tuning and diversity control for improved global convergence.", "configspace": "", "generation": 44, "fitness": 0.30057510044164154, "feedback": "The algorithm EnhancedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8135874955549143, 0.7974771384113737, 0.797534425955146, 0.821936830410392, 0.8044421969787356, 0.8391546561641607, 0.790343358030768, 0.8029849232959128, 0.8197716085484603, 0.6216088323354563, 0.6109619626050496, 0.6884455952170497, 0.6264640637289551, 0.6494288039833891, 0.6469466589489339, 0.3633859009577348, 0.6499249748010296, 0.6426083039110815, 0.12139635023459883, 0.12293613252180735, 0.10899101403105982, 0.11289056743861714, 0.1386557998112763, 0.1301503722182582, 0.11618078418716193, 0.11421291216425, 0.12655903760493714, 0.12277993630193318, 0.09810296420699105, 0.15771046237533615, 0.13777959698508258, 0.11833282556529301, 0.103569175863654, 0.10909735211597038, 0.1191235951287013, 0.13309271593977623, 0.9809417285209795, 0.9704839063548224, 0.9784285351226036, 0.9537135692587619, 0.9828988737129428, 0.9689190069350007, 0.9792847278286857, 0.9697542625772916, 0.9727817003238558, 0.4194387103016991, 0.6761451610385613, 0.6691704876324959, 0.6357945793810778, 0.15044467547983897, 0.5448625345014424, 0.6162534584059784, 0.6647645195936983, 0.6875900814716691, 0.7992443929180668, 0.22298203435196873, 0.791390346348282, 0.20954137789750404, 0.11630988211582993, 0.1999462181685404, 0.2097922392229199, 0.36248938837057887, 0.20965395699998834, 0.2277043985077315, 0.16334275264331244, 0.1671330215381025, 0.1925124371597604, 0.12310428654391359, 0.16839944353656788, 0.11720953053957273, 0.1449302373617869, 0.16252982550522843, 0.11750628232207272, 0.14319388701430957, 0.11255836542825215, 0.1919780236402615, 0.16898495574099326, 0.17947167204553482, 0.18772766961046583, 0.19999909415210093, 0.20098043027803703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012685281908600743, 0.022836974197960047, 0.04405353681818891, 9.999999999998899e-05, 0.034663793450792735, 0.07418048210402761, 0.02552546056360827, 0.07590953380433041, 0.15166150319520766, 0.034981869068458904, 0.018071543156302328, 0.0757855330513878, 0.05247110647251829, 0.10566551806547797, 0.031487437804839424, 0.18894292957971015, 0.05799060786083321, 0.0790495447228281, 0.07702317130751313, 0.13061565677879738, 0.13628620561732363, 0.17276503818272249, 0.07035079211964457, 0.28559927898833604, 0.1405648839540783, 0.049722492052253986, 0.4130873274566096, 0.2357010445282799, 0.06168374774164642, 0.08225696246893899, 0.09330817859340601, 0.16155418840238178, 0.48211386279995005, 0.6218040196487689, 0.5306572348423083, 0.5730412743083184, 0.49799665118502257, 0.5272691310749358, 0.5719309473578562, 0.5391703611232619, 0.5708323570366947, 0.07554410275671997, 0.11282352432196807, 0.10156693959764596, 0.11504333139558554, 0.12830837647469084, 0.12304314994534904, 0.12438012846778912, 0.11163506725540195, 0.13108012927973245, 0.1364547962473862, 0.15636767490700954, 0.1523729403871339, 0.18619820418184496, 0.25837526258831356, 0.18008725990727648, 0.16284644018876282, 0.16259995256586313, 0.13911212703348352, 0.3630511052737986, 0.3953504449670481, 0.28161060159866136, 0.3160229030509426, 0.44852850232853736, 0.45279330534336737, 0.4905067685013824, 0.609760418135318, 0.4928635038121999, 0.23126722051169168, 0.2973367507718728, 0.2462183627311627, 0.2938897994876224, 0.2382598361155659, 0.304110181759229, 0.3608350768523101, 0.27348652335568713, 0.290330307315793, 0.22350310100566972, 0.22844924639495123, 0.22053790575558274, 0.19368247337536992, 0.20896600425075473, 0.19692816823083326, 0.2017637884596295, 0.1951092580674072, 0.23630701276110921, 0.5479557510475028, 0.5479050921763384, 0.21085809965187485, 0.18542294874886078, 0.1981464493663102, 0.19745300691395962, 0.18489056334395082, 0.19103612716947183, 0.1965651828069187, 0.8268943380041038, 0.16281971797153927, 0.15229897405734627, 0.831387102754211, 0.19484103972461053, 0.16606267006047615, 0.17541043279878088, 0.18150433390651866, 0.8007389343527739, 0.7669873373835595, 0.15359868420364442, 0.20728878688723829, 0.6463484786067725, 0.16435832190462607, 0.14990511673824747, 0.21067299708558895, 0.2105280799326691, 0.15364069911358347, 0.17649617961120623, 0.22739737869478782, 0.18864886847055773, 0.22788054948684044, 0.18268830990581797, 0.18918390038103472, 0.1742561590501036, 0.1736451493482336, 0.18196490723862258, 0.08039754743075933, 0.07824933721782823, 0.08664743459852053, 0.0788202403128031, 0.08264329136464643, 0.08348572802071608, 0.08530868523947377, 0.08293072871381302, 0.07609659955142234]}, "mutation_prompt": null}
{"id": "8900c388-e486-4294-b378-6ef6d903fde5", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n            \n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (0.5 + np.random.rand() / 2) * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n            self.velocities = inertia_weight * self.velocities \\\n                + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                crossover_rate = self.CR if np.random.rand() < 0.5 else 0.9\n                trial = np.where(np.random.rand(self.dim) < crossover_rate, mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm with dynamic inertia and adaptive crossover for effective optimization.", "configspace": "", "generation": 45, "fitness": 0.3307563943902055, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.858027247086937, 0.8594759852775264, 0.8632299529221115, 0.8494725815091004, 0.8434024258805551, 0.837137398316841, 0.8478791834358161, 0.8590088480834484, 0.8534178230718916, 0.6837885254179179, 0.7218829155049327, 0.6893406601227027, 0.7114361585610189, 0.7141012126221583, 0.7016127752995627, 0.7110300538411238, 0.7089893789371742, 0.6641951688565495, 0.1307560680333021, 0.12513281079817773, 0.15021060556178434, 0.14433141835179852, 0.6972262485537465, 0.11961274090495777, 0.17841724186770958, 0.16893673009856758, 0.14871769179929528, 0.15298792143875994, 0.12058089903930469, 0.11432133775601738, 0.13765261136968043, 0.07536247170989552, 0.08384967579149494, 0.10751766308277821, 0.13562360643482063, 0.12366842484030116, 0.9654608400508725, 0.9594843673788938, 0.9276293355047612, 0.9402663243758436, 0.9252920400530611, 0.9285449331325485, 0.9473116143413783, 0.9344274187473344, 0.9434483993229932, 0.5475364673876999, 0.5024097266461852, 0.2521645898876306, 0.6147352475939618, 0.4960748635035943, 0.507542828694002, 0.47170887134940664, 0.43668840627646877, 0.5378797086368724, 0.8597866511928327, 0.22551057661117813, 0.2389604717025291, 0.8615221159085851, 0.8920447404512245, 0.27215504353896847, 0.8300529407954497, 0.17511593490444632, 0.361744071884325, 0.6078566043746926, 0.12200620972534126, 0.16790743749576975, 0.12642655676584813, 0.21043085609320056, 0.158851238372696, 0.14193153358222754, 0.20611582009039597, 0.15307350790021668, 0.16779385202762964, 0.18937046604665597, 0.13303679676033375, 0.14332949876488932, 0.15553256648830704, 0.34771880333498495, 0.2532655455694076, 0.20659758823259833, 0.16277245393452067, 0.0657207821396758, 0.08945558969382383, 0.04876513209662248, 9.999999999998899e-05, 0.0121138859485036, 0.05293949497104167, 9.999999999998899e-05, 0.005705934109705213, 0.049965261243603676, 0.10373775654666917, 0.12169600388697055, 0.11808398906676776, 0.09493369385349537, 0.023311323841722187, 0.0367502600957369, 0.11702272897734145, 0.10688980851437047, 0.15143109979449654, 0.03835294379855403, 0.09152319919168495, 0.06007333236754564, 0.11502787820957439, 0.3529141965822953, 0.1781296547386344, 0.36781676430156507, 0.08027286846534776, 0.07682108732002002, 0.13109188770021696, 0.10410942611757679, 0.11800868203497816, 0.07765189532761374, 0.24269312730188997, 0.09351512955927954, 0.13389279188823022, 0.3263052144305766, 0.09367977506945713, 0.5867237319594241, 0.5362663423817609, 0.5644999669428622, 0.5649045563258656, 0.586251249466776, 0.6195981407591407, 0.590288520450807, 0.5771047893246946, 0.6316651412019874, 0.10114860504059364, 0.12471001778592072, 0.1192983325415955, 0.15153193411909593, 0.12084032345027007, 0.13833571432128378, 0.12215070773945336, 0.12394765596277046, 0.13792441358898633, 0.3045647030909234, 0.2506205210590984, 0.47828523960140923, 0.43930951745072744, 0.37180980466866276, 0.24530891911984565, 0.17460888597363378, 0.15626519303493736, 0.24674349707516152, 0.46604805291621987, 0.38049942361714717, 0.32437910992973373, 0.3544414912901319, 0.5304509402040352, 0.33233671071534376, 0.5897752369541449, 0.5041996242546929, 0.597631712501553, 0.39919476323210124, 0.2311047866084457, 0.2963625198043345, 0.3886144102341361, 0.20863541823870857, 0.25538128223705614, 0.2425648885340158, 0.4109181857081764, 0.2928578743151363, 0.2554886021602699, 0.2098565780871008, 0.2172255200981087, 0.2049016579459635, 0.2344448648612809, 0.285759470423151, 0.22467263675959315, 0.20437874771510545, 0.20000927071567254, 0.17992911523065047, 0.201907926027444, 0.17853636695397979, 0.7593562151374813, 0.19580026147261143, 0.19008056323395006, 0.1958304992076918, 0.1826966458870476, 0.19850329009199352, 0.18560531288921633, 0.18550758672176249, 0.1472876393262893, 0.8988284023539209, 0.1988124665387161, 0.904056983414426, 0.1418517064911432, 0.1608758522278969, 0.8800924691365556, 0.6644161130654265, 0.21193600540861313, 0.46883690966139435, 0.5406326921744677, 0.16718614188378234, 0.5073933923603955, 0.1273038783129472, 0.15427718455284334, 0.27593182230935376, 0.18363009445689427, 0.1810231637756573, 0.1773460911246466, 0.1803285789954704, 0.1791002024416246, 0.1784360689882193, 0.17940139541284006, 0.18605343899606208, 0.19133461244634253, 0.0872095114009841, 0.07914008217263602, 0.10448218675354404, 0.08573648782705534, 0.09423122319098698, 0.09093071266172881, 0.0896727160245302, 0.08989093924544045, 0.09266710900057584]}, "mutation_prompt": null}
{"id": "a06877e3-ebc5-40eb-a6f4-ddb094474d50", "solution": "import numpy as np\n\nclass AdaptiveRefinedPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    if np.random.rand() < 0.9:  # Applying mutation strategy with a probability\n                        indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                        mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                        mutant = np.clip(mutant, -5.0, 5.0)\n                        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                        trial_score = func(trial)\n                        self.evaluations += 1\n                        if trial_score < fitness[i]:\n                            subpop[i] = trial\n                            fitness[i] = trial_score\n                            if trial_score < self.personal_best_scores[i]:\n                                self.personal_best_scores[i] = trial_score\n                                self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveRefinedPSO_DE", "description": "A probabilistically refined PSO-DE algorithm that leverages adaptive parameter tuning and mutation strategies to enhance convergence efficiency.", "configspace": "", "generation": 46, "fitness": 0.33519724526965783, "feedback": "The algorithm AdaptiveRefinedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8594089875131573, 0.8629443959893549, 0.8688336242981054, 0.8671036414084164, 0.8535783328054476, 0.87000407410379, 0.867505046202647, 0.8634186727894892, 0.8590796701485945, 0.67043519235591, 0.7333073471146042, 0.7333917734774866, 0.7558143928326551, 0.054382937518412056, 0.17875697077055253, 0.5047427830944491, 0.7458264703929072, 0.7277038895769519, 0.17151153396332575, 0.11948037022320146, 0.09006960124975849, 0.13691468863657041, 0.1402600508181585, 0.11602993392119876, 0.13629868605707163, 0.10504942354032465, 0.681306384032033, 0.11045627286967796, 0.09668521327834112, 0.11580809975915562, 0.1017187304592635, 0.10318688289544664, 0.1188067716276704, 0.11293403213663311, 0.10592496425113529, 0.08899294739834218, 0.9673439626316556, 0.8369685184495474, 0.9424225212358553, 0.9405990154915518, 0.9540154397162284, 0.9560355532283952, 0.9610170263043704, 0.9425466965318994, 0.9239103076569047, 0.6588303655144118, 0.40413076644103785, 0.5986318780785558, 0.6007995796442509, 0.41338922855831317, 0.6359971349199364, 0.5505473463554855, 0.3342813273220563, 0.420297170766075, 0.3853336514675635, 0.2270727370136565, 0.22587277863917365, 0.8799660717730609, 0.861738377793708, 0.21774300979110373, 0.14969401169877705, 0.8590785450918155, 0.3701747168151881, 0.1280649253370424, 0.13003157879661742, 0.17464138491029702, 0.13253566968151032, 0.1793573790693801, 0.16878022973592355, 0.12775876609054826, 0.15742221595442785, 0.15768864655851667, 0.20295692867203574, 0.1588847079732163, 0.20055522621284028, 0.15346966383922267, 0.1672352992132301, 0.1331015760930846, 0.16809780397932228, 0.11974636269133354, 0.18934901237502566, 9.999999999998899e-05, 9.999999999998899e-05, 0.04304436482816565, 0.05607806941656779, 0.17281500023661045, 0.1153122986356293, 0.06369623645610212, 0.01341212959473903, 0.08999080102454105, 0.21748283793032785, 0.07225282125027166, 0.14412458736302725, 0.1526780313427114, 0.05480859979924968, 0.07413796346799151, 0.06806377957143561, 0.1519043793449515, 0.12170631298218071, 0.1967127782586584, 0.17366928500142043, 0.41715816561523156, 0.15320620698840648, 0.099246430239041, 0.07562874275378417, 0.20311068598980841, 0.15591495197274674, 0.07563645283827758, 0.156693839754797, 0.2610255193534644, 0.3653493584424624, 0.05309076305414551, 0.2380690119420702, 0.24067425104461215, 0.20012996577988895, 0.10775654449112626, 0.11386550914608451, 0.4701778451717612, 0.6041927732516337, 0.5912957522025084, 0.6707557911974502, 0.5323877978229667, 0.6336205879581466, 0.5493600524621816, 0.6645558000991603, 0.5671047113130309, 0.13912827547133344, 0.10906776386198525, 0.1489820012596711, 0.1373578740745408, 0.16920110081014028, 0.10554698340580071, 0.11098864282831145, 0.17270511118739196, 0.12615729642398532, 0.6203482995083655, 0.15292955247717566, 0.1654446436092587, 0.14703046904893857, 0.25532324095155745, 0.32707353569912156, 0.27511473726776403, 0.289796799343652, 0.33555594548150236, 0.6597547081259838, 0.5100570697274439, 0.4229633384497107, 0.3348389798867639, 0.6936764192584428, 0.48768358120503263, 0.5620281349107478, 0.526689017306345, 0.41053079061749087, 0.3098980612622172, 0.2998838593495923, 0.29394505887067, 0.24839180101794112, 0.30462141182727176, 0.3441532527503285, 0.41713525945496954, 0.29097532547104665, 0.4073520728944413, 0.20251691976785247, 0.22434397758322366, 0.1954705669949941, 0.2091795776440294, 0.21313806943908287, 0.23655135593237897, 0.20443423048236153, 0.20603877108820046, 0.22111274940596182, 0.17334089670849862, 0.21592386950803433, 0.19170300757150527, 0.20081225247144285, 0.20391721988725642, 0.19003511993334088, 0.21147630545179297, 0.681023281161931, 0.19585474106956857, 0.8998466513347677, 0.8958654992608979, 0.18609081632136049, 0.8968284648081193, 0.20003023779574947, 0.19746808098547786, 0.8427877194672477, 0.1760230410288277, 0.8751035277057431, 0.7729736305109638, 0.20889144614718225, 0.8696814346319669, 0.3883353366520311, 0.20437022884690914, 0.16635740799244358, 0.2596974812721834, 0.4307130423982284, 0.1629171927491101, 0.18523077585674552, 0.18534603935016314, 0.19382524818383273, 0.19791933989504895, 0.17720581777174393, 0.1801394668652192, 0.18754041626213347, 0.18659855124311975, 0.18617746387482226, 0.0889180825580752, 0.09074693972665104, 0.08615107957742929, 0.08841611127145443, 0.09700304434667828, 0.08677874506380123, 0.09289925491196482, 0.09929511622657794, 0.09134322513927073]}, "mutation_prompt": null}
{"id": "b8edcbad-86fb-43f3-9550-27835f5c5750", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate fitness and update personal bests\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            # Update velocities and positions using PSO\n            inertia_weight = self.omega * (0.5 + np.random.rand() * 0.5) * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n\n            # Apply Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < fitness[i]:\n                    self.positions[i] = trial\n                    fitness[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Ensure particles do not exceed the search space boundaries\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid PSO-DE with adaptive inertia weight and mutation strategy for enhanced convergence.", "configspace": "", "generation": 47, "fitness": 0.33080843068025556, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8594692122563338, 0.8401440629684785, 0.8554089930284742, 0.8567566790598679, 0.8561964656730248, 0.8556917064386861, 0.8461028222396749, 0.853803169327794, 0.8632878270768072, 0.6155139960984386, 0.6956530067130522, 0.6974135408761342, 0.6452669625987879, 0.691079881847688, 0.6926714498824462, 0.5420227672470004, 0.6833728172436817, 0.6508690050408099, 0.15139213320122102, 0.1361806424580878, 0.10734387997372175, 0.1267236401380749, 0.11447882106678098, 0.1534084438761243, 0.11194297736828918, 0.13788284870883416, 0.11773297104574121, 0.1009857769267124, 0.09077753504451869, 0.09074686489472861, 0.10813597421574073, 0.12453187703204915, 0.1092560190777927, 0.08742057253982749, 0.12212364221262284, 0.12625222603116615, 0.9671657166233675, 0.9603670618300676, 0.947327848529065, 0.9284808959134764, 0.9401145024510171, 0.9180937919225867, 0.9564832230620213, 0.9397573494049611, 0.9509068480585358, 0.29209716644467976, 0.5731099602091136, 0.6353440990027512, 0.711416433169908, 0.2752788644878492, 0.6218156269026918, 0.5259049768835142, 0.5723187877605735, 0.41317149286455046, 0.8612554397673984, 0.22619941108276476, 0.8740418717100602, 0.8567363889621447, 0.2745584085215661, 0.2759609000226023, 0.12747933435540404, 0.808152080402882, 0.8512193251081419, 0.23016719350613224, 0.21538783829776775, 0.1460999103217102, 0.12371888674057263, 0.15926816595962823, 0.15189957355173578, 0.1696958071882394, 0.16264254620922058, 0.18858262310773366, 0.14910067541965855, 0.19682571305073226, 0.18523570884921348, 0.15244212313220928, 0.1518128319474601, 0.15627323239506663, 0.15859396082194221, 0.12244605298946265, 0.16738087893625364, 0.02565353776411361, 0.0021114101190572443, 9.999999999998899e-05, 0.08965361127621896, 9.999999999998899e-05, 9.999999999998899e-05, 0.04316891424057645, 0.03616505490827471, 0.1913000164218026, 0.20066619503667293, 0.06514047761087427, 0.08679224630880922, 0.07203458251028316, 0.03804016443545988, 0.04771837122190503, 0.08649529823359481, 0.09972193066061741, 0.1023610659709644, 0.2405512396738546, 0.09349247250863846, 0.14700357715699552, 0.32684252995699925, 0.25205454139793604, 0.2463935714488351, 0.17846709320652843, 0.256379519503661, 0.13676256043480794, 0.115158436022326, 0.19568655779194732, 0.17691802638035292, 0.12064614853932165, 0.18023416850633145, 0.12798523956825425, 0.08985416940742963, 0.15651695288945244, 0.08438954761534645, 0.5637426285561616, 0.5077307916273742, 0.5146861058494705, 0.500587724402991, 0.5570876086071725, 0.579126384320964, 0.601683898516646, 0.6218232665663621, 0.5411628377815598, 0.15435764676017005, 0.13480834364429561, 0.11875904854934638, 0.15748016960882327, 0.10192386561787314, 0.11888041234832958, 0.11501988578274724, 0.14947879451430923, 0.44355699486576927, 0.5088140293234971, 0.20396229826093515, 0.24682383621876802, 0.198117245593728, 0.16413910716478552, 0.25137788848381415, 0.21615056262448018, 0.24629183479640837, 0.17878698705290041, 0.47660831590035846, 0.6337063522780773, 0.3053223216954136, 0.33929801073980725, 0.4981851951308256, 0.3732249554003364, 0.632906028194899, 0.4534732472145072, 0.5779950556450821, 0.3860542939323869, 0.2675453523630922, 0.34549413748045366, 0.21322847534242295, 0.21333903799672416, 0.2378773301250129, 0.4029367316551967, 0.33143719327696786, 0.30608680039501035, 0.18837966533898876, 0.20614193033530215, 0.22031666694941765, 0.22614940436521935, 0.20181575526074247, 0.2001164836947179, 0.2228337799454636, 0.20238581047321147, 0.23261195307748284, 0.20545768944303378, 0.19387546477352846, 0.20445760747259834, 0.22202342910654438, 0.19236596750650337, 0.22013525358662822, 0.18215009754064238, 0.20554311451543117, 0.24440776335984515, 0.1868228430355281, 0.17177810615027977, 0.14779980629407896, 0.8942395268551946, 0.19805094153975755, 0.8805246707649798, 0.8125664887155657, 0.17797604401674705, 0.8811839463744643, 0.8808175092325998, 0.2126677747050335, 0.47481626037517255, 0.2094982286639171, 0.5643185058920974, 0.16553073819207642, 0.5275502426111649, 0.5158180586818585, 0.31850884267468305, 0.1714830001524975, 0.18114637203240513, 0.17934273138179613, 0.17843070097555724, 0.1903934832944354, 0.1788589868426147, 0.18326663484904127, 0.18482125460280496, 0.17538386989436971, 0.1007657273588567, 0.08582467264308147, 0.10336289076105698, 0.0882041334769943, 0.09721376980822916, 0.08299631518134831, 0.09659480941298493, 0.09353857762667428, 0.0972457248778108]}, "mutation_prompt": null}
{"id": "f650fe2a-cc4f-44ef-899f-4f1c2687ee45", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=60, omega=0.6, phi_p=0.6, phi_g=0.6, F=0.85, CR=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1.0 - np.random.rand() * (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.95, 1.05) if self.evaluations < self.budget / 2 else np.random.uniform(0.85, 1.15))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 3)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced PSO-DE with dynamic multi-population and adaptive strategies for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.3001242532591423, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.7496708032775112, 0.746485972806227, 0.7550420790292018, 0.7596892613955313, 0.7751033683862468, 0.7556509654676881, 0.7847562985797061, 0.7755993957012421, 0.7719234000698956, 0.544069785316457, 0.5544609964069371, 0.557559190903022, 0.5222237077995014, 0.5344554744515249, 0.5183478735990763, 0.5299786911270239, 0.5024381699728718, 0.5406767936388887, 0.15520180370346748, 0.10983834720137364, 0.11267260030545545, 0.1143393859135462, 0.13132569731518384, 0.10252379480348173, 0.10279892007798153, 0.12313697123952583, 0.1555168828799518, 0.09388395585238873, 0.09752800526669525, 0.11398674244085838, 0.0924686830575947, 0.1348177021346979, 0.10803939810153984, 0.10319655093011493, 0.108002556708378, 0.11801432945112644, 0.9795320886618967, 0.9759189713545362, 0.9776241642007691, 0.9585753834555022, 0.9641197077188359, 0.966343425279315, 0.9822645278415156, 0.9764213326948297, 0.9793501557655369, 0.6255986491884935, 0.6127592755809987, 0.5557274826565874, 0.572095584530175, 0.591769058706445, 0.5826485478918002, 0.6168717711044005, 0.10913396296089939, 0.6173583578134959, 0.2218145607542158, 0.749139422421475, 0.6861183910753932, 0.20090983110240623, 0.7650967573029452, 0.26537406859369483, 0.7318758897977717, 0.23060571870652324, 0.21890817137607155, 0.18461779925602173, 0.27973877507674483, 0.17067604824828597, 0.1218638552142356, 0.16369215719654517, 0.16531481016711136, 0.1686468451788442, 0.18109633304546835, 0.1687643737787814, 0.19780927926571945, 0.1891868546248715, 0.18193593628720128, 0.17924035385149617, 0.1965419682906444, 0.1732473517118538, 0.19680799494281187, 9.999999999998899e-05, 0.1709930587643328, 0.05360967755793078, 0.06713463407586073, 9.999999999998899e-05, 0.04119069999847158, 9.999999999998899e-05, 9.999999999998899e-05, 0.055108146916234335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10913875383747329, 0.12713962272188928, 0.060462071417364704, 0.08508244538308829, 0.06628164975449435, 0.012275212016155113, 0.07613716766001721, 0.07243865719037768, 0.0785699507890969, 0.04037487678581708, 0.03626098414617207, 0.056558115977671686, 0.20286020182887254, 0.0696124151147447, 0.06658238496897007, 0.07759143861267381, 0.1450708188428924, 0.06114208013236333, 0.1634102911764559, 0.07921882041673889, 0.13271151453126007, 0.14909026323166907, 0.09912376138935675, 0.17625614198129025, 0.17186307073253648, 0.08559238121641788, 0.12289272684792762, 0.5151704033285205, 0.5227751295226464, 0.5293448037171828, 0.567912648130982, 0.5306403456625933, 0.5681134211613088, 0.5155747532666833, 0.5451861573460877, 0.5372793271546021, 0.10080562212230926, 0.10821945163704072, 0.09756794536940383, 0.10502438994248875, 0.12984633412652113, 0.14927944826562833, 0.10557679945884357, 0.1011956129373972, 0.11193417459645993, 0.11982945390366517, 0.12584734944419906, 0.1417893561313993, 0.15740951584674479, 0.14515268455540586, 0.13282703063845458, 0.18005404710234818, 0.13264265831111388, 0.15817402310922535, 0.3735149099936034, 0.26241455721497264, 0.4473172221621595, 0.3950768125286881, 0.4542624851632385, 0.32994502350708965, 0.4239240197363776, 0.4909416895576312, 0.5199506267999434, 0.17408877342130868, 0.23663310034275464, 0.24594641674580553, 0.2965336982163084, 0.24056343122133483, 0.2824687577309004, 0.41418096589702413, 0.3706302727974963, 0.25987757256533517, 0.1974478891173529, 0.20495036670872613, 0.20029432234708433, 0.18845921848692238, 0.20128729463093697, 0.2095103019290021, 0.21275774501403966, 0.20015014152649446, 0.19640726925008345, 0.19101478696539298, 0.1789608607068005, 0.21002519650877982, 0.20876866850560938, 0.19189111186039542, 0.1947427075760344, 0.1879880409454847, 0.5037977729421501, 0.2060501531167762, 0.8520892787152128, 0.7268423395031931, 0.16431646866234262, 0.8437992293654335, 0.19459834272032572, 0.7064682696927592, 0.15851148893501632, 0.7185304719188366, 0.15642485865436773, 0.7399109533648438, 0.16727990798136994, 0.20282834211711576, 0.20442153915121075, 0.1640173522172803, 0.6489404257133168, 0.2065604153822015, 0.20955495822992753, 0.7103965870727178, 0.1800004495653147, 0.19211494622284742, 0.19185456941888424, 0.19505152883560994, 0.17130967596389035, 0.19808812978045398, 0.18776466275786907, 0.17751779914542243, 0.1803533179752973, 0.08362541014769997, 0.08569521326722473, 0.08869845010166866, 0.08850020888197796, 0.07373592002553508, 0.0790515726802199, 0.07989541622519336, 0.08132357718080951, 0.07788496987036198]}, "mutation_prompt": null}
{"id": "aa9da540-e58d-4004-a0b1-5ba44dc2dc57", "solution": "import numpy as np\n\nclass ChaosAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                chaos_factor = np.random.rand() * 0.1\n                subpop += self.velocities[:len(subpop)] + chaos_factor * (np.random.rand(len(subpop), self.dim) - 0.5)\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with self-adaptive mutation\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    F_adaptive = self.F + np.random.rand() * 0.2  # Self-adaptive mutation\n                    mutant = subpop[indices[0]] + F_adaptive * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "ChaosAdaptivePSO_DE", "description": "An adaptive PSO-DE with chaos perturbation and self-adaptive mutation for enhanced exploration-exploitation trade-off.", "configspace": "", "generation": 49, "fitness": 0.28159825896580587, "feedback": "The algorithm ChaosAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.5955772055730075, 0.5917977155212617, 0.6086703033634948, 0.57429123690618, 0.5597220986341809, 0.5736019991886271, 0.5751720191082743, 0.6049349336467428, 0.582445962383949, 0.1828573251033122, 0.10757227045466011, 0.1498328372159069, 0.16170890911680813, 0.16601390095526458, 0.16785556503425292, 0.14336837988573659, 0.13479857133123618, 0.049993066747580306, 0.15822727401889491, 0.10991704050033191, 0.23536073513168088, 0.1674368816343229, 0.13441932843958804, 0.13997558004277, 0.10327694200526216, 0.1266780740367589, 0.17554782830965154, 0.11160236975483018, 0.10879217296940547, 0.10603546805641273, 0.10585616499848782, 0.08668265928816288, 0.10401761171217438, 0.12671929037089436, 0.0850341413040695, 0.10996973477697869, 0.969505625375327, 0.9821902760452963, 0.957135218222118, 0.9690336213610785, 0.9225786998236024, 0.9771399728331581, 0.9201280465238708, 0.9640166614091441, 0.943823977587825, 0.3935664185931116, 0.37631046897474807, 0.3990745790802023, 0.402970138066826, 0.38181490739383284, 0.4138337307348843, 0.3893416636810162, 0.3762580331526195, 0.374015228667113, 0.8317816604961866, 0.8820894992044572, 0.222509833682623, 0.21114889457968844, 0.8374894853116668, 0.2701229753999602, 0.1445370766800601, 0.19972925940822484, 0.8665135135746476, 0.17673349094950086, 0.20020456177537227, 0.20722521004753103, 0.18160283382150622, 0.12825712729574423, 0.1997878219285013, 0.1820678752611785, 0.327109474807758, 0.16565121426938534, 0.23914736480317045, 0.2008473174301585, 0.18918971791429062, 0.18422052439396908, 0.19091998737365923, 0.19823803356167935, 0.2128860193097114, 0.12783406009464338, 0.178600664757961, 0.09974824291014794, 9.999999999998899e-05, 0.017302003929624887, 0.045955376917372504, 0.03776261795175595, 0.019031377007208694, 0.016846150042890806, 9.999999999998899e-05, 0.06157610455789786, 0.1769032609138358, 0.1946241273745155, 0.10659232075721703, 0.07257946587025887, 0.05359607652935916, 0.03750852964696427, 0.07910517985383869, 0.09126235852735842, 0.12364411779828766, 0.03760186506025509, 0.05154531923109429, 0.06452764352058316, 0.09250511503749526, 0.05847797962567092, 0.05552555162513728, 0.05152113087583132, 0.049415158311766016, 0.03787411684666553, 0.14036155254076144, 0.18409648908677367, 0.11231332045499798, 0.15262839677610796, 0.11051732690276006, 0.1797075386170982, 0.1200495845182682, 0.17064251484963555, 0.08522110417832085, 0.47573263693592793, 0.48465939549838044, 0.4862196004904371, 0.5040245698736989, 0.5008575810507394, 0.47913563615614674, 0.49756251819575803, 0.4758468561390359, 0.48267271920289356, 0.1804591043131295, 0.12302164119476944, 0.107331925980236, 0.1022055386605285, 0.14521725185903978, 0.15542525775571425, 0.1232538582996664, 0.11919161925714705, 0.1492635141191635, 0.19771106001940308, 0.3748704988809659, 0.1664560183481335, 0.328140782358024, 0.20736205483185166, 0.17248147042723572, 0.14854039378829587, 0.1919760793495371, 0.2235624077905013, 0.36896859485454636, 0.3500722518037852, 0.365727354546147, 0.3599941978417972, 0.3505408778874073, 0.3653286451776825, 0.3595162748731019, 0.35880242507877147, 0.3508083062840791, 0.2641727425392244, 0.29283777010587997, 0.2490630713244042, 0.27204032138378187, 0.21853004401220033, 0.2775965930857798, 0.3004237894856847, 0.2932072404393088, 0.287024239879208, 0.22091549342996175, 0.22654838130175714, 0.19718280818654754, 0.203818618215586, 0.2215631765443301, 0.21192357709405318, 0.22567383857557843, 0.20304240617883818, 0.22945572733073794, 0.2192897082140487, 0.20019439453187482, 0.19010245829693762, 0.20041874683446026, 0.19937813168757923, 0.20389128227900744, 0.3805489123869319, 0.2034643164389679, 0.2149942878251, 0.16316705813849497, 0.18428826648094887, 0.8533593795378425, 0.8931529773141247, 0.198563882769481, 0.19707441686968274, 0.8471375126394637, 0.156130340123381, 0.8597847961020955, 0.6972940471211723, 0.5057854964342015, 0.20651393083103164, 0.6935485755002382, 0.5853838974518681, 0.647254728978758, 0.7145053031072328, 0.7004760503315928, 0.15371091484673538, 0.18079670465047004, 0.2098896637826, 0.18610474601171723, 0.1742495479885029, 0.17789319743381604, 0.18434114473061713, 0.17513844487689545, 0.18395631281290659, 0.1697355363097618, 0.08721535308869766, 0.08710912297064866, 0.09141548234579955, 0.0819922962032138, 0.08918902742072898, 0.08861987806962646, 0.09729215074163511, 0.09153479776230466, 0.08766057627641655]}, "mutation_prompt": null}
{"id": "c6b34510-b8e7-48b0-8c72-a5715d295a4c", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "547466c4-f6dd-4b37-bb99-a5205ed45123", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=60, omega=0.7, phi_p=0.4, phi_g=0.6, F=0.85, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.9 - 0.5 * (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * np.random.uniform(1.0, 1.3) * (1 if self.evaluations < self.budget / 3 else 0.9)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n                \n            # Reshuffle subpopulations to enhance diversity\n            np.random.shuffle(self.positions)\n            self.subpopulations = np.array_split(self.positions, 3)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "A hybrid PSO-DE approach with dynamically adaptive parameters and subpopulation reshuffling for enhanced convergence.", "configspace": "", "generation": 51, "fitness": 0.2909847291317633, "feedback": "The algorithm AdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.7126211910561017, 0.722766343839692, 0.72440236956191, 0.7527220397146444, 0.718843325802113, 0.7641199864801282, 0.7489922774308817, 0.7435261646667954, 0.7226253106294247, 0.5165268846011188, 0.5069015383449114, 0.4825710866143059, 0.5139153227803446, 0.5011316582905992, 0.4690666313151298, 0.43778935959332277, 0.504982407689212, 0.3834465951683751, 0.11570204391824479, 0.11250677689042876, 0.1271304485192224, 0.08933492801167908, 0.07662116485608061, 0.1286869091186903, 0.10508209637170784, 0.11797985419006929, 0.10411953080690217, 0.10298106142419061, 0.11011019404892808, 0.08653966055603068, 0.10043023919727767, 0.10828628083802216, 0.11073834002364069, 0.10922715336904443, 0.09906697094408612, 0.09631365055341357, 0.9726815661149238, 0.9756497188897564, 0.9857735054058544, 0.9821383561675932, 0.9572040152303423, 0.9661146238643039, 0.9794185581058734, 0.9796226841141636, 0.97470109168741, 0.5916665457958536, 0.5557221729143077, 0.579125640726432, 0.5550875912389917, 0.5113782751673566, 0.46886086453595566, 0.5252375069715227, 0.5234287330930112, 0.499434226869931, 0.6252537086935706, 0.6794868064204274, 0.6769690457447533, 0.23952406209745025, 0.19918492942540988, 0.2539311347694676, 0.13336674617743305, 0.6293661834129092, 0.6530986935771805, 0.19300088938223214, 0.16151987387254407, 0.157764777291435, 0.1823469309354797, 0.1337548086602559, 0.16204055607053303, 0.1253133517780185, 0.19191193280122965, 0.16179380449111647, 0.1932826018632976, 0.15864873883592756, 0.16359295629287263, 0.16476302171339485, 0.16367291972529951, 0.16384154520107752, 0.1782134070532433, 0.1558702527731537, 0.15384181045292478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010806453680264339, 0.00011495637480585241, 0.0037905313668709084, 0.007206181002613832, 0.0070965345557612025, 0.006232604329090674, 0.10631431728566876, 0.07007713906347668, 0.12287369245267288, 0.08863399188062371, 0.07199579034366399, 0.05560957046868775, 0.07970452440375098, 0.12645851272566633, 0.04528202254919966, 0.19598374689756115, 0.02945537432209222, 0.04057341779085488, 0.09302175939887947, 0.05460232212587557, 0.15391568746127327, 0.1670765210068339, 0.06994447748463262, 0.06647382893368015, 0.19951108564484465, 0.13853652579649356, 0.12045929405535882, 0.13013055404330387, 0.1548164146886315, 0.19233490452675428, 0.11438398308492836, 0.1689958027316929, 0.07555879778475261, 0.5359169928913738, 0.5326200476268501, 0.49849748698815255, 0.5114481775260886, 0.5423565378911022, 0.5260764696139277, 0.5059458028621574, 0.5196368070826813, 0.5130233827230855, 0.07856326727373686, 0.10754392006761959, 0.10125172743642508, 0.10750721020540133, 0.11572730477572646, 0.0912179194389422, 0.11443108466846841, 0.10458011358274666, 0.09481243157326336, 0.13846573657962147, 0.13504321255012042, 0.13298423828835948, 0.13750542496913498, 0.13098050528389926, 0.17792240443573415, 0.1516392627378389, 0.1446005069958033, 0.15171856662988992, 0.43281957811944505, 0.3871656465755078, 0.41722274635603807, 0.4336581712832479, 0.36610444281995014, 0.3687927884662283, 0.46456457581471144, 0.4485276078842698, 0.42533546329959615, 0.33934396305522063, 0.2590607258690446, 0.23396914644999156, 0.27347323684245417, 0.27842410972648657, 0.22617694151965928, 0.3299960385754026, 0.31843704978487064, 0.298529037471994, 0.1976754637223489, 0.20551063707317652, 0.18313730969239372, 0.2022618154492125, 0.19441061425647166, 0.22937393277904716, 0.223323745394173, 0.22774654762494473, 0.18424770807123658, 0.20603756977754017, 0.21907104034538794, 0.19477972832105783, 0.18797071773382934, 0.1990768939344736, 0.19485276404677532, 0.2184770581930503, 0.3169861643668118, 0.19590728569277105, 0.7596854908611054, 0.17973865147317625, 0.14957348484522393, 0.8332063213951412, 0.18715293133067645, 0.6844570924889694, 0.16469782941732536, 0.21965448916172803, 0.57328634027413, 0.6624519289023076, 0.1675428764114989, 0.5224380020360299, 0.1999874324493467, 0.1634190553363566, 0.5495954912760248, 0.20900059781158675, 0.629344570337586, 0.20936660362295667, 0.18297471950670674, 0.1818314393619025, 0.17705394583431533, 0.18600534104164224, 0.18200078277933962, 0.1739307021263432, 0.17274795381499153, 0.21330509936489683, 0.17885498574906145, 0.07991934593807892, 0.08393974889756428, 0.07892491807420576, 0.08263194060975787, 0.07922934487468736, 0.08074715689193468, 0.079730425314957, 0.07809601867245042, 0.07703334120575511]}, "mutation_prompt": null}
{"id": "77d45d75-c8d7-4211-8cfa-ada3dc3ac403", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.95, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.85, 1.15))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A hybrid algorithm combining adaptive particle swarm optimization with differential evolution and adaptive inertia weights for enhanced diversity and convergence.", "configspace": "", "generation": 52, "fitness": 0.3473884729883802, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8663562267042325, 0.8552581029673508, 0.8531263428724907, 0.8531696409162381, 0.8571955172176944, 0.8645574936135094, 0.8601060278899508, 0.8663659791181142, 0.8569011109282542, 0.7542390978198933, 0.6638211041306166, 0.7401873536369172, 0.7271019597915229, 0.5853531818014905, 0.6890896652963949, 0.740633181287624, 0.7388901812252033, 0.6905703581856242, 0.14615799735956259, 0.13794734244326357, 0.1711170707642754, 0.13936933094261017, 0.11107535201312146, 0.10450648506856286, 0.10863968802326929, 0.14887834053967308, 0.15092703506992655, 0.10566788926567827, 0.10754205194813637, 0.09948397049857105, 0.12611598148521208, 0.11692645840340898, 0.15147391107703456, 0.1453486720555176, 0.10717602290093164, 0.10623388542546486, 0.9437954818412582, 0.9884955788873505, 0.9289037702312075, 0.9531887246576063, 0.9500450899932952, 0.9877270659519719, 0.987696854494637, 0.9301121157258939, 0.961167038664905, 0.6545463957283861, 0.29786070676520815, 0.5055222756785629, 0.6794095176677108, 0.48559615780061993, 0.511233570752865, 0.6076868423545683, 0.5007276081564456, 0.4970982201172929, 0.8416855166066549, 0.3754298041229891, 0.38683174659036224, 0.21813368567797475, 0.827636443832989, 0.3686323042565123, 0.8655448241945506, 0.8459386206247161, 0.8499790783046159, 0.18205222124885456, 0.10301333338297192, 0.14691098051639617, 0.22387679259996995, 0.1739697609022176, 0.30874535374000656, 0.1302435234043836, 0.18270937723770309, 0.16023335173725806, 0.2962300811127223, 0.14381453154799217, 0.22490335818944973, 0.1754805507447833, 0.14836859560092075, 0.2027526467240116, 0.20608375537656742, 0.14529891290314478, 0.15309156668060986, 0.02809998826833693, 0.017284564851104744, 0.0855590986841418, 0.058041216508777915, 0.05266338077482491, 0.021338302152142385, 0.010035763470967907, 9.999999999998899e-05, 0.06679936596655767, 0.14316073082828007, 0.05221507935914649, 0.15324495147769335, 0.07958204590681417, 0.04974119070988914, 0.1572971581814685, 0.19252773087995712, 0.15013488494646876, 0.1503330195221224, 0.10646266860260545, 0.0902114125996728, 0.10921802617225673, 0.11679327130364636, 0.09361604008977631, 0.27339672462629416, 0.1379976893673427, 0.10730444035923359, 0.1564557149114133, 0.297593653140657, 0.24686527766637945, 0.1425583727539157, 0.10334079916942573, 0.1880629782128318, 0.1882250576418535, 0.12941651203288218, 0.12516068196395214, 0.08375434466777165, 0.6239789599187777, 0.5878696281016986, 0.5752766124156151, 0.5614419828957334, 0.5154024130000499, 0.6150180913312762, 0.5583389779754884, 0.586825614487305, 0.5526512221771003, 0.5532012598655369, 0.1361410363445542, 0.1471906781751111, 0.11787757392858933, 0.14508971215564637, 0.1351610259728786, 0.1343321672984148, 0.1337826897737585, 0.13519133284595286, 0.2667184642580184, 0.14109456085814942, 0.14134680185568738, 0.2313363685433235, 0.293035356526439, 0.18708001853789358, 0.41479276863992076, 0.29656569679431455, 0.28394716910576057, 0.4307877399593233, 0.29321545041253516, 0.38108408089109025, 0.5556947359085829, 0.6223411056973489, 0.6569116788077489, 0.6600055277404863, 0.682635381198222, 0.3594594671481248, 0.2689552068170459, 0.34235748664986465, 0.28160158007739544, 0.31515516127859633, 0.3083111510399882, 0.2140148953197034, 0.2563879013838243, 0.37565392230475125, 0.30177270447332294, 0.19776395111707545, 0.23221318532531499, 0.2037060750291657, 0.2151692513176806, 0.19963902453159277, 0.20049945933636348, 0.2351067852233959, 0.20085872180980313, 0.20050515280822734, 0.7244195060936127, 0.18999924678743763, 0.1759231125142764, 0.24381785671589762, 0.20713105935374487, 0.24401347408485186, 0.7409967432772789, 0.19237022870972953, 0.24996640930103287, 0.8886131694140449, 0.8664569684532466, 0.20765246259509784, 0.9016391063733633, 0.1998125768968363, 0.14631151110945861, 0.864503198150486, 0.15929180931153264, 0.20965510495634065, 0.8195608056200192, 0.5374433617794853, 0.2061710862233287, 0.2088940083855244, 0.8460165026066753, 0.15198557223348508, 0.21045379025368227, 0.36639218366593385, 0.7830510746928825, 0.17283154529242328, 0.17940915694791115, 0.18436391409276787, 0.1818555628919124, 0.17787371611629965, 0.18669398443291652, 0.1964033036863999, 0.18034295060970928, 0.18475940439116523, 0.08860461714249146, 0.08464187365982268, 0.1256635585726663, 0.0867022754534279, 0.08310255216007734, 0.0881946929617643, 0.09135807104839933, 0.08106495620792287, 0.08650125108412554]}, "mutation_prompt": null}
{"id": "ba66c16c-148b-4a25-9d89-270888310c30", "solution": "import numpy as np\n\nclass HybridPSO_DE_Levy:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, size=dim)\n        v = np.random.normal(0, 1, size=dim)\n        step = u / np.abs(v)**(1 / beta)\n        return step\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n                    else:\n                        levy_step = self.levy_flight(self.dim)\n                        candidate = subpop[i] + levy_step\n                        candidate = np.clip(candidate, -5.0, 5.0)\n                        candidate_score = func(candidate)\n                        self.evaluations += 1\n                        if candidate_score < fitness[i]:\n                            subpop[i] = candidate\n                            fitness[i] = candidate_score\n                            if candidate_score < self.personal_best_scores[i]:\n                                self.personal_best_scores[i] = candidate_score\n                                self.personal_best_positions[i] = candidate\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE_Levy", "description": "Hybrid PSO-DE with adaptive parameter tuning and dynamic local search inspired by Levy Flights for enhanced global exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {}, "mutation_prompt": null}
{"id": "7636693c-469f-4970-b7a2-a3987c9ed098", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop_index, subpop in enumerate(self.subpopulations):\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)]\n                self.personal_best_scores[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                dynamic_phi_p = self.phi_p * np.random.uniform(0.9, 1.1)\n                self.velocities[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)] = inertia_weight * self.velocities[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)] \\\n                    + dynamic_phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[subpop_index * len(subpop):(subpop_index + 1) * len(subpop)]\n                self.subpopulations[subpop_index] = subpop\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[subpop_index * len(subpop) + i]:\n                            self.personal_best_scores[subpop_index * len(subpop) + i] = trial_score\n                            self.personal_best_positions[subpop_index * len(subpop) + i] = trial\n\n                # Stochastic boundary handling\n                subpop[:] = np.clip(subpop, -5.0, 5.0) + np.where((subpop < -5.0) | (subpop > 5.0), np.random.uniform(-0.1, 0.1, subpop.shape), 0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "An enhanced PSO-DE with adaptive learning coefficients and stochastic boundary handling for improved exploration-exploitation trade-off.", "configspace": "", "generation": 54, "fitness": 0.3323117913334891, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8521938485860725, 0.8545691940028972, 0.8520882065292295, 0.8491918077173287, 0.8400036780173524, 0.8463147835943609, 0.8600008509136403, 0.8510974490097912, 0.8512183322459097, 0.6914849234912279, 0.6963186297358113, 0.720675419572012, 0.7022297293281379, 0.6056102417971677, 0.7157248232995095, 0.6178805239307488, 0.7042462515447931, 0.6612882260591592, 0.14934773794152478, 0.1255565728535477, 0.1466124921082197, 0.12743413938758263, 0.09959005476278493, 0.13583122273459725, 0.1298392078171502, 0.13773148259412593, 0.16788635192463952, 0.13075628239473225, 0.15396848519023765, 0.09532501842099683, 0.10829807420220827, 0.09876619650454721, 0.10354409309151691, 0.11649916242944003, 0.09895838664797318, 0.10442449569926315, 0.9454513719302468, 0.8312521728382858, 0.9197482979548044, 0.9016398020791935, 0.944682134193516, 0.942190629466253, 0.9526660612177111, 0.9088585824817599, 0.9276763348790201, 0.5633900388934174, 0.5364269820931643, 0.7046871085010646, 0.6932468950790456, 0.272958513433472, 0.30876293137302013, 0.5823261600669492, 0.5290070672328333, 0.37224520648305304, 0.8637880387323321, 0.8863006758922549, 0.8016377011892855, 0.9107878574856466, 0.8894057086007449, 0.27123900609689533, 0.33719296757899453, 0.8200373402805734, 0.8819520135888786, 0.23365138101466865, 0.2402115850943778, 0.1256937359904492, 0.16754764692596003, 0.17111681315318927, 0.14250909733207773, 0.16667951230666278, 0.1701995352267821, 0.1431454472428877, 0.18144124379213977, 0.16235055916586294, 0.1273854155377674, 0.1368574583342559, 0.15332932507083408, 0.12971410505307868, 0.16951438563300347, 0.12480685757626142, 0.13016171624371087, 0.00040481171789219506, 0.00032200547450900174, 0.1146331684885874, 0.026201315240654388, 0.07782745620227594, 0.05231335819721894, 0.12125427096432517, 9.999999999998899e-05, 0.08440920001304952, 0.13146820378636892, 0.07638063651651139, 0.11114586419439565, 0.11968493981772643, 0.08305307507864179, 0.044173773944342964, 0.16009249422584548, 0.09087206640572709, 0.10710989548405725, 0.05813536569796163, 0.06517705001033625, 0.14767910231501968, 0.07899808688428478, 0.07500265342244206, 0.08697216610011349, 0.13031677513982343, 0.1499244052119062, 0.13249200509579473, 0.09426987631614825, 0.18754534196332773, 0.19087845591028973, 0.0485761180934241, 0.15992316414949004, 0.4878829181463068, 0.1740144758055363, 0.13107347928348823, 0.0996635479161323, 0.5344085411253126, 0.5128036667305855, 0.6373217696225224, 0.6301199079374205, 0.4797783868787223, 0.4995530212890197, 0.5701466768589725, 0.6399511551170802, 0.5881058724598882, 0.11546156487772274, 0.07803940135338994, 0.17339134086539032, 0.13095088834860125, 0.11670865045003198, 0.17577325606170002, 0.11057556773581223, 0.1114786562214547, 0.10522648054336481, 0.24316492120797606, 0.18151851918355755, 0.29215220482957904, 0.16773835304687823, 0.2206371040274281, 0.2800862399967984, 0.7188035276027565, 0.2397541761126517, 0.16086419508334326, 0.2509074013775493, 0.40214926124915695, 0.37886173238386145, 0.5122990169523369, 0.27459438424484084, 0.49024782416161283, 0.4872199609123501, 0.5576939448025346, 0.6143879076225132, 0.43127111641124694, 0.24457860870735637, 0.37643294559519813, 0.2808099524253094, 0.271405815963474, 0.25941414043397126, 0.22552574431420092, 0.248192675548501, 0.3019607264821418, 0.2284407146008529, 0.19365458437638394, 0.2301876063672289, 0.22211501998310212, 0.21622652147356758, 0.21485353307293542, 0.24015203459554813, 0.20582685261339406, 0.2160875006759383, 0.24127739574080065, 0.2004482797901539, 0.18881546888563527, 0.22440491848909017, 0.1991177625173587, 0.7697967556758888, 0.19463243823869958, 0.19211863270397012, 0.24360867292751442, 0.8575528339272869, 0.18540063050285704, 0.1847352876683831, 0.8798976874286663, 0.19803186891753477, 0.19705317899122787, 0.8468956219829418, 0.17399283930360054, 0.15547743928430924, 0.871535871011401, 0.21036986048705408, 0.2067431325849508, 0.5034655367564045, 0.15210444726409333, 0.16512273104490416, 0.8588152506675775, 0.27778875719856755, 0.32456888434244113, 0.17571688865515267, 0.17241790168051319, 0.2057780148176659, 0.18142426927780697, 0.18250184559749072, 0.1789949357984969, 0.1794231120345876, 0.18293953546765784, 0.18484495271980184, 0.08851661894092466, 0.09994634015587434, 0.08641658639449123, 0.10995176409074325, 0.08817645450457057, 0.10837013131099249, 0.09916367012069727, 0.09102080240743671, 0.09160802717978256]}, "mutation_prompt": null}
{"id": "ea04579f-ff64-4f4b-bf1c-b437cd90c77f", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.5 + 0.5 * np.random.rand()) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with self-adjusting CR\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    adaptive_CR = 0.9 - 0.5 * (self.evaluations / self.budget)\n                    trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "An enhanced PSO-DE hybrid with adaptive inertia and self-adjusting crossover strategies for superior global search capabilities.", "configspace": "", "generation": 55, "fitness": 0.3397765526548817, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.836382699223864, 0.8492540243882003, 0.8412417896871843, 0.8533183526432314, 0.8409065839324643, 0.8339340961088242, 0.8461750483262569, 0.821423620389735, 0.8271333819828377, 0.6738431349797842, 0.6782622081811527, 0.6678252955415531, 0.6965113204426727, 0.7018593611481669, 0.5200809559391701, 0.7190192943719331, 0.6923177313229727, 0.5361734505282127, 0.14028914089605737, 0.11178902701777749, 0.23282495715059848, 0.4546443227869563, 0.13330465987425633, 0.15976720417848211, 0.160806438691806, 0.13475332124089057, 0.13720707925670084, 0.10843750295041521, 0.13376394011431525, 0.10684828144934344, 0.13544063661005346, 0.11920884321006653, 0.10044611600284425, 0.10111211566213574, 0.10571788346616162, 0.11503711080041301, 0.9368980413725572, 0.9886213757888969, 0.9561405038563588, 0.9385933729430797, 0.949414727060007, 0.9877476817243416, 0.9876942946264928, 0.9682031792840508, 0.9712699457231552, 0.5146790354578052, 0.7166297984015435, 0.6130234235862126, 0.704842177111658, 0.7044004260219086, 0.5234188393443826, 0.6424323203961589, 0.6138230595567555, 0.5355466698886857, 0.8305208593030633, 0.23756150796495823, 0.8557909422457962, 0.2082650013550158, 0.8556150940295009, 0.21454503077710296, 0.3743481127611509, 0.8388280536437979, 0.23080012653748605, 0.16755609307206631, 0.3098110672198311, 0.21351700875496304, 0.13524186585198772, 0.19195973026994573, 0.12337684836692975, 0.17585782868939437, 0.3279416510804758, 0.17378640425867886, 0.20396915985145425, 0.130221941285508, 0.17304728918818602, 0.15503886330861294, 0.1789297240405494, 0.17273227994447993, 0.19148453734282123, 0.16717226176452626, 0.17318207200392366, 9.999999999998899e-05, 9.999999999998899e-05, 0.044189647036613655, 0.05966612549535766, 0.043854328295359846, 9.999999999998899e-05, 0.06624748323825347, 0.14663968355566614, 0.0911302659281431, 0.10562522086811188, 0.09257176086156393, 0.13029202430005116, 0.09903375370089729, 0.013666718796055854, 0.12332239712328297, 0.16126883179541707, 0.12406814743409045, 0.15175397000865232, 0.0859210464710537, 0.15932210541031977, 0.09953192127455168, 0.09963220721725485, 0.08052216215672126, 0.15565353935280968, 0.17308013850596782, 0.20672664350726222, 0.18129773099972457, 0.1804323444808288, 0.2076591766897954, 0.2160036610511914, 0.025648660906163023, 0.16123067325963458, 0.18255011758299633, 0.17196188858681039, 0.11402435430552105, 0.10571452870786402, 0.5295107247739144, 0.5602679194913748, 0.5594427924373063, 0.5279051328757165, 0.6087265627654284, 0.55999651657977, 0.5825633418780113, 0.5648637989485452, 0.5600421665328156, 0.10755389286389416, 0.1134045454054673, 0.10954633899458455, 0.15199201274742025, 0.14974469192572337, 0.23578765025246862, 0.10746790825919106, 0.1454725122608761, 0.12624970007339398, 0.3428903891357392, 0.1504653476702762, 0.1951533337010518, 0.1866833716051326, 0.24554089764676446, 0.1537372343163077, 0.2617713791963605, 0.14052987575033604, 0.2203400264180645, 0.3447685771493205, 0.36115269634648595, 0.6450941403819656, 0.5967565370495314, 0.45284636781340015, 0.5181852222279986, 0.5745794629718457, 0.6160995948068548, 0.4468770205040582, 0.3411002546604559, 0.2510843165592257, 0.3299724669941171, 0.31515788733757044, 0.32490090243193803, 0.26714285043794705, 0.2584672634207502, 0.24569167075922949, 0.3296673866130584, 0.24963359949970632, 0.20897425462719466, 0.1942781181051999, 0.22174925816585433, 0.207728744798366, 0.1937645717857165, 0.22037224991059523, 0.21079451212084122, 0.2434110932870669, 0.24396243062769496, 0.20704497735129868, 0.21916230419202198, 0.23835220215443664, 0.2653451828639286, 0.18911405570310502, 0.7041608826960504, 0.20826033985826575, 0.2144201406064723, 0.7879709104623217, 0.8623429145613983, 0.1514286041470354, 0.8755840678871545, 0.19761340218850443, 0.8713331332692289, 0.8593926966849447, 0.16158877713112085, 0.8705353120704228, 0.594790308895973, 0.16757218947518737, 0.2077055760272336, 0.20925256674445813, 0.20635641654532244, 0.16329175422258613, 0.8287310324156514, 0.20614955381738953, 0.4477770946865155, 0.18315995323438727, 0.1874009561004093, 0.18089513879842534, 0.17292023695334469, 0.18049317104908968, 0.1877057997798991, 0.18561097384676672, 0.18376025858708644, 0.17728854863463617, 0.08621186509503409, 0.08888094088495668, 0.08907551470855524, 0.08024452794698389, 0.08513364801892853, 0.08304398635146704, 0.08778337213674081, 0.09057691696039272, 0.08232523535165948]}, "mutation_prompt": null}
{"id": "05735c00-c82e-4f52-bd94-e55662021415", "solution": "import numpy as np\n\nclass AdaptivePSO_DE_Diversity:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            diversity_metric = np.std(self.positions, axis=0).mean()\n            num_subpops = 3 if diversity_metric > 1.0 else 2\n            self.subpopulations = np.array_split(self.positions, num_subpops)\n            \n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.2) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, num_subpops)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO_DE_Diversity", "description": "Adaptive Particle Swarm with Differential Evolution and Diversity-driven Dynamic Subpopulation Management.", "configspace": "", "generation": 56, "fitness": 0.3486706090020679, "feedback": "The algorithm AdaptivePSO_DE_Diversity got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8592729282710878, 0.8544128433672571, 0.8487493929660233, 0.8488951872477953, 0.8505023198473162, 0.8523623515664052, 0.8411050589602392, 0.8483602341369985, 0.8526682683873068, 0.6880961529052103, 0.70195690291047, 0.7032655709089991, 0.739017830919187, 0.7121111931092438, 0.709896426032544, 0.6545819593080023, 0.7145653749985073, 0.654323342978034, 0.11773267395919962, 0.6862305568672236, 0.12265340874033048, 0.12689249267960534, 0.14821327985969657, 0.14274699040770433, 0.16092838256386566, 0.14534410904579342, 0.1388958953116044, 0.1108847676932988, 0.12235794939088951, 0.1297781535176986, 0.1374103431936119, 0.149714236580354, 0.09559026083887234, 0.10189734544751938, 0.11865105698727385, 0.1280442481769276, 0.9468192014304289, 0.9713240883954972, 0.9703364787982778, 0.9574335562745616, 0.9739226496042196, 0.9738668922111219, 0.9470502338930114, 0.9424612708758727, 0.9312143344275045, 0.7298636417368121, 0.5910918169976713, 0.5601742215391297, 0.7047697225213788, 0.6292883943229949, 0.6925937101501949, 0.6675482884616047, 0.4139055396659683, 0.5980287975352631, 0.879557344052731, 0.8442152351561879, 0.8238431081858637, 0.21236131670048142, 0.7937899542291376, 0.21718628067688395, 0.38108589085066413, 0.17559499713067184, 0.835412929911143, 0.1971542910374866, 0.1466036244575225, 0.1508557189176294, 0.1265621106421675, 0.12655460117128636, 0.12360857992733565, 0.17983072766006936, 0.14688778130654612, 0.2863868405423027, 0.15909790945323898, 0.14298434306991115, 0.12703671790351723, 0.2078314109810614, 0.18879705486744314, 0.17807858245439345, 0.22351281752926122, 0.18007561796999416, 0.16432014064112632, 9.999999999998899e-05, 0.06998092920892562, 0.08666408926841829, 0.05159530442861904, 9.999999999998899e-05, 0.019402563829538533, 9.999999999998899e-05, 0.00651928139938629, 0.17009257053243831, 0.12994221652535065, 0.04098246674071637, 0.11844522842575955, 0.18089516562364372, 0.07561594699010987, 0.07984217731556487, 0.1632726112759072, 0.14139041750285875, 0.04850554241968619, 0.0347669124193668, 0.03482642708318928, 0.04685703771258265, 0.0829998748394537, 0.15079468700607235, 0.1089079837494803, 0.1675294029043889, 0.21448431718636174, 0.1697475831932379, 0.306671614379585, 0.19223731130064314, 0.48373590343535255, 0.10228763686817588, 0.26316291964413263, 0.22912356852919236, 0.13336559056574737, 0.14324344061212446, 0.10417636325053026, 0.5981205876421878, 0.5742374794571321, 0.6164895716550594, 0.5343084914668175, 0.5902470003052944, 0.6150647154333986, 0.5671507502663873, 0.5422606995137713, 0.5652860403560298, 0.12533164696880716, 0.11743819452742887, 0.11842917598508262, 0.10186117901616276, 0.147449491399812, 0.15171304780516837, 0.13866013468929328, 0.10562026569463867, 0.11144913581838267, 0.2516757929966761, 0.14829426242380872, 0.17979083785754268, 0.2247783835559366, 0.5200414203271444, 0.40669603185170056, 0.21808898388269926, 0.2468301345707472, 0.264002452031208, 0.6519598595387195, 0.4531042253117652, 0.5263029438852274, 0.5262769993196222, 0.39276347001969225, 0.6048133716840962, 0.5953161957674176, 0.5949704871948164, 0.5303466461867488, 0.2708935814900223, 0.2804606805396118, 0.258122049230189, 0.3326547000268121, 0.27101509667202217, 0.31616730869197174, 0.2744728086924587, 0.3805387888802918, 0.43248955166575076, 0.22697877276180833, 0.23521316985217733, 0.19439122125918218, 0.23674985723676711, 0.22149492147843475, 0.2213299276278735, 0.26175136855963177, 0.2212183125979248, 0.24112155247650024, 0.205841539536605, 0.19500121897559963, 0.20873520011591296, 0.6519843992653572, 0.23905547443603004, 0.2187576050524378, 0.19370338595428538, 0.1854252741558945, 0.2031773244647319, 0.8784186224209541, 0.8693841490380617, 0.15304129138869305, 0.76202763619355, 0.8476367423518467, 0.1982025549773181, 0.14106066641182446, 0.17881835008563263, 0.8831552374234631, 0.8393774341460901, 0.3840235008002575, 0.07329654169303157, 0.771233187175224, 0.2692087126229723, 0.16387270587444347, 0.11210680721586264, 0.16538881561448382, 0.7701892758064869, 0.17638606852822392, 0.17677112589722033, 0.18197708639705734, 0.17344776464225264, 0.18021842465362137, 0.1834745815723855, 0.1837782711040522, 0.18440182094819557, 0.18013308626412927, 0.09943077256063793, 0.09076465864579242, 0.09007490141172658, 0.09383519519885963, 0.085002366423369, 0.07882389232035636, 0.0922593069957105, 0.08523195067166311, 0.0890894983523105]}, "mutation_prompt": null}
{"id": "1f53c216-3936-477f-a3bb-71992ceabe67", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "a0abacf7-9c4d-44d5-99a3-beac247aae4a", "solution": "import numpy as np\nfrom scipy.stats import levy\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with adaptive scaling\n                scale_factor = self.F * (0.5 + 0.5 * (self.evaluations / self.budget))\n                for i in range(len(subpop)):\n                    if np.random.rand() < 0.1:  # Apply Levy flight with small probability\n                        levy_step = levy.rvs(size=self.dim)\n                        subpop[i] += levy_step\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + scale_factor * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "A refined AdaptiveMultiPSO_DE adding Levy flights and adaptive mutation scaling to enhance exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.24355567438926579, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.5731106651544748, 0.6286591662613867, 0.5474710160300401, 0.5932111915825862, 0.5683355769530326, 0.6486006830975566, 0.6125866327796273, 0.5727280457504786, 0.5113841861271761, 0.05505840124846051, 0.1170337852939165, 0.09704058331524867, 0.1987261706097263, 0.11560679187842782, 0.15130729009995814, 0.09202875608096217, 0.23620832367001243, 0.10628141644502664, 0.13798321915404177, 0.12830435019522846, 0.10145790944953881, 0.1657787611042153, 0.09593031573118715, 0.10217708786083224, 0.13803777220282487, 0.13388018072937613, 0.09206072648413832, 0.1251637343962113, 0.10429003816807403, 0.10004954600281057, 0.11066320979295818, 0.08359256547644656, 0.10582784460693473, 0.11747542219948814, 0.12714116786650953, 0.1186521289697342, 0.9282512650532411, 0.9534378638092134, 0.9464164646905858, 0.8646528136616376, 0.9312654614678079, 0.9186415963829293, 0.9119564815955145, 0.9210733404766293, 0.960573451056205, 0.36218876165562475, 0.30275399623674815, 0.34184109400651164, 0.17000851851478493, 0.2158629290068983, 0.23024058650643797, 0.32010956701332693, 0.22343301043831199, 0.19983598251488888, 0.2383771158555511, 0.7900336566075499, 0.39772291287612704, 0.21965828589246206, 0.28098679770819956, 0.9031764417681908, 0.13159566292571367, 0.23331573554989637, 0.17516780101293494, 0.12709231773320995, 0.1744668769180775, 0.14730102583418758, 0.17331071049464986, 0.152984615108963, 0.14019827564846232, 0.14233477735446343, 0.16882260128776982, 0.13199711712204076, 0.1503940258768396, 0.13008294080128602, 0.15308317190973542, 0.14448816456762126, 0.162320317276891, 0.1451564569218201, 0.18101656365504282, 0.12598586398272726, 0.15383379402862152, 0.04564566742704734, 9.999999999998899e-05, 0.04572106791446773, 0.010274600393712197, 0.003973390805729338, 0.02107777920412046, 9.999999999998899e-05, 0.011404503890029782, 0.0773038871869921, 0.1277940930224417, 0.09005061434452433, 0.09812212339131621, 0.09676849758279826, 0.07869481597924766, 0.051130545162738406, 0.07193123775502785, 0.08698243693747842, 0.0711516034527847, 0.03802558686502511, 0.04700216757726161, 0.0780076852833621, 0.04853120198404626, 0.05289579854548232, 0.08004293360520764, 0.013725625044380463, 0.1740501859449891, 0.05341268759692086, 0.14833000268065022, 0.12396811926537499, 0.12453367414551253, 0.1205331191926653, 0.16919644890070418, 0.16176956557540811, 0.1212417007181319, 0.10292725521466384, 0.10990839521382456, 0.49018773301637597, 0.49222969614687717, 0.4786471075566977, 0.5218943561409132, 0.39981969369563153, 0.4741900697651016, 0.5071509037638715, 0.49066661676114953, 0.5067452796891223, 0.10159888001149886, 0.10860669853954974, 0.09213628641936644, 0.1140792357974919, 0.09738288013521657, 0.13326707780214275, 0.12060378661511462, 0.10247654609272683, 0.11534173385047175, 0.12757482580969248, 0.15647929823459528, 0.13500890540611732, 0.14651178843058255, 0.14543408540319447, 0.15656037716336013, 0.1534775402128047, 0.1649841162603679, 0.19615749557965678, 0.30875814614815034, 0.33431703545325686, 0.2830340757348526, 0.329428076815215, 0.26306648566772983, 0.3392463202822451, 0.36348536518990515, 0.2968849327636406, 0.3719727110290122, 0.25587623273320326, 0.18586184808506745, 0.26632992288821444, 0.17304091684652523, 0.3487069096821036, 0.222904390781123, 0.2421558017037887, 0.2232601105099028, 0.2488085419011059, 0.1954695333645755, 0.22496192069291154, 0.21367528452584217, 0.20153807554190994, 0.20459931728829295, 0.2330544984885513, 0.23397918658119343, 0.19580343270641543, 0.22322828002750317, 0.24070515875150644, 0.19328336057174333, 0.18821672225215014, 0.200521157881836, 0.1912190229756956, 0.22751202731743636, 0.22633301898573277, 0.2026692950436867, 0.17989954646678308, 0.18762238905267137, 0.1662415813819429, 0.18407698064749412, 0.19902432501251643, 0.198722333122213, 0.7631968595396976, 0.645023143649887, 0.8186765346686065, 0.75711449399092, 0.6660138962726536, 0.2087546715981683, 0.20394841478003745, 0.5325061626001664, 0.1684807068945665, 0.16596762574222645, 0.1529439799224228, 0.4146677795923691, 0.16346480114028694, 0.16310295998697488, 0.1838399466417907, 0.16707673597927153, 0.17596844903840536, 0.19078014944282062, 0.17118029556987602, 0.18338018828974045, 0.17545553119345403, 0.18204360418662913, 0.09107564090833309, 0.0928245863237731, 0.08584627149968804, 0.09272941851332894, 0.08425919028207396, 0.09747506278043183, 0.0798085073406557, 0.08535042214787314, 0.0987414589899035]}, "mutation_prompt": null}
{"id": "1f4ba2ab-7001-43c6-9136-0d6b50ebc68e", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * ((self.budget - self.evaluations) / self.budget)\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive mechanisms and diversity preservation to enhance convergence and robustness.", "configspace": "", "generation": 59, "fitness": 0.33458719840555734, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8414612882417365, 0.842547409217705, 0.8597075718630846, 0.8388185175416407, 0.8272811754789554, 0.8594818444219348, 0.8437411291412422, 0.8449108518917363, 0.8454485938954608, 0.6988190562088668, 0.7286191629096201, 0.6871787084058312, 0.7091016820542185, 0.6964798831147898, 0.699384824544488, 0.7086939369674174, 0.6934375146687204, 0.710356530431353, 0.14308322907406024, 0.1500600305627442, 0.11964352223586627, 0.14385941604594832, 0.16489673532540383, 0.14031152571070737, 0.14230900182164385, 0.13083823523373617, 0.16463189728663752, 0.1400568228553135, 0.11124186240082168, 0.1304303826624582, 0.14673560908344607, 0.14446166645175706, 0.16455744312179654, 0.11638808322052807, 0.10964148079138036, 0.10063258864021063, 0.9611714506362369, 0.9811749639337911, 0.956301551712656, 0.9483730222492391, 0.9785091677450648, 0.9796085224098576, 0.9692099407424051, 0.9530925991114357, 0.9712951594764692, 0.7092792119532725, 0.6604248008691634, 0.17600484055032317, 0.687218895268448, 0.6980706348178909, 0.5450267003813789, 0.5985282529361806, 0.6873071201383067, 0.6026165183287497, 0.8688900876682755, 0.8021395280988479, 0.8514468359708947, 0.21757334918038773, 0.2746753088765106, 0.8211255315571294, 0.7918141782077477, 0.801660578248991, 0.7796947033818311, 0.16436759206155438, 0.16898570498942955, 0.15351761653842644, 0.16108064223203222, 0.25743757172161297, 0.1893762473011723, 0.16031553924295638, 0.12591813950467234, 0.1765941782260817, 0.1272617899867995, 0.19448906847724456, 0.15578744889077611, 0.19189803545994044, 0.12962897697745235, 0.17098927019348464, 0.15062933731397987, 0.18895476530942013, 0.13111234398254978, 9.999999999998899e-05, 0.0671254747927964, 0.005091802325727035, 0.025265258999640938, 0.0681189535192781, 0.0018192154591075704, 0.008337687082187406, 0.003025112984920475, 0.04521953662059619, 0.18203239135123817, 0.11143901082148933, 0.09600643989719215, 0.14698356383683042, 0.029814323249807595, 0.1102733583701403, 0.14899628522411545, 0.09197242841352982, 0.16367725150945955, 0.10232644337158059, 0.08285161642381134, 0.08234020588243707, 0.09393054095355946, 0.20978058946958433, 0.07412799793051417, 0.08181462672721918, 0.16061067512581573, 0.09217321078180685, 0.1280944596679956, 0.08121366655950624, 0.1081378827078866, 0.14420095362432916, 0.2200799256377487, 0.13384836036626235, 0.08055210299683746, 0.15874387504686494, 0.09084987244084586, 0.5090282558316399, 0.5855254988138672, 0.5935254154291859, 0.6198878909063688, 0.5746067604884819, 0.5805640417893017, 0.5686698292273904, 0.5746150470373409, 0.5716161533234394, 0.10913969396708267, 0.17648718739114944, 0.1197058467247234, 0.1439656440952709, 0.13586963627343518, 0.14993427160091688, 0.13606996093071067, 0.15275695949205947, 0.12515851271933465, 0.21568141775844663, 0.1259381224247198, 0.15132572327706584, 0.22903339158545, 0.18915190580481067, 0.24157674308497257, 0.14227981861223793, 0.21307555828251734, 0.3014852813229818, 0.36383558424912876, 0.6682890426683561, 0.5787937477774157, 0.37328855169631936, 0.463665038657737, 0.6466824789509733, 0.6440499686390113, 0.6055668141830637, 0.6267579991606262, 0.4092279659641014, 0.2473631620474891, 0.32633956412152476, 0.36820646311011074, 0.35548747404487535, 0.29365317590537954, 0.21034654940684339, 0.3717998353078168, 0.2944096557069179, 0.22508486138313455, 0.1694556181230933, 0.210808744399957, 0.22466421741941256, 0.20652893316980603, 0.24267458894806726, 0.25489547278295044, 0.19839263545761376, 0.22891685652445026, 0.20619463230236312, 0.24304692641543157, 0.6456187208186772, 0.2068199330316085, 0.23643326476774418, 0.23567639790546369, 0.19737883551732704, 0.1820845549692146, 0.1881092976717036, 0.18442343724487775, 0.17440544325635798, 0.1522018525263884, 0.17106939071629734, 0.2000261045980588, 0.8748476666496456, 0.15653047784559804, 0.8656196721462447, 0.8868271893040012, 0.806530725731668, 0.20894342556082646, 0.12438971975544533, 0.20676917043896037, 0.2057353976807691, 0.15080108233350298, 0.20890126265715458, 0.20805786582120667, 0.5249699875142231, 0.17678437606064257, 0.19160029774954723, 0.18770910499334725, 0.17444328175552892, 0.1822409194224741, 0.18526424270313424, 0.19273068844627061, 0.19248394552281822, 0.18776248338354817, 0.09214179610885931, 0.0855010570849698, 0.09003113794624551, 0.09397414367945645, 0.08642425470872694, 0.08681544870205793, 0.08444007221065697, 0.0908172606779748, 0.09059630470529445]}, "mutation_prompt": null}
{"id": "05117e8e-10d7-49a2-b2ef-b71ef6bd6754", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.6, phi_p=0.7, phi_g=0.6, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                dynamic_phi_g = self.phi_g * (1 + 0.2 * np.random.uniform(-1, 1))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n            if self.evaluations < self.budget * 0.5:\n                self.subpopulations = np.array_split(self.positions, 3)  # Adjust subpopulation strategy early\n            else:\n                self.subpopulations = np.array_split(self.positions, 2)  # Reduce to fewer subpopulations as evaluations proceed\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive subpopulation strategies and dynamic parameter tuning for enhanced performance in diverse optimization problems.", "configspace": "", "generation": 60, "fitness": 0.31356840600879915, "feedback": "The algorithm AdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.807144110069928, 0.8242162391948125, 0.8176996718778665, 0.8219758333206914, 0.7995492037792696, 0.8344355885211342, 0.831762389315201, 0.8064316169267899, 0.813933167984762, 0.6635348093382168, 0.6562725056646781, 0.6671797391968712, 0.6086895885906656, 0.6052885404735107, 0.6316918246439772, 0.6313381738518091, 0.6434210182288367, 0.607929848342083, 0.1326910915352273, 0.12274574074858169, 0.12430333619200062, 0.14309889708656687, 0.11753029515472957, 0.11388494830009754, 0.13948669260239188, 0.1343890756364512, 0.12402893479580956, 0.10341392687000428, 0.12072800814391393, 0.10848762962100444, 0.11084439987580952, 0.13321653092452868, 0.12954843725957255, 0.11685350838744146, 0.12428747633274584, 0.11484122163066224, 0.9855378622770127, 0.9799854039587788, 0.9852937567509383, 0.9774914004585046, 0.9823407223296692, 0.9648464756235466, 0.9802825316643833, 0.9731243661589173, 0.9674069060130505, 0.6032812335259932, 0.6494938803403394, 0.6226665782195859, 0.6537589038137364, 0.6594389491218005, 0.6917167905875249, 0.6206498222954482, 0.5089354750667485, 0.673179708620119, 0.7966633516738544, 0.761086719675339, 0.21525964994053004, 0.7035541562935719, 0.35435215835702716, 0.2058924686425988, 0.2238330180559478, 0.7720938504260831, 0.22850437251092515, 0.1250542726805388, 0.2160187384873743, 0.2129026954823212, 0.19503498666837027, 0.1891118770506589, 0.15675876670599498, 0.12469040293769107, 0.18487866167437506, 0.11731976944841138, 0.17176372180615473, 0.1999623231661226, 0.12555381012564448, 0.1648564861965639, 0.2546979514532358, 0.18364250936436433, 0.12814507570400402, 0.18141779543832037, 0.23003145897144295, 9.999999999998899e-05, 0.07072268262590808, 9.999999999998899e-05, 0.001983838012711736, 0.03209531632513085, 9.999999999998899e-05, 9.999999999998899e-05, 0.021970294057309547, 0.008233381213990976, 0.1362612310045802, 0.11306843915767972, 0.04774136610855606, 0.07586206364980608, 0.053629599808904804, 0.06463474309278483, 0.08218760992632868, 0.058212858023064085, 0.101686571104595, 0.0628837303335309, 0.06887665717138969, 0.050428014684508526, 0.06606320615000127, 0.09857434703230084, 0.18792247484747948, 0.07850856959712149, 0.08969067101396011, 0.08893999428987864, 0.18311377406394713, 0.1292259260212424, 0.13714742042785033, 0.10589426624070841, 0.16446944140673003, 0.11623237492798255, 0.16842159804366752, 0.11862015593856046, 0.1229647764012568, 0.4987352659800882, 0.5420533383326664, 0.5196643414335222, 0.5486455660964389, 0.5843178669793949, 0.5356844626659623, 0.5855547260311481, 0.5731672320602599, 0.5292195125562296, 0.11549082550985745, 0.1226824931623165, 0.12634020582069316, 0.12536547409543852, 0.11924537413586878, 0.11139449822496716, 0.10770943001519284, 0.10238609349306571, 0.11951959954570834, 0.15168033730189268, 0.22717646495408028, 0.24136340439100445, 0.16256050645268916, 0.1380931685134068, 0.1421833986966209, 0.16182515942831144, 0.12826082168024278, 0.1530704421134511, 0.3542417795334394, 0.524976258328774, 0.41569446054798775, 0.3409979695247053, 0.4872627584222964, 0.45337313053733874, 0.5066685884993525, 0.5242938304705778, 0.534471856327882, 0.36154298643848193, 0.23736680953542333, 0.25491097541235475, 0.25494605471080245, 0.2187185652681588, 0.27988201656575973, 0.28809158783079525, 0.3538872958070116, 0.29028317939642934, 0.21854303623393312, 0.19133405701117534, 0.18410538735131243, 0.20380417107402193, 0.2090372944492106, 0.2172636757323686, 0.2115193206581848, 0.19136366413944428, 0.20819633479649047, 0.20335067321643518, 0.2009613829882877, 0.2123805666738997, 0.22192429213913833, 0.21355028112501473, 0.2307974834944666, 0.21209603483900297, 0.5680838072826535, 0.5958547680400967, 0.18557632699288906, 0.17902963297708097, 0.15060248992591163, 0.1657580953808816, 0.19714213929712765, 0.8308450270867112, 0.7709158890770723, 0.17378381581814406, 0.8121929632687681, 0.727904870610411, 0.2011826702981282, 0.20157913109773862, 0.20136319576803485, 0.16631089647293462, 0.32497976936633943, 0.21119955693777392, 0.7312697237442419, 0.339486638093937, 0.17589514653467253, 0.20822117166124254, 0.20140319681285523, 0.17008304717301526, 0.17850837458246793, 0.17718896829834685, 0.1847065386089709, 0.17572622654109327, 0.17343663508072427, 0.08549208531388974, 0.08300525377439738, 0.08603518581969805, 0.08212741702904403, 0.08610235112586939, 0.08784721384012062, 0.08461506690609966, 0.08598440648801586, 0.08805500713706482]}, "mutation_prompt": null}
{"id": "e18919ec-3b8a-4acc-b985-fa809d9510e2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.5, phi_g=0.5, F=0.9, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.5 + 0.5 * np.random.rand()) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 3)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with enhanced adaptive parameter tuning and diverse subpopulation interactions for improved global convergence.", "configspace": "", "generation": 61, "fitness": 0.32159245924795604, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8576268168387553, 0.8401057200746348, 0.8241554664572419, 0.8398183513518076, 0.8339564763482323, 0.8360906828710225, 0.8528013075403602, 0.8241298075487736, 0.836628751198075, 0.6760784851006163, 0.671532596603162, 0.7001319532073039, 0.6807744659320456, 0.6729064788602024, 0.6917126873542455, 0.6868438395133727, 0.7084651026723354, 0.6974862150500996, 0.12060144252147242, 0.10179145956806335, 0.11585403822699536, 0.1408653283743393, 0.1370096365842639, 0.123471619596078, 0.13808240207089695, 0.13042811636103668, 0.1657115513925539, 0.12887406372794352, 0.1039459571417859, 0.10616366907681385, 0.12223572730962429, 0.10595637742972353, 0.07990758568599954, 0.12925625547610908, 0.10645151465996916, 0.12227217010571534, 0.9485652151157983, 0.9787236726805564, 0.9856468528570769, 0.9691654781149843, 0.9680594587603164, 0.9754390453079558, 0.9612178837323461, 0.9591673999648396, 0.9700470112747948, 0.6796237220089956, 0.6111103453831702, 0.5243291230691172, 0.765038908812515, 0.6559794271076822, 0.7250521606323179, 0.6978938619158637, 0.3646504254521541, 0.6175304017763745, 0.8270778799724394, 0.22131315293233778, 0.8624020752386008, 0.7533597835590152, 0.2078464863636723, 0.19134672898918903, 0.21474778684065599, 0.8161775829971591, 0.22861364851944277, 0.1627160342218743, 0.1821542083676484, 0.20986588608031143, 0.22933733771999743, 0.13089890872768029, 0.16818051451161664, 0.1725861945391054, 0.17940682739733715, 0.23997903267304932, 0.21141053164744394, 0.231042238069611, 0.1278108247212063, 0.17587662697641104, 0.2415590794202529, 0.1717236041804051, 0.24253949261587304, 0.09478162398285328, 0.09384492982096948, 0.004665194075639589, 0.005736625046684818, 9.999999999998899e-05, 9.999999999998899e-05, 0.03339681262360772, 0.047502562167860196, 0.006090641985410761, 0.010346212468646088, 0.008908893431813114, 0.1375325746410736, 0.11519938644190753, 0.1128324628140841, 0.09278690457760164, 0.02971517716183736, 0.02072617606515248, 0.06069863585678015, 0.0255911824634677, 0.10082875212334586, 0.04596274161976377, 0.13692984038189027, 0.12834562753327905, 0.0741553682424545, 0.35995308470295373, 0.13441111553241936, 0.13440360836164655, 0.15027542550134043, 0.08893737566327053, 0.17398155576770746, 0.1935122859490812, 0.06285285606817037, 0.16349639235622893, 0.15194991118628554, 0.24997935345346356, 0.10246923791144402, 0.0958049518653894, 0.10945290334470514, 0.5442744584384158, 0.5516598890666633, 0.62026870662702, 0.5685751363600238, 0.6012087685281908, 0.5589734293380202, 0.649399112148735, 0.5965784999445969, 0.529477286624516, 0.15696159495663287, 0.1548939517181085, 0.14579017056080557, 0.13520718981136592, 0.14625182234978806, 0.11636436291852004, 0.16755773286542008, 0.13736823135038356, 0.11925240293081474, 0.2225468818817632, 0.1489456809615758, 0.13311583558424156, 0.13985002518667844, 0.22849277130462964, 0.1631665678168447, 0.16493993046488709, 0.13094161732790366, 0.15095201138457448, 0.3378274318104617, 0.4950393432927159, 0.5473556730453648, 0.578922660176668, 0.5594349567737081, 0.4864460755122697, 0.5474636779909292, 0.5353103656140024, 0.526955607146866, 0.36506350827266265, 0.3231047554016284, 0.35276257499362196, 0.40512510939449153, 0.2993616664540424, 0.37449388810461826, 0.4034644786456716, 0.3898486439137355, 0.46055448045085934, 0.2039897008870114, 0.20785587142452022, 0.20526512168239153, 0.23079934805662394, 0.22704040314074114, 0.20197769775944485, 0.22036328785210357, 0.196563950152575, 0.20521745361608046, 0.20129826130799777, 0.2104226348546816, 0.1918156333797022, 0.19432170065142151, 0.1978580923886265, 0.20544468392486293, 0.23728264622054074, 0.2230365426247134, 0.21564045631183504, 0.8462761109475898, 0.18190306155816038, 0.1516566473759121, 0.8924705560549708, 0.19664050127316302, 0.16564293187917667, 0.15887004211609723, 0.16003699810500693, 0.8454974158266131, 0.731229515674119, 0.1690944912559491, 0.1246454438207093, 0.20859948851869292, 0.46648696188152194, 0.15354238493536287, 0.20882126038119642, 0.1660470779833937, 0.20519034148035675, 0.18185730718862947, 0.17607275972339154, 0.18188265058624908, 0.1924980234113487, 0.17304961962448429, 0.180977352888827, 0.20457443744414272, 0.18373898886095352, 0.18139491845925215, 0.08527569075900976, 0.08094361607788692, 0.08965324625409576, 0.09886653245263366, 0.09786960871788819, 0.08007438552395985, 0.08219631010288997, 0.098437363129111, 0.08861933933335908]}, "mutation_prompt": null}
{"id": "94d531f4-6930-4684-950c-cad5f176021a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = np.copy(self.positions[0])\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate and update personal bests\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            # Update global best\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = np.copy(self.positions[np.argmin(fitness)])\n\n            # Update velocities and positions\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = np.copy(trial)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization and Differential Evolution with adaptive inertia and mutation strategies.", "configspace": "", "generation": 62, "fitness": 0.2638178648411617, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8662291739175909, 0.8565521294731924, 0.8556963758037124, 0.8535510264765284, 0.8614685108088604, 0.8493027452612404, 0.8645330446412685, 0.8436612446708183, 0.850548035773868, 0.12214516189886448, 0.12167120380425311, 0.006134077413292971, 0.11624784658794851, 0.12604558032295832, 0.14936034691038913, 0.14772790838622718, 0.16541569721873506, 9.999999999998899e-05, 0.18033086428417755, 0.18090355093099253, 0.15661805930661743, 0.09873127569657736, 0.11058886542386792, 0.11008948261258322, 0.1139845077894901, 0.10800917850721492, 0.11424733275684795, 0.11275310877250633, 0.11376339196328389, 0.0981692355836169, 0.10217326347859268, 0.10577435758900633, 0.06109941631345828, 0.13642863010017048, 0.11955440561960728, 0.05467270358175369, 0.9505059651980299, 0.9496453353352202, 0.9407815187324428, 0.9072164840469225, 0.9324846452445413, 0.9406759036942224, 0.922689484371634, 0.9217349525805799, 0.9414897241180048, 0.23477359408431075, 0.4891908700629036, 0.10359674707313771, 0.34146629563128184, 0.23809907945950481, 0.2195152928922509, 0.28073172094808574, 0.1111772162420952, 0.23779456501316354, 0.22779953203986347, 0.8591975953702771, 0.20802196053377497, 0.3775415965654254, 0.8442723648462275, 0.3603132692975257, 0.15072267593768096, 0.17730442413828917, 0.22485517396009114, 0.15586283460181005, 0.19963815145466401, 0.14940131007037472, 0.14281695042430242, 0.15010101513536467, 0.12733366018447045, 0.14950383146577917, 0.15112553662796036, 0.21253745529884072, 0.16819955385328267, 0.17280406219823397, 0.16632803378903083, 0.1278960280667727, 0.1397787451578686, 0.13164500672026913, 0.1430490624719445, 0.14763330026160582, 0.110795816469768, 9.999999999998899e-05, 0.11211807173044475, 9.999999999998899e-05, 0.015856016473001056, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032187742021527743, 9.999999999998899e-05, 0.01380996919797306, 0.0831104363984525, 0.09031748205014845, 0.09389894338361404, 0.07899979543750779, 0.029521106331043323, 0.03163444293909212, 0.11038754367779113, 0.07303142605274204, 0.10777761778833561, 0.047271299426987046, 0.15647019280688457, 0.13775882833621744, 0.08348016532025127, 0.11677201426590822, 0.07389191327675249, 0.11988485789557723, 0.2201878647183334, 0.09518953407976782, 0.055773747677250185, 0.2041399460620723, 0.1487913085619592, 0.06064578078555438, 0.1780301330652243, 0.1136827337749432, 0.3368049365125274, 0.19784805747512502, 0.08192566839447879, 0.5562940777783678, 0.5229767829244152, 0.5519772387869009, 0.5161135186134744, 0.5670264369593188, 0.5167744476206237, 0.5100756324079129, 0.5360398001971495, 0.512290678596224, 0.1027516880800271, 0.09278016127376554, 0.09235642203249894, 0.14817641013602534, 0.12460250307358534, 0.09490639435385095, 0.14240252863082592, 0.1580411251218724, 0.12116829938882223, 0.2737775238126573, 0.22419555239732558, 0.22882084457240914, 0.18310830242500564, 0.3243400197166586, 0.16134886992900688, 0.5492221902899678, 0.2095548579865113, 0.27671004849940184, 0.31478834797101174, 0.3119486010481888, 0.31236298728099676, 0.28170380314587495, 0.3984411332718141, 0.3697561436499597, 0.2814399405646407, 0.4794396121697384, 0.552157123014543, 0.2274391386971144, 0.2802866941438845, 0.23554363265458977, 0.2767936347926161, 0.3492081410627338, 0.24774870401858384, 0.24128058207800607, 0.27806208082288386, 0.24475997303600405, 0.22688148376624284, 0.2162200650335533, 0.2316752283066419, 0.23884829652274353, 0.20160983546692823, 0.21484504243882874, 0.22763504998195994, 0.27164827620025367, 0.2165320217607214, 0.18165416603636508, 0.17500751089946975, 0.17792710042316062, 0.20830275543482535, 0.20105990345448077, 0.20436706239642177, 0.17818892064510405, 0.19252393250619537, 0.1862346706080359, 0.8942997880824177, 0.16389968496729257, 0.1456042992928347, 0.9127513889098424, 0.19915383465259773, 0.19738446124522524, 0.1414520671231505, 0.16633252747313787, 0.8860519148058996, 0.390030881672077, 0.21111050328212155, 0.07347147146698285, 0.28866206427794616, 0.23684756741062207, 0.15079133723327853, 0.21018212708908512, 0.28513575519246237, 0.3281387113178824, 0.18598322622524155, 0.195575132973961, 0.1814245969735906, 0.19617551623822183, 0.18866463727571348, 0.18964425920240202, 0.19400994429151797, 0.19160792924340742, 0.1933934999228859, 0.08315562933830822, 0.08827219110786522, 0.09148190808557666, 0.09795482917551379, 0.09045452354567474, 0.08727286181162164, 0.09637031616572822, 0.09037741579219039, 0.08232536246886724]}, "mutation_prompt": null}
{"id": "bc45a564-cfdb-4851-a3be-7e7fd1120016", "solution": "import numpy as np\n\nclass HybridAdaptivePSO_DE_Levy:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9, levy_alpha=1.5, restart_prob=0.05):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n        self.levy_alpha = levy_alpha\n        self.restart_prob = restart_prob\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def levy_flight(self, size):\n        return np.random.standard_cauchy(size) * np.power(np.random.rand(size), -1 / self.levy_alpha)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                \n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    if np.random.rand() < self.restart_prob:\n                        subpop[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                    else:\n                        indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                        mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                        mutant = np.clip(mutant, -5.0, 5.0)\n                        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                        trial_score = func(trial)\n                        self.evaluations += 1\n                        if trial_score < fitness[i]:\n                            subpop[i] = trial\n                            fitness[i] = trial_score\n                            if trial_score < self.personal_best_scores[i]:\n                                self.personal_best_scores[i] = trial_score\n                                self.personal_best_positions[i] = trial\n\n                # Apply Lévy flight for random walk\n                subpop += self.levy_flight(subpop.shape) * (1 - self.evaluations / self.budget)\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridAdaptivePSO_DE_Levy", "description": "Hybrid Adaptive PSO-DE with Lévy Flight and Stochastic Restarts for enhanced global exploration and exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'tuple' object cannot be interpreted as an integer\").", "error": "TypeError(\"'tuple' object cannot be interpreted as an integer\")", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {}, "mutation_prompt": null}
{"id": "bc434b3b-a5cc-44b7-979e-49b934d84ac2", "solution": "import numpy as np\n\nclass EnhancedPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = self._init_positions()\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def _init_positions(self):\n        # Using a chaotic map initialization for better distribution\n        positions = np.zeros((self.pop_size, self.dim))\n        x = 0.7\n        for i in range(self.pop_size):\n            for d in range(self.dim):\n                x = 4.0 * x * (1.0 - x)\n                positions[i, d] = -5.0 + (10.0 * x)\n        return positions\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 3 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO_DE", "description": "An enhanced PSO-DE hybrid using adaptive parameter tuning and chaotic map initialization for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 64, "fitness": 0.32299728081585344, "feedback": "The algorithm EnhancedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8618710139452281, 0.8506337032704606, 0.8574048831106921, 0.8258891454616718, 0.8536009479360993, 0.8477533945471405, 0.8586025266974164, 0.8457906264837383, 0.8424809578675974, 0.6611532227766221, 0.7312034480351823, 0.7141484990936616, 0.6926935703452852, 0.7114681792890047, 0.6353891703180734, 0.7312838353660072, 0.7228656157234117, 0.6943478465903039, 0.13433879045997676, 0.12900082809416147, 0.11433463573718905, 0.11995649808462261, 0.1354107527135402, 0.1379872895130586, 0.13068791920907752, 0.1351975550693716, 0.13500842436753224, 0.12588566819985458, 0.11024654635433218, 0.14885360663501357, 0.10580459271735454, 0.09055033619995678, 0.09518867258151131, 0.10522140655774159, 0.09859344589646424, 0.13800713807831377, 0.9655999807346066, 0.9653431806976353, 0.9689672527937405, 0.9655617861779867, 0.9649990573795652, 0.9695187072224628, 0.9390984379507199, 0.8863098714765457, 0.9396475842855928, 0.6325343602464346, 0.4582000883760513, 0.679462274584369, 0.6542168855962058, 0.525780451021326, 0.43966395524893265, 0.4882472264912472, 0.3656268744937844, 0.4315069426210465, 0.23437650582621072, 0.36251338453273874, 0.3820709816062494, 0.1919930683601987, 0.8744270169731454, 0.8632104431735725, 0.22592286241410997, 0.17546038796705798, 0.21977936392970765, 0.15764665556670765, 0.3471769882090433, 0.12633372323700065, 0.13598715739230116, 0.2081661631633832, 0.12694550291424223, 0.2038244035296357, 0.2478149078851084, 0.14926477844261465, 0.15462220711850294, 0.2236717278141408, 0.14926558030656922, 0.19039664388114252, 0.1769052897928688, 0.186589083168892, 0.1556053870646552, 0.12441063776936112, 0.18132081844679282, 0.07680406053059163, 0.060437190409010744, 0.03324981263286941, 9.999999999998899e-05, 9.999999999998899e-05, 0.09728010507871243, 0.10032036243095976, 0.018036442454063772, 9.999999999998899e-05, 0.15484262334238796, 0.1312865360373433, 0.16425773568829938, 0.1650851439019112, 0.11432996064038903, 0.10932565255779014, 0.07122076942008193, 0.10382941556755088, 0.09041365532354906, 0.1209726377439001, 0.04308833281532265, 0.060208847585647374, 0.10718310866487413, 0.10777518360273863, 0.23344634478558246, 0.18047661588948138, 0.17191692595378172, 0.1671401296840751, 0.09372313286045575, 0.21839879572201293, 0.17163966244714013, 0.28023343422203706, 0.228363208306534, 0.14735965704916143, 0.08123857555855651, 0.09732464763222326, 0.15040315507094415, 0.5335706428059467, 0.5710215335148987, 0.6316260330800143, 0.6258410653666303, 0.5381740397028092, 0.5647090302430283, 0.6114073844353196, 0.5866875029477397, 0.5594051970305134, 0.12926400776695168, 0.13731194246996603, 0.13167573876935057, 0.14553319641557394, 0.11337688242149124, 0.16450134158909058, 0.1687275323954749, 0.12943663382469006, 0.11885676007249768, 0.1726213086171916, 0.41372892540169803, 0.22371524736491832, 0.27999354647608676, 0.22798414845389492, 0.35718150264509163, 0.24095630670112178, 0.1588988841317036, 0.1824489173263124, 0.5956969102742812, 0.610381582062868, 0.63625797236672, 0.5662960021020522, 0.229697980798652, 0.22825039118319923, 0.5644755607155275, 0.5899223991965137, 0.6326989287068117, 0.5397787708088415, 0.24053407230579626, 0.2973401334293557, 0.18511587711554378, 0.2122227607184023, 0.24401785098102158, 0.3313552311744965, 0.5650781337324138, 0.17318651449927003, 0.23833621052269538, 0.2299465363104023, 0.20256622649539058, 0.1977181638274247, 0.2300454102457402, 0.22196957297897202, 0.20972397522293051, 0.18998101795374656, 0.19805926453029932, 0.2097234210841028, 0.1944696753868641, 0.19513157932623004, 0.2158836914376031, 0.20790570743682113, 0.21805515909330508, 0.19270934343129176, 0.24625379923227264, 0.1943773049455958, 0.16453598383546453, 0.16456604094838712, 0.8741538423259214, 0.8285544002841339, 0.164100325665422, 0.14584618457629528, 0.8921734877735966, 0.8861397209546761, 0.17113134678444075, 0.20787998962446252, 0.20445716129406521, 0.5619909536886281, 0.22728601439168483, 0.809517068571149, 0.16716022400375208, 0.15560081568716722, 0.21042655221103812, 0.156091810333429, 0.1785512181413329, 0.1984648622266797, 0.17312039209389474, 0.18574049080891386, 0.18617942067889837, 0.17651330392683862, 0.18322692883788794, 0.18691141038996328, 0.1703753484824232, 0.09670776531722536, 0.07715528421326001, 0.08400598440575291, 0.09063862883157381, 0.08579434683929776, 0.08948359664003658, 0.10937271701956819, 0.12256888596421345, 0.13041862202853094]}, "mutation_prompt": null}
{"id": "28c1500e-0cc9-4c6d-8109-5f61536d85db", "solution": "import numpy as np\n\nclass AdaptiveStochasticPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, np.random.randint(2, 4))\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveStochasticPSO_DE", "description": "A hybrid algorithm combining adaptive PSO and DE with stochastic subpopulation adjustments for enhanced exploration and convergence.", "configspace": "", "generation": 65, "fitness": 0.33396091548201245, "feedback": "The algorithm AdaptiveStochasticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8580407561200657, 0.8552191794876463, 0.8621764311736877, 0.8676803874258032, 0.8605184818428342, 0.8640470299229006, 0.851584392516906, 0.8695359497850188, 0.8590659213561638, 0.710684336546171, 0.7234069599500712, 0.739014463533826, 0.7070387240746748, 0.7412886129737117, 0.7543224123060486, 0.7471821047033731, 0.6955589981285524, 0.7000069582386645, 0.12417291662851604, 0.15659138028582542, 0.16395488537475233, 0.14269739838290807, 0.13583992384201482, 0.16981666679495444, 0.15141107362674644, 0.14321870422723637, 0.14049762276855726, 0.10619107224502589, 0.12804925686356838, 0.11719459717842351, 0.13556838333906784, 0.09737066357334712, 0.10208157080439817, 0.15162294645877772, 0.13722628314486718, 0.10456768742751088, 0.9347091996316392, 0.9658416137948128, 0.9498616485871357, 0.8766620222889185, 0.9111352776767682, 0.9877315559523121, 0.9876927822606015, 0.9348609205081899, 0.9632061118963836, 0.4324027173998941, 0.5897074234209283, 0.6429014867909658, 0.4767965019824679, 0.6429169732504647, 0.6921620109914919, 0.6632304539763203, 0.6544394855860545, 0.354140752948935, 0.3853076047383841, 0.8941880306661216, 0.377879262024414, 0.20776111233366068, 0.20875210109826436, 0.20903989236248544, 0.8521107465400071, 0.8647183792995655, 0.8531884024791717, 0.1798132812649157, 0.1897701188121904, 0.15240597003675993, 0.17402089976524693, 0.22196861156043934, 0.17320396009602845, 0.1492731060538961, 0.16167047770895893, 0.29835047620194044, 0.1635322464603931, 0.15927862535664827, 0.13000020443860316, 0.17650523743678748, 0.13766195585755048, 0.1714264182678502, 0.16390459002198254, 0.1251034228626351, 0.1381449644992595, 0.06338221298078328, 0.08801168317277075, 0.008031476685474104, 0.0713873980839107, 9.999999999998899e-05, 0.04547476449449028, 0.002610751566082814, 9.999999999998899e-05, 0.13439127018936703, 0.07836576231613546, 0.05815877602059005, 0.16573686439233737, 0.0747520193485881, 0.03480567893967346, 0.02509168354369251, 0.13931396036189925, 0.09888344177395503, 0.12980979825948857, 0.10290252858728932, 0.14503958664272065, 0.06813375627519558, 0.10797952327225024, 0.16267883833109376, 0.1784433374437152, 0.3986593792370683, 0.12921844712335717, 0.09978842724525772, 0.19700345746170833, 0.14671997376830714, 0.2600714889720921, 0.07128746020286214, 0.19377360180741066, 0.1447670911082718, 0.09833478875182589, 0.14842125003892526, 0.0945166228553751, 0.5314943099814571, 0.5286670768927458, 0.5739433761577601, 0.5559392427917161, 0.6153641349899154, 0.6269328878038701, 0.5810840415646539, 0.5197730377129648, 0.560964459717286, 0.12688160183184705, 0.13609404304272898, 0.10967100209695069, 0.12397389483109622, 0.12521075184662145, 0.13386307221552796, 0.14924246548482223, 0.13593655345500488, 0.1716771549048981, 0.2472583395030835, 0.2642818512140134, 0.21544015216174517, 0.30686321695768703, 0.17828022718989467, 0.14449017737192682, 0.3344127261414426, 0.24027197603386863, 0.4534631472955213, 0.5603756760887962, 0.666069357558018, 0.5556157833294006, 0.6669117048096616, 0.3673547365166391, 0.33383727175124345, 0.6852942368026134, 0.5735281432477162, 0.5392042785134401, 0.3367082482667424, 0.31610216673007774, 0.2923037536342151, 0.24785456822582042, 0.2487022451893105, 0.3832313767689236, 0.24611213137442267, 0.4263460765457555, 0.29400395996233797, 0.21123274122624658, 0.20856655131987267, 0.24733918130284382, 0.22446688436121753, 0.22617209087983703, 0.24704206105069593, 0.221011879999492, 0.2140470826589589, 0.22719104172195026, 0.18290472406517044, 0.1952528517619715, 0.18722165197954088, 0.2051833589085642, 0.22716393548816582, 0.19999137610694406, 0.18893979552802664, 0.1958168407608254, 0.18706450250206041, 0.8906770098148215, 0.15606070996249544, 0.1523309204761335, 0.9228746542332269, 0.20016149931884664, 0.13082418749836466, 0.8878486408078031, 0.16284840499361986, 0.9017293884362665, 0.48665219587248554, 0.1690398037736197, 0.36545078739612724, 0.20721061649466244, 0.35803467952159984, 0.4810036557352416, 0.209706708044751, 0.10374269142787285, 0.3613988242382299, 0.17981002660243617, 0.19570248898392817, 0.20081739465195092, 0.1836771180388912, 0.1998768048261621, 0.1754061331436777, 0.1869928965414761, 0.17902445087989127, 0.18360726356943424, 0.12299518455719849, 0.08225617956011733, 0.11044999584995252, 0.0872732081940587, 0.09394412274815511, 0.09531802108512688, 0.09132968207564951, 0.08800902298493107, 0.0838619121518901]}, "mutation_prompt": null}
{"id": "722b356f-f602-4b8e-8ede-ededbd6e2e5d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    adaptive_CR = self.CR * (1 - (self.evaluations / self.budget))\n                    trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced AdaptiveMultiPSO_DE with dynamic inertia and adaptive crossover for improved balance between exploration and exploitation.", "configspace": "", "generation": 66, "fitness": 0.3162146629470836, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8594751193018378, 0.8620272486787954, 0.8640343613707305, 0.8610405488572003, 0.8627264459551007, 0.8682520019088205, 0.8580831158956381, 0.8533102105122714, 0.8616805244977763, 0.7337357243433813, 0.7465409951951207, 0.7437854021908645, 0.7452816644213753, 0.7327056494092784, 0.7314280070378423, 0.7487484674210261, 0.7226411431977542, 0.6933870212048605, 0.13998974145819398, 0.12743202610812654, 0.1494490378434079, 0.16731921237571967, 0.12789266065365812, 0.11099085264124098, 0.140223299400136, 0.15259864344591756, 0.1275510007149092, 0.13244362124439246, 0.11441417121170983, 0.13565103652290234, 0.10897526152695103, 0.09229780747952232, 0.09529468494900828, 0.131902861542338, 0.11075252881871389, 0.13402649630132712, 0.9429238909318383, 0.9885742957485233, 0.9164009473889387, 0.9248574451889867, 0.9615177874388796, 0.9877312969847609, 0.9876846078551106, 0.9135520643615828, 0.9538415214527906, 0.3877784051089215, 0.4582222529854125, 0.514429537388971, 0.5042000178243229, 0.5168811825343553, 0.3117516115933413, 0.19162113591175822, 0.26219596909931564, 0.2974093070191103, 0.22720750588763972, 0.8839695445902506, 0.376592328141085, 0.21788827980855507, 0.8752887882056037, 0.8706557729594171, 0.2321366184633643, 0.22854362997408428, 0.17529445761545648, 0.10907185678753961, 0.2895109623112636, 0.14756566373424918, 0.2234779223307065, 0.1621362653656664, 0.1468507538196585, 0.16227990773044954, 0.15917718004909343, 0.14820772997010045, 0.14321849479656468, 0.12875871242802717, 0.19901504770537692, 0.168878826489811, 0.15404991155347547, 0.1373632855847482, 0.13343519715246932, 0.13746980355091565, 0.12732136638352332, 9.999999999998899e-05, 0.04865886405958264, 0.06323471398659164, 9.999999999998899e-05, 0.01969968158444757, 0.06323886062496242, 0.041646849861309954, 9.999999999998899e-05, 0.13982931327155512, 0.08531782811849897, 0.08515166947785657, 0.10532655231476751, 0.07848109236830647, 0.03821168425743182, 0.11585043167856512, 0.076285143521162, 0.08194695078919134, 0.0947406729123309, 0.0817231760625986, 0.05565161524769646, 0.13729656875190044, 0.09475670440809303, 0.07815257162544698, 0.4577811530548932, 0.14163829787873816, 0.2666176037219541, 0.11248422239596911, 0.31434385022302536, 0.2168539721857996, 0.21970039164853283, 0.0539608947750263, 0.28338087313935134, 0.22952894777294497, 0.12795551437207253, 0.10016399932180808, 0.11275354709169083, 0.5829046734112633, 0.49716383384578355, 0.5088368775661977, 0.5111011213725246, 0.5092138484486854, 0.5226147368882015, 0.6405100958045877, 0.5037852965932813, 0.5606930821393756, 0.14948437993332409, 0.1840439478203093, 0.11549168002977872, 0.16265798404953113, 0.11566195173047622, 0.11710999797509591, 0.1363631172473464, 0.08821877470176309, 0.16587986077984584, 0.26526676092700285, 0.2065242344256829, 0.3524459725903639, 0.21335683760382884, 0.19508151719678668, 0.2676060777137197, 0.2832142183600007, 0.1528821316448461, 0.14432666237888392, 0.415916772571297, 0.3357002263703164, 0.41150921606072655, 0.3964269335259317, 0.6784186520697242, 0.35039578794512194, 0.4011330562366985, 0.46547244272635735, 0.35854556075484456, 0.3163673744741451, 0.3739279677927778, 0.39506297785694255, 0.365775225346057, 0.33361253483828424, 0.44737649743284924, 0.29193999764973666, 0.2533462075431626, 0.29088304691020694, 0.22551751557900557, 0.21049865416200342, 0.21968393301652278, 0.24118397151269566, 0.238636941642685, 0.24166105504888202, 0.21332872091686728, 0.20029810776423518, 0.23367026112786138, 0.2471725947097424, 0.19387674144665668, 0.21902931311582885, 0.23670272379502744, 0.2031167054565094, 0.18677843696600738, 0.6654552703683898, 0.21987891009554195, 0.18807906045236877, 0.9111719660215192, 0.18438368507198777, 0.15061169960613097, 0.9123492388452807, 0.19952052712114055, 0.16796784868464143, 0.8964904863781173, 0.1682512316874203, 0.20690944377627196, 0.6893104496379452, 0.20833929415694452, 0.5879027586356913, 0.20733572130101896, 0.15035213505394351, 0.16518988579469174, 0.15221077407552353, 0.2570160974984833, 0.24557004458859233, 0.18761191126505006, 0.21803482603068192, 0.17618032589679933, 0.1986665330726337, 0.18896716063668062, 0.18941293465313125, 0.19401472697207933, 0.18659448783945676, 0.2018882838942494, 0.0951018817180499, 0.09087812527730876, 0.09691913032343968, 0.101110177158524, 0.09345255992393864, 0.0877674686716915, 0.08332623476243539, 0.08881331150808236, 0.0862328622220161]}, "mutation_prompt": null}
{"id": "11603d4a-3ac4-4b9b-a8ad-93cb18e0147f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega_init=0.9, omega_final=0.4, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega_init = omega_init\n        self.omega_final = omega_final\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                # Adaptive inertia weight\n                inertia_weight = self.omega_final + (self.omega_init - self.omega_final) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with adaptive CR\n                adaptive_CR = self.CR * (0.5 + 0.5 * (1 - self.evaluations / self.budget))\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < adaptive_CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "An enhanced PSO-DE algorithm with adaptive inertia and crossover strategies for improved convergence.", "configspace": "", "generation": 67, "fitness": 0.22472218106375078, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.48454289682263363, 0.5477478970723926, 0.5199967362596372, 0.5605158267791095, 0.6116586597847051, 0.5862724388545504, 0.555368124485924, 0.5568000517061691, 0.5614803028848862, 0.3259159716393445, 0.2807028919377754, 0.28434016564161935, 0.2636051448320963, 0.3217592042785503, 0.3783308128710864, 0.3314199223820935, 0.3154472813257835, 0.29792889990399996, 0.0987930693210588, 0.08157021220499971, 0.0846075743692094, 0.08663661299162229, 0.08069126004789506, 0.0788094700994727, 0.09412422076752391, 0.08576443425572544, 0.0797816377408288, 0.06517899304689634, 0.07850860142456173, 0.07258006656741711, 0.06707757924724123, 0.06563768930889258, 0.0770463645834234, 0.0756927227743387, 0.08359993475114369, 0.0705947800457809, 0.9739809339340656, 0.9811127532922798, 0.9786990186590522, 0.9573749448409075, 0.9827422883128534, 0.9802258927086431, 0.9786137553030272, 0.960736107327558, 0.9746308288092622, 0.27242992476682926, 0.3166996168352273, 0.3230842826486078, 0.33347013393946456, 0.28961050509108277, 0.29487168079718784, 0.2990182794569155, 0.2496558395309717, 0.3578098268523465, 0.4497359989889739, 0.4839567332862137, 0.24863595291632323, 0.22772514501071606, 0.22019557035004422, 0.17375055692048447, 0.3837725792376595, 0.4937573428570976, 0.47840523051306694, 0.10613303412915198, 0.11381428847653974, 0.11998230991659131, 0.123021013307134, 0.11102378538536417, 0.0938854520670126, 0.10356648193957185, 0.09054665977787824, 0.11999825806482056, 0.09033089954943752, 0.09849511462589489, 0.07459557472833855, 0.10572772598061819, 0.17369242835795173, 0.0952638522318533, 0.11237312999617699, 0.13373618700512246, 0.0882365716516077, 0.01961442459943119, 0.004086765499322409, 0.00513696798646901, 0.0014591398980213777, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011112896253498983, 9.999999999998899e-05, 0.007974461827723434, 0.09226681718635721, 0.06433358351496044, 0.06474538607824776, 0.08819240695191388, 0.05415087268659935, 0.06644145744690377, 0.11997418342496768, 0.062349080903474685, 0.06980708922707402, 0.0169895127046209, 0.05355876217488653, 0.020558902554519087, 0.039982017789190416, 0.09479853936161231, 0.039980930985656804, 0.029908259938100645, 0.07285883161527129, 0.09661461706059293, 0.13409236808842673, 0.04280277024096646, 0.14205476213611778, 0.07391680665607714, 0.08738979559627902, 0.09997883038074418, 0.05541336993409185, 0.049800931619480404, 0.09396856679537846, 0.3861217149378886, 0.3961113835071267, 0.438233383191019, 0.37549114772359193, 0.43643529319947816, 0.4251465222216223, 0.39396996527697037, 0.40798797877538795, 0.4074571820290882, 0.0938341833243681, 0.09853838550033434, 0.08273806807020212, 0.07671202885069628, 0.08378436138940526, 0.07938189044083266, 0.07993340903274948, 0.09410377362894329, 0.09320740598827071, 0.13988818656997082, 0.14055487554004142, 0.1796786411461626, 0.27286951640338875, 0.140372951458125, 0.13039352594996145, 0.1277540460446278, 0.21353428416852716, 0.1369957611434316, 0.3002605359493191, 0.21415405776156404, 0.2571612397734636, 0.30214084046511336, 0.2557024910063206, 0.26829331698357894, 0.3239761480513439, 0.28468740825395245, 0.30197715758436283, 0.21962207752564056, 0.21405694988449464, 0.22369826216318844, 0.15957741445410178, 0.2185990691071673, 0.20288893741419656, 0.24723365434341416, 0.22996027188031976, 0.23302067948702732, 0.17583299362420168, 0.17492214096442404, 0.17544540774831674, 0.17874530945865152, 0.17328642025331753, 0.1695869946483104, 0.17138827018122338, 0.1827613763877307, 0.17212041701768377, 0.1664082162945162, 0.17037677620939862, 0.19079790572287325, 0.23558935932399805, 0.17190983645186475, 0.17887760259474705, 0.16914057794444382, 0.16634775632707954, 0.19208013274243074, 0.6140299787374826, 0.5235156231525283, 0.14968060121932214, 0.18156299793278263, 0.4446640680618893, 0.17330293413407383, 0.15854863506448746, 0.15034150385921186, 0.5622841851599911, 0.17905067020720777, 0.1614145097755687, 0.1761523883658196, 0.16374332737604436, 0.22782007302091756, 0.32026611376543057, 0.2048472840965868, 0.2046131696086595, 0.2071833936006019, 0.1956966784300156, 0.21099967668878983, 0.22195979328808724, 0.17859218882214645, 0.196586853292687, 0.17585992629139457, 0.18148064678042108, 0.17179120834248518, 0.17439425448442003, 0.06636881297272934, 0.07043575261380863, 0.07446589979483165, 0.06511346548294061, 0.06886732601018009, 0.06837974952879144, 0.0682727490935997, 0.07230659942800399, 0.07527475391309968]}, "mutation_prompt": null}
{"id": "5d34bf3a-3a8d-4718-8244-4f7bcc790c78", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "ded4e2d9-b922-4a15-9535-3756e3eb3820", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE_Stochastic:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n        \n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        \n        self.global_best_position = None\n        self.global_best_score = np.inf\n        \n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n                \n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n                \n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n                \n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                stochastic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + stochastic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n                \n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n                \n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Stochastic restart mechanism\n                if np.random.rand() < 0.05 and self.evaluations < self.budget:\n                    subpop[np.random.randint(0, len(subpop))] = np.random.uniform(-5.0, 5.0, self.dim)\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE_Stochastic", "description": "A hybrid Adaptive PSO-DE with stochastic restart and neighborhood learning for enhanced global convergence.", "configspace": "", "generation": 69, "fitness": 0.33357118306162664, "feedback": "The algorithm AdaptiveMultiPSO_DE_Stochastic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8615293728012616, 0.8461449507082872, 0.8612315577693559, 0.8586970646224397, 0.8580245521418759, 0.8629379244160198, 0.8532669858982218, 0.8482266001842839, 0.8522579149068592, 0.6978390043413999, 0.715813720028973, 0.6927767966957679, 0.7083151548174093, 0.7235696794222495, 0.6915825175148433, 0.7204023262562245, 0.7386987721556224, 0.67259957310016, 0.14985576317724825, 0.11217195901761501, 0.17735841219328974, 0.12779114314628337, 0.1567234200343246, 0.11524504572267347, 0.15725907344650825, 0.12551763694434304, 0.1489081963159109, 0.1381431630204324, 0.1239030614237987, 0.10787180301525767, 0.13582910878815835, 0.12667404565295914, 0.13505867196092602, 0.12309367257618231, 0.118654728552814, 0.09130123822195624, 0.9531042232200716, 0.980212283491602, 0.9431328735913576, 0.9467530897500005, 0.9445772636305045, 0.9756392742054076, 0.9669154676360853, 0.9403634009453252, 0.9353910334473771, 0.7485660869444707, 0.7121832999297026, 0.5032275033304734, 0.5820375008857397, 0.45387483024906305, 0.6303765808035853, 0.41656521360643173, 0.40785894749633866, 0.5660249377685949, 0.8901860885902853, 0.8186858147174817, 0.37158613238041294, 0.27136688790199004, 0.36938487945071774, 0.21597948352033713, 0.22311003065326063, 0.23204306984501477, 0.2306040260531944, 0.16995083932382826, 0.1291854822190196, 0.1919488730131489, 0.16664397695659194, 0.18196997353346733, 0.1506479072988577, 0.12885550895929432, 0.16397357076346486, 0.16622095394714576, 0.23721778072906508, 0.1625573871134055, 0.1747191435488039, 0.1645492244226905, 0.1461003797778727, 0.1800599501948047, 0.21021542384038017, 0.12875446000421287, 0.1308821844458422, 9.999999999998899e-05, 9.999999999998899e-05, 0.08180254829223887, 0.07265952596425673, 0.06971385897913429, 9.999999999998899e-05, 0.04988207293359881, 0.04681862054029173, 0.013421126933017336, 0.168434128914008, 0.10241238817327869, 0.2529415409123059, 0.09959799557750904, 0.08078376756264771, 0.12477714859511435, 0.1035529883540397, 0.13349843646356163, 0.06496610220917665, 0.19845560416103214, 0.14974054276644733, 0.23597914325960578, 0.2504103147648332, 0.24496704724138962, 0.09526726657848539, 0.24443959314050812, 0.24512010350060132, 0.17550098856053442, 0.10092336945226432, 0.0822870785183486, 0.20824937962766454, 0.041149475633749044, 0.16412126549088701, 0.19557224780520366, 0.3627606475041223, 0.12484627854033992, 0.11409902502523761, 0.5785276605879028, 0.5995237201346378, 0.546799773108193, 0.5387296868641627, 0.5300204330315256, 0.5130364201194765, 0.5815500491722124, 0.5820041012899315, 0.5719227364592565, 0.10893274911786177, 0.15761097987593853, 0.13849017753775206, 0.13510739934283644, 0.17449444210976328, 0.15409424226260615, 0.10445317003431898, 0.13216865062124494, 0.13280325078708333, 0.14634551485423275, 0.18335381208469936, 0.1835660870622835, 0.1717672453179534, 0.3133318586445436, 0.23046116417757512, 0.24040340663950388, 0.17440926471034712, 0.25489018869025226, 0.6000152569630981, 0.27391612888373906, 0.504197770244289, 0.32279974854513904, 0.2517695846925678, 0.5374437951122892, 0.5683967486663708, 0.5458680929216269, 0.6775167824897885, 0.3139950465236607, 0.35383978259472737, 0.3472440617525918, 0.33140230116283054, 0.22868535888088104, 0.2918877570514875, 0.4106006667966331, 0.4375274298497398, 0.38854137840873204, 0.222551319668449, 0.2082617569354599, 0.2292797336044362, 0.21272227608656324, 0.2075847727112936, 0.22038675863954504, 0.21216625665330036, 0.21704358001421564, 0.20114145227202795, 0.18359932602877638, 0.19699564497168032, 0.22041494887097324, 0.2174535085588407, 0.21915332802047371, 0.18477260319612487, 0.24686101027456975, 0.23839434235354662, 0.19786830482088913, 0.8898223372601968, 0.165494005859101, 0.17688040519649129, 0.9133163116249752, 0.19891014727432554, 0.8685220533463174, 0.17399147244984892, 0.8821764174638911, 0.15785271852045102, 0.7566927681833737, 0.2102599875377712, 0.8076684535894533, 0.8375777927128134, 0.1664201901849578, 0.15315162587284992, 0.45768397746709133, 0.7621088270696613, 0.21030257546775233, 0.17171711211413598, 0.19021215200527775, 0.19612104073137449, 0.18699258984475797, 0.1780676150264413, 0.1997702509548389, 0.19360156930613437, 0.19220423327458924, 0.19020727729776432, 0.08978461006871707, 0.08502066477677017, 0.08847498836687084, 0.08425106045098785, 0.0870341884321284, 0.11219069427077988, 0.09030215333452885, 0.09286387125855489, 0.08370112575184285]}, "mutation_prompt": null}
{"id": "a24db3b4-2710-4f4e-be85-58b78d7ca4a9", "solution": "import numpy as np\n\nclass ChaosEnhancedPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9, chaos_intensity=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n        self.chaos_intensity = chaos_intensity\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                chaos_factor = self.chaos_intensity * np.sin(self.evaluations)\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop) \\\n                    + chaos_factor * np.random.uniform(-1.0, 1.0, subpop.shape)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "ChaosEnhancedPSO_DE", "description": "Hybrid Chaos-Enhanced PSO-DE algorithm with adaptive chaos injection for enhanced exploration-exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.19520230782845102, "feedback": "The algorithm ChaosEnhancedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.34751439693434527, 0.355177899735871, 0.3436746631149392, 0.3412174839848511, 0.3272849053261746, 0.3494545192992424, 0.3614223289417978, 0.349589796071724, 0.37891233315551787, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055634554795764846, 9.999999999998899e-05, 0.006364605294536196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10057458084338355, 0.10267410556270318, 0.10583178298952844, 0.09375767916498645, 0.09137668265239007, 0.10009051441946581, 0.09204252324509143, 0.12856314665894697, 0.1280716784156899, 0.08243828678869758, 0.0773365276712149, 0.09728871790718296, 0.09146378261004084, 0.09978584915390198, 0.08323260899974794, 0.07832053329138544, 0.08092990670556777, 0.08240520274985319, 0.9707768050145238, 0.9689497524897218, 0.9656004132127042, 0.9661377410809762, 0.9592473118877407, 0.9580384338850574, 0.983042500489544, 0.9693167914529791, 0.9703308114003407, 0.2188308091604202, 0.2137082653035579, 0.21699861381669416, 0.20059646532816966, 0.20999345977077344, 0.22302469064481512, 0.21958012449756636, 0.21571077739633293, 0.2069245507856644, 0.2688715610650283, 0.23863057148476807, 0.26710992526205957, 0.2668394909765177, 0.25949772975214613, 0.27550242493331667, 0.2474330281585958, 0.26147986982300686, 0.2865244389853888, 0.10751939720107295, 0.10952588136708874, 0.12998071878201756, 0.12801407095834105, 0.12270927144897503, 0.12076335498919633, 0.13200775407430343, 0.12761883723497336, 0.12532315491492774, 0.1314181873543563, 0.13445498433023118, 0.13930185181418286, 0.12216695810601597, 0.13316214732316856, 0.13283560140297046, 0.13333923805149916, 0.11840696411104823, 0.13280798165087615, 0.003939486142245041, 0.005426926881173522, 0.0006021181843738344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11003388015394922, 0.0694410728177054, 0.06987055247557405, 0.042046953760995875, 0.06126614895444382, 0.033105492425451355, 0.07899173850003005, 0.06406542449541253, 0.055233817881888525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05644924384631922, 0.07947921942367608, 0.06268847846598491, 0.04319792337491324, 0.07588956320538387, 0.0795582900905365, 0.06005673713580595, 0.05877647350758686, 0.055408662541985954, 0.31949306744750416, 0.3255718132933454, 0.3488337866634412, 0.3352919446868584, 0.34221103128793695, 0.35014508642832887, 0.3518927935027091, 0.3440499393175579, 0.33309234530543375, 0.10464850076676868, 0.11378803321889186, 0.10908722836109142, 0.1078869817381668, 0.11016579139121419, 0.10497778156739512, 0.09385821448853127, 0.11167471437724596, 0.0891431652758311, 0.17601935727698093, 0.1417777432291084, 0.1470640763629506, 0.1280517798238221, 0.15566796622238221, 0.15911801195799258, 0.15345359526014057, 0.13530570237577544, 0.1342223232863271, 0.2510909194992622, 0.2664173447096906, 0.24892471609017708, 0.2577642294761737, 0.2537999545903399, 0.24308112760442846, 0.2575038497784823, 0.2474602373285434, 0.24843708772837003, 0.18587318536104303, 0.17112076888702343, 0.19264348029820644, 0.19703212070259413, 0.17834583488970857, 0.18470637982033444, 0.19405571403426258, 0.19638595900986322, 0.18676225471213026, 0.21334200007753457, 0.21141061186312282, 0.19536417019112473, 0.20030517785685953, 0.21376184109295704, 0.2227617906973962, 0.21175660224121307, 0.19883329936966587, 0.1955353316369306, 0.1774102062429893, 0.16893470561966273, 0.18824718621252856, 0.18272241989913063, 0.17190055722727926, 0.17948998014361073, 0.18886576013319878, 0.17548927504512335, 0.18012050757399356, 0.14962345067593774, 0.4446396915563323, 0.15093015284414102, 0.16977917909892326, 0.19419064219927096, 0.5173731906274912, 0.5125287637551124, 0.4322249821054348, 0.4553537329513859, 0.402222552254367, 0.3833706073246018, 0.20122374640541707, 0.3777757963690942, 0.20164499340628184, 0.2796171014861718, 0.20467797667543486, 0.20807015351742075, 0.38206090473694776, 0.1770070175079017, 0.18829265222404412, 0.17155075299788225, 0.18152237074508193, 0.19091282604940218, 0.1904496922450707, 0.17183976024609615, 0.18558009770649453, 0.16861557770116598, 0.08522391060254975, 0.09172165973303703, 0.08521252008793034, 0.08031499647574014, 0.08093882015999587, 0.08574448393388867, 0.09025478198248271, 0.08528535318681263, 0.08163182220394405]}, "mutation_prompt": null}
{"id": "efe69463-e72e-42d7-a95b-8d1721e74951", "solution": "import numpy as np\n\nclass DynamicRestartPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n            # Random restart if no improvement\n            if self.evaluations % (self.budget // 5) == 0:\n                random_restart = np.random.uniform(-5.0, 5.0, (self.pop_size // 4, self.dim))\n                self.positions[:self.pop_size // 4] = random_restart\n                self.personal_best_positions[:self.pop_size // 4] = random_restart\n                self.personal_best_scores[:self.pop_size // 4] = np.full(self.pop_size // 4, np.inf)\n\n            subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "DynamicRestartPSO_DE", "description": "A hybrid PSO-DE with adaptive dynamic parameter tuning and random restart for enhanced exploration and exploitation.", "configspace": "", "generation": 71, "fitness": 0.3358649682413411, "feedback": "The algorithm DynamicRestartPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8442895615766793, 0.8582039169680966, 0.8539645025339058, 0.8677697412844776, 0.8505891428016398, 0.815285977040717, 0.8562645512088911, 0.8382056765709968, 0.8489949811947031, 0.5910445096742873, 0.7222562857020227, 0.694733104307747, 0.6833974022180391, 0.6831771279950636, 0.6320817277380892, 0.7091437363952204, 0.7319306112889852, 0.6967415796720193, 0.1088171793255367, 0.14743625163258078, 0.6567459106236344, 0.6627776872188765, 0.11812375572551359, 0.18108443519755069, 0.12487778938937721, 0.1521418311376619, 0.11346860155708038, 0.1403785039238653, 0.1308739918832862, 0.10793288492731246, 0.1119639791634558, 0.10595825374426837, 0.10356860295824732, 0.10862738482111112, 0.10174202202768434, 0.11776516805112314, 0.9046502996866653, 0.9886122396911483, 0.9172269999455697, 0.9388413661357141, 0.9523852354708923, 0.9877335668717758, 0.9876840802903608, 0.9441263977118346, 0.9616738967738858, 0.5496671929974699, 0.4347974689082512, 0.5223240994111963, 0.5144576090009982, 0.5657393949849077, 0.5678227839473298, 0.49521867260439023, 0.46203009229478653, 0.3894500459021676, 0.38338936255387335, 0.859136886168103, 0.3827009329582868, 0.3582129659187816, 0.213974025054824, 0.8369499405261335, 0.8481172673259846, 0.8725564466205591, 0.854377134933538, 0.18090596064830156, 0.12537411668142762, 0.25998149624545464, 0.2147831438489226, 0.16093278751404172, 0.124957024065529, 0.1262567432248336, 0.1270842203342445, 0.15541214501399225, 0.20438788358379845, 0.1546317444443519, 0.27295484891364086, 0.13212416814683325, 0.1425714996722387, 0.1432902880095509, 0.17802575827723488, 0.14636526940743677, 0.12933473358962277, 0.008150150849158821, 0.05241144246037077, 0.05102155677615372, 0.055788028811442736, 9.999999999998899e-05, 0.0008318160003951691, 0.01547048613311186, 9.999999999998899e-05, 0.0950880184258942, 0.09096647048434847, 0.09061949086106802, 0.11060185421043389, 0.08818084487794053, 0.047936964667119386, 0.06539298511919367, 0.1008172527957718, 0.14475144728959477, 0.06872348249888838, 0.20926254071996486, 0.16461608553000806, 0.0819244261151516, 0.10271076293662351, 0.09106011170371808, 0.1485132680793022, 0.3074774661056495, 0.20563275788672175, 0.23824662379589623, 0.15972357613916954, 0.15145939313144685, 0.12464059794871796, 0.09277189382831619, 0.15056885734491643, 0.2702611218049735, 0.16912918042896485, 0.13309005583244637, 0.16588906366524991, 0.5751708203271595, 0.5345433349432323, 0.507164376028107, 0.5761362190645749, 0.556726962554402, 0.5694633724928313, 0.5607465447607829, 0.6253161961543532, 0.5735007629709379, 0.1634982516375889, 0.14116269585455232, 0.11678216330908886, 0.12646436612395462, 0.14267679829200752, 0.2825197141120801, 0.15269422981873704, 0.15696866681395372, 0.15993465289596953, 0.178944936949767, 0.1336333089435413, 0.263683849861296, 0.14520787836047855, 0.41640124414163815, 0.23997209744257064, 0.2128556606703531, 0.13792456418233978, 0.18759465628993433, 0.4127957808618359, 0.4100930061762189, 0.5950502365415227, 0.4921571546249607, 0.476663383998153, 0.4971714455621785, 0.4769435156546059, 0.5166763117035793, 0.4469936732618348, 0.3864673262102648, 0.23530217995655645, 0.35307210480833684, 0.3671047033458885, 0.29129499303232864, 0.2822647254803081, 0.21021851404606529, 0.22394001927890306, 0.38046717640262584, 0.21591000917718672, 0.21376007036871114, 0.2201966478572669, 0.2731831502631339, 0.2148031321766718, 0.22196244862085068, 0.22249103331596498, 0.221150836958647, 0.22415912376799918, 0.22292473473105068, 0.21631978866980028, 0.2074134113314594, 0.20032749611359935, 0.21832150748056256, 0.21433758745395992, 0.19423606746906785, 0.24665504462022592, 0.17843084846171586, 0.9007397233884107, 0.16595781028576873, 0.15161304214238247, 0.909842223010464, 0.1998615457094688, 0.16440584668532954, 0.8806173242320967, 0.16829143866927132, 0.2081574020967828, 0.8762688851725644, 0.42810136204316973, 0.4941123187260388, 0.20745845644652827, 0.6023670815460248, 0.16593314122882785, 0.5823364759439613, 0.46241846650091756, 0.27780972833421125, 0.1808858418923246, 0.17147409902117583, 0.18980206374573372, 0.1798837869890143, 0.19169649582811532, 0.17422727217345635, 0.19258115652014607, 0.19390746207937903, 0.17891536968113997, 0.08788367177750023, 0.0819913916073417, 0.09136859448903323, 0.10270266249227933, 0.09317229890251333, 0.09795509151790616, 0.09121605948531053, 0.08520180788495613, 0.09720954605111676]}, "mutation_prompt": null}
{"id": "1a61ceb5-4059-4fc5-bb2e-2e24e52960c5", "solution": "import numpy as np\n\nclass EnhancedPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.4, phi_g=0.6, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    if np.random.rand() < 0.1:  # Apply DE mutation with some probability\n                        indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                        mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                        mutant = np.clip(mutant, -5.0, 5.0)\n                        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                        trial_score = func(trial)\n                        self.evaluations += 1\n                        if trial_score < fitness[i]:\n                            subpop[i] = trial\n                            fitness[i] = trial_score\n                            if trial_score < self.personal_best_scores[i]:\n                                self.personal_best_scores[i] = trial_score\n                                self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO_DE", "description": "Enhanced PSO-DE with probabilistic adaptive velocity and selective DE mutation for improved convergence.", "configspace": "", "generation": 72, "fitness": 0.22687873598629343, "feedback": "The algorithm EnhancedPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.584030240485206, 0.5789215901764602, 0.9165563854971864, 0.9206850645743057, 0.9199400418448268, 0.9115167249539627, 0.9005378754966586, 0.9067272377923628, 0.9000343773231573, 0.02881471646866518, 0.2058575303752802, 9.999999999998899e-05, 9.999999999998899e-05, 0.06433125997158373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14406354720888903, 0.07256403390777777, 0.08808875594196364, 0.1004928978071361, 0.0804791649925315, 0.08224065945009784, 0.09296765048188604, 0.1162344820930139, 0.10575169898923764, 0.06988774865895686, 0.09529055933591823, 0.08229965904491332, 0.09628742127588197, 0.09560504075001319, 0.11051061394815864, 0.08032561229511759, 0.0851162824547067, 0.09578235507501598, 0.970655711650677, 0.9530132925869014, 0.9625162954326743, 0.9020903182461635, 0.2818091666622188, 0.5776696927260201, 0.9809612852542415, 0.9578387660907245, 0.365257937097645, 0.25783112695621535, 0.1560225106872316, 0.13097567165395252, 0.21348917838241266, 0.2893236776685135, 0.17549318695351235, 0.16537846770184628, 0.09648575869586695, 0.26359087797578407, 0.2108310059363363, 0.371492462246499, 0.3599796514934459, 0.21451911658163492, 0.21314366711615818, 0.21308417941475866, 0.11806808176226058, 0.15177311403163074, 0.23531966486347033, 0.13035369143919284, 0.14182526699714448, 0.0075041399989597135, 0.08186448877822428, 0.13023872925719693, 0.18041999234170947, 0.1404739246367107, 0.1481815839762003, 0.12985653340343684, 0.1459080768635338, 0.1525604488560932, 0.2556405087950958, 0.12997266926606266, 0.16437870473143357, 0.14467475376962158, 0.2390154919455182, 0.19701796361902235, 0.14942890416625287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05491032408592522, 0.02183633739857671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04434148111821756, 0.025121357113674248, 0.08914031299320646, 0.05348489532002565, 0.016370054560790548, 0.018330961375407462, 0.105084913392274, 0.08310944496845585, 0.09794511512391768, 0.13796971933390179, 0.04044743315017274, 0.15968316036180585, 0.1909362050949689, 0.08144522609205307, 0.0965816763002908, 0.10641757076140679, 0.10389525076766037, 0.07701505560655841, 0.2439487439227268, 0.1823389351212259, 0.14019007614456636, 0.037224590935665214, 0.23636689906908592, 0.05866942753379534, 0.09529561079057691, 0.1863153508765567, 0.11883510476920567, 0.42096273770383896, 0.46520314785766004, 0.5252717296973088, 0.482098660381051, 0.40374042069084515, 0.3982278758984167, 0.47342890088046796, 0.4808538163628022, 0.5578442543318933, 0.133179418616311, 0.10314067693552365, 0.10509920743406287, 0.1098652509019814, 0.07853216298013344, 0.09565101752737659, 0.10892898015294028, 0.08546191693124461, 0.08903315999299188, 0.14370206099844818, 0.23935299165893387, 0.34065183354611583, 0.32134354971354806, 0.42140606521637336, 0.19419844726272262, 0.28886556528273444, 0.12576446535663577, 0.1359171924043725, 0.27380511053542567, 0.24272431907414416, 0.2560192744636569, 0.32129462896346717, 0.21183055245814153, 0.3161283759709096, 0.24279354301891898, 0.27259036340445075, 0.2238702644177265, 0.1878409614144262, 0.1632819116667893, 0.17741775465299692, 0.18372088898624517, 0.17672443916148328, 0.22364545707645112, 0.1634109426244995, 0.3174594367252934, 0.18679615447082332, 0.2003052241344918, 0.19073699254745158, 0.21373834564526317, 0.20043392854970132, 0.19032177626229374, 0.25753505834999557, 0.24539048289533094, 0.169031310303691, 0.20799385559715222, 0.18652747071806863, 0.17105047188447864, 0.17423779416743657, 0.18190492163268812, 0.19979373007935297, 0.17388998820760226, 0.19111064678487677, 0.18504527047926134, 0.18814822317695168, 0.782044738093302, 0.12109844792839153, 0.18714101475263445, 0.16926634129083085, 0.20123473975841066, 0.9312099860279648, 0.14204357712639626, 0.15257114268589722, 0.943392311822198, 0.2692237748809905, 0.21021625229173146, 0.07358406886796198, 0.21047407169171906, 0.14697700847879402, 0.4215432306443452, 0.10488036422266866, 0.22296853664371352, 0.3221529310525455, 0.20398430383879895, 0.18513698731660022, 0.23737333809207484, 0.18560667409736942, 0.18965049060792494, 0.18345436713016883, 0.19118185372104846, 0.20317883973045836, 0.19486940611779624, 0.08993887797630762, 0.09853357443997224, 0.07537287964818229, 0.08599644794912276, 0.08898424823568551, 0.06345664059167266, 0.08631360256852838, 0.075546755843941, 0.06450756819079684]}, "mutation_prompt": null}
{"id": "f9b90bed-a5ab-4d1f-9a92-30b4f791523d", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE_Improved:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        subpop_count = 3  # Changed number of subpopulations for diversity\n        while self.evaluations < self.budget:\n            # Dynamically adjust subpopulations based on evaluations\n            subpop_size = max(self.pop_size // subpop_count, 1)\n            subpopulations = [self.positions[i:i + subpop_size] for i in range(0, self.pop_size, subpop_size)]\n            \n            for subpop in subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.7298 if self.evaluations < self.budget * 0.75 else 0.7)  # Reduced stochastic element\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.95, 1.05) if self.evaluations < self.budget / 2 else np.random.uniform(0.85, 1.15))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed search space boundaries with stochastic boundary correction\n                exceed_mask = (subpop < -5.0) | (subpop > 5.0)\n                subpop[exceed_mask] = np.random.uniform(-5.0, 5.0, subpop[exceed_mask].shape)\n                \n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE_Improved", "description": "A hybrid PSO-DE algorithm with dynamic subpopulation adjustment and stochastic boundary correction for enhanced global search.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {}, "mutation_prompt": null}
{"id": "254b38e7-b81c-4e16-85e8-fda4cbd79fb4", "solution": "import numpy as np\n\nclass HybridAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.6, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.95, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridAdaptivePSO_DE", "description": "A hybrid PSO-DE leveraging adaptive inertia and crossover mutation for enhanced performance across diverse landscapes.", "configspace": "", "generation": 74, "fitness": 0.33739935665434545, "feedback": "The algorithm HybridAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.848507316488742, 0.8590765597497279, 0.8523984750346684, 0.8551429961612198, 0.858040786314432, 0.8653075299420264, 0.8655602068480004, 0.8463698515726499, 0.8340640583216332, 0.727194601596532, 0.709014756804804, 0.6777828573302547, 0.6837603607312857, 0.7108996753044329, 0.7082691320908412, 0.7267635562398227, 0.7033645229496699, 0.728630832974599, 0.14570905283170055, 0.1506612648264649, 0.15428319726886497, 0.1109273795330773, 0.16907815437761986, 0.0912466532893692, 0.10194717339669501, 0.13261601495918074, 0.1284287143955518, 0.16765441053301633, 0.1256094195533356, 0.10709504041271845, 0.13069484096477357, 0.1157380818324778, 0.10119415112128205, 0.12446653914310735, 0.16606368140304562, 0.12523115707361177, 0.9568788882031549, 0.9887196592439151, 0.9685487740049922, 0.9436927690305539, 0.9727433560588552, 0.987730843749821, 0.9657637619614733, 0.9445370757693246, 0.9661310920468222, 0.7359448706519208, 0.5966603821599283, 0.7275586208878149, 0.6009324866153958, 0.4522904647794005, 0.7170560666176804, 0.7200381709908827, 0.27918085670654513, 0.5441835621352196, 0.8615431851397415, 0.8737970453177506, 0.8536257608572643, 0.8998034258203135, 0.20816879209356243, 0.853595498555703, 0.3382011421077168, 0.8689696912847825, 0.35659179873576863, 0.16563442711015253, 0.15175805751700788, 0.4308800770880655, 0.18937734163187636, 0.1290068985605607, 0.2729470904483088, 0.15782242927192436, 0.15438129253706334, 0.12766485831918128, 0.16357093054425254, 0.17033198165485774, 0.15587928535999795, 0.16577253162125039, 0.1714285508832991, 0.13519634086448518, 0.1994679030697497, 0.13786573363904353, 0.1835044278144473, 0.08621267234767693, 0.006675850506472458, 0.10839381221229649, 0.07746531763556264, 0.046015225890264855, 9.999999999998899e-05, 0.007271990232761372, 9.999999999998899e-05, 0.10417585002044383, 0.1384504358228592, 0.06422854245960319, 0.1344723691368972, 0.11207344840910316, 0.015544215149859375, 0.041751799605655115, 0.1376451203872715, 0.07124284185456342, 0.04895754742381142, 0.1113300740940435, 0.062133797831173565, 0.09819741889404254, 0.08055319867857869, 0.07844117985922516, 0.08428389460870278, 0.19566877091070223, 0.11967139564138363, 0.08464115763727131, 0.1758475817807168, 0.14397380901394063, 0.16692535230253291, 0.05585271524137647, 0.09405158980896922, 0.3266263913162787, 0.11620349036815092, 0.1904500609662817, 0.09003588146023978, 0.5219644775624397, 0.5561678645502511, 0.5704702769551487, 0.5472715521778007, 0.5884204029694744, 0.5460529397437495, 0.5386422119888505, 0.6084671730038352, 0.583471981518443, 0.10344423567975813, 0.12207324475049885, 0.11951576395413632, 0.1376573838705717, 0.10104446336629025, 0.14002014131139584, 0.14462005995886462, 0.12111823196805982, 0.6487602064619749, 0.18930146070355114, 0.23611031528151627, 0.223284705109965, 0.2211024755124369, 0.3094305739877171, 0.18217955209086079, 0.23802208480148523, 0.1533577449059621, 0.18491144805897297, 0.38190482470234066, 0.40923901561148546, 0.4934792233364478, 0.6881301353458403, 0.3133394965614671, 0.5444958545791994, 0.34465513142715376, 0.6169428508188162, 0.7044844350223699, 0.35966024353970283, 0.5428113106505608, 0.341164974741335, 0.3127191491021529, 0.38471919968725765, 0.2361320714842876, 0.24972039531204604, 0.2783177691183619, 0.27756820957707495, 0.22552579285468344, 0.2505199406857179, 0.22161569705099116, 0.20448139357735584, 0.20793038646555073, 0.21033845323412526, 0.2444842261144573, 0.19491686157023158, 0.22610690665880417, 0.24569332739253547, 0.19419693455564202, 0.20814841525816397, 0.17876795640764087, 0.2093646972423464, 0.24066923015458574, 0.21645580123318076, 0.18882661153502467, 0.18309610196729686, 0.18603823302756328, 0.8828891538314008, 0.15224692392777683, 0.890621843860154, 0.2000935613428665, 0.16480368275400836, 0.8914498230817449, 0.1389251774736464, 0.908276764621236, 0.7918668115788874, 0.16798771095919418, 0.5882434993900236, 0.20474239557266605, 0.34375213995082154, 0.16678939924680836, 0.10428732020936571, 0.16172364886732826, 0.15407332511863914, 0.17901854932015826, 0.1790917224691273, 0.1763428560529432, 0.1854662682882885, 0.17182604969375248, 0.19194002830478218, 0.184546540925971, 0.20276090787325918, 0.17638417879820045, 0.10726313095161133, 0.09444535416289779, 0.09637656791252536, 0.09242087743370031, 0.08292040008067747, 0.0960125743220771, 0.08733950096946552, 0.09276993561719626, 0.08518218018583412]}, "mutation_prompt": null}
{"id": "c29e3520-32c6-4824-b284-93e29d07ada0", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "7e23374b-19ab-408d-9666-19e6397005ce", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            np.random.shuffle(self.positions)  # Shuffle for a more diverse split\n            self.subpopulations = np.array_split(self.positions, 2)\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 3 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedMultiStrategyPSO_DE", "description": "Enhanced Multi-strategy PSO-DE with adaptive subpopulations and dynamic parameter tuning for improved balance and convergence.", "configspace": "", "generation": 76, "fitness": 0.32041196317357934, "feedback": "The algorithm EnhancedMultiStrategyPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8538646680425634, 0.8592867194626422, 0.8745021460555809, 0.8658911100961928, 0.8611120357577682, 0.8644890535070383, 0.8608593251455801, 0.872441613152648, 0.8689616243060581, 0.7496725561010811, 0.7505998401162971, 0.7344984890209718, 0.7057349702991159, 0.7119585083569231, 0.7338333317770047, 0.6821237003406959, 0.7569427018241554, 0.6951793628156744, 0.15748688914831654, 0.17206208262286615, 0.15216936807090276, 0.16187079082607947, 0.08772378182008889, 0.17026044916276895, 0.1332873622839552, 0.13504622000538546, 0.1509067061920254, 0.14877945790940905, 0.1238278441147107, 0.10357733086127352, 0.12932387279476065, 0.07858272291345547, 0.10651107447316877, 0.1301789291887797, 0.09204436551978412, 0.1207206658962583, 0.9696134962777624, 0.9596358388318873, 0.9267034217696517, 0.9499707685948683, 0.9373090856628497, 0.9286543987720526, 0.9532515133495044, 0.9201031693716343, 0.9224479491963377, 0.6403811222150071, 0.4356099756176244, 0.6002764741591369, 0.5279098873309673, 0.3733885606354763, 0.4035047465230074, 0.2627452775811937, 0.5064601353931792, 0.6210084529025621, 0.22718171637776408, 0.8787780754051826, 0.3823102997482094, 0.27555138464476947, 0.8325430148822568, 0.21015650807056263, 0.2199892149218391, 0.22962734527558537, 0.8605376395713401, 0.19519894595847764, 0.15219692021406683, 0.14786454517766257, 0.16374259387315893, 0.1913039735817964, 0.1586463156721003, 0.19580004983521537, 0.16656080820510566, 0.2443574747122511, 0.32152704627463113, 0.14787228790367024, 0.15864808281329135, 0.19308372777150506, 0.12788767444004856, 0.16194459310142995, 0.1968304898536689, 0.18507290110503505, 0.15931560217815788, 9.999999999998899e-05, 0.032459702908607, 0.09611619005734917, 0.0058411584401038, 0.06162376071976927, 9.999999999998899e-05, 0.010937927275447179, 9.999999999998899e-05, 0.014151255525708284, 0.0931093452496794, 0.10224808824193898, 0.11461054339271415, 0.0876642062998364, 0.022915070079051802, 0.03981302161885747, 0.08319405147183156, 0.12606871640235517, 0.09283752950341118, 0.1323116496254112, 0.03533175084758455, 0.07506472223627536, 0.13752007442083702, 0.076286372145006, 0.10586370006680357, 0.10232470625133316, 0.09832387200646664, 0.1001933087400999, 0.09962317227919137, 0.26280033699463956, 0.13425049913919607, 0.18089823495700608, 0.17051413489890987, 0.13906421863997998, 0.18997358706209988, 0.1623847362712897, 0.1791234506143572, 0.5870732546799916, 0.5305360170672347, 0.4583551406569323, 0.5993547909863595, 0.5364048013034998, 0.5163828919948816, 0.5964230490968796, 0.6070848660713359, 0.5517145130900809, 0.1123914052863263, 0.11365093702343276, 0.13946243417840365, 0.1413633366620739, 0.14421549150815094, 0.15491613781037172, 0.13242470177229315, 0.15192385359359173, 0.16451762102980538, 0.16123516170105145, 0.13977337945888757, 0.2364604293512913, 0.23999703166138564, 0.23237398779557672, 0.1397387127932116, 0.15848876429657355, 0.1969707821390687, 0.13947298478444514, 0.43375439072289923, 0.6899343858720107, 0.3826335422543874, 0.7053890776128466, 0.6879475301313712, 0.40477910384376137, 0.7269014616533134, 0.5649140569978974, 0.2816966465238787, 0.3275293729561032, 0.3525062568494082, 0.430325109760333, 0.33409863770587944, 0.24305026773881988, 0.408022387831803, 0.28676395525695464, 0.4617389018849307, 0.3341125254967635, 0.251196077905653, 0.22642214437081498, 0.20439060663635977, 0.20987603327982784, 0.2270920115164914, 0.22222353844922282, 0.23114057839019364, 0.20886907439640667, 0.22364095512310256, 0.6156520545271992, 0.1783122675714911, 0.19910241049798683, 0.19292285247154162, 0.21615209089007037, 0.18258885098981037, 0.24587796368874182, 0.2045374107123954, 0.18917708652351894, 0.18654249868950368, 0.1846225370889708, 0.18610367274801698, 0.17233526307818625, 0.19872199890963593, 0.16854762331481998, 0.8790676095049273, 0.8741643713036037, 0.8920909679214265, 0.23841373251428555, 0.21145330939898765, 0.20629377530709747, 0.20667194724859406, 0.16543482060556802, 0.16684313769613512, 0.3459909054402055, 0.4256381219994443, 0.6367605801486749, 0.18137042017047567, 0.16770694281626353, 0.19770794585348594, 0.18080703595571213, 0.1785611579928441, 0.1782470404937414, 0.1873724845337832, 0.1828998331827958, 0.16734392670674447, 0.08142446277948179, 0.10044970938893916, 0.0896268171478789, 0.09280832768704639, 0.09730209023521963, 0.09013867553028743, 0.09133828399369837, 0.09175028121627005, 0.09289536994443393]}, "mutation_prompt": null}
{"id": "7229dc0b-8101-4bbb-8b8e-799760b55293", "solution": "import numpy as np\n\nclass AdaptiveElitistPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.6, phi_p=0.4, phi_g=0.6, F=0.7, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.0) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.1))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveElitistPSO_DE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm with adaptive velocity scaling and elitist subpopulation selection.", "configspace": "", "generation": 77, "fitness": 0.32068546049863306, "feedback": "The algorithm AdaptiveElitistPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8573947094109873, 0.863342653552839, 0.868211324970293, 0.8672679863008139, 0.8657250582149256, 0.8578901387966076, 0.8675540427468491, 0.8551823556260231, 0.8614606691455624, 0.7435386468397522, 0.7490071235025582, 0.7405044432058605, 0.5588956057163963, 0.7413826299324725, 0.6849174168272321, 0.6819960773233645, 0.6330449537242387, 0.3349772141870251, 0.15550766260838245, 0.15294916876650966, 0.1049996118889942, 0.17722801029578172, 0.14869974961808152, 0.10830499985060327, 0.1074686878094615, 0.14691488189044355, 0.09926285713846628, 0.09458754966299499, 0.12850900991217695, 0.08857539838746675, 0.09442079167272555, 0.09186367773939108, 0.0935141058973672, 0.11202725776023703, 0.1280362675606742, 0.10619093278018243, 0.9433755945626863, 0.9883646022551601, 0.9324444977597013, 0.9561469724629181, 0.9369487532288083, 0.9672471637484042, 0.9289382245201205, 0.9214530630242945, 0.9750605198293696, 0.48566103328730237, 0.5785790658442669, 0.5016688372683888, 0.5452533387908332, 0.2525778208559004, 0.30753403757786324, 0.48372482915805426, 0.2692119763907471, 0.44293516091062346, 0.8586940558505173, 0.20675962119007352, 0.8716885572476051, 0.2719344969705114, 0.20781955174052325, 0.27305972649174515, 0.17767535047373695, 0.3197159591077502, 0.8354132995897784, 0.13907548082412868, 0.1284366161477719, 0.208434883675231, 0.17147373588548032, 0.16603323132573256, 0.12513545909158763, 0.1610883521268094, 0.14061227703538404, 0.14378527056956303, 0.16561416889457325, 0.1759497101271874, 0.13802410176856805, 0.2171871435741204, 0.1621606724894793, 0.14255111786886976, 0.17036755124558733, 0.17066095457315955, 0.23000442879040628, 0.03901246117450485, 0.052798285134639134, 0.11504192292693183, 0.045979548280180804, 9.999999999998899e-05, 9.999999999998899e-05, 0.009188772752882657, 9.999999999998899e-05, 0.09759952410428885, 0.13520603717186674, 0.08215614145093986, 0.15270505743407325, 0.040330997111913014, 0.03984742334103375, 0.05245007769205712, 0.1172805939869731, 0.09624587118831374, 0.25935228746559247, 0.03391805919560642, 0.04921602892983479, 0.24109704481245697, 0.08679760186669006, 0.21814675540059514, 0.09553526544179747, 0.12995741207786338, 0.16830460730729013, 0.1323241981984713, 0.16446778087730696, 0.10133114786276398, 0.16087944682863375, 0.1224457655376493, 0.12294798306639132, 0.11474672440830413, 0.13650301202782378, 0.3359771056409425, 0.0872612584543373, 0.5972308623011213, 0.5265897231070477, 0.4867638490819973, 0.6041695551285934, 0.6097832631099338, 0.5781857466211731, 0.5897531876355089, 0.5087838592023853, 0.554654945139995, 0.14449208933401114, 0.17672914749680146, 0.1214419681109371, 0.11074628342878223, 0.1323078609189492, 0.13861509819898643, 0.1470351572957017, 0.1480902251450963, 0.08202434018989602, 0.2522969500081781, 0.2011331490237409, 0.5223336241762242, 0.4071845395780861, 0.735120461531243, 0.1889908469868602, 0.4846487541895138, 0.23029544942832814, 0.6512802192751026, 0.5558042163276178, 0.39075697666113907, 0.24484512562034866, 0.4959490725742587, 0.4205176565656541, 0.3609202967125137, 0.6714447734960769, 0.5858213405192079, 0.5586610793269218, 0.39575061009754864, 0.2876681374012886, 0.37322581698255874, 0.26441879784212785, 0.24690860025327488, 0.2584245339773553, 0.5051191191415717, 0.21903068189027852, 0.67688354906777, 0.23881710114504429, 0.2428237709910993, 0.21749230538646147, 0.2266405594857177, 0.230131756318936, 0.19503315736366333, 0.21111791145411196, 0.20627281622101046, 0.21598609714522377, 0.20987658178937996, 0.1810404487696804, 0.21932859357428647, 0.20645799755406946, 0.18398975848456445, 0.2209931724545381, 0.22160233691231612, 0.22153116989711574, 0.18961032458912763, 0.8923009801181424, 0.1854698229255728, 0.20292632125766996, 0.9208259885217028, 0.20010714293815368, 0.1955344732998726, 0.17565752982373228, 0.1691555892585791, 0.9025015324647332, 0.8548779373624731, 0.20992297867725906, 0.24919286328191081, 0.20521094466141132, 0.1655044499406102, 0.1548736735267202, 0.1043086076254518, 0.35138200786973417, 0.35179465211540484, 0.18000632846343856, 0.19665200648874903, 0.18251048703150685, 0.1946187893011989, 0.17933901427933174, 0.1833885335845309, 0.1851025339953808, 0.18604225536302277, 0.18731919349089754, 0.08899223397147127, 0.0838774801670421, 0.10598172037375786, 0.09698438977005686, 0.09756886117127705, 0.08276519459621812, 0.08670599396785661, 0.08127448608900067, 0.09061793372679838]}, "mutation_prompt": null}
{"id": "a764649e-f224-4269-97f4-b86259f861fe", "solution": "import numpy as np\n\nclass AdaptiveOscillatingPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1.1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    oscillating_F = self.F * np.sin(self.evaluations * np.pi / self.budget)  # Adaptive mutation strength\n                    mutant = subpop[indices[0]] + oscillating_F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveOscillatingPSO_DE", "description": "A hybrid PSO-DE with adaptive mutation strength and oscillating parameter adjustments to maintain diversity.", "configspace": "", "generation": 78, "fitness": 0.21581395035087655, "feedback": "The algorithm AdaptiveOscillatingPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.17.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.5452171725966147, 0.24209323843203168, 0.8857208115990439, 0.6129978534969328, 0.6221833559173325, 0.8852777708701692, 0.7887767906057835, 0.44490780504562555, 0.6969222644191723, 0.1620275517173967, 0.5058883346947972, 0.01182438070854619, 0.4279236759710343, 0.07337288829212596, 9.999999999998899e-05, 0.06476392186142854, 0.07668418974121982, 9.999999999998899e-05, 0.18515087748177395, 0.15584728253313318, 0.12296076729540961, 0.09647674385154514, 0.14328347215904558, 0.1848061390783372, 0.09209426614709082, 0.1320545141342776, 0.12321226817920683, 0.06707137653014761, 0.0813495553869279, 0.10941846200947891, 0.08827188431005561, 0.08099406901261996, 0.061884551087307615, 0.11025690485137707, 0.09199822973409466, 0.06904843434300167, 0.5229016837528528, 0.15900380436278627, 0.11607174390708264, 0.5176650198670107, 0.3520075312232013, 0.4939874573484755, 0.7255726569721825, 0.13140984333383965, 0.7628948225938452, 0.159907545774032, 0.05392379844973749, 0.14392590170054287, 0.2457022042055539, 0.0535649951240319, 0.18381334026044704, 0.08860255429037156, 0.08985741631850686, 0.16760846969063592, 0.21611220122329078, 0.39739851079993205, 0.22929394865084318, 0.28036534596041296, 0.21924287273433274, 0.34655480709674813, 0.12663405473646783, 0.14447882645307397, 0.16450150933292262, 9.999999999998899e-05, 0.13273618713464752, 0.24981675479651244, 0.12184552158014172, 0.24865030337089633, 0.19876038341816815, 0.13152569219636667, 0.1511842664949825, 0.14211673231414645, 0.1752294102850901, 0.14347980972898877, 0.12089762469250454, 0.13438677259413578, 0.1277589388272038, 0.13403267854624934, 0.13299257926462482, 0.11780322924382358, 0.1340328938095776, 0.10448918456331535, 0.007927871639606399, 9.999999999998899e-05, 0.12839922078149535, 0.050229173634761315, 0.03836368276415447, 9.999999999998899e-05, 0.09591233050588799, 0.043309063742633214, 0.10530041041975524, 0.029977252198043924, 0.09224638996875678, 0.08121743588951702, 0.0005939602337623473, 0.014007063861710245, 0.11966445950099658, 0.24399424164028982, 0.05030708772585457, 0.09690389429144997, 0.14373255293206222, 0.2726437295203241, 0.13428700891284917, 0.1479030494110526, 0.19096183588447957, 0.19463981570186617, 0.09082115128372681, 0.042926156500963764, 0.16489285787535957, 0.09583420168007384, 0.16187965241219682, 0.08976232612526602, 0.06619925825174944, 0.08557651102066388, 0.10338054198120006, 0.22735065419321587, 0.08264083114684129, 0.4702149037097303, 0.48933410581690684, 0.46576574245785474, 0.3949379485357275, 0.4506077088888003, 0.4710633656767248, 0.49057870211689236, 0.3662795124536615, 0.44938374480288557, 0.09182272162139249, 0.08794288125403327, 0.07887198512511351, 0.14481997619583398, 0.12088515026544755, 0.18447751547076696, 0.18377728770356194, 0.11462679013228938, 0.1151703816964289, 0.18084804444986657, 0.25728593271668654, 0.169351038022876, 0.1746647382080011, 0.3251409527483723, 0.21571386337607168, 0.32338725298493065, 0.3753022970411586, 0.3311012203384879, 0.18485656788350036, 0.3881503889605412, 0.31271542144867326, 0.4015874598611695, 0.22376742204312783, 0.34706516027101963, 0.19181063692927314, 0.3024230325158982, 0.3895304263395203, 0.2716193392251459, 0.14873695655450525, 0.30830981510558964, 0.23914296151883552, 0.22507970666203614, 0.3239799882503438, 0.19789098176372988, 0.21915483240667755, 0.2159934185427932, 0.21751974652849737, 0.2149691854068928, 0.2203497739858714, 0.21835041324947702, 0.22719850358431226, 0.21186411953888118, 0.24698812914073864, 0.21065033076457296, 0.23186263556359554, 0.17852866307595172, 0.2252359806953207, 0.18303893622137657, 0.19601109734913258, 0.18648185832412356, 0.18787279371825516, 0.17127013238081967, 0.2511434851878862, 0.25001046765653057, 0.18703003621563496, 0.12268777676626941, 0.18741484606484748, 0.38729068581502046, 0.19744847581285363, 0.8129247903882663, 0.1415202005627687, 0.15381390617632096, 0.6514514427109761, 0.8357154237363803, 0.20006120051974108, 0.0732465437931884, 0.3231393668625635, 0.1265721263641133, 0.2429866603098706, 0.28696555389894807, 0.33654798884467296, 0.2682858387708421, 0.1752589151408207, 0.19991621911297797, 0.188928709687613, 0.1889682381182638, 0.20629319244768496, 0.19448690582544437, 0.18102758232932825, 0.1981412115835295, 0.19351769952138298, 0.07417267888687162, 0.08994461605662762, 0.0791033356990627, 0.0820331561951696, 0.08377252032305027, 0.08647911923873053, 0.10457367709935439, 0.07922598259213154, 0.09856081310170994]}, "mutation_prompt": null}
{"id": "241af945-2c49-4473-8855-51ae7604c0f2", "solution": "import numpy as np\n\nclass AdaptiveDiversityPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 3)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                diversity = np.std(subpop)\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget)) * (0.5 + 0.5 * np.random.rand()) * (1 + diversity)\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 3)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveDiversityPSO_DE", "description": "A hybrid PSO-DE with adaptive inertia and diversity control for enhanced convergence and robustness.", "configspace": "", "generation": 79, "fitness": 0.10232786921653243, "feedback": "The algorithm AdaptiveDiversityPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.12993345206014761, 0.1427943235250868, 0.14058185501054066, 0.15391208481180707, 0.12691668143167112, 0.13778233827245134, 0.17360910143376695, 0.15927526350789944, 0.1696900028334969, 0.06188822273114125, 0.004709013770371029, 0.0014702340638088618, 0.0012097441759489902, 0.0005680793108154836, 9.999999999998899e-05, 0.004913961593198457, 0.00015124103427366364, 0.005449395136623902, 0.04454053661197155, 0.02233883172229234, 0.017727257367717186, 0.024809890386361944, 0.01207882572654273, 0.023003448379089964, 0.027678171202255353, 0.012768115769652422, 0.019745291819275756, 0.0415036251389711, 0.0037452512652916825, 0.0028311663902496065, 0.02822508802893231, 0.012786477540024821, 0.0027150526661638974, 0.017828091630603504, 0.005311765133175106, 0.002183667360764252, 0.9847546017894061, 0.9890003692388414, 0.9885617111017247, 0.9846863503662217, 0.9798248856908238, 0.9884541075048374, 0.9794118744446151, 0.9741724891484125, 0.9885164693574344, 0.06397498414639069, 0.03816228277682765, 0.013294202056234106, 0.058827520847594905, 0.019767055556581203, 0.03359367142160574, 0.03306851003802691, 0.04355331692910369, 0.002322609209384985, 0.16413385817012693, 0.08415417883343856, 0.06542104166235585, 0.10904899121708733, 0.0823996085802361, 0.046186443304975344, 0.06741032541821257, 0.17713593152551088, 0.08233183955443601, 0.0017205112055078686, 0.0009044804594874334, 0.00025224944051860376, 9.999999999998899e-05, 0.006111830744218283, 0.0007198810104258602, 0.01638400087076386, 0.003637525722475776, 0.00809406632263221, 0.0053384793575814715, 0.0025801018053638325, 0.010190560304120133, 0.010981230969713374, 0.013826534959323178, 0.0027429727268266646, 0.0023798522328961624, 0.0003906763514558431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007733196050567659, 0.0045932679408575705, 0.004434823429458112, 0.01342299510673639, 0.0006653846274766728, 0.0023472177472595446, 0.006919820998970705, 0.0022141644736526356, 0.0013413420196757286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027212159300068484, 0.004621862414040168, 9.999999999998899e-05, 0.0015548265472873357, 0.000253535744733524, 0.0019839924154826383, 0.0011045410204060246, 0.00021801540056620716, 0.00017575172202011213, 0.018767117829906366, 0.008912131633406872, 0.0038592563375464684, 0.2131988856705861, 0.1615992218222434, 0.1862282187264086, 0.15711417770393565, 0.13608862096499907, 0.13826778423312858, 0.18064058495952473, 0.11872379183090176, 0.15813620022879682, 0.032163652492402384, 0.0267183922965194, 0.029086278713936764, 0.0360650382867036, 0.012726097197739539, 0.039888145406407394, 0.027906875242930673, 0.03604448718841269, 0.0309928569874528, 0.09971670417213208, 0.1255119548339253, 0.12513645029405562, 0.1077912298119802, 0.1280393346551837, 0.10913682999121976, 0.1103839157819353, 0.08295214443716048, 0.11675800899562006, 0.16576695102970063, 0.1363119977244871, 0.1629782238252384, 0.15231536183552385, 0.14408467375412926, 0.11925298270565976, 0.16811785801246037, 0.18871076366255668, 0.14506199242785223, 0.08344499889040546, 0.08419508395058561, 0.08573502786084541, 0.10190184164451788, 0.082799859495849, 0.07290342388457505, 0.11377030671234412, 0.1115030103911051, 0.06955691734945924, 0.17067423453513653, 0.11628082902599635, 0.13451794858128996, 0.13494941941119798, 0.10319974405874233, 0.12395785974438545, 0.12833114061716278, 0.12112565774817463, 0.1281011607595779, 0.011530929230656461, 0.026526927642998466, 0.010952235401702648, 0.14248836026159528, 0.017456764666471836, 0.011751597947276426, 0.04644267383856826, 0.020325914171505977, 0.1288184501017393, 0.09213449929211115, 0.10945765943588182, 0.09918488025182304, 0.10747881109533808, 0.12216029536163298, 0.11986064550065567, 0.11560659248026806, 0.10862544857330536, 0.09993651712581286, 0.12811891844641432, 0.1080042741565097, 0.08773369218294647, 0.08531033754202877, 0.07967657493472691, 0.08615112539733782, 0.11649161717673229, 0.1659336487300217, 0.11635256764070323, 0.152115736902095, 0.15978913853525778, 0.15235219369740316, 0.1511979208068025, 0.17105690135547758, 0.15675568570863474, 0.1513371258341284, 0.16341087773991525, 0.147761306958909, 0.04049395029578262, 0.02489296605624114, 0.03565792178829774, 0.030333326939893768, 0.03714375683194726, 0.036982744164359094, 0.027657836917049483, 0.039652307816275045, 0.028306748664367887]}, "mutation_prompt": null}
{"id": "6992ee40-8ed7-46e4-8848-34cf66b60952", "solution": "import numpy as np\n\nclass DynamicAdaptivePSO_DE:\n    def __init__(self, budget, dim, initial_pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = initial_pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.initial_pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.initial_pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Dynamically adjust population size\n            current_pop_size = int(self.initial_pop_size * (1 - self.evaluations / self.budget) + 10)\n            self.positions = self.positions[:current_pop_size]\n            self.velocities = self.velocities[:current_pop_size]\n            self.personal_best_positions = self.personal_best_positions[:current_pop_size]\n            self.personal_best_scores = self.personal_best_scores[:current_pop_size]\n            self.subpopulations = np.array_split(self.positions, 2)\n\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.6, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover with adaptive F\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    adapted_F = self.F * (0.5 + np.random.rand() * 0.5)  # Adapt F with a random component\n                    mutant = subpop[indices[0]] + adapted_F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "DynamicAdaptivePSO_DE", "description": "Introduce a dynamic population size adjustment and adaptive mutation strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.3057428407707479, "feedback": "The algorithm DynamicAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8690434769848026, 0.8603736882116914, 0.8722438952275862, 0.8690346983432022, 0.8453829114721345, 0.859448431032425, 0.8705282394790259, 0.8759776631565706, 0.8692055456526446, 0.7681892183955438, 0.15317616099004394, 0.7396419312564949, 0.7197499124616837, 0.7535097295284543, 0.11518911208592619, 0.7107604284772053, 0.692993768906756, 9.999999999998899e-05, 0.15260354709608837, 0.13922412625785896, 0.1199145652970075, 0.13936641529396532, 0.13974198602314558, 0.1080758687286647, 0.1420891241886677, 0.14114543549786918, 0.1525312076468992, 0.13678019996788027, 0.10649501451987764, 0.13994901407137128, 0.10764550776422788, 0.13788274296904168, 0.1137435796998012, 0.13935227046221188, 0.11338922245698191, 0.09560376324948461, 0.9492682698167807, 0.9771980150085853, 0.9450755909924404, 0.9298830844787611, 0.9263469300312043, 0.8854704836545775, 0.9539054632500451, 0.9275746096191414, 0.9503498120586631, 0.503520343979893, 0.1960583692069523, 0.16677049789731568, 0.26154548260972266, 0.35011887008616205, 0.3986556227985525, 0.22090565151894648, 0.14584097507256888, 0.18065071392406007, 0.2272208048158243, 0.38851875819434867, 0.3692127479316525, 0.20760218455751067, 0.2705919344003914, 0.2703807113822875, 0.2185582793425116, 0.15054067501750157, 0.8718288244713567, 0.15795996487398112, 0.1545132368492408, 0.1492863979170297, 0.15243203399812444, 0.1634700199078588, 0.24655658788540558, 0.1755335732472617, 0.3331874168037302, 0.17203292308881735, 0.14666911432403484, 0.14331477101236723, 0.2452499570558574, 0.18197750319801054, 0.17411417193377587, 0.15282410167846228, 0.16353911058478043, 0.14886573143448367, 0.14418903525763593, 9.999999999998899e-05, 0.0039072558533341795, 0.01525348499771384, 9.999999999998899e-05, 0.05204235602132945, 9.999999999998899e-05, 0.051303726816364414, 0.03971181971438653, 0.08576341738271642, 0.07866818679405263, 0.043437880920872196, 0.12113228436836831, 0.13287312845767407, 0.08321022552187474, 0.04400348510338403, 0.09024133162257042, 0.15970367949022402, 0.07380758258938225, 0.11886281889369843, 0.15386445197096577, 0.18173151672679666, 0.10479307815043593, 0.29754347361438527, 0.10240838589758183, 0.22222691150740292, 0.09904004418366352, 0.09299778651845703, 0.15889511317594385, 0.1698102707232627, 0.2185004001362959, 0.05513389422590009, 0.2904537658792635, 0.13763756440833308, 0.1466100456673063, 0.12300525293919695, 0.09370502023299487, 0.5782218584830106, 0.6145737405689425, 0.5603698215854309, 0.5722150088432888, 0.6426809054405611, 0.6151668846126901, 0.5420676259244374, 0.6110197570481426, 0.6533196230087822, 0.11486560172490612, 0.11259052863916275, 0.1369206759169942, 0.14840213244048706, 0.1283104844055455, 0.12732084155000778, 0.09360692995959174, 0.15101871105033626, 0.13745659089992568, 0.25896639021215173, 0.18887975992194583, 0.3914970466813287, 0.42961408295068426, 0.30656535372821503, 0.16661869675310026, 0.62571481623328, 0.13914387109861093, 0.2022941792410321, 0.24487664343172955, 0.4294853632852009, 0.4480832441706568, 0.5844432581051167, 0.5925913251373386, 0.2411791779646748, 0.5953249900084785, 0.38773460561867956, 0.4838400715178285, 0.30823077089240425, 0.23433837840133143, 0.2851613008204342, 0.19502763980902804, 0.3115362305920548, 0.37250414619849403, 0.4700253427033222, 0.22364681521126528, 0.29367053465734405, 0.2520878909873311, 0.24433480002611274, 0.2392769006027622, 0.2373115120824335, 0.2494083447337977, 0.23648749836009297, 0.22112500757268494, 0.1982113643885064, 0.21371865291263048, 0.19978682863864916, 0.2247278793302706, 0.19546513531172638, 0.2222305579293361, 0.20927458589148695, 0.19737881813215785, 0.2202244767771644, 0.24145610049150346, 0.18847159207209785, 0.1866239603461134, 0.9042726828175186, 0.1512193205630591, 0.9031527788623629, 0.20022587303032457, 0.8501746432423023, 0.8883813874262048, 0.1588005501284635, 0.9054968137895804, 0.36864993347748765, 0.20822992017217312, 0.5396737988656823, 0.3359077288332495, 0.16601701781682254, 0.1661630928054305, 0.3499720928753972, 0.33547122289238285, 0.33448484212515905, 0.17429709267672622, 0.16937881522332587, 0.17849035115727707, 0.2096994960012598, 0.18139816938377284, 0.18005608310885424, 0.18056954682949833, 0.18957607093249995, 0.18250720866512882, 0.09393534564449746, 0.08640112845543457, 0.0930458210265217, 0.09108949112788, 0.09670041235722115, 0.08692213557682393, 0.098105479030557, 0.09399899164913639, 0.09729320334873426]}, "mutation_prompt": null}
{"id": "b99a5dc7-41e6-4f5e-96fe-7ac1cb653026", "solution": "import numpy as np\n\nclass AdaptiveDimWisePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dimension_learning_rates = np.random.uniform(0.9, 1.1, (len(subpop), self.dim))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + self.phi_g * dimension_learning_rates * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveDimWisePSO_DE", "description": "A hybrid PSO-DE with adaptive dimension-wise learning rates for enhanced convergence control and exploration-exploitation balance.", "configspace": "", "generation": 81, "fitness": 0.2826542402679744, "feedback": "The algorithm AdaptiveDimWisePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.881115036106743, 0.8238243465773625, 0.8596073132659579, 0.8429572028884171, 0.8400625401172586, 0.8615302819727784, 0.8524616634565515, 0.8745819597797655, 0.8307345028722161, 0.09617904190534265, 0.672408333613593, 9.999999999998899e-05, 0.056169981659546675, 0.6292287098740523, 9.999999999998899e-05, 0.6635847150250099, 0.7104459788193076, 0.6256217949000202, 0.10835486791317495, 0.1145378580274008, 0.11527935614772888, 0.12651188190877927, 0.14644576273782173, 0.09778434441616846, 0.1087193766400909, 0.13656004315863557, 0.16676284752657267, 0.073505719800531, 0.0671762718024691, 0.09182468746859163, 0.09519727251902899, 0.10549240962316486, 0.110281926541005, 0.08691886697939044, 0.06422282230390286, 0.12195825622779377, 0.9778204360341526, 0.9754787900411149, 0.9626942468627302, 0.9729406980342722, 0.9647262599650523, 0.9791929549008315, 0.9755495939862965, 0.960123194838861, 0.978266065524853, 0.7855442592682682, 0.44935012555840725, 0.09673653903319335, 0.7458733876834377, 0.318367841423132, 0.15379098321782025, 0.2115945901251145, 0.2410811285168123, 0.7039464318294761, 0.2273108785632485, 0.22114117616134132, 0.2258984690099558, 0.27342729381102326, 0.19177508717096625, 0.20246840515504705, 0.0939111693350907, 0.23431754260842508, 0.8845392703263233, 0.12833527157726365, 0.14313799937998462, 0.1401984044983321, 0.12524321263261085, 0.12702204532607486, 9.999999999998899e-05, 0.20426403855312159, 0.005152976218620986, 0.3134406482348302, 0.23672335175492454, 0.19854457905032552, 0.17856231963205027, 0.17943554740683376, 0.14896498812974301, 0.15173365011435325, 0.13349099758088379, 0.14821383703425706, 0.15981556814402698, 9.999999999998899e-05, 9.999999999998899e-05, 0.06228569847947618, 9.999999999998899e-05, 9.999999999998899e-05, 0.021588307379881932, 9.999999999998899e-05, 0.05198065275678543, 9.999999999998899e-05, 0.047525704535800295, 0.05265685473281079, 0.1367194023449263, 0.12203748049477237, 0.007623257023198549, 9.999999999998899e-05, 0.05097789041672207, 0.09981769908679927, 0.05316528272407828, 0.07737395951783632, 0.20830354893838265, 0.049554804976247535, 0.14259153942695935, 0.06972152136002896, 0.0755960556913502, 0.12400681362622235, 0.21896742114985157, 0.12631162392761375, 0.13189227140773507, 0.2898912867842752, 0.26432218281087605, 0.2202566187330557, 0.05963829250473518, 0.16053607906724332, 0.13067706063539175, 0.22449074194574492, 0.16379425300670825, 0.5572466267973776, 0.5124502643648314, 0.5211492888235671, 0.5124286532059082, 0.5676178049126619, 0.4716904494478614, 0.5640274829389792, 0.5337346603825159, 0.6169506947235474, 0.10682720827919634, 0.10508338428240971, 0.14038990878888413, 0.1027989527183647, 0.08335594257579271, 0.11386803794260414, 0.11167611379099995, 0.11101541506342438, 0.147095770021213, 0.3438533218375581, 0.21018394895349157, 0.33554263388607664, 0.3863814555916343, 0.2522883660429178, 0.23736013188820382, 0.2573683551203002, 0.2599307782928759, 0.21471285469809165, 0.459461175304267, 0.5618153319622723, 0.24935781668976387, 0.29112761153222966, 0.4617066371274834, 0.26264415043515, 0.3792905940787157, 0.32114376306113546, 0.24870638152411995, 0.35033825142455643, 0.22270503133955577, 0.24966790984668352, 0.38421661830065, 0.3276935888186263, 0.20610336267388496, 0.2373040526372462, 0.31519396597467997, 0.230818422984145, 0.23332118529890467, 0.19207748090720345, 0.21178462863041336, 0.20566311680885174, 0.21221631637606053, 0.1962771965536234, 0.21019942057959196, 0.2067650966117517, 0.21040563554430414, 0.2244708974943428, 0.18954145744102913, 0.18193024876032526, 0.17862142361078037, 0.25172268305485845, 0.2067536821440572, 0.19386536909291374, 0.20510676622555424, 0.2474961166843649, 0.898351636188449, 0.12180962561003816, 0.15296490161040288, 0.17143144515351083, 0.20016913667390668, 0.16822329073380426, 0.12309581850820706, 0.16934861925024358, 0.8951413375275374, 0.7332538139073421, 0.3334339834969867, 0.07331886551044586, 0.20906530654205358, 0.16348111398465304, 0.891626068007504, 0.10432322151564655, 0.6234283949805906, 0.5035996646004914, 0.18247297428499842, 0.18456359151566626, 0.17434651909922594, 0.17797714886884275, 0.17312215711811818, 0.1905360342171959, 0.19203325222265544, 0.17062550839203594, 0.18011308394306047, 0.08310267136252736, 0.08014388551808227, 0.09585401324093568, 0.09607482325169381, 0.08922098119772148, 0.08549429650943163, 0.08695606970498482, 0.07042407001023365, 0.07614814640269163]}, "mutation_prompt": null}
{"id": "04deb1f2-6676-49d9-9cd5-b2eab5ca9c55", "solution": "import numpy as np\n\nclass AdaptiveStochasticPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (0.9 + 0.2 * np.random.rand()) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.85, 1.15))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveStochasticPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive inertia and stochastic parameter tuning for enhanced convergence.", "configspace": "", "generation": 82, "fitness": 0.34827539273710667, "feedback": "The algorithm AdaptiveStochasticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8454637748356536, 0.8534458713023922, 0.8523744467364236, 0.8498525223447785, 0.8488278346892675, 0.8461074324584182, 0.8482964408291251, 0.8454670428725704, 0.8453836169518214, 0.7045460233788363, 0.7103881219464615, 0.7193442211480835, 0.679526746454213, 0.6821706769133706, 0.6940268397612879, 0.5430813324834902, 0.708204382475233, 0.6812737564633655, 0.10631219904274092, 0.11626481493985508, 0.17058189353912312, 0.5447654098046018, 0.159487884198229, 0.14798307968501723, 0.13816694133133356, 0.1476342724496239, 0.15300478335079748, 0.09790108539390985, 0.1251621565255404, 0.13034573118271742, 0.08945022568784622, 0.10808701373494078, 0.1297336749285818, 0.09491276820428574, 0.10319003294396456, 0.08824553292926007, 0.9701106212381198, 0.988625947477996, 0.9539355077283131, 0.9564331360217142, 0.950580341113641, 0.9877504271600875, 0.9876937738551159, 0.9680635848199851, 0.9620443651268666, 0.5375426131658918, 0.6586097232783643, 0.6840121126957464, 0.7006395250044659, 0.6079006253913853, 0.6898051080456307, 0.42839790497301167, 0.6576398604035922, 0.7183092849771044, 0.8484748415200974, 0.816878609027511, 0.8396884894155648, 0.35902499085445916, 0.3646963175161656, 0.34633054535012586, 0.84476378413392, 0.8337829244438065, 0.24040886583410614, 0.14016898070523698, 0.1646061342042514, 0.24770552442662797, 0.12623689599078458, 0.1608043542551415, 0.15982118610245655, 0.19435856068714874, 0.18793704810227196, 0.17652560881876456, 0.15213065669782733, 0.12610198605854817, 0.12617145594347146, 0.16323241136877187, 0.215175993241162, 0.16272062637289453, 0.3361263306846445, 0.17683807583719058, 0.16167608112953857, 9.999999999998899e-05, 0.03234218238583819, 0.09083999466721815, 0.04386083232964755, 0.059626912082948014, 0.08341440976059133, 0.00468336978089956, 9.999999999998899e-05, 9.999999999998899e-05, 0.08663586073139251, 0.10444919605165637, 0.15201574947524565, 0.13795191905989146, 0.024797294953207483, 0.04021516186421181, 0.08684396474742007, 0.05417918056007853, 0.10203627453268815, 0.06939678823044237, 0.0714954547081017, 0.08961877239257321, 0.16600926290162366, 0.08649423196715089, 0.12655959775550496, 0.16181527906112392, 0.1786638601326198, 0.07586313345568818, 0.12417925741799685, 0.36915951626014554, 0.15628298498380122, 0.020717262197100017, 0.17322963529044444, 0.13348998957329783, 0.14532593093484325, 0.13804959657745275, 0.13894354786166274, 0.589597731343515, 0.5713955349652801, 0.5564745685545378, 0.6078975492802886, 0.5687538738291472, 0.6401285087835551, 0.5835256236667541, 0.6136919691815668, 0.6750732719074523, 0.1445189861752726, 0.1318118819102625, 0.13067075111372484, 0.15641560998611626, 0.15139190202552033, 0.46946327457511794, 0.16690404835814276, 0.11412350604929888, 0.11246855914825371, 0.12977477975969576, 0.23941419942305753, 0.12763382501447673, 0.15247320373640427, 0.2921705866868016, 0.1489072740398122, 0.17778103679419133, 0.1368761860793738, 0.13481189937638505, 0.5861045327833335, 0.3024237995011809, 0.654197336345667, 0.34876821336131647, 0.4459334374431043, 0.4957139570246918, 0.4108328582156644, 0.6250562960792134, 0.5033396033511472, 0.2773498819052267, 0.26925816874965824, 0.43070412235568667, 0.3871319164481496, 0.25678943696618395, 0.28028243167317346, 0.38656813719487526, 0.38360787752020553, 0.40715306911046034, 0.20173045433673165, 0.200597454812951, 0.20692424071043047, 0.22018360700954398, 0.20718966939373196, 0.22180138949771322, 0.23607880808656223, 0.21451905546718886, 0.26340233291824666, 0.713713896644121, 0.21381387435008115, 0.20763556333691635, 0.1968918596759729, 0.649325767883514, 0.20383462137270558, 0.20114397868564948, 0.24070204513323823, 0.22053191308947329, 0.8660454300756145, 0.7949045413818514, 0.1525169348063823, 0.9002327810939823, 0.19863778626869866, 0.19624343640854425, 0.8675357983060182, 0.1704499912029872, 0.889377479788198, 0.6862595489492492, 0.49973556203182723, 0.16336084969739118, 0.20991621174982134, 0.20444028393120606, 0.16587363452314763, 0.8209983232476155, 0.804344808729202, 0.3238355270675485, 0.1922988155099904, 0.1904853920312296, 0.16986732059162934, 0.18032696078498012, 0.18991259856139386, 0.18166451269218098, 0.19511213063919708, 0.2120103678703955, 0.17580330582611792, 0.08703315495731445, 0.09070827813276228, 0.10726901581060733, 0.07877242568361176, 0.09484331377638466, 0.08249243132778283, 0.08560931041933673, 0.08997883610584156, 0.09422325123609421]}, "mutation_prompt": null}
{"id": "6ce7d38c-a6f4-471e-a230-b0b43d821657", "solution": "import numpy as np\n\nclass HybridGradientAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Gradient-Assisted Local Search\n                if np.random.rand() < 0.1 and self.evaluations < self.budget - 2:\n                    for j in range(len(subpop)):\n                        grad = (func(subpop[j] + 1e-5) - fitness[j]) / 1e-5\n                        subpop[j] = np.clip(subpop[j] - 0.01 * grad, -5.0, 5.0)\n                        self.evaluations += 1\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridGradientAdaptivePSO_DE", "description": "Hybrid Gradient-Assisted Adaptive PSO-DE with dynamic subpopulation scaling and local search for improved precision.", "configspace": "", "generation": 83, "fitness": 0.2473697285193827, "feedback": "The algorithm HybridGradientAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.6246339518837161, 0.7761294782895471, 0.7478896704009981, 0.6492279711422699, 0.5290190945224338, 0.7148051461635014, 0.6930768338535169, 0.5288617941171044, 0.7757768968823081, 0.08242357251011179, 0.0025378322159361755, 0.16768121548834947, 0.05404780078929994, 9.999999999998899e-05, 0.15413415324874513, 0.058400817567180074, 0.018641195224138207, 0.13551010675210162, 0.10825379268118085, 0.10718574027125394, 0.11041976073773219, 0.10691291486152332, 0.1002624901966419, 0.09332876631326781, 0.10794205955195046, 0.09709230964411764, 0.0962385775810981, 0.07999962728550658, 0.08336721656951429, 0.10492561467847428, 0.0872415287965792, 0.0846069052592382, 0.10570740368486697, 0.08817894547018679, 0.09882191895091874, 0.0962364479905109, 0.953197810136212, 0.9889858832332205, 0.9317078927371465, 0.9484535849276688, 0.8787417509524881, 0.9796301701657743, 0.9775372688645925, 0.9550953640855941, 0.9607564141754011, 0.2225732024888022, 0.22119599463394013, 0.3372764905943044, 0.262396699374974, 0.34423429217610124, 0.32067925059508695, 0.25365256525482904, 0.20227008578009886, 0.3472371476730082, 0.6492037354886266, 0.29993587510703856, 0.8012674782476662, 0.5434047388371642, 0.29819747331296265, 0.6885898198136553, 0.6267638845111541, 0.6475569179349622, 0.22798216669291815, 0.1258404876524375, 0.12624004753105122, 0.12896195782700548, 0.1583863728997823, 0.10434771263080511, 0.14771939574976134, 0.13642360654431718, 0.14067942166071712, 0.21757670873029844, 0.12886734577561743, 0.13425553027557546, 0.10238049163808627, 0.13272683589737566, 0.12194506455782161, 0.14271629317753742, 0.1358335304000977, 0.07733425162213792, 0.13630889188240747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014794176864206587, 9.999999999998899e-05, 0.03403775201214321, 9.999999999998899e-05, 9.999999999998899e-05, 0.07496729466114516, 0.06039980900253672, 0.06027204758070914, 0.0745209540499191, 0.06593299090193272, 0.0696447434883194, 0.12771853718053028, 0.07705164938823506, 0.09693912461471577, 0.09313900928200491, 9.999999999998899e-05, 9.999999999998899e-05, 0.01973227984475512, 9.999999999998899e-05, 9.999999999998899e-05, 0.011956517603381123, 0.0019608221169579165, 9.999999999998899e-05, 0.0018381565848248904, 0.12000561220270933, 0.0988895328959829, 0.11946147782969962, 0.12415155228337693, 0.08239444762234216, 0.14908274201465066, 0.10673273382753379, 0.13283768533354234, 0.09024380640482665, 0.44869718955718185, 0.4131493767893266, 0.5160669016940089, 0.49425888831011733, 0.4627705639507491, 0.5120068440206911, 0.45503682894484654, 0.4156218247377269, 0.506267262848162, 0.11482562063014867, 0.09040588852655451, 0.1104416888063301, 0.116765756104245, 0.09703723759350047, 0.10691128080688939, 0.09132183522515791, 0.09129376503930475, 0.10884424514811541, 0.1329118422358342, 0.17794847005638148, 0.12778734324362795, 0.13691421625582711, 0.16301004683516496, 0.1249905040372068, 0.1684165739209078, 0.19948688655996805, 0.13622930951710333, 0.3035096416692893, 0.33474268399238216, 0.32592348058902476, 0.30879790202597557, 0.2650712767791774, 0.3699298877146455, 0.322945415722394, 0.3091396812726601, 0.33467772029205856, 0.2111068546587449, 0.1889660435878624, 0.2537266576789078, 0.18132395696543502, 0.2198740452197192, 0.22718357478177664, 0.23736623490798858, 0.21527080723056635, 0.25090415705534297, 0.18583091793439221, 0.18328905067067458, 0.2091362183055252, 0.19811940161183217, 0.19031376175186, 0.18673240247570222, 0.19801047103684177, 0.18921345030738534, 0.20930495874959743, 0.18831295482721633, 0.17686979156885496, 0.214330120510413, 0.1852290615150255, 0.18690605020533213, 0.3329090141556632, 0.19880753080200053, 0.1736537344275061, 0.19490550159390874, 0.1829190763191907, 0.18181360664545243, 0.15065679831158874, 0.7132352462464191, 0.1897982366581431, 0.8393295347874247, 0.1564137736258725, 0.6807827933835523, 0.8413024800961042, 0.5702565777655908, 0.1996262202531166, 0.4853950402905368, 0.6383736059891907, 0.37092576371029007, 0.16162573169055228, 0.6273097821855176, 0.1795280365516363, 0.2073482127015317, 0.19277192902932183, 0.1707057340023752, 0.19287820112400123, 0.19924731151583508, 0.20399875028209147, 0.18254071578612507, 0.18653373331296907, 0.17329912357932153, 0.1918253447473035, 0.07531397203221735, 0.07900492907058143, 0.08253294515202503, 0.07472502876648557, 0.0751209744313257, 0.08653251234539294, 0.09103475311212572, 0.08276650710742528, 0.08614286017424189]}, "mutation_prompt": null}
{"id": "180b4bb4-09c0-4899-a02e-d3ac52279df1", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_GA:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n        self.mutation_prob = mutation_prob\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += len(self.positions)\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n            self.velocities = inertia_weight * self.velocities \\\n                + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                + self.phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Genetic Algorithm Crossover and Mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < self.mutation_prob:\n                    indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                    mutant = self.positions[indices[0]] + self.F * (self.positions[indices[1]] - self.positions[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.positions[i])\n                    \n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        self.positions[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_GA", "description": "A hybrid PSO-GA with adaptive parameter tuning and neighborhood exploration to enhance convergence and escape local optima.", "configspace": "", "generation": 84, "fitness": 0.1822198036094934, "feedback": "The algorithm AdaptiveHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.14.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.3921380979814435, 0.915832463547317, 0.516958800464021, 0.5075792399050505, 0.3677354614812828, 0.6050727336839513, 0.6656281287385196, 0.9130469481343731, 0.4100601241112187, 0.12255716677696349, 0.006268710182583681, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09045178275948362, 0.07198644766166074, 0.14514091618198344, 0.11028334189268862, 0.09789017945180789, 0.10933771578093476, 0.11506216777174505, 0.10077928604395425, 0.08219919210665938, 0.11093854503495426, 0.08269656453328045, 0.08235207726188942, 0.1117068708715595, 0.07531713538293694, 0.1163290896055319, 0.10024500431155703, 0.10604034899201964, 0.055305065053033786, 0.11240834610591244, 0.15370680074237786, 0.17419855800130501, 0.14317983612624552, 0.10126768616886606, 0.08388350918603171, 0.15982882192854353, 0.36231664919011874, 0.15581738936909806, 0.18321747162214874, 0.22145861703355574, 0.024498128939318797, 0.14550409154839095, 0.15432918556949193, 0.09952986601631475, 0.20112903443029606, 0.07223902774370705, 0.13381062649256403, 0.3976044835497917, 0.3917110191091986, 0.1716652486179191, 0.2219063894131339, 0.1631899428338356, 0.15587181421043383, 0.22247077703332108, 0.14259780672010003, 0.13629757148478405, 0.2106284775125924, 0.13257680711875997, 0.09080031060798865, 0.13975520633150007, 0.1502439723228206, 0.13461477178751124, 0.13392351132164093, 0.14075917565458207, 0.21739028797533555, 0.21995351218844017, 0.13412641141545012, 0.12781150982530376, 0.14836726997444605, 0.1754452842118217, 0.2112851106912178, 0.22383158533396086, 0.13078086028458835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04080851843785671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13752795455203393, 0.033838363075643585, 0.10592163816879074, 0.06536555442795233, 0.01274911244434751, 0.03707869073393599, 0.05680952802213779, 0.07660742590223768, 0.057998256968288975, 0.17435885468646195, 0.2797400544320512, 0.0766548229222237, 0.12229029898393473, 0.13810116426356944, 0.08392557075204898, 0.11020980455630325, 0.22963026160670363, 0.09251475723376901, 0.16913335492407555, 0.14018406244144666, 0.12675134223188889, 0.190303034956941, 0.127425448109313, 0.08396011929848246, 0.18433061964647068, 0.23919093053057516, 0.0843956063778123, 0.45690210454859437, 0.4620306725948753, 0.41169847262860093, 0.4005538763209019, 0.3456190466354264, 0.25801727389793083, 0.45921291364174177, 0.4966693176108403, 0.46136789401740297, 0.07638470530122832, 0.09115662165887373, 0.08491611002123722, 0.0978408300502781, 0.10137964446865877, 0.11656442249448651, 0.10113612971767871, 0.16208029801620272, 0.10560304173851276, 0.19383736724223188, 0.2271118890694407, 0.1331181691936132, 0.39927572032235725, 0.24265151538051688, 0.3156080650099037, 0.1299593789128206, 0.3756404657670571, 0.17882124092713225, 0.3399838515476349, 0.3328302811262618, 0.3147354453905091, 0.27344479593789917, 0.24361609933648665, 0.2639695322525949, 0.2503558179456937, 0.2931069088813336, 0.27556983077293973, 0.2005018752591997, 0.15824888816510396, 0.2778897666689457, 0.11835279344988137, 0.10768637126246572, 0.2409976883308539, 0.2101389832468591, 0.30453123399060333, 0.24729297579606146, 0.20752627796371048, 0.20138456161163565, 0.21466081761774458, 0.2220034705542029, 0.21160775675785726, 0.17878848883440857, 0.21041168132247756, 0.25288890979748135, 0.23300273893482604, 0.17981893061150944, 0.19375503507232483, 0.18951081910281076, 0.21213749238221358, 0.21627631622037347, 0.19140219257269542, 0.1903597182231661, 0.18073278103221913, 0.17803818484323652, 0.18732309769234767, 0.18733197717408812, 0.14711269982316533, 0.19726878742574216, 0.200941201740802, 0.14655222925607359, 0.5491050961579551, 0.14021040327085976, 0.2844136344802273, 0.40381527617127466, 0.2135031582938337, 0.25424180988740197, 0.2095640638526053, 0.3734989920575562, 0.09142980589001659, 0.10451123260170403, 0.22467595622764158, 0.16856850514046018, 0.185413931033384, 0.1765729714933284, 0.18008116396496132, 0.18579836803494398, 0.17887390114871415, 0.1778510182728893, 0.17732340097063448, 0.17730999023048932, 0.1923872381700369, 0.07708349668670966, 0.08139294718840029, 0.09259495155967834, 0.07695765888303818, 0.09362273393033516, 0.09538586885251066, 0.06804600633747682, 0.09089932991362071, 0.09082065569444109]}, "mutation_prompt": null}
{"id": "5c5325e0-9722-4904-b321-3fc964743269", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 3 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n                \n            self.subpopulations = np.array_split(np.random.permutation(self.positions), 2)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid PSO-DE approach with adaptive learning rates and dynamic subpopulation management for improved convergence and solution quality.", "configspace": "", "generation": 85, "fitness": 0.12231655028484446, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.13.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.21320277253962272, 0.21474491313335786, 0.23636625649649234, 0.21231841104360605, 0.2289753989435077, 0.2170928764019584, 0.22025369526447935, 0.22987415895714325, 0.1973491152689597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06838045463566778, 0.06867781143649954, 0.0789455378860171, 0.06028111477455589, 0.05183048293164616, 0.06471736830289354, 0.04714357009256964, 0.07369895772897128, 0.06379375426324418, 0.05054940993930035, 0.04986908581008609, 0.056931063552897454, 0.04223018524970523, 0.041187007433568956, 0.05549711028104687, 0.050295241029766125, 0.0495165912723865, 0.06184004489713024, 0.2636365928667992, 0.9505772002829771, 0.4322355547285208, 0.14358972354897837, 0.9235728336478475, 0.9627631663631503, 0.5538422416476732, 0.16018364064211088, 0.24146083650145111, 0.12115857264281527, 0.08919771659614706, 0.07714121056477308, 0.08728340042952898, 0.08942944825418475, 0.07655261234587285, 0.09394291141324773, 0.0766782771682114, 0.0868616111687256, 0.17197936156431948, 0.16864713795720931, 0.14450512334293475, 0.1795440290568513, 0.1348253907940039, 0.1624491725209145, 0.14734843228362515, 0.16404335895622058, 0.15773851694602747, 0.009545691859423222, 0.028767227381490956, 0.024987913506120285, 0.02334671474991412, 0.07034642356578935, 0.02489263115001672, 0.034895903173911225, 0.021697393015891464, 0.024985941517560617, 0.06461866949783257, 0.04571042948281645, 0.09949743157398894, 0.0500328734382931, 0.04568821349191898, 0.02885858090176152, 0.03462203016829879, 0.016946547436076265, 0.03455180092640475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05369658515829723, 0.08635191605475867, 0.11862664415748592, 0.05328251133807227, 0.02761277543431717, 0.07099889638236401, 0.05942263932126257, 0.0645793110345918, 0.03768285052297282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036394858424347865, 0.003152081927366046, 0.016340147904517988, 9.999999999998899e-05, 0.0033928982601364455, 0.003759662255507279, 0.013997192881291975, 0.0226990147885876, 0.007809933133306135, 0.24324647000242283, 0.23287206429061513, 0.25139377404055985, 0.22358639872357322, 0.23773590146281398, 0.21513688032889433, 0.2300744471584143, 0.2112953052085691, 0.23736789430491745, 0.05484267594410741, 0.05647248855870257, 0.04898047913230641, 0.06421713031802045, 0.04679083183164423, 0.07146213242911759, 0.056139771968985785, 0.06837210546462669, 0.059043211415892305, 0.17411283851477966, 0.1439225448537782, 0.13652557057606396, 0.14225471406444068, 0.13127552557710265, 0.134271072207796, 0.12919962913471972, 0.13453120685505693, 0.11916102942263374, 0.17723674560794278, 0.17956735243431698, 0.19153742746936064, 0.16682736234734197, 0.17607491331398029, 0.18185655691176694, 0.19641267920205951, 0.1936713798243339, 0.18326720837741817, 0.13060103925671684, 0.126698923708077, 0.1295525473587591, 0.1339248133860792, 0.1255166605930519, 0.13857859801812833, 0.12470095848761431, 0.1402520665566762, 0.12606429237478955, 0.17791348549610098, 0.16396419076667557, 0.21923547286092704, 0.16840520963143446, 0.17711534514243232, 0.19093298700869343, 0.19452452197993675, 0.16466308652671013, 0.17235112372755435, 0.16084507356189714, 0.1694487499140367, 0.16361737583442137, 0.15929219808524908, 0.15726548028024845, 0.15562890208244884, 0.16407305414898787, 0.16224198305627668, 0.16508145731075696, 0.2821380408943681, 0.1498272280095524, 0.16609472916501922, 0.24391223442745835, 0.1573526844575126, 0.167583722637471, 0.2503391325127886, 0.1635635565055058, 0.18432067652391526, 0.2552268060017715, 0.1608688678691217, 0.16479606499199273, 0.13542903631044134, 0.17278039750637453, 0.15386900080943033, 0.18963287631103565, 0.14807558272742405, 0.12311478515249874, 0.17397517435545373, 0.18191623272839086, 0.1980926745909174, 0.1724188628001082, 0.17412639880905534, 0.17101673756941838, 0.19393441124681932, 0.16860785385505384, 0.17121876250854218, 0.054989321550472425, 0.05681756736797683, 0.06389366738929259, 0.06842440512799008, 0.07702542122520117, 0.07720684687253143, 0.06520768644850738, 0.059620122749853954, 0.05914454804640046]}, "mutation_prompt": null}
{"id": "1b13d58f-f7b3-4bbe-846f-9256aae4e2bd", "solution": "import numpy as np\n\nclass EnhancedPSO_DE_Cauchy:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover with Cauchy mutation\n                for i in range(len(subpop)):\n                    if self.evaluations >= self.budget:\n                        break\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant += np.random.standard_cauchy(self.dim)\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO_DE_Cauchy", "description": "Enhanced PSO-DE with adaptive inertia, fitness re-evaluation, and Cauchy mutation for improved convergence.", "configspace": "", "generation": 86, "fitness": 0.23383793751761875, "feedback": "The algorithm EnhancedPSO_DE_Cauchy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.517141564827898, 0.7336020655746034, 0.6137972405185151, 0.834011942177925, 0.6585773315170202, 0.790782674709414, 0.49234573995055664, 0.861923898074775, 0.8559383485205992, 0.01473867201273893, 0.05178967758723485, 0.05163882005191822, 0.0729426533689328, 0.0578698013801644, 0.05096702462478819, 0.1171673585139168, 0.0810205891395479, 0.1736944900614782, 0.13966740276073142, 0.13681940647724278, 0.13419155389327442, 0.11494047017875186, 0.12300921409740984, 0.1092537161345426, 0.13001533216041994, 0.12926335362488972, 0.10301576354192388, 0.11450357492794172, 0.08653577356326747, 0.08327078395708942, 0.09939847447102257, 0.10301343631700288, 0.10050365312805443, 0.09806982077978499, 0.09337663761741055, 0.10043141534312594, 0.9712491393322884, 0.9563000901678883, 0.9819618912597532, 0.9705076280929739, 0.9748789449705176, 0.9609395831891319, 0.9783734755443787, 0.9832702686551168, 0.9795858961867923, 0.2151357889325941, 0.2017362339705593, 0.23775673349125515, 0.24834127755491486, 0.23131076629955938, 0.16550518173640338, 0.14025805144373338, 0.1451437292145713, 0.18580009100250738, 0.22420536305263583, 0.20592593427236394, 0.3098557214352099, 0.27547805676745474, 0.21437418906903083, 0.1895122327375408, 0.25181289242902616, 0.31661003325879, 0.3474104612890083, 0.12707883817108978, 0.09698922908529384, 0.12051350921341342, 0.17987454597336816, 0.13967551732382655, 0.1894289367537334, 0.1255991021564712, 0.13036656300994132, 0.12394304332431694, 0.12614622242804985, 0.11772584126927432, 0.07503564082749292, 0.26885783008679587, 0.11987379312131397, 0.13354148551071598, 0.12719587614762895, 0.15091434502766865, 0.12511529182499348, 9.999999999998899e-05, 9.999999999998899e-05, 0.009786129069813576, 9.999999999998899e-05, 0.026232042959015378, 9.999999999998899e-05, 0.011890192854686954, 0.15116089264122112, 9.999999999998899e-05, 0.06015596770094778, 0.0605838642097275, 0.08519721344504072, 0.058158451597828176, 0.038613290798998556, 0.03635045621418975, 0.1383778517497536, 0.07505189607625029, 0.05603208432930351, 0.15873339145634613, 0.02298613816878714, 0.1347480922372517, 0.08599358574434768, 0.1322229021927679, 0.17834058728747226, 0.044190703110025265, 0.03037451751340081, 0.27135310323541184, 0.13577247957644445, 0.16229905514662601, 0.22441514156754594, 0.18283878041620483, 0.108260172555803, 0.1627840252508992, 0.11532807804534473, 0.0810304846838299, 0.08805679117839371, 0.3801392314098626, 0.47386506792440697, 0.5126960723073237, 0.42163962727934257, 0.381671770377918, 0.5209058597954351, 0.4331079604398098, 0.5049457092312182, 0.4228847935416976, 0.11530976524436465, 0.1719559347034717, 0.090947416102924, 0.10713102034877231, 0.11314073415666648, 0.10578160918379431, 0.0932167504679654, 0.13982467049116587, 0.1621752079256925, 0.19851077698450692, 0.17094564306287596, 0.1282035908717828, 0.14660163659834702, 0.13921219845058042, 0.1263502681794334, 0.24701181205223532, 0.12984396281380106, 0.157593683050386, 0.2362186173428812, 0.27846335536430855, 0.4015646752343993, 0.2218732618102799, 0.26935720220441695, 0.42072090309852594, 0.2504160971526316, 0.33739004475102186, 0.30389702344519454, 0.28628235907873056, 0.23564168538152053, 0.21804936623498394, 0.182343732340275, 0.20809383144390292, 0.2198222203952419, 0.16680105331529882, 0.2567732436840564, 0.1997928411893436, 0.22045470639996856, 0.19651506647472505, 0.18605722045033213, 0.19355328262100235, 0.20221083186278543, 0.2167245975389226, 0.19270967451963938, 0.19296907041054134, 0.22073882052258964, 0.1965250404997727, 0.20077887673248107, 0.1710721292284073, 0.19342471035312037, 0.17448629935736426, 0.18391264276987607, 0.17844130607618824, 0.2992101657717814, 0.20256775556111306, 0.16286369730780625, 0.18010851126557048, 0.15217438402549455, 0.8288002538118604, 0.19816388669631646, 0.7944389623603, 0.16762841142051277, 0.16739601304641638, 0.5121515752450396, 0.5090096898334738, 0.5283148003215771, 0.16686303890685483, 0.20234217860373405, 0.16598399738284986, 0.15142322665607622, 0.363044331073331, 0.21411035147376478, 0.1781505209173052, 0.1759665352880282, 0.1910461207573383, 0.18332996455804795, 0.18711678488286843, 0.19624098695183878, 0.1856619221265393, 0.18435163669896715, 0.18320811655690727, 0.18821468583019263, 0.11192553950123652, 0.09151855392237052, 0.07556810907775491, 0.09547223860156684, 0.07509031635132957, 0.07447288556633813, 0.08763212935626574, 0.08639901138996442, 0.08318134721542725]}, "mutation_prompt": null}
{"id": "d2268cd4-f706-4326-8f3f-d07b9cb6b372", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0) + np.random.uniform(-0.1, 0.1, self.dim) # Stochastic boundary adjustment\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "Enhanced PSO-DE with stochastic boundary adjustment and dynamic learning rates for continuous adaptation in diverse landscapes.", "configspace": "", "generation": 87, "fitness": 0.2891934597249091, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.7789762494319105, 0.6986806008189459, 0.6357335333448912, 0.6021513165710916, 0.8200193188629523, 0.6992145260291097, 0.7593622705820623, 0.8521116265149642, 0.6791601681898631, 0.19850257508176905, 0.12241457175781034, 0.14728645420339237, 0.09451402073036219, 0.0730824982966447, 0.018387619343646855, 0.10593676397691432, 0.14517138967863918, 0.1094878847618902, 0.13681204402762248, 0.15025215208323628, 0.1203906074072364, 0.1340751856148389, 0.33098694098650927, 0.1349919232002127, 0.1372448365869393, 0.1391390856217316, 0.17418294346994423, 0.10163325283297997, 0.11684910547013827, 0.13815798948845004, 0.14917412775702088, 0.105013249773248, 0.10561854663176562, 0.11598055385343942, 0.10609501928219633, 0.10494492146364898, 0.9414930765224986, 0.9676925553185209, 0.9734962045963474, 0.897082200414476, 0.9415473717767154, 0.9574058144907054, 0.946149973958249, 0.9467562483701897, 0.946023144741388, 0.3470795288365496, 0.36220992564091425, 0.36305151760120513, 0.3542369792596628, 0.34963471343023733, 0.36003394387541054, 0.33613390143942057, 0.33391663783377723, 0.33066134372649447, 0.8627798019829503, 0.8862997171829166, 0.2255178859722854, 0.2736465201214777, 0.8614972533689341, 0.21625663819970564, 0.7691184330550802, 0.7573598340006419, 0.8798498117628436, 0.17766786631941944, 0.16103339139374673, 0.16629801064714067, 0.169177715663828, 0.17664441441427392, 0.4210735300959102, 0.16743635731768025, 0.12647841860727238, 0.1310257083955323, 0.1457572934691811, 0.19076897720469488, 0.33158470895083536, 0.14828906453025625, 0.15370153502691541, 0.15929562941211084, 0.17762360193423787, 0.18791386130212473, 0.15160677606681727, 0.04860510802567264, 9.999999999998899e-05, 0.11859313432052454, 9.999999999998899e-05, 0.044818017155707435, 9.999999999998899e-05, 0.05524582878447615, 0.013974899554032305, 9.999999999998899e-05, 0.14719825646642826, 0.11615211400214354, 0.166303090833526, 0.07830962871722225, 0.10970443725133805, 0.031009985811038088, 0.06642091783431947, 0.06893087433683431, 0.11215773258671724, 0.21143258374428175, 0.11293057280344887, 0.1434763813030422, 0.12065596488582164, 0.12954034685114235, 0.22470105203861435, 0.14739116171421263, 0.14574482185266757, 0.07462020874020514, 0.24550579213568313, 0.15996271111481541, 0.2074001579977256, 0.10893277696456338, 0.5120997540338346, 0.18709187771117364, 0.1180171156752231, 0.17278012324357583, 0.13238687052380205, 0.48431386600752957, 0.5115306967675901, 0.5400045930973763, 0.5320594757472219, 0.5088006166050523, 0.608636541612094, 0.5097458026499261, 0.529501683153167, 0.5010418069668365, 0.11812686617423807, 0.11165966270655603, 0.11784750036453939, 0.17052512175512236, 0.11359081667641058, 0.08911300670841193, 0.13817676540032586, 0.13671999503111854, 0.14210880681228222, 0.3426039870644899, 0.21134629602353916, 0.1404275567804838, 0.30432050186824067, 0.18597948488089489, 0.17032024875938057, 0.17755291183579536, 0.17281163311888303, 0.30753024031044274, 0.44246267917412174, 0.3552810727222224, 0.2638108406307397, 0.394401657943538, 0.3531920140554944, 0.4432100265243505, 0.427209508481575, 0.393419155984129, 0.3627891252984051, 0.30896913400294845, 0.3126498849018211, 0.34188816708292435, 0.3794661569528913, 0.29001643913489394, 0.3282900002226157, 0.32947688948838505, 0.24710807221989273, 0.30924092100769085, 0.20019128168488465, 0.24959464122367614, 0.2164580647708586, 0.21351657338824248, 0.19025276592858642, 0.21502581517439778, 0.25093995930367385, 0.1915759477263358, 0.2157340214939384, 0.18555953654791857, 0.1982092434554209, 0.18272255263562154, 0.20313029060575694, 0.21861716067432646, 0.20859353174443163, 0.19701265375171706, 0.1901603036172107, 0.17989076394386516, 0.18683000534635397, 0.17079389622201757, 0.14721567465614116, 0.8877901623838325, 0.19962367809705617, 0.18461401795989685, 0.8917265501277428, 0.8549397647425411, 0.8813213117251257, 0.6476483641207331, 0.2079373361895227, 0.11140303877349056, 0.20843129314899778, 0.7165190323937825, 0.16525305875902174, 0.20994692431211548, 0.15516504284863697, 0.21174755124315603, 0.18201132915387364, 0.19015783224046645, 0.18315867993170065, 0.1788738352309288, 0.17544318474673126, 0.175229590509554, 0.17941808340531917, 0.19121196656377648, 0.18294164133426616, 0.09532606764384566, 0.08308734187425149, 0.10364042952209529, 0.08888869967938284, 0.0835392177550468, 0.09337813255213423, 0.09624678468264047, 0.08428571195878287, 0.08904071939455571]}, "mutation_prompt": null}
{"id": "800bf27e-ebed-41ff-b4f9-a956dc7d6f94", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n        self.chaotic_map = 0.7  # Initial value for the chaotic map\n\n    def chaotic_update(self):\n        self.chaotic_map = 4 * self.chaotic_map * (1 - self.chaotic_map)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * self.chaotic_map * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n                # Update chaotic map\n                self.chaotic_update()\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced Adaptive Multi-PSO-DE integrating chaotic maps for parameter tuning, aiming at improved convergence and diversity.", "configspace": "", "generation": 88, "fitness": 0.33535948965934304, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8620160398550546, 0.8625750506641183, 0.8713959869842671, 0.8637958377891586, 0.8669028162252154, 0.8757668786101239, 0.8542900137553127, 0.8684579920835065, 0.8631230839476234, 0.7543233697307161, 0.7626866102359066, 0.7148524850417394, 0.7322602408661962, 0.7201684073137191, 0.6845894050205866, 0.7238777166030259, 0.7207485215363454, 0.6889794832460854, 0.17707957472730484, 0.17718308902268687, 0.13887899594513076, 0.1441288510899592, 0.12820358186234493, 0.14781410930048444, 0.14960462600610624, 0.16367056235151956, 0.13242607363700098, 0.12491579537440045, 0.10326961226712372, 0.10747121505799184, 0.1078384919315657, 0.1121380399399462, 0.09319473338462125, 0.09314471479259778, 0.11118001344854989, 0.09996189664801391, 0.9209942075269886, 0.9700381262927013, 0.8698237704001263, 0.9042232541170301, 0.9656701317924578, 0.9794240583793195, 0.8785151178633972, 0.9664147649717064, 0.9360993607736557, 0.4776412792871695, 0.5205806012056533, 0.5527758712666982, 0.47360518854093003, 0.5320307713358017, 0.43395781972326897, 0.48571114996807174, 0.20594777489740967, 0.5587478558507858, 0.8656639749936645, 0.22655882045227904, 0.3877672022627392, 0.8599023309682444, 0.8811745676511048, 0.8730438226643604, 0.23211690396902218, 0.17476788616232009, 0.22958928688477975, 0.18019196280797622, 0.1822768063816551, 0.15684791262271391, 0.17261180833763412, 0.16682499760750835, 0.1364149150525047, 0.1618560818626238, 0.12659631205457667, 0.15767911809437696, 0.15420512925147356, 0.24880694776329115, 0.1488255055384754, 0.16583027169723663, 0.1694721096805275, 0.1560012941653044, 0.20282534018726106, 0.21821237729954368, 0.12562727260741124, 0.05520350218600656, 0.04308828633644879, 0.05561670002443786, 0.08039292758644878, 0.052514578450888805, 0.00018785630621898086, 0.008818452367366225, 0.06656461544338277, 0.08125811156142282, 0.152483874056081, 0.1286241570527613, 0.09203168056757771, 0.06780492117637749, 0.06348834314928953, 0.05883538672166344, 0.1709343874990511, 0.0764452858815261, 0.07872673881981751, 0.14890967896082752, 0.09856137258896502, 0.2289722781146084, 0.11671661465323846, 0.08148206571884076, 0.12165250761401947, 0.14548540368515128, 0.11854112149031659, 0.11274613071277473, 0.17166556123914756, 0.3437730766257875, 0.25219042889872434, 0.24050624150243927, 0.17936166885059424, 0.14914804926049752, 0.11467427263928731, 0.21244991568866511, 0.14330631910095948, 0.5482507828911285, 0.4882546663224232, 0.588183031508909, 0.6407326635551307, 0.6605696102763791, 0.5370437663559064, 0.6181265343280409, 0.6075694380510068, 0.6270915130716956, 0.17516478543219272, 0.12815192247888296, 0.12356429606845354, 0.14974836147002957, 0.14656000096116573, 0.1227556100471644, 0.13801069482073058, 0.15230809809866863, 0.12730234359304793, 0.28967018056052596, 0.17600877376907664, 0.1899486168559199, 0.295682538819238, 0.5191904005618859, 0.17377910979992794, 0.20713085871297987, 0.15671615753173207, 0.3701297340493629, 0.34851147775067814, 0.3072750856706299, 0.6683692025192218, 0.417404933004197, 0.5909038567297533, 0.367275718603168, 0.6000793567216136, 0.5546415416679027, 0.5163962775491369, 0.3267224038285028, 0.338415879108523, 0.4187844682467069, 0.27610263123364676, 0.2577335246860022, 0.30222835483468313, 0.2656419915808529, 0.3095807904634599, 0.2051008198610994, 0.20987561886843997, 0.23103381366342535, 0.24608855545542463, 0.21948147538240392, 0.24255142319361622, 0.2027715442593082, 0.21698278923098313, 0.23294259867877742, 0.2087117619890947, 0.22365468466800908, 0.18028901540654496, 0.1756767334448568, 0.2481234430542576, 0.22073365217777685, 0.18756480511361928, 0.20789212065746165, 0.19821779714380505, 0.1857098764539482, 0.15920696252465372, 0.18529537430615017, 0.14639374240385772, 0.8867621952532496, 0.20031591553585038, 0.8957089600121158, 0.19660654985874781, 0.8764298063246933, 0.9004944375962093, 0.5067823882630651, 0.16765456975281123, 0.0732138972542542, 0.7088381305031812, 0.4172324311610075, 0.16557281474969787, 0.8392609098594271, 0.8369801045619205, 0.6061973768155201, 0.2046083885468477, 0.18261232135727246, 0.19695325755345916, 0.16815920762848569, 0.18776985388002776, 0.1801038562140358, 0.17844266731857328, 0.16866892513214027, 0.18006331723442204, 0.09439148964847177, 0.09055907918124917, 0.09237521172876872, 0.09809437939722032, 0.10403064637968784, 0.09824853408963374, 0.08746242849874108, 0.08414818323275353, 0.09492844772530384]}, "mutation_prompt": null}
{"id": "bbb7f13f-5aa7-4b17-9338-e6c58abd2dc4", "solution": "import numpy as np\n\nclass HybridPSO_GA:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            fitness = np.apply_along_axis(func, 1, self.positions)\n            self.evaluations += self.pop_size\n\n            better_mask = fitness < self.personal_best_scores\n            self.personal_best_scores[better_mask] = fitness[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n\n            if np.min(fitness) < self.global_best_score:\n                self.global_best_score = np.min(fitness)\n                self.global_best_position = self.positions[np.argmin(fitness)]\n\n            inertia_weight = self.omega * (0.5 + 0.5 * np.random.rand()) * (1 - (self.evaluations / self.budget))\n            dynamic_phi_g = self.phi_g * np.random.uniform(0.9, 1.1)\n            self.velocities = inertia_weight * self.velocities \\\n                + self.phi_p * np.random.rand(self.pop_size, self.dim) * (self.personal_best_positions - self.positions) \\\n                + dynamic_phi_g * np.random.rand(self.pop_size, self.dim) * (self.global_best_position - self.positions)\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Genetic Algorithm Crossover\n            for i in range(0, self.pop_size, 2):\n                if i + 1 < self.pop_size:\n                    parent1 = self.positions[i]\n                    parent2 = self.positions[i + 1]\n                    cut_point = np.random.randint(1, self.dim)\n                    child1 = np.concatenate((parent1[:cut_point], parent2[cut_point:]))\n                    child2 = np.concatenate((parent2[:cut_point], parent1[cut_point:]))\n                    child1 = np.clip(child1, -5.0, 5.0)\n                    child2 = np.clip(child2, -5.0, 5.0)\n                    if func(child1) < fitness[i]:\n                        self.positions[i] = child1\n                        fitness[i] = func(child1)\n                        self.evaluations += 1\n                    if func(child2) < fitness[i + 1]:\n                        self.positions[i + 1] = child2\n                        fitness[i + 1] = func(child2)\n                        self.evaluations += 1\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_GA", "description": "Hybrid PSO-GA with adaptive inertia and crossover for enhanced search efficiency and solution quality.", "configspace": "", "generation": 89, "fitness": 0.1712603549682554, "feedback": "The algorithm HybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.14.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.6377679550788438, 0.6443128598397676, 0.4707307502069198, 0.3242341651010966, 0.5617747718592172, 0.6530894053240206, 0.20209594224881444, 0.322411190116211, 0.5850328429277286, 9.999999999998899e-05, 0.05779292975896655, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951479622841138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06368933265167598, 0.10546550018767376, 0.1011140867519269, 0.08358440894000774, 0.09445734688543705, 0.12323586172761047, 0.10940163722590901, 0.17794927967561835, 0.15231374793957353, 0.0692479759715856, 0.05612087110204944, 0.08960760923918609, 0.10145598226445396, 0.06682658402835262, 0.09382925629427186, 0.09716435737669327, 0.10214727330319273, 0.07367780154372017, 0.1655162690728077, 0.13803581997865222, 0.2026449486867392, 0.09178568647582674, 0.0995736985775818, 0.10287503949668841, 0.11623612595400845, 0.10702815339661342, 0.08804474972719012, 0.21853903035393907, 0.17473968285991082, 0.08262755648616493, 0.1360778823139579, 0.11141435965675806, 0.17176542194701672, 0.1005365108445696, 0.08253274314200465, 0.09740091131151896, 0.3009479669223497, 0.8745552859393266, 0.21659854210997753, 0.1930375933796855, 0.18999705264828837, 0.17206404500919636, 0.11900328061729093, 0.2327941679225327, 0.1259156800491581, 0.04000033054271934, 0.11290352868915887, 0.11851643149599023, 0.15648775336872245, 0.14313524296556912, 0.1294370804176328, 0.2154304441812147, 0.17112800133676387, 0.14613373317164347, 0.06431897258684971, 0.14785197492405955, 0.12431154196704719, 0.12216417868693263, 0.11822697272928184, 0.12699962051657765, 0.12388338194906989, 0.11694576258689104, 0.43110855121155023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04210231239796325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012256520222420297, 0.1004556139301741, 0.05549687075081433, 0.11810799820741491, 0.062420714032649594, 0.056590034844474446, 0.02010090795954189, 0.06369609205047999, 0.09990994098041428, 0.08887040985502359, 0.0467391539609735, 9.999999999998899e-05, 0.11378241702061931, 0.08788762101450343, 9.999999999998899e-05, 0.08623101009377065, 9.999999999998899e-05, 0.15520297867987642, 0.1037786474584762, 0.1135390433058352, 0.11441557030946314, 0.1385729171454987, 0.051344958143183406, 0.07827066262696536, 0.08480699892989108, 0.15011159715710654, 0.24849611671983418, 0.07945035044452686, 0.4751712634383378, 0.4780527958707125, 0.3915114497424199, 0.37255844856659426, 0.42749552599712537, 0.3429848048798211, 0.3444371719938406, 0.36600507576334707, 0.3849154214219117, 0.06159419394435117, 0.09340833398020765, 0.08082940357785373, 0.0911526001015529, 0.09356103685499706, 0.13947061242079895, 0.08346696486111105, 0.1100401925929525, 0.09419373204983472, 0.20138657769214519, 0.17415766106458885, 0.1886930506576695, 0.20473845268740487, 0.27882548364955806, 0.15287274093346437, 0.184274735558134, 0.15116622420590142, 0.1637098252397815, 0.24288928537400956, 0.2503806893977093, 0.24077411109091962, 0.2911611587811701, 0.2234594726171124, 0.20566144877414028, 0.23185001345508216, 0.34864798691416765, 0.1962068062506459, 0.2819147570195252, 0.27075739560546974, 0.22964696614302094, 0.1996942107230335, 0.2641982458854907, 0.3587470480861924, 0.12553010439517598, 0.19807530785378902, 0.19882452000927908, 0.20834288110769605, 0.1781248819065544, 0.18629802855192512, 0.22890289872548297, 0.22168476605355192, 0.17192358788156326, 0.19520919374299994, 0.18507173800770882, 0.17662954886621518, 0.18733538401469785, 0.20473132287961715, 0.1747327135337482, 0.15278711252103494, 0.179970803917483, 0.1906319186054103, 0.1714919944699581, 0.21274600031923163, 0.1931713217856501, 0.26983020180195694, 0.18146046627340184, 0.18503285016782434, 0.17062489749944432, 0.19825969246783093, 0.1452422112785704, 0.17714285590704093, 0.16783311584865845, 0.5300163202300874, 0.4626628738165479, 0.2823658951298522, 0.35485587643080574, 0.5711009869121866, 0.16644028668537025, 0.15207439723546234, 0.09645406016558866, 0.35763503181422907, 0.22528580598348935, 0.1864642092262384, 0.19327667932875758, 0.18167276286903755, 0.18415623912106194, 0.18205691345688269, 0.17376427840635955, 0.18879779313663425, 0.19354709976116458, 0.1790168043351683, 0.08571783341035877, 0.07153646864246677, 0.07918363051227029, 0.07670541253406193, 0.08951866198941438, 0.08626879161139345, 0.07331615921049339, 0.09034144983837378, 0.09804256684354185]}, "mutation_prompt": null}
{"id": "2379bdbe-cb3a-43fb-b1e4-aaa7b871304d", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "An integrated PSO-DE with adaptive multi-population and dynamic parameter adjustments for robust exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8559409547010425, 0.857754986872177, 0.8480337138646625, 0.8649662085109207, 0.8586489820318745, 0.8632430567831693, 0.8610875850029089, 0.8594849481868378, 0.8449751147599485, 0.737458069466661, 0.7243409362569762, 0.7350673399116445, 0.738380614551295, 0.7113693364817834, 0.7001637178547598, 0.7139522810152525, 0.7222333653637041, 0.7092749442753092, 0.1457378464482455, 0.137675184652849, 0.11502457252649112, 0.1570644743944114, 0.11741162131650484, 0.16623651263688466, 0.11757272532754581, 0.14852802505287344, 0.11857680851019647, 0.13380533566460906, 0.13874005287882374, 0.11949461261979122, 0.14098579896209817, 0.09164727764035108, 0.12717055697716317, 0.10055344740022298, 0.08824765923376998, 0.09106896229054107, 0.9411744471136513, 0.9885421259168619, 0.9419345679367712, 0.9461606930278286, 0.9435700064230306, 0.9877329454819722, 0.9876937837304914, 0.9306311496373424, 0.9477674689774735, 0.7301162370395293, 0.5053849346044946, 0.689442214520364, 0.719211987842719, 0.7101557903039561, 0.5147062984061592, 0.6043727016906886, 0.30693771128664227, 0.6589249260631393, 0.8743783652395164, 0.8828734042775344, 0.8562906468009917, 0.27521145609295505, 0.8345860016070838, 0.3678353073568338, 0.8734702728132169, 0.24181745010115696, 0.8436169423506166, 0.17862231441776044, 0.24814400115089574, 0.15905977053866194, 0.22865475681177572, 0.2022373068293244, 0.12437124241872921, 0.128486591477595, 0.22947638317746966, 0.1925885415927241, 0.1952328406692314, 0.17195189230969676, 0.12631850139726686, 0.1290820510257843, 0.17730995929578208, 0.21190630399472243, 0.15040018227983398, 0.18055782691272237, 0.19396978117597197, 0.05082429156933699, 9.999999999998899e-05, 0.04975868240377135, 0.047695480351115704, 0.058857612724864894, 0.0007454933441678468, 0.0831838320267505, 0.059290033086157545, 0.04651836072861626, 0.16321496019566673, 0.06858647819514041, 0.12166430418373042, 0.14853753976183015, 0.07210997552544196, 0.08172570833642134, 0.07531646993754071, 0.17389768372605485, 0.13916981516901217, 0.1361785463919296, 0.08604592897531149, 0.11121575399430728, 0.1224254494530016, 0.13332203702518075, 0.27666652522653357, 0.24551052539196772, 0.1668435810532537, 0.12335689093079105, 0.15469473778085596, 0.17004400157212007, 0.10703613082142305, 0.1531296961905264, 0.21802523110832772, 0.438540896055602, 0.11715286537451497, 0.27461688586527866, 0.09352325159525188, 0.5768322997873168, 0.5835332379078182, 0.5417172807854287, 0.5947493197864088, 0.5938421403340592, 0.5934822147414172, 0.5818666098718444, 0.6079315051762262, 0.6043952357949874, 0.13203870507058657, 0.43317354175974165, 0.10958541207960204, 0.5867730770295061, 0.16860348868846742, 0.5531854517681184, 0.1247745020481118, 0.15903456347807388, 0.12853348693543232, 0.1604574995016932, 0.13816152277339022, 0.2873349632747517, 0.16369146122871958, 0.26855658909751845, 0.12597796100084246, 0.5613685359528426, 0.1431981762868645, 0.14356407268376992, 0.39195033845924476, 0.697216910307894, 0.6336814405053299, 0.4092710791207087, 0.6042919076123616, 0.43412190566775233, 0.6499650710787347, 0.6849321241708467, 0.5615584452243074, 0.3841605752298478, 0.3686485982860166, 0.5334331924637497, 0.3361050471441316, 0.44806253557752485, 0.24594337049499848, 0.3138810788173656, 0.45903748537307565, 0.28533890751871704, 0.2152530694639152, 0.22591059520978307, 0.21677942298000175, 0.2740069646097545, 0.22244150278111874, 0.2335466390550912, 0.228288155649511, 0.2061640448058899, 0.19466327199207933, 0.20784096707294353, 0.1882187399498566, 0.20213526568337414, 0.24213568827061893, 0.7352973160384615, 0.21651359622287658, 0.18912305203019653, 0.19996591708711609, 0.18829585175681118, 0.9034420849347833, 0.8836663941837304, 0.2040225177238587, 0.9214667073460017, 0.7784828047586703, 0.1944970538593399, 0.8648845210252354, 0.16211667356435444, 0.16122718230040467, 0.8024226954304696, 0.16695816894105087, 0.20820830019122327, 0.2074439026418876, 0.2031194232789325, 0.16489219651754905, 0.20977166607671183, 0.31272875317566307, 0.294864201941216, 0.1886440517649568, 0.17548906377400675, 0.16899751400399832, 0.1984961435023881, 0.17649401432481604, 0.18211503389534112, 0.18492164545342915, 0.18569014521549265, 0.18911995472015475, 0.08096318498400157, 0.08887177879818187, 0.10882777660352627, 0.09627233307790739, 0.08562868503758458, 0.08972924591439657, 0.08759385891273308, 0.09332925299595207, 0.08516315879916969]}, "mutation_prompt": null}
{"id": "d32c18a0-d0af-4f93-82c8-e3c28401effe", "solution": "import numpy as np\n\nclass AdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.5, phi_g=0.5, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / (1.5 * self.budget)))\n                dynamic_phi_g = self.phi_g * np.random.uniform(0.8, 1.2)\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    if np.random.rand() < 0.7:  # Random mutation probability\n                        indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                        mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                        mutant = np.clip(mutant, -5.0, 5.0)\n                        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    else:\n                        # Generate a random trial vector for diversity\n                        trial = np.random.uniform(-5.0, 5.0, self.dim)\n\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive inertia weight and random mutation strategies for improved convergence.", "configspace": "", "generation": 91, "fitness": 0.3130339054984029, "feedback": "The algorithm AdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8358997587891236, 0.8107773196813001, 0.8449356699759669, 0.8409573181908575, 0.8406190087203133, 0.8609807417329491, 0.8357448030529376, 0.8103193416189063, 0.8463501823075215, 0.6723451368969373, 0.686547772085, 0.6734233489044537, 0.6701601965108064, 0.6700188286500977, 0.6800700690247843, 0.684654129478327, 0.6432315321016916, 0.6775348838705839, 0.11445981005270767, 0.1426457880641283, 0.12563486708868055, 0.12891657988517213, 0.13819952368080035, 0.14638370727917283, 0.13540886568474886, 0.10340947873812345, 0.1385332149113475, 0.12896043919877997, 0.09822859717239885, 0.11188468144397434, 0.11080706673372387, 0.1212452918910023, 0.10610025828696146, 0.10844135856761061, 0.09240429082973001, 0.11561760396367105, 0.9409231587691624, 0.9658404978066971, 0.9676678621661954, 0.9419398068392871, 0.9602419508964936, 0.9434758474926341, 0.965637486788921, 0.9429358589794644, 0.9721161850324471, 0.6239678703274228, 0.6871962535586564, 0.6561956851302706, 0.6546702995949158, 0.6365389264814717, 0.7355715655538267, 0.4410608003505002, 0.6052666279483461, 0.67072714366686, 0.22495219221208806, 0.3730288030682286, 0.8769304945940145, 0.2683930521632214, 0.20699445094216418, 0.20674436407062124, 0.7524552907389138, 0.2321653281945636, 0.21272692375876645, 0.21279992475301257, 0.1377173800236816, 0.16219328885279427, 0.12223778221804482, 0.12589682049383122, 0.12721259194875567, 0.1596591171208711, 0.12301119687494488, 0.20477957364581212, 0.1978300023183709, 0.1523894555778983, 0.1475697632685753, 0.1489435192691031, 0.12616962166193768, 0.16705808136352285, 0.19027415854197194, 0.21349174439563234, 0.17232171345587954, 0.010832783115825473, 0.03359893597021768, 0.054858293429568716, 0.05267516968930708, 0.005939031312679588, 9.999999999998899e-05, 0.05013411441175397, 9.999999999998899e-05, 0.05207508464861421, 0.166828151330639, 0.07708458039167287, 0.1520949179216441, 0.13573658984290649, 0.17235950968124303, 0.03399518162633053, 0.08173524767742035, 0.120866372466503, 0.09993945929289405, 0.12939980242636795, 0.05257690546541216, 0.11936391701046489, 0.25242458123292266, 0.0760591063676671, 0.13485700649172683, 0.21523723861983557, 0.10406372164604849, 0.06599759009504047, 0.13593957326973527, 0.09879859035719352, 0.13998957398970524, 0.15214812911302233, 0.1323345708625917, 0.13047741709331973, 0.10594984202523261, 0.1327054788551748, 0.1506785661020229, 0.5315785130524135, 0.4996556925638891, 0.5730333045911691, 0.5235233450586084, 0.48643068703677905, 0.5413117579057297, 0.5539125967838001, 0.5718362000819806, 0.5569814340093495, 0.12253399785304409, 0.09724723803342239, 0.12894835985413333, 0.12401649769864087, 0.1489503861191832, 0.11829485614057011, 0.10443177103894108, 0.12961440613517206, 0.11550208182670008, 0.12704868947430992, 0.13764362348022097, 0.15890018633817815, 0.1912712585311077, 0.15659408252571172, 0.15451029115114034, 0.22870014535667016, 0.16310539973537652, 0.22322942013585878, 0.27949303701616124, 0.4128810334340506, 0.3749604864988152, 0.2885380033535534, 0.5471661832346086, 0.3590410956919048, 0.5928703231484547, 0.613238863815299, 0.4971595301611508, 0.2165148034316241, 0.34261348549287884, 0.353464478044609, 0.256463637361374, 0.22478778743206196, 0.2762419451192867, 0.2619377757866972, 0.308315401719936, 0.22758529947849426, 0.18923138117929916, 0.2048695773874366, 0.23369945384877333, 0.1997007138131638, 0.24753619017205986, 0.19703084714129615, 0.21109489262847014, 0.2244901579587465, 0.22507192149009292, 0.1986157574968529, 0.1928023533499017, 0.19279368784587003, 0.204701980098701, 0.22239723614923101, 0.17889675583229525, 0.23985271508924744, 0.2266965166582846, 0.19391617492840463, 0.18357408757817262, 0.8667116809322322, 0.15575448816146398, 0.18361373523361912, 0.1977745797908801, 0.8393547811653369, 0.12952554816565665, 0.7729062364683496, 0.8498216061741171, 0.5194205873738957, 0.36365432440581114, 0.16379923143713038, 0.40684229572627006, 0.20853676711215818, 0.5693280367113431, 0.44095384001453564, 0.3062022412450869, 0.352684113485064, 0.17292587024597394, 0.1881179682923655, 0.17522992114605895, 0.1828492471618436, 0.1861064693152732, 0.18667388199819057, 0.1936943982856495, 0.17816601830638013, 0.19524305898435257, 0.09062633911602624, 0.0975263198160986, 0.09505481975480656, 0.10370435181311755, 0.08161303812568299, 0.08539388857736685, 0.09026668799145532, 0.0877589426835742, 0.08870951724970078]}, "mutation_prompt": null}
{"id": "b9bcbbdf-a397-417c-b73f-c66c5aa530ed", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim, pop_size=60, omega=0.6, phi_p=0.5, phi_g=0.5, F=0.7, CR=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "A hybrid PSO-DE algorithm with adaptive inertia and crossover rates for enhanced exploration and exploitation.", "configspace": "", "generation": 92, "fitness": 0.3397475417969135, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.832151804209554, 0.8371668067591156, 0.8256264921397771, 0.8416444091162397, 0.848512982830261, 0.8426014573889116, 0.8402598973108806, 0.8459130875130786, 0.8415820011097069, 0.7057138975931044, 0.6912546969992094, 0.6797552749165348, 0.6752160942150212, 0.6980839161559076, 0.6761934341109164, 0.6601476643685422, 0.702329698298856, 0.5941961949393987, 0.14925908492360773, 0.12316534269903345, 0.09654148103462667, 0.11049610647935604, 0.13504548302933617, 0.11718201282624996, 0.12671987311434774, 0.13873853543974168, 0.12856178021104803, 0.1439964019827732, 0.09695638188102329, 0.1017397811023546, 0.10625584715267555, 0.1387322210067785, 0.12426770286815136, 0.13538852058288375, 0.11023231762931207, 0.10981496990097461, 0.9480506018295509, 0.9626724250220522, 0.958218032190033, 0.9687299461714053, 0.9318065592406527, 0.938047651090195, 0.9657134342973612, 0.9242537808818019, 0.9604680125654496, 0.4895576938574623, 0.663987878367229, 0.519163804221051, 0.4022134732042254, 0.6102148480597654, 0.6417964844703579, 0.35281695630552723, 0.36083402112130347, 0.453163280627107, 0.3788105954102712, 0.8322466441065215, 0.8308666538806337, 0.8587751108452015, 0.26874520104884736, 0.8478205114307015, 0.2365349864421914, 0.8877869582386381, 0.23057132255471446, 0.17166554454237448, 0.12294906427608188, 0.19534851584402368, 0.1303811239111352, 0.1842826911654999, 0.14251667565617754, 0.1619165119386966, 0.21711608970304808, 0.21689579673474557, 0.128274737782048, 0.24817126429842562, 0.2966421069397136, 0.14432962889887435, 0.1631290440202542, 0.2155844415007364, 0.17127043937425224, 0.12358272734380804, 0.18028296688236878, 0.06191887817389308, 0.07906642644676853, 9.999999999998899e-05, 0.045338273623282244, 0.0394966898353869, 9.999999999998899e-05, 0.03942011104432386, 0.012178250297750881, 0.06372074361712088, 0.1758299346060379, 0.08801899498647459, 0.2120062198790651, 0.12260677139893528, 0.14250497084746405, 0.04099395060711286, 0.18942933425406328, 0.12767099956659134, 0.16625361688897644, 0.050089443883925555, 0.03533700740915846, 0.05864516849605439, 0.08679846379231404, 0.13108406240021053, 0.20817812261108093, 0.1778759163878063, 0.11831704941193733, 0.08069579716870157, 0.15334537781396573, 0.29048516680609526, 0.16008069604664776, 0.07306472807764786, 0.2497097811319463, 0.13861757046410061, 0.2569438725532296, 0.18110133413438567, 0.08732401045053428, 0.5311843631528255, 0.6148513554743178, 0.6733072874235784, 0.5846518144755088, 0.6055528820584486, 0.5318670759537445, 0.5652639740232295, 0.5861092834575741, 0.583903658075879, 0.13064943037158483, 0.1270505823428817, 0.10537297532692169, 0.14640534440745667, 0.17022065059209346, 0.1450909199730226, 0.14061579870829377, 0.5112600856902688, 0.13119783759752568, 0.2983359937203429, 0.2827955690428793, 0.15424022843604857, 0.42307427554498744, 0.2389121926610126, 0.2373874665969653, 0.24720529602273855, 0.1688717981125778, 0.3172995503744571, 0.555729132342857, 0.42019987805153736, 0.43140362746515004, 0.5310837748459227, 0.5443103442162658, 0.621579473686628, 0.45286913733156653, 0.5768726153578101, 0.6346372366014483, 0.26788809371124767, 0.2781121345460763, 0.3196510041330757, 0.2662454023423245, 0.3316843016859129, 0.41288105359167515, 0.46615068058470854, 0.38599638627254784, 0.295316072729332, 0.22621426342156747, 0.23085945429496346, 0.21523600185972247, 0.19343319289761107, 0.22996774755027427, 0.24244426262826957, 0.22433729207716835, 0.20494172903872654, 0.2000105464934121, 0.1860996023835294, 0.2099265969458428, 0.18886785597626898, 0.18191040251564783, 0.22014454932856742, 0.21057728409273402, 0.20499144083483134, 0.18930196967213264, 0.17465127217793996, 0.8567321894304532, 0.1869903787824847, 0.18558799156552408, 0.8953724870185302, 0.19840670197970667, 0.8832503302752028, 0.19439593750959527, 0.1570533003867398, 0.8874902762610137, 0.5957617570528702, 0.16720262985650136, 0.783080415097728, 0.20659814263681808, 0.3631701435978525, 0.20496340730719043, 0.21035945780288878, 0.7045992534203804, 0.8609774906877672, 0.18176140337340396, 0.19188128981557306, 0.18832171767690875, 0.17171028439924252, 0.1864010875994646, 0.19294662072451607, 0.19047174799249988, 0.17326272601422366, 0.1803464682136917, 0.07782384103110018, 0.08225968371017844, 0.08630164985897659, 0.09009601201057327, 0.08501670731808286, 0.08346341131073898, 0.09733234598672391, 0.09048752376356783, 0.1003910861173607]}, "mutation_prompt": null}
{"id": "ed2ec439-9ade-426d-8d45-255c52bd6410", "solution": "import numpy as np\n\nclass AdaptiveStochasticPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                # Stochastic Inertia Weight\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.8, 1.2) if self.evaluations < self.budget / 2 else np.random.uniform(0.7, 1.3))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Adaptive Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    F_dynamic = self.F * np.random.uniform(0.8, 1.2)\n                    mutant = subpop[indices[0]] + F_dynamic * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveStochasticPSO_DE", "description": "A hybrid PSO-DE algorithm with stochastic inertia and adaptive mutation rates optimized for dynamic exploration-exploitation balance.", "configspace": "", "generation": 93, "fitness": 0.34848464751378755, "feedback": "The algorithm AdaptiveStochasticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8681764692463224, 0.8611516478286708, 0.8695368451050178, 0.8623428290400852, 0.8519743519479647, 0.870566969924293, 0.8683966700049297, 0.8607274343605208, 0.8649997490145688, 0.7196575198141038, 0.7213364725450775, 0.7242218739671815, 0.7465945084197201, 0.7104886659994809, 0.7372426542888443, 0.7155555789903815, 0.7339603925925811, 0.7174313620870724, 0.12359343990425764, 0.1369740191127794, 0.1774957679376219, 0.11217953778027112, 0.1370793884980167, 0.11082796159632802, 0.1545654019660253, 0.11159704021680261, 0.14930404895073313, 0.1327707369777369, 0.1363533036663186, 0.11401500275209242, 0.1071007322445432, 0.11479989944379054, 0.13536179691940053, 0.10690801580016362, 0.10648169426264031, 0.13270282569448355, 0.9360703699593569, 0.9640888179893504, 0.9144484465594499, 0.9143291967680576, 0.9121835821720745, 0.9270471347203058, 0.9366970685118965, 0.8520260846953034, 0.9508766884063347, 0.3484679210636509, 0.4198466211106645, 0.4793722650833335, 0.6352080691729929, 0.2738743079952204, 0.27807545617277196, 0.6389799178618596, 0.37083218323554534, 0.47566535765238815, 0.876575820951492, 0.8548655009697396, 0.37589402540434635, 0.8615433426274248, 0.272618988777123, 0.20882726400768037, 0.17509298830904751, 0.17653583984409926, 0.8682225297996654, 0.16530990762375564, 0.1803028173897968, 0.16284587420600183, 0.16686973530147375, 0.1485199873050047, 0.15564478593690712, 0.1974070617569098, 0.12831359813346843, 0.1759334767816294, 0.22441140891103672, 0.1298536785054546, 0.21492533245250345, 0.14335542403081614, 0.12748649588301364, 0.1401283615595903, 0.20135099713508353, 0.18113435135445455, 0.1772326887333635, 9.999999999998899e-05, 9.999999999998899e-05, 0.01195728691133846, 0.04883531282176323, 0.058243405013556515, 0.14846341206536506, 0.01552413748480197, 0.044625981693619865, 0.07958470888572589, 0.10060252309071471, 0.18222359906893548, 0.13272640121030566, 0.05443634938684294, 0.10566412346432719, 0.04260980261884051, 0.11489818850983446, 0.11066408722944832, 0.1540649563586065, 0.1621135090571192, 0.17591213687977125, 0.057876244312683234, 0.09510141826335383, 0.13319039095630048, 0.20386687212057242, 0.14617634585588168, 0.15579397526163685, 0.08266728592226813, 0.16218107008223592, 0.13957040459873316, 0.3139014762442651, 0.15676728396704165, 0.34402693598977074, 0.15590827389553674, 0.09211157410260262, 0.30021032345374166, 0.09874276593087217, 0.6385245366048593, 0.5290699145829714, 0.5337930925001342, 0.5599852453934573, 0.5745424480572663, 0.5651768746349304, 0.5973645090515267, 0.5601618734238025, 0.618621739688075, 0.5637974077312808, 0.6376228705552477, 0.1302469461167135, 0.17710015292230474, 0.14404678091064904, 0.1615658025298904, 0.15289962157901826, 0.1328161441785367, 0.14487822898419522, 0.22579095655620418, 0.18545807827928307, 0.2639496698966508, 0.2092871449889422, 0.38172126426106956, 0.17631046038447717, 0.17328024371953255, 0.23291364208609033, 0.6142625363942285, 0.48984453803562944, 0.4856114541986529, 0.4874294584377393, 0.6923790570739883, 0.44549706713999326, 0.5137409628104125, 0.7061304325656648, 0.6911209988114589, 0.5625654282988098, 0.32238743587769403, 0.3567298130340194, 0.28112545954714085, 0.2807124466039963, 0.27530817261193663, 0.3124413865834593, 0.343853677491855, 0.3425443913619418, 0.4145325243016974, 0.2460114084293339, 0.224035310241686, 0.24695171426058782, 0.22220165290610006, 0.2024867695459227, 0.24803575773841458, 0.22090068014462405, 0.22645832408435895, 0.2379474294681323, 0.1871310734104893, 0.17909181488078918, 0.20563109613475905, 0.7525514398292712, 0.21331691341184167, 0.19408342732406358, 0.20360163800487552, 0.17256767995823707, 0.20778269070711708, 0.8867834005397385, 0.8925676218356506, 0.1828049839416117, 0.8929411558734461, 0.19973209143482407, 0.8919009881999276, 0.9107688171005004, 0.1598848105195122, 0.9009575054753042, 0.44447269325445293, 0.21011210403361935, 0.4499248520029362, 0.8784189114711501, 0.44650182534541627, 0.1547682202009626, 0.10398850064547682, 0.8254906452109649, 0.15399233899874765, 0.17861182814097032, 0.18042946941862315, 0.18074507921295568, 0.1781738529393102, 0.17775884748062176, 0.1865768833889332, 0.18851167443606887, 0.19509484886849893, 0.2147681117227569, 0.08729722276103002, 0.09537028375620282, 0.09052648093541216, 0.0874133248181912, 0.08308159584543318, 0.09857005448514244, 0.0919242070581, 0.09309667064354565, 0.0935853052733604]}, "mutation_prompt": null}
{"id": "77eec0c7-0f78-4efa-8590-abcebe9b2cb2", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.5, phi_g=0.5, F=0.9, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        inertia_decay = 0.99\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n            self.omega *= inertia_decay\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "An enhanced PSO-DE hybrid with dynamic topology adaptation and mutation strategies for improved convergence.", "configspace": "", "generation": 94, "fitness": 0.3382079420254229, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8372519475739207, 0.8380965880614122, 0.8465354689190594, 0.8402642293915987, 0.8354195516405297, 0.8488752995545329, 0.8479401131432021, 0.8510292268701353, 0.8480921172602223, 0.7220493502564571, 0.7018836316958922, 0.6747199482125377, 0.6792989558520635, 0.6840703175728131, 0.7013369179267182, 0.7180848341936776, 0.6573215922984201, 0.6789319889317359, 0.12726003173936473, 0.13230053314247647, 0.17006661894250774, 0.12961534332060853, 0.14690867408370523, 0.11857834418069957, 0.12228533115718387, 0.14733860941451327, 0.10491592505330805, 0.12406360764774071, 0.12727663881844253, 0.10593874556718508, 0.1006692465371023, 0.16473185434100446, 0.11885521064321347, 0.08651856460503116, 0.10693608372908825, 0.08699238304327739, 0.9646048483805314, 0.9888985848070614, 0.9556751781434017, 0.9610517414623322, 0.9621005217369282, 0.9877437353689046, 0.9876877860633114, 0.9685544055061747, 0.9628743342256195, 0.7209436724989193, 0.6375811344637163, 0.5741897980426283, 0.6581400006925783, 0.6782684475583272, 0.6029577973949043, 0.6990910476121368, 0.5840212256371154, 0.6264549693181242, 0.8194228649558444, 0.8556743374014261, 0.3811016580079063, 0.769949670790212, 0.805190422685377, 0.27201270342986894, 0.36885079735575577, 0.7962358940548049, 0.79696473328728, 0.25777654170463304, 0.17416409639628616, 0.1876254054176303, 0.2139727963604221, 0.19455653532088613, 0.11959613551447601, 0.2820763652018038, 0.18627004447497797, 0.1932788769354068, 0.18795515119918937, 0.1570917094473704, 0.1313400227144632, 0.26444544343080745, 0.19293819347454622, 0.16865240946353255, 0.2144947882557222, 0.13081576990658683, 0.18265016539099965, 9.999999999998899e-05, 0.04775875928013518, 0.044688320050351615, 0.0047946454313747555, 0.07533058903399592, 9.999999999998899e-05, 0.03521696143686426, 0.02084062220859928, 0.06432042431452123, 0.07616770343637946, 0.06148584522446232, 0.16179033401803522, 0.17628025822899163, 0.0820685219375209, 0.02832616779725594, 0.06343429106190202, 0.05248222190873242, 0.08824133797832767, 0.22395306196717946, 0.0867719027288435, 0.10079257965107769, 0.11013966217851645, 0.11634230432422443, 0.13322651155320075, 0.13886281063377703, 0.11567733778552614, 0.2859420683846756, 0.24416881107946653, 0.14845413756487214, 0.2276902623205449, 0.3240633242580744, 0.11790451967446969, 0.1425127532653664, 0.13462853347070125, 0.18741091679190536, 0.1385402730427442, 0.5966561177797162, 0.5744667288974867, 0.5882680435896386, 0.6033534426351279, 0.5326779892409017, 0.5663510159560066, 0.5434950570941511, 0.6020477657065522, 0.5867167748114268, 0.10529524696894021, 0.12605023530646597, 0.12112012033932029, 0.13238134116155453, 0.13661162806545324, 0.13551541082018648, 0.10786765613000715, 0.14649600117781392, 0.13077528730556476, 0.2835221927578989, 0.12261033580823, 0.5170387281809403, 0.13986092600579847, 0.20756808026147533, 0.15245039057446053, 0.19364795278979696, 0.18082232317349345, 0.16368979119794136, 0.43106519199284854, 0.42379605577698387, 0.6388554730545891, 0.4048007133305066, 0.3024130661453702, 0.45367068508405606, 0.6134715036095804, 0.5278067833667899, 0.5423286662116875, 0.2655713200076495, 0.37539945978076217, 0.29727761209408665, 0.2828053049840944, 0.24004356392235082, 0.22394030411758392, 0.33344362924926996, 0.4193927657920625, 0.3449898214200635, 0.21728199930845238, 0.24880908227506948, 0.25174556887209676, 0.20126344074330094, 0.2120550406975581, 0.22127877914925242, 0.2075083847620952, 0.19593122402149632, 0.21400655790828949, 0.2454241973221899, 0.18547585808876532, 0.18852641653994306, 0.2191643487419508, 0.17622127310834423, 0.2110048947591444, 0.1997880664662003, 0.2416975141303478, 0.19159735520474053, 0.1861038222916519, 0.15049536835968647, 0.15201377869739974, 0.8922994256816618, 0.19894384332507742, 0.1966841900793309, 0.8430980371372716, 0.15779570652314634, 0.863484313613358, 0.6011039208276514, 0.2085411404597698, 0.20788960892984598, 0.7881413619689308, 0.15144449803111815, 0.522972755493498, 0.8386236413389019, 0.11127260019531582, 0.3731965203830032, 0.1771274275554915, 0.1916052412022019, 0.1747652042148935, 0.18407568697243792, 0.17945321762622046, 0.1768486512236701, 0.1846868945310497, 0.18161807572443556, 0.17816338066053394, 0.0838174200212296, 0.08984183712895988, 0.09321987265261322, 0.09214261599944407, 0.08418579024596273, 0.08187351290291023, 0.08867910473264584, 0.11177568492208301, 0.08881745922710493]}, "mutation_prompt": null}
{"id": "12f2cac4-485f-43ab-8d90-08358bb9718c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - 0.5 * (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (1.0 + 0.2 * np.sin(np.pi * self.evaluations / self.budget))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                # Boundary reflection\n                subpop[:] = np.where(subpop < -5.0, -5.0 + np.abs(self.velocities[:len(subpop)]), subpop)\n                subpop[:] = np.where(subpop > 5.0, 5.0 - np.abs(self.velocities[:len(subpop)]), subpop)\n\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced AdaptiveMultiPSO_DE with dynamic learning rates and boundary reflection for improved exploration-exploitation balance.", "configspace": "", "generation": 95, "fitness": 0.3283312635887305, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8388439669505667, 0.8456300762741901, 0.8503112533957997, 0.8495530400967991, 0.8505591334437075, 0.853009026265402, 0.8424499451488483, 0.8521874934900379, 0.8457577905879393, 0.7069861586440185, 0.6841985496473267, 0.7041194584450804, 0.5828468924440683, 0.6499888523245374, 0.6911750930553091, 0.6697710624557796, 0.690681159266741, 0.7078890039861565, 0.12707836051566368, 0.133607128878256, 0.16719309424149065, 0.12751296579545202, 0.14207129814957098, 0.13087506268879812, 0.12384490858967345, 0.12262858101983021, 0.1722981603990822, 0.10146807501028143, 0.11574271057638574, 0.09941547802167483, 0.1629938111701582, 0.11441189746028435, 0.11508629837101292, 0.1217971828379727, 0.1311651409648854, 0.1360420095684427, 0.7326798028450634, 0.7242083147864695, 0.7381091984150963, 0.8798012517708707, 0.7530869625481172, 0.7238024642192649, 0.7588656562520818, 0.7418809339439345, 0.7487360262103178, 0.7355429655362832, 0.7430743914361017, 0.7146581016874938, 0.648279120968867, 0.7378147099480324, 0.7305356998868964, 0.7288279002088452, 0.7098760117406434, 0.7387138806361249, 0.22752635370884466, 0.8650608797856301, 0.8263068397317759, 0.3702343457189172, 0.2667942328816991, 0.863245199487576, 0.22539592608453551, 0.8568044973719346, 0.8686905683671216, 0.24009391273465186, 0.18090523436670258, 0.1446313235231531, 0.18775763520185473, 0.17683851549578322, 0.2602287554954228, 0.1555862318397787, 0.17156852661406952, 0.1595755062769475, 0.22647966005422848, 0.13004463289446955, 0.16534948956551687, 0.2034125474539894, 0.327331660853982, 0.1681011803564081, 0.44637753015304715, 0.14989718092030924, 0.21076597153059717, 0.007781457018430027, 0.0594456627608706, 0.07964346968704739, 0.04507738325633204, 0.0023033527570287538, 9.999999999998899e-05, 0.10467902312621935, 0.1046186234875306, 9.999999999998899e-05, 0.14324289144111046, 0.062313964600879235, 0.14959051415376035, 0.07227997510511486, 0.017295613595099346, 0.16014517192499156, 0.12839102040270733, 0.16982764654893967, 0.19102716887667304, 0.0868299338570574, 0.045722333609256705, 0.06554117528017434, 0.09521494691721621, 0.11541996379734032, 0.10200613055139274, 0.06575388767479873, 0.19139773680248873, 0.12884026539998883, 0.1907030568134499, 0.16608663841152338, 0.14999654243267158, 0.34540805696995924, 0.17730825758661106, 0.11623229686007785, 0.13553833976901208, 0.15882394339486616, 0.132352975844528, 0.5377881221260329, 0.5656488075550651, 0.5703562790775363, 0.52781716557706, 0.54932969138241, 0.5515761313530758, 0.5955940143321812, 0.6150900969651507, 0.5831897867211953, 0.13708974772799776, 0.17681134132159637, 0.10736829575542473, 0.09564447445443969, 0.10703557127573426, 0.15634849582329446, 0.14381649226117732, 0.13615644476824296, 0.09343087863184485, 0.14780170290737027, 0.2168605856665845, 0.15663867235668716, 0.17619164281572808, 0.17714127629976195, 0.1439455633646397, 0.16772447556589287, 0.13310388341871038, 0.15924781561160195, 0.29151483754611096, 0.37165267737517915, 0.4916668571135451, 0.6013049250918125, 0.3300216012631456, 0.3819498477977217, 0.6345417797674249, 0.49882009971134744, 0.6484299444955186, 0.3038038679854107, 0.30739346357305375, 0.2589491332568902, 0.4081990942854202, 0.2262302194767849, 0.2963674651580823, 0.40189767434269985, 0.3160914204005695, 0.23350381167812528, 0.2143211347183409, 0.18655496279252926, 0.21018716051965092, 0.1927357345208467, 0.20168461192512632, 0.20049991558222802, 0.23259138730877615, 0.22508968986120703, 0.1979871193957512, 0.21374355116693, 0.18428158221347046, 0.21061033336749324, 0.20322977109061757, 0.2065099697981252, 0.23942403105838328, 0.19497464218700655, 0.20471100469031622, 0.21462498380588868, 0.16280897462001065, 0.1811605289355439, 0.15336414534613174, 0.8677607532282449, 0.19932101822766757, 0.16671546835596052, 0.8445939422911497, 0.7330967574786338, 0.16618574275193865, 0.796103382755833, 0.8154048502818767, 0.5860525886047213, 0.8366117659477927, 0.1678683597251711, 0.15332196142682952, 0.10497572708317204, 0.47740197886080227, 0.20965427028641692, 0.191840192834556, 0.18093329779359224, 0.17723188649997923, 0.18138747375845354, 0.19258069707884073, 0.19392537738657256, 0.16474649364421545, 0.17916652388181142, 0.18145453665384426, 0.0813309653109785, 0.09232110252755554, 0.08152870566067327, 0.09644758716731316, 0.08276557747004865, 0.0862213576371158, 0.09295426969598741, 0.0855278968684473, 0.09821174324411508]}, "mutation_prompt": null}
{"id": "7227cd1d-708d-424b-9608-e8c32cde20e4", "solution": "import numpy as np\n\nclass StochasticConvergencePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.7, phi_p=0.6, phi_g=0.5, F=0.9, CR=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, np.random.randint(2, 4))\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.7, 1.3) if self.evaluations < self.budget / 3 else np.random.uniform(0.6, 1.4))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, np.random.randint(2, 4))\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "StochasticConvergencePSO_DE", "description": "A hybrid PSO-DE algorithm with stochastic convergence zones and adaptive mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 96, "fitness": 0.3093306288917172, "feedback": "The algorithm StochasticConvergencePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.777706488076016, 0.7409668441775867, 0.761135515444773, 0.782986950684341, 0.7731730198328136, 0.7808159021079435, 0.7671440757012786, 0.7634824937189779, 0.7568102596251826, 0.5732512758387479, 0.5466049585822884, 0.5789479930490313, 0.5597638136810144, 0.558754927566637, 0.6096881079282167, 0.5824957741327527, 0.5759839246154477, 0.5864196535492672, 0.11734314651391797, 0.10840948367018066, 0.11528150149240413, 0.11397878600200151, 0.10178809064845573, 0.10161919101665828, 0.11296609582941075, 0.11777170960213623, 0.10382939675918679, 0.10634771072165605, 0.11927785483173337, 0.11228012028735435, 0.10052490074786269, 0.08742698019896489, 0.08849828137409443, 0.1031512297779349, 0.11560376530333993, 0.1015169836225257, 0.9827895326302181, 0.9830400354044182, 0.9712316560174892, 0.982391957772046, 0.9797790545347079, 0.977422518507876, 0.9823956567608764, 0.9769653295020452, 0.9720018685932125, 0.5024566869519607, 0.5893235960253367, 0.5590546574608988, 0.5595565146678636, 0.5714197248419384, 0.5437220301079413, 0.5548735366297878, 0.5809566333168252, 0.592662428856819, 0.3452297773538928, 0.6383053687263698, 0.7013054490664539, 0.7553305340005186, 0.2596924726294344, 0.20493305471568968, 0.7241088994087141, 0.6860955834738574, 0.6870078985031169, 0.17038479021503294, 0.08869078091256632, 0.17986098871072098, 0.177740521164914, 0.16389091643782305, 0.11666507961207317, 0.1619726209848299, 0.199201067858648, 0.16881192812002888, 0.18046633278010848, 0.1767235050235333, 0.1859941850067799, 0.19342555504485692, 0.1639358011514449, 0.12303043602413732, 0.20396809970981167, 0.12036601490568133, 0.2063320715483412, 0.03280758735212641, 0.04408727258073053, 9.999999999998899e-05, 0.03151609211667561, 9.999999999998899e-05, 0.013580430750879557, 0.009605926151525779, 0.0250132916595589, 9.999999999998899e-05, 0.0617389799214092, 0.08367816234165715, 0.07607503303338892, 0.04875835045510302, 0.02573733579233428, 0.04012466324130981, 0.058016077414835165, 0.0563649443955071, 0.023623992844510555, 0.03744135114854252, 0.10560316658662816, 0.04684933734180485, 0.1274147286880063, 0.061172779831142, 0.07484615357326385, 0.1984261883134496, 0.07915393130694626, 0.09452410635292907, 0.19431468764500215, 0.16731372585984572, 0.15564723045906526, 0.20460613429854124, 0.11147478881042605, 0.15138097486915325, 0.1779051542946367, 0.09396333665640944, 0.15792607722305985, 0.584033591671174, 0.5724737269140079, 0.503816532113884, 0.506757960870075, 0.5303316461729226, 0.5386559077781454, 0.5388613200026253, 0.5840237550271525, 0.5523666308060078, 0.11136358413433622, 0.2503602891774994, 0.12260209581609993, 0.09052762245492829, 0.11580011229795872, 0.11908964841150516, 0.11773846745603933, 0.12678404720035796, 0.16860776549142542, 0.14493300025945755, 0.27211283635768524, 0.1371920854737958, 0.12373284046851607, 0.14930169873466637, 0.12268440462103503, 0.23809446228311215, 0.13248293695082558, 0.1618066845252759, 0.42395486845398767, 0.5014871064946955, 0.4673866125610523, 0.4524864092952394, 0.44820578599735494, 0.43555318852665004, 0.47183892469995403, 0.5339883750353266, 0.401139269031326, 0.3129840627380517, 0.37501593801121025, 0.31996603734172147, 0.3125043853099382, 0.18377243821355727, 0.36856301627807597, 0.2763155132306224, 0.33101789978447516, 0.3071030994083448, 0.20390552282548768, 0.1921823232117501, 0.2023591518101323, 0.20470185375847305, 0.1845826434892469, 0.19151747541659347, 0.1934687361346028, 0.19705593219663364, 0.20938714829737937, 0.4858353993252502, 0.19580068561937902, 0.19062286971586206, 0.2143003657573167, 0.19980303148563394, 0.2004657828558899, 0.6026025693727017, 0.192213412673219, 0.4268682711022028, 0.6832883960339571, 0.1564673413340879, 0.15121713539998405, 0.7576935731313827, 0.1887239944834952, 0.13093198757592017, 0.6746269491467506, 0.6821329493525201, 0.17463228999700475, 0.6109823342020377, 0.4658923008129545, 0.3295280442017332, 0.7155555570188623, 0.16434142851080014, 0.19488565869233276, 0.20651945186794274, 0.2033792311259457, 0.20277742403972954, 0.17207586302963462, 0.18392193338094343, 0.17908409093160937, 0.18582757652253457, 0.17810672030328045, 0.180241545583245, 0.1833369391846631, 0.18072749309812353, 0.1807839341365356, 0.08247262332356553, 0.07691746403035726, 0.0858446359913898, 0.08154474554220215, 0.08152917514839297, 0.09318914496097985, 0.07469913830510289, 0.0914692494236784, 0.08232341016318734]}, "mutation_prompt": null}
{"id": "7f82d49f-812f-4e51-b0b5-0555ac2e0879", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.5, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.9, 1.1) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    # Enhanced mutation strategy with increased diversity\n                    mutant += np.random.randn(self.dim) * 0.1\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO_DE", "description": "An enhanced PSO-DE hybrid with adaptive inertia and mutation strategy focused on maintaining diversity and convergence balance.", "configspace": "", "generation": 97, "fitness": 0.2819001392817171, "feedback": "The algorithm EnhancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.7524472246815451, 0.7270436965634343, 0.8586630330221207, 0.6885439530924475, 0.7065938954201952, 0.7460047329061132, 0.6296621164223702, 0.7640954786964712, 0.851557443974168, 0.02586157218870344, 0.12649014868014186, 0.2243176241192354, 0.09003572842728957, 0.12286909177035754, 0.09114846604471516, 0.052317487321927536, 0.17351115866217404, 9.999999999998899e-05, 0.10760806340201712, 0.1268135307511684, 0.15044844968559012, 0.10718963954792415, 0.1490832206916941, 0.14922602451877942, 0.11846025093279222, 0.14433079450492148, 0.1638408699614996, 0.10568863284952335, 0.11861055649035812, 0.10686039335265796, 0.1698011476399477, 0.08906051699705053, 0.10871414211189279, 0.12212014219503509, 0.08352506031744267, 0.07402477666631802, 0.9643673196254156, 0.9645048167496707, 0.9649502030189041, 0.9260888695832866, 0.9584425950386782, 0.9388198793784144, 0.9561619966711475, 0.9604144751661983, 0.956672454696385, 0.3506738634421981, 0.3931263178941772, 0.37720526781971375, 0.33194991179656186, 0.35126432281729025, 0.3877093563799794, 0.3094005967252281, 0.32324869761421127, 0.33647067453581847, 0.3831809920528697, 0.8691463165358468, 0.22621996182512916, 0.5673459736422477, 0.8710831689098226, 0.21084011235104216, 0.8062018023180462, 0.3703239412220236, 0.8448302501242564, 0.17588195162486442, 0.15421356689447208, 0.20452936761315654, 0.15693277686592666, 0.1918418142208319, 0.16737586979783448, 0.15620798501291888, 0.1772356147152777, 0.15682544388685205, 0.1614503947841457, 0.15605989419848343, 0.13108683434753188, 0.12803370235246692, 0.14914868757152688, 0.15939196925231047, 0.16883472314114956, 0.15903710235287305, 0.1314046087081011, 0.06373519557846541, 0.12477648016137133, 0.012107818305062912, 9.999999999998899e-05, 0.040815932329132165, 0.0765240066048718, 0.03710192797459133, 9.999999999998899e-05, 0.09340976311586113, 0.15534219016232786, 0.14037817485388515, 0.15048328974579528, 0.10731595510520642, 0.06650506407854262, 0.05085021246189958, 0.2000551185687276, 0.12338982427393441, 0.1066968749601801, 0.13937623549277356, 0.03542530532211696, 0.13302908774540068, 0.10117155434765479, 0.07378839822056471, 0.1331542335379765, 0.16824012184241288, 0.08090490613228396, 0.11014538944408103, 0.09353626040353558, 0.3168603346366783, 0.16247446669018395, 0.08238430659514562, 0.12597661872744814, 0.14324826825081416, 0.10114247455507808, 0.16278973740303826, 0.08962602754094329, 0.4698330402315356, 0.5232285077973235, 0.5015136308626773, 0.4921455648812798, 0.5689005281922999, 0.5271150981054658, 0.5208049922896592, 0.5133766737569385, 0.519400195922234, 0.10030440745139535, 0.1642896845702988, 0.14529858429485953, 0.1439400932110435, 0.13636548427914308, 0.1680152120420405, 0.14932141033903368, 0.13858015847411442, 0.13410752299829454, 0.20340591602154157, 0.1753880840994363, 0.19817331806676297, 0.2993999484953346, 0.2378698754677081, 0.17754134719881043, 0.2586122685071044, 0.16326199073827807, 0.3019822071320345, 0.4132984216392379, 0.3476258327802201, 0.30808203367686104, 0.2856206088506257, 0.3099562304831346, 0.33690468831731235, 0.3454071754428203, 0.3529298947609971, 0.3092268712000674, 0.3260857018999076, 0.24982134552378943, 0.3519903439300036, 0.3062962267321878, 0.35464634164396125, 0.26474647496601256, 0.2382399180262954, 0.3120988023027702, 0.30937389496003, 0.235587809143043, 0.20943974901416773, 0.20379231629230166, 0.24725361273847957, 0.23033703545077677, 0.2103231706575749, 0.20761096505789278, 0.20698899790281733, 0.20750372617923307, 0.20057875052231067, 0.19064088060393203, 0.2034867783297244, 0.1806787238224763, 0.2466933614439799, 0.1778407371235966, 0.239794199424609, 0.3483929625562113, 0.1996374938240708, 0.18391774075051248, 0.19300438258706987, 0.18376531044075706, 0.891984228229951, 0.19994481866538594, 0.8987727838374646, 0.6996239956145502, 0.8731723578588433, 0.18729649330209464, 0.885307547086858, 0.20876893118177453, 0.5984648925660208, 0.5239063606275348, 0.16747023487016377, 0.16499371404790764, 0.20503521798001312, 0.20956506337081715, 0.15502039151011981, 0.1767106657738301, 0.19036190910693662, 0.18286234302595916, 0.1829602761045711, 0.17505199436162933, 0.18845888144094614, 0.18377582107369028, 0.18246532328143017, 0.18811630034461702, 0.08059273630950303, 0.08811109491810964, 0.09171854878449304, 0.08805817446428099, 0.08961336963724498, 0.08825039823876213, 0.08492946593432849, 0.09226013505424546, 0.08924329476510062]}, "mutation_prompt": null}
{"id": "c5751db4-494d-4d9c-a38b-251b87009299", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSODE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n                \n                inertia_weight = self.omega * np.random.uniform(0.4, 1.0) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.75, 1.25))\n                self.velocities[:len(subpop)] = inertia_weight * self.velocities[:len(subpop)] \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSODE", "description": "Enhanced Adaptive Multi-Population PSO-DE with stochastic inertia and mutation adaptation for improved exploitation and exploration.", "configspace": "", "generation": 98, "fitness": 0.34004695778510313, "feedback": "The algorithm EnhancedAdaptiveMultiPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8623163049420746, 0.8572238125680023, 0.8609000143383669, 0.8624525383680075, 0.8620670232568415, 0.8560696485939562, 0.8572134904752732, 0.8562326986801685, 0.8496821292448444, 0.739751677392052, 0.7322559292099782, 0.7249093015817538, 0.7351560920185884, 0.5889185685215262, 0.6694521121932917, 0.7365161820765972, 0.7218316087488592, 0.6755181227896211, 0.16354210643232014, 0.15301870709726628, 0.13985278106927002, 0.13602891075471069, 0.12009788330596749, 0.14721518398145672, 0.115594039793804, 0.16597948455234468, 0.5685831108955315, 0.10949342911581317, 0.11778125193793954, 0.13303706767881796, 0.09728588016487627, 0.1042679153029934, 0.1044359503046497, 0.10937118389898226, 0.1511403026965218, 0.08807332325718031, 0.9284764470717415, 0.9885745243047209, 0.9371310834804989, 0.9242983418615219, 0.9448008858106076, 0.9877323347068656, 0.987689198635622, 0.9280939202319671, 0.9585235615937199, 0.6256193600461117, 0.617871337055937, 0.42234740142831717, 0.674843908196822, 0.6334518599630286, 0.6442859750766252, 0.36668247207532345, 0.5446885833037585, 0.6280196266666229, 0.8638351421143365, 0.8187766301858285, 0.3763039700741906, 0.2175577697961294, 0.8758986103293996, 0.8282897246780989, 0.8336388031558949, 0.8023701239805403, 0.8648595729814086, 0.15430888885033966, 0.1149921959692447, 0.21898758585397637, 0.24351887650320658, 0.17111197154087932, 0.16660762542120477, 0.13095161275346312, 0.3428499214511519, 0.15621482101067852, 0.19503239325668853, 0.1692039171213885, 0.1291271113045448, 0.1320498846474033, 0.15074670992820027, 0.14617552172127068, 0.20694897417743263, 0.13633967961300109, 0.1908407489396079, 9.999999999998899e-05, 0.07547284934086129, 0.1625539104332816, 0.061893176659914007, 0.046850341497835735, 0.03236740177969022, 0.06906271293283117, 9.999999999998899e-05, 0.04968783408612176, 0.15569962208334676, 0.07071978437075066, 0.12680211512514106, 0.08835962141570386, 0.023225675138756063, 0.09903172236960267, 0.11468486198725547, 0.15406280316334764, 0.18039446778702606, 0.08734969883809318, 0.035776814827011005, 0.23354978391903192, 0.13832391033346025, 0.1303807819067233, 0.2450480686040687, 0.19098848176236993, 0.12132380214154492, 0.12816524508219573, 0.21176266625863682, 0.4514005039378669, 0.18808211411822295, 0.15970080497981054, 0.15489053257161012, 0.13400938732759715, 0.21585814798552416, 0.21970684738719592, 0.09371276024148645, 0.5776205830454348, 0.5007771312867705, 0.5792775712927681, 0.5737558823642919, 0.5406889782182884, 0.6799469159495992, 0.6001273773284259, 0.6147964281531294, 0.5675333699354322, 0.1510117959122621, 0.15495302129957322, 0.13939466309172133, 0.15099503065216946, 0.16677207235867386, 0.543777846828615, 0.15067366954764216, 0.10389180012644794, 0.12665945020676916, 0.1366084272935676, 0.17505957738849154, 0.1543984317435637, 0.1543926290953075, 0.230206377071991, 0.17310213928429785, 0.15676938249092676, 0.16334005338663227, 0.1527901671802967, 0.4797128585626288, 0.42881143658882614, 0.3187843178525339, 0.6083498109819124, 0.4567339720716903, 0.43472375266291563, 0.2713884945566274, 0.4933418510925006, 0.5048393302990272, 0.44274432510328443, 0.38611453491200787, 0.299258771030643, 0.3077714020259814, 0.34484927990549985, 0.3883750847170553, 0.34041146418333523, 0.49617118045630304, 0.252193309351066, 0.1963246763095854, 0.19620952068367137, 0.21352838132563812, 0.23384571194309323, 0.22430501693038674, 0.24337039123347282, 0.24038578235942332, 0.21768848508471683, 0.20758181124868902, 0.18809931155476967, 0.19511003714957087, 0.20561978511330425, 0.193947769211822, 0.1938923559735526, 0.19028562114267644, 0.19786711609089247, 0.18542149196677682, 0.20593724327995655, 0.8936038527325512, 0.1549473048058202, 0.18349774172868616, 0.9235736219412638, 0.20023417181755354, 0.16820938754963755, 0.8889166199650367, 0.16824185403564829, 0.20762677925813477, 0.8796233317128596, 0.20743828059303215, 0.20809898106854174, 0.2082298100007106, 0.1523877364587375, 0.16533001237684586, 0.2086223830695454, 0.4250674018813364, 0.5079700278881779, 0.1739138121471362, 0.19340729889228048, 0.1929669477313406, 0.18203100756185853, 0.18528469201734254, 0.1839385238841834, 0.17915136524844422, 0.18588901621151777, 0.17803100755877144, 0.09214425029938034, 0.0985985412722612, 0.09508143381826561, 0.09647586735798486, 0.09184923768969744, 0.08913013339652953, 0.08487861308405209, 0.09249164056763515, 0.09490910796705943]}, "mutation_prompt": null}
{"id": "3d757f4b-67f1-4041-a93c-c50d8ca5adb3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiPSO_DE:\n    def __init__(self, budget, dim, pop_size=50, omega=0.5, phi_p=0.5, phi_g=0.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.omega = omega\n        self.phi_p = phi_p\n        self.phi_g = phi_g\n        self.F = F\n        self.CR = CR\n\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n        self.evaluations = 0\n        self.subpopulations = np.array_split(self.positions, 2)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for subpop in self.subpopulations:\n                fitness = np.apply_along_axis(func, 1, subpop)\n                self.evaluations += len(subpop)\n\n                better_mask = fitness < self.personal_best_scores[:len(subpop)]\n                self.personal_best_scores[:len(subpop)][better_mask] = fitness[better_mask]\n                self.personal_best_positions[:len(subpop)][better_mask] = subpop[better_mask]\n\n                if np.min(fitness) < self.global_best_score:\n                    self.global_best_score = np.min(fitness)\n                    self.global_best_position = subpop[np.argmin(fitness)]\n\n                inertia_weight = self.omega * np.random.uniform(0.4, 0.9) * (1 - (self.evaluations / self.budget))\n                dynamic_phi_g = self.phi_g * (np.random.uniform(0.85, 1.15) if self.evaluations < self.budget / 2 else np.random.uniform(0.8, 1.2))\n                self.velocities[:len(subpop)] = inertia_weight * np.where(np.random.rand(len(subpop), self.dim) < 0.9, self.velocities[:len(subpop)], 0) \\\n                    + self.phi_p * np.random.rand(len(subpop), self.dim) * (self.personal_best_positions[:len(subpop)] - subpop) \\\n                    + dynamic_phi_g * np.random.rand(len(subpop), self.dim) * (self.global_best_position - subpop)\n\n                subpop += self.velocities[:len(subpop)]\n                self.subpopulations = np.array_split(self.positions, 2)\n\n                # Differential Evolution Mutation and Crossover\n                for i in range(len(subpop)):\n                    indices = np.random.choice(np.delete(np.arange(len(subpop)), i), 3, replace=False)\n                    mutant = subpop[indices[0]] + self.F * np.random.uniform(0.5, 1.5) * (subpop[indices[1]] - subpop[indices[2]])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, subpop[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < fitness[i]:\n                        subpop[i] = trial\n                        fitness[i] = trial_score\n                        if trial_score < self.personal_best_scores[i]:\n                            self.personal_best_scores[i] = trial_score\n                            self.personal_best_positions[i] = trial\n\n                # Ensure particles do not exceed the search space boundaries\n                subpop[:] = np.clip(subpop, -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptiveMultiPSO_DE", "description": "Enhanced AdaptiveMultiPSO_DE with probabilistic velocity control and mutation scaling for improved convergence.", "configspace": "", "generation": 99, "fitness": 0.33747516898409313, "feedback": "The algorithm EnhancedAdaptiveMultiPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "b6ae4f2b-a3b3-4656-b95b-f63383831263", "metadata": {"aucs": [0.8731292826590129, 0.8670455467052862, 0.8702812933286975, 0.8715446452705362, 0.8608220896721002, 0.8547992784714568, 0.8530989707723331, 0.8645817521319352, 0.8639203587976167, 0.7446662174630194, 0.7267361854642473, 0.7114051233301956, 0.6860935194800959, 0.7235955404763001, 0.641478786495057, 0.7098285108786135, 0.7444744272163614, 0.7528759112386053, 0.14965432319092342, 0.1356423945195846, 0.13435829377991904, 0.15613067076416376, 0.13920688987253393, 0.14992812224680052, 0.11788027177729932, 0.1094519768576705, 0.6805985573113638, 0.11335024782035275, 0.09184199276925609, 0.12143087520229778, 0.11280830470298586, 0.10043098010057039, 0.12674565300953122, 0.10626137859234763, 0.10560860746239198, 0.10602053672648815, 0.9603805179266585, 0.9627824869226866, 0.9384353547304577, 0.9284174396975197, 0.8837635835679656, 0.9381313905851995, 0.9163939318625174, 0.8787512095891746, 0.9613633719141044, 0.6991155164685583, 0.5957128878105282, 0.3071626295877994, 0.6356333984032115, 0.6296838614481783, 0.526516698700582, 0.5972773788906318, 0.534269230184507, 0.5067092393841202, 0.8627881494412893, 0.8709694200314618, 0.22630698453620812, 0.273867381728381, 0.2746843655830198, 0.2730142151959448, 0.8542200470069599, 0.1722359556047941, 0.23243226513662374, 0.2009205513295368, 0.1421864274501442, 0.15487460164003153, 0.12847748170394968, 0.12831820323342402, 0.1498428944259993, 0.185814268931069, 0.18540151217847467, 0.17221810121443848, 0.30208344374442053, 0.2066024454997648, 0.1744086284548868, 0.30476589109219143, 0.1620943557264356, 0.18235429759123334, 0.20345872236347873, 0.1858038583928372, 0.16338726190314468, 9.999999999998899e-05, 0.1371170995665839, 0.04622731528043367, 0.03212580803085274, 9.999999999998899e-05, 9.999999999998899e-05, 0.07234077762905655, 0.013481273447700559, 0.12343212451136276, 0.15048066562410645, 0.0900001791385574, 0.1768291305670715, 0.11581199405633869, 0.033622282517310254, 0.011883007918534139, 0.1910747058956196, 0.09167436124990835, 0.1400862672374633, 0.22000350981715988, 0.08135635652254791, 0.11457412265341405, 0.09099983530111877, 0.09640990425170315, 0.10614557846237271, 0.09379444192123865, 0.3713840884150875, 0.07905544093525663, 0.17373715569908532, 0.22653777240087458, 0.24191368792277035, 0.052991313811416196, 0.17604598160044738, 0.35117642324997067, 0.14175579377183856, 0.10783433667634745, 0.09729275171497598, 0.592115085242406, 0.5400814295675239, 0.5351920262913743, 0.5868482488801794, 0.5777694959028891, 0.6130748244769633, 0.5484818082151586, 0.5999507171166865, 0.5821524808904354, 0.09344012474898988, 0.14068950436394456, 0.11337896803758574, 0.1371168138600024, 0.13973093024023642, 0.10858749678645074, 0.15530009212480878, 0.15392494073959173, 0.13703097093495176, 0.3146321401962616, 0.1266034520122934, 0.19535788324626202, 0.27653944053830304, 0.3522439874183936, 0.27997640000458224, 0.3620173491160672, 0.21684874098781914, 0.3700881110175215, 0.48010741331817264, 0.3618947915539734, 0.4775263270920226, 0.4158977349277688, 0.5235753544831728, 0.5662182768148565, 0.4248236361247997, 0.578809309108177, 0.5756802397895819, 0.33289746760999983, 0.3046066560277685, 0.2597719279630485, 0.4330578767201603, 0.21174767127471228, 0.31330477240346766, 0.24580716651707224, 0.4391994501714669, 0.2708643953726716, 0.2277163289921783, 0.19571200428364033, 0.20533484973687077, 0.2503709657963965, 0.21561322938416339, 0.2175068134094469, 0.24124327128146905, 0.2367036410540212, 0.23881745255486864, 0.19550494384423678, 0.22348947838202238, 0.2085050895542273, 0.7192306370494711, 0.1990959967394298, 0.20508777909626097, 0.18865039286310226, 0.2435787061531468, 0.21958838875161169, 0.18598182602143398, 0.15698042702284243, 0.18621104599059513, 0.17214352218476636, 0.19968260002054117, 0.9141506261947467, 0.9017437477026944, 0.8651229876925105, 0.8853627582543634, 0.6670261083270774, 0.8703673868352695, 0.12357778329300673, 0.565665625971914, 0.16594456853045225, 0.16423820513932375, 0.20699986217510902, 0.404318672569837, 0.2898056404103144, 0.17541306783256527, 0.17552499018291579, 0.18246919049411603, 0.1800363875016726, 0.192201372212231, 0.17621269624340907, 0.18681723538931638, 0.176336322781393, 0.17845659182373053, 0.10018736608388867, 0.09277817123666632, 0.10219381266337257, 0.106948142445775, 0.08431928188294846, 0.09161976247412695, 0.08932656253456084, 0.09473699374206845, 0.08576639637440309]}, "mutation_prompt": null}
