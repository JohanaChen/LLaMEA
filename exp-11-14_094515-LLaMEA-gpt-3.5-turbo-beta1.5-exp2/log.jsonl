{"id": "f0c589fb-0330-4e42-9330-a743fbbce666", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 0, "fitness": 0.15567196537451353, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "ea4ed139-948b-4440-8cfc-120c07c24f1a", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "21bc2d58-bb92-4188-8339-c350bf31fcec", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "0be65445-0e24-446e-8ee7-ee538b779d15", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "0e5ee95c-71f4-40a2-9912-df8646656327", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n            \n            if self.current_evals < self.budget * 0.7:\n                self.population_size = max(5, int(self.population_size * 0.9))\n            else:\n                self.population_size = max(5, int(self.population_size * 0.6))\n            \n            swarm = swarm[:self.population_size]\n            velocities = velocities[:self.population_size]\n            personal_best = personal_best[:self.population_size]\n            personal_best_fitness = personal_best_fitness[:self.population_size]\n        \n        return global_best", "name": "DynamicPSO", "description": "Implementing a dynamic reduction in population size during optimization to promote convergence speed.", "configspace": "", "generation": 4, "fitness": 0.15552754866172833, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.1249929549563027, 0.4606593741396706, 0.49470024910726673, 0.15697381666560362, 0.16018104206379358, 0.14121607411458448, 0.5562290596708228, 0.14868813602577158, 0.1823240335767483, 9.999999999998899e-05, 9.999999999998899e-05, 0.023847523798019576, 0.030350291987472855, 0.031050266891323952, 0.03383331069448958, 0.020765625558163858, 0.004402062313343724, 0.008217062208731307, 0.08395068613954448, 0.03648965637912627, 0.060852974506470536, 0.06054467049479062, 0.11548265476050401, 0.10799327324008978, 0.09025130471078502, 0.02612532879736318, 0.09113663468031996, 0.1094102704142006, 0.09282567706193023, 0.0798682513604364, 0.07356286030963799, 0.043088647773769306, 0.07932970974286213, 0.0012472166538304297, 0.08372319891863522, 0.10013963007681137, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887848343426684, 0.9880127277504144, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9897065149958812, 0.09050681910068992, 0.05519768942887149, 0.11359366220087264, 0.1383022781729638, 0.14387416597374736, 0.13503442179710945, 0.08719090114240913, 0.08750322122326792, 0.08221910970539648, 0.16395630608553624, 0.12890121833434498, 0.20179647494334152, 0.18659663114032687, 0.17653473260771113, 0.17412186965994658, 0.11493305284515298, 0.12396762188918453, 0.18499748885533807, 0.14034710777349357, 0.08758913062243079, 0.12102291672934862, 9.999999999998899e-05, 9.999999999998899e-05, 0.13094708826667634, 0.08389622443249556, 0.15143103046486306, 0.11474886625591696, 0.10276318767393167, 0.010007053140078437, 0.09084249270877753, 0.09949827141044154, 9.999999999998899e-05, 0.1144936500606506, 0.11198210648004936, 9.999999999998899e-05, 0.09758828177809742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03218441120118609, 0.01134210241469702, 0.03684628423304526, 0.049356577013007885, 0.006276151929559326, 0.001320199132704647, 0.047166628964058654, 0.0038927844640406217, 0.05665591235820355, 0.01624488011637626, 0.014399738531879258, 9.999999999998899e-05, 9.999999999998899e-05, 0.026669294322528736, 0.031629694138244346, 9.999999999998899e-05, 0.03927284614112536, 0.030979082966003046, 0.004266393132863366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004170923425987905, 9.999999999998899e-05, 0.04835683336008023, 9.999999999998899e-05, 0.06196443958649356, 0.35697519031313063, 0.15010698538865674, 0.3884354622752444, 0.20579974646482868, 0.36182369757034805, 0.21244451372951312, 0.34929353217566617, 0.1395166815723694, 0.35557123804057733, 0.0724986838090581, 0.04793755593527216, 0.05434228304018174, 0.07133963941621313, 0.04149453615083365, 0.08006529842155963, 0.06921999218074248, 0.07931875498246732, 0.0687985347081218, 0.21273702588085697, 0.13614077650520962, 0.14089737322620133, 0.22198782256513871, 0.14428640677088989, 0.2001953138516308, 0.13701901886854007, 0.1159897568991537, 0.1703504654032778, 0.20671155309382827, 0.17169442208450236, 0.16064823840721876, 0.28330334333410334, 0.13006100971079593, 0.22547147316807536, 0.2664623288464347, 0.24472725361833225, 0.16964020390564583, 0.16356836049074608, 0.19353513253247412, 0.1534112548137948, 0.11908743028846402, 0.16495364253224032, 0.15124225392908353, 0.12647755451633724, 0.20042653657129872, 0.06589334591569862, 0.17088328397132513, 0.1706324261190585, 0.19153222831875405, 0.19193195068025848, 0.18253171407864488, 0.16676907909322347, 0.17809878404083634, 0.18402912828892792, 0.18755698582707026, 0.17490134003896696, 9.999999999998899e-05, 0.20730342498066312, 0.18212007543206943, 0.18847292386826942, 0.1652351121136999, 0.1837966938145621, 0.17358027302065837, 0.17419932127297066, 0.10995154584138223, 0.1646552538523519, 0.11514499287607727, 0.5272165110166919, 0.1938912931547666, 0.12892728713449308, 0.0820994361821582, 0.16636501784520297, 0.1480451246849923, 0.2832319745841779, 0.10789843717665848, 0.11841246435127595, 0.11154641812694532, 0.16440008900173375, 0.19415689142648251, 0.1848930229777117, 0.21154186409070308, 0.182125497999717, 0.18172493289626668, 0.2013988325811622, 0.20980380321557968, 0.16363717618169527, 0.18885171651960297, 0.18219760174611832, 0.18613998627255346, 0.1830717757791689, 0.18292591014236226, 0.07274648371966053, 0.08729457747285219, 0.07622249669252201, 0.06816631381985427, 0.07922269063946608, 0.07163298621854397, 0.06944574067014142, 0.04633743790871725, 0.08266481309176199]}, "mutation_prompt": null}
{"id": "8e0d86b9-8754-4464-a14d-6666ee9546fc", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "857620f7-0e1f-4ced-9f3d-28d9eb7035bf", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "0f691d7b-fd6a-4c54-a11d-48d28ef107f7", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "1895103e-52f5-4b2f-9336-f5ad09097d8a", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "4754a146-e88d-49c9-96d2-b5311c47c999", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with a dynamic mutation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12559791665340525, 0.3610066403564488, 0.3659122669880158, 0.15678818598422128, 0.37268556593961444, 0.157297163722262, 0.346057272416746, 0.17819222005599822, 0.17318009420277447, 0.051262159182939304, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130817002901644, 0.011838881333491758, 9.999999999998899e-05, 0.017729750905970287, 0.0022303013750161194, 0.0034853650971464756, 0.10531858966708574, 0.03388633576352551, 0.09409655299021646, 0.062194568193769784, 0.048719445660266314, 0.05771797335842421, 0.07791792809736087, 0.03693543454902937, 0.07277955047316209, 0.06531142264199896, 0.06092676414368492, 0.07336407076371576, 0.09308154293621684, 0.08089954433255375, 0.07481314546463524, 0.04414473641140271, 0.05681322843240744, 0.09121663291281967, 0.9924017001802662, 0.992426133149862, 0.9942711819694382, 0.9887660141487707, 0.9890653437414431, 0.9925401882856445, 0.9929424793693364, 0.9931662040047788, 0.9869820847527305, 0.05797478974416914, 0.05457049667201752, 0.1883198967718217, 0.13533400131673412, 0.13011376950711606, 0.13727991443341103, 0.08162162483907376, 0.08752423770762707, 0.08752460718920685, 0.17183817264966894, 0.17890368018539105, 0.18490159124319017, 0.1877062623157547, 0.18319356463574754, 0.22571895528430153, 0.14719594370153066, 0.13268914138168475, 0.1797400572348924, 0.05655556502525072, 0.05724058839898516, 0.0819652650762337, 9.999999999998899e-05, 0.11969690722631054, 0.09536926937594159, 0.14014253530122844, 0.09150250375400137, 0.13367690290121537, 0.07830699794872853, 0.048919533376327484, 0.0841258923464886, 0.13134779159066035, 0.0027287927318473404, 0.08907805793622159, 0.0970722517373328, 9.999999999998899e-05, 0.08449185769529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017126160498659448, 9.999999999998899e-05, 9.999999999998899e-05, 0.013928275149106994, 0.006442460040869236, 0.02141632074057942, 0.037444880788446766, 9.999999999998899e-05, 0.015748454637025455, 0.05090887219654483, 0.024094410341155115, 0.020431886799967325, 0.004962250138146884, 9.999999999998899e-05, 0.009794261924713332, 0.007566678907526381, 0.00862782198240386, 9.999999999998899e-05, 0.021950972949866032, 0.012859083529554338, 0.00316451499714987, 0.04757852420216713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002765059653535351, 0.00243096429689571, 0.05306042329319538, 0.040945441082270384, 0.0603661065494967, 0.32619112372464487, 0.26310686597569, 0.31733681084971743, 0.20101209568012346, 0.3452709783881871, 0.3509002308051389, 0.3107840527635989, 0.2894057298624142, 0.31975217439458403, 0.05785094341683039, 0.052941666015556055, 0.05830032876202751, 0.0777841772475627, 0.07248478869161556, 0.06527841609371043, 0.056820815871399644, 0.091604025590456, 0.06160684823508478, 0.1390415424092427, 0.19034297279227763, 0.22341612759859186, 0.1480361421582702, 0.17337384080288865, 0.14439014547600126, 0.16782578704549922, 0.1501289222670431, 0.19401892977150548, 0.18307323396800435, 0.17170233771584376, 0.1991497531333014, 0.22261674203611292, 0.1790832109983561, 0.216261338017531, 0.1729006024544104, 0.26766464415072744, 0.1407040972077357, 0.18471830710755865, 0.08289710646307868, 0.11787878401768848, 0.15954001702975673, 0.15992789141477226, 0.13766141439436685, 0.11253509782139515, 0.18318709676401446, 0.0982877004222471, 0.1648437641059387, 0.17222673223821128, 0.1951449270772243, 0.17261098332929414, 0.14487610591114952, 0.1720961944099103, 0.16212703472274737, 0.16735998428690035, 0.1867877900735394, 0.15486192366848484, 0.1857225208590768, 0.1697906785361114, 0.16356346735751015, 0.17507533852358703, 0.17773067332275239, 0.15043300184955333, 0.16230894444726107, 0.1709371307618428, 0.42204899851134514, 0.15520085887050572, 0.12391927438082007, 0.4044399348037948, 0.1889642470459586, 0.11602583477271544, 0.11236429488234867, 0.16846330041334534, 0.1547510186821115, 0.2173198613227436, 0.11162198602236695, 0.16324169956019574, 0.21295754878857187, 0.21227613471845141, 0.19821025890428412, 0.18435268591927, 0.2526406899092676, 0.1967314329586397, 0.18115029475225142, 0.1700766107756848, 0.17196538378836357, 0.1733586577546783, 0.16377427402487488, 0.18237573026674192, 0.16745947128919503, 0.17003028701310563, 0.19919107378741097, 0.0678202840385902, 0.058264007153520314, 0.09827190413759057, 0.06722218864942897, 0.07800218525399127, 0.052630946762501685, 0.06165715850787057, 0.06192179250914798, 0.07694806099695928]}, "mutation_prompt": null}
{"id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 10, "fitness": 0.17137081011995167, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "f0c589fb-0330-4e42-9330-a743fbbce666", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "80d13586-f561-411a-baaa-b9e8098a1d06", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "2736ec28-9829-4cab-a346-887d3d2ce2c0", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "90d43f0f-a5b2-4152-a6ac-71f0c810dbd0", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "313a20f8-5195-44f8-8cd8-1386c2b172c7", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "0ef0cfa8-8eaf-4f74-af17-606ab0dbd703", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                \n                for d in range(self.dim):\n                    velocities[i][d] = inertia_weight * velocities[i][d] + cognitive_component[d] + social_component[d]\n                    swarm[i][d] += velocities[i][d]\n                    swarm[i][d] = np.clip(swarm[i][d], self.lower_bound, self.upper_bound)\n                \n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the algorithm to update velocities based on personal and global best solutions independently for each dimension to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 15, "fitness": 0.17137081011995167, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "b3b9fc83-f1d2-44ee-b27f-5d8c7c60376b", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "21191421-e81b-4a3e-95ac-9d3174312ac1", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "9416bc9d-f8b4-4168-af5b-bc411ac9e1bb", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "84a4b139-d575-4d2e-af53-9bc912bba419", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "2fa872e4-efb9-4874-bd86-9f96e3abe3a1", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "f362ad8e-f661-4b19-a356-92454b663033", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "d69efe9d-a63a-4d08-a20e-34ecf642b0a4", "solution": "import numpy as np\n\nclass DynamicPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 25  # Modified population size for faster exploration\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n            \n            # Dynamic adjustment of population size for enhanced exploration\n            if self.current_evals % 500 == 0 and self.population_size < 50:\n                self.population_size += 5\n        \n        return global_best", "name": "DynamicPSOImproved", "description": "Introducing a dynamic population size adjustment strategy to enhance exploration and exploitation balance, thereby improving convergence speed significantly.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 25 is out of bounds for axis 0 with size 25').", "error": "IndexError('index 25 is out of bounds for axis 0 with size 25')", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {}, "mutation_prompt": null}
{"id": "4f5d69bf-f0ce-4c9a-b81c-35619909baa0", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "6a3cd825-f636-481f-8916-dc7b32b233c3", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "2af6ebd1-77a5-4f5c-b8b6-465c168aab7d", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "828d7c43-22d6-4d01-b375-6497ed261543", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Adjust the cognitive and social weight update rates based on the evaluation progress to enable faster convergence by giving more importance to personal and global best solutions.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.12481607532702677, 0.4839355512988134, 0.5328124120705895, 0.15673193652881423, 0.17738289751481684, 0.15732847305448683, 0.4826194880868012, 0.17755316111418307, 0.17407763311962243, 0.04535593427990714, 9.999999999998899e-05, 0.020435714086415646, 0.14072562659198995, 9.999999999998899e-05, 9.999999999998899e-05, 0.028704884719052304, 0.04020474511139127, 0.011758074960808385, 0.12210931717208695, 0.03731315173008154, 0.10173070688281427, 0.0544334850074496, 0.10645387665953188, 0.06115973090135707, 0.11514600966916844, 0.03932220968692324, 0.13377234177646968, 0.07413054955206788, 0.08122574866353749, 0.0786764245884145, 0.10620477480994361, 0.09555934007274902, 0.0977695433869934, 0.07770107272828752, 0.10593360290760578, 0.07323311204452565, 0.9924013223751392, 0.992425881112819, 0.9942711819694382, 0.9887626039190277, 0.9890625330270569, 0.9925401882856445, 0.9929421223421014, 0.9931662046177508, 0.9878001855812643, 0.057744847243564656, 0.05459744120877641, 0.27469030510785386, 0.13421878506378304, 0.13540029662133146, 0.1374771897369239, 0.08094605127661603, 0.08738625353479434, 0.08712123126679294, 0.17183817264966894, 0.13330985398608775, 0.18530505448656454, 0.17810015636725052, 0.19053558474508703, 0.20106080040469432, 0.2112075369277825, 0.18895266573973202, 0.18654243955297578, 0.059008791205837574, 0.05887253343217502, 0.11540272291117892, 9.999999999998899e-05, 0.1144687408392645, 0.07144662172116845, 0.1462505323679718, 0.12453610014580807, 0.13247259756457808, 0.13988575234705058, 0.051502230100626045, 0.11062928987018239, 0.1312854611023, 0.05506919403373556, 0.11613143123879999, 0.11298420785562613, 9.999999999998899e-05, 0.12303904805024446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729721549757393, 9.999999999998899e-05, 9.999999999998899e-05, 0.019395620778691947, 0.01967823145714065, 0.046718959427819784, 0.016807381607739424, 9.999999999998899e-05, 9.999999999998899e-05, 0.052582060511084494, 0.04347860198909148, 0.02189864193985236, 0.016460508006530317, 9.999999999998899e-05, 0.021345449211318424, 0.031056345037427713, 0.053421291464327836, 0.027916787551015676, 0.03671809885123256, 0.02861165751544792, 0.03197676181358744, 0.05923687356597751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004821893143583611, 0.0034032843052791417, 0.05412984641802143, 0.040616705398163866, 0.05407046561821094, 0.36273523178729516, 0.15208294414630796, 0.36303883574749773, 0.2006964715834918, 0.3962057625848737, 0.39214411524049364, 0.35630281545743836, 0.3769129714818339, 0.4053234676345624, 0.05008418741324494, 0.06270268528069223, 0.04927103225842133, 0.07914033622379468, 0.0641338725587659, 0.08328843761199223, 0.05669663706665684, 0.08807786362784809, 0.07203136520920561, 0.12815907637966917, 0.1384227705537121, 0.14027608357326604, 0.2022613408896441, 0.18685728051971717, 0.2542097705047649, 0.18926152019978393, 0.19498771680525828, 0.19666828634968037, 0.20500512039823215, 0.17856568071664547, 0.1884407418718833, 0.27126735181694095, 0.18951402055302113, 0.27268804599772545, 0.23730337379634459, 0.3262240732538837, 0.1581473784516062, 0.21335489813927344, 0.2301301522445771, 0.1659902193098416, 0.18369157226013344, 0.1686831584549935, 0.16727991919684515, 0.20973486527343, 0.18986521120420685, 0.14173808327700677, 0.184180432185181, 0.18284066121620235, 0.18380985922511717, 0.1701585399291209, 0.14019783220157966, 0.18191719056480427, 0.1904639498774493, 0.15543971690337255, 0.16543203136013895, 0.18620573830164033, 0.35710707713200973, 0.1837186008778433, 0.17546667273606287, 0.17878631978725956, 0.19125183928499168, 0.1669867694716175, 0.16943865719990392, 0.16029250702196263, 0.689291783659171, 0.17183208956355922, 0.15111969714124696, 0.5355794691079923, 0.19798427086589698, 0.121078471225602, 0.10293630911735163, 0.16933079418480923, 0.1532927491932301, 0.3013260581148878, 0.11089049914726978, 0.257959375448536, 0.17975050215299782, 0.16123775915043548, 0.20342868080999976, 0.19214749551971932, 0.21899430624892258, 0.18106805756316868, 0.18292962371336052, 0.22060161611187135, 0.17429375588437457, 0.17816768286432982, 0.19433786964758315, 0.17906735671789809, 0.2056167825102626, 0.1754410376592518, 0.18497015685585316, 0.0791407289276449, 0.07741185751918789, 0.07543431344659024, 0.06470564707943738, 0.06353319468167862, 0.06044908263606341, 0.07158150953833742, 0.06632074902764085, 0.06690008153972571]}, "mutation_prompt": null}
{"id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.18219649857344, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "c83a4ff9-2fc8-478d-bb20-8cc04713004f", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "921be779-410c-4213-ad3b-2bde69c82e5b", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "e430a645-8a71-4d56-b1d2-d5c434c0af22", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "39eba277-02b4-432e-ab0e-5a238c0288c4", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "bc938125-38b3-43ef-8891-13a1f6f06a22", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "c4c53f75-ef10-4948-8b9f-9418f56ad805", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "fef13a1b-7fd3-42e9-957c-8a46bcadaf77", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "96438c11-92ba-48f9-9468-4dc30de32b68", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "7a62af46-4e9b-4103-94ee-574ce4d946b1", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "a170bdc1-c1a6-4818-b7a6-d3d206b37643", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "974c49ee-1a93-4cfd-81f2-0021f5d0629d", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "fa5d3c2b-6c19-4639-860b-82ca9dee10f7", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "88f153af-4d4e-409a-b5dc-253315aa1a13", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "65d366da-390f-4cec-9164-d423819e64e4", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "ee3f30b2-56a1-4b84-bd30-1eb72363b6d1", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "362b215d-fc9c-48a3-a9d3-42e0d511760d", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "bd27d229-a312-4889-b40a-94cd0f3b5808", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n            \n            # Adjust cognitive and social weights dynamically to accelerate convergence speed\n            cognitive_weight = max(0.3, cognitive_weight - 0.01)\n            social_weight = max(0.3, social_weight - 0.01)\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of cognitive and social weights during optimization to accelerate convergence speed.", "configspace": "", "generation": 43, "fitness": 0.18219649857344, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "6d2d12d1-f5b5-4ec9-a382-6f24dde565a9", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "c3606c51-cbd1-494e-9a66-cd09bd2c6ffb", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "0aecab23-b905-4bd7-a69c-d19ee882acac", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "20b4c58d-a476-4719-9359-abaada459e4e", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "3e903ee4-9d27-4ef6-ae9a-503b54842e95", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "106ef1bc-ac7a-40a9-8440-52c5c4ab7e04", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "4e7a060d-d033-4a63-8367-c2a41aa47004", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "2a91eb66-b0e2-4857-b8cc-b835ff3d6a54", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "5f805bc6-7541-47cd-a1b0-3bc559e1829d", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "529ddc1d-7986-4f77-b3e4-4f1e5cdb5914", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "461e3b87-9394-45e8-b8df-a31fae78d92b", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "f373e7e4-27df-4b8e-a1aa-ef871e09db70", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "8e659382-8347-4e9d-b17a-afdca85825c4", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "8cc82ee6-80bc-485a-a5d3-60f1e6c7da84", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "a88cc6f3-41b6-431a-8d3a-9d90f1384c7f", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "aa53e859-7cc3-40c8-924a-198de0af3cb8", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "092cb291-fcae-4da4-86ef-c75f105a912c", "solution": "import numpy as np\n\nclass MultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n            \n            # Introducing a new search strategy in parallel\n            new_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            new_swarm_fitness = np.array([func(individual) for individual in new_swarm])\n            for j in range(self.population_size):\n                if new_swarm_fitness[j] < personal_best_fitness[j]:\n                    personal_best[j] = new_swarm[j].copy()\n                    personal_best_fitness[j] = new_swarm_fitness[j]\n                    \n                if new_swarm_fitness[j] < func(global_best):\n                    global_best = new_swarm[j].copy()\n            \n        return global_best", "name": "MultiStrategyPSO", "description": "Utilizing a multi-strategy optimization approach by incorporating multiple search strategies in parallel to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 60, "fitness": 0.14688091685111995, "feedback": "The algorithm MultiStrategyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.29692692464790493, 0.25818415436744213, 0.25415183641617756, 0.29354274577885375, 0.25948329976357565, 0.27618595200530593, 0.24938634974383078, 0.2289762703287448, 0.2602731411815701, 0.0037544907052422527, 0.01346553646876636, 9.999999999998899e-05, 0.0035199576510016595, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007802301355630537, 0.017707900643841312, 0.006151315556410575, 0.05685357001049329, 0.05025703138296145, 0.0761767958428009, 0.06947969416723443, 0.09196974256571377, 0.05427035721422868, 0.056991579349420673, 0.073077968411986, 0.07384874880231507, 0.048724273674330076, 0.05032807546132767, 0.04750741019620908, 0.05441589175417594, 0.05371432242395746, 0.05126160366966892, 0.06492843642272417, 0.04775157042797595, 0.043009313778814784, 0.9833552411971126, 0.9876037407775043, 0.9888755467008762, 0.9876044517620908, 0.9886817808498012, 0.98864063887966, 0.9901017860418164, 0.9733711522439222, 0.9820889563902385, 0.09048626433668705, 0.08847967303858728, 0.12456736011856095, 0.1359693822195024, 0.11131147125531593, 0.12455299625273453, 0.14320128499528473, 0.13661736923247025, 0.14991146421452473, 0.1537637298209127, 0.14176214118448682, 0.147447599144658, 0.16180044500207968, 0.16142655764415192, 0.21820113809599095, 0.1485320223387322, 0.1172796842486108, 0.14422726954544618, 0.032222049275030584, 0.05051208892781145, 0.07404300529231711, 0.05948991713697083, 0.03819387845283584, 0.03561804738069918, 0.04634984579991419, 0.04623397691960507, 0.07348808862370348, 0.04793882993858245, 0.06928003118962556, 0.06321753493655868, 0.040862488188726065, 0.03696488593227565, 0.04358802284492469, 0.02522648709903974, 0.026105272658514922, 0.05339502775209204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.075083292589876, 0.03476481827045785, 0.054440258758934545, 0.05755774171721828, 0.02302285509950075, 0.029536135123782836, 0.0611231536004867, 0.04596300879440862, 0.038925488795364616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021886134738730245, 0.020576255344378458, 0.0005023678029770773, 0.04012817025171156, 0.02411888561409925, 0.016305301233137115, 0.030937731676737523, 9.999999999998899e-05, 0.03293953333551469, 0.2686111809096421, 0.2699600014996185, 0.24343261330502186, 0.25920653236404756, 0.2844331171425225, 0.2858251721659095, 0.24541696244576372, 0.24602305301491123, 0.24212496024556374, 0.056110415608940145, 0.050048886470042686, 0.06799366001875096, 0.05714997331054239, 0.058235938273595855, 0.0696634725202997, 0.06429980391681567, 0.04888654384907043, 0.061227361910567324, 0.1620810659925237, 0.1299695051290911, 0.13124150622194408, 0.11775486413352687, 0.18610309600809072, 0.19907794824233438, 0.14908753418533438, 0.10744141906939841, 0.12282692680579765, 0.18268439448930307, 0.18337065928348484, 0.2001560745819847, 0.19546883710879281, 0.18086551543664842, 0.16997035379542835, 0.20705694822219833, 0.2383543525310189, 0.20714915475856777, 0.14579875412796706, 0.16469373887110794, 0.12222027452166073, 0.14296793789019246, 0.12440097188255295, 0.12563958044577594, 0.15142012593781495, 0.13706403193304428, 0.13408519156002208, 0.15600286936675745, 0.1587147995709398, 0.15391737720312337, 0.1630479095519669, 0.1658479921172339, 0.1630512080498957, 0.15033811008506404, 0.18299319197811825, 0.17974398012320347, 0.1487444538327689, 0.15825261222968579, 0.14913828826638786, 0.15558024157836026, 0.1692782471503821, 0.16049853518265078, 0.16357594910803452, 0.13940970577430667, 0.16698529651203642, 0.14161176179162083, 0.2045905496088516, 0.16563719092820828, 0.17579577569125848, 0.18594513997153517, 0.15374614811189147, 0.18269782686924074, 0.17055130927459117, 0.1652324863646385, 0.1806045005477387, 0.16219482266084284, 0.1368891906106181, 0.2198324431108607, 0.19796206021940554, 0.17313594018216394, 0.16126589463694507, 0.18930756357659928, 0.1759854210240135, 0.17666381935456266, 0.1909006113978291, 0.17233001497433198, 0.18378920182679204, 0.18742783405909236, 0.18116113860896788, 0.18407103194090546, 0.18387910057526713, 0.20338555429752092, 0.0645332121631702, 0.05215740303987826, 0.059508543675003245, 0.055381494075545934, 0.056455053795897214, 0.05082281105508968, 0.062053867778210536, 0.05723258067161441, 0.04915931197418355]}, "mutation_prompt": null}
{"id": "db38b5c5-46ef-4e8f-a601-eab846592166", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "aba2f3e5-d220-4496-8289-c4663d24dec0", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = self.inertia_weight - (self.inertia_weight - 0.4) * self.current_evals / self.budget\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic adjustment of population size during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.522253374608951, 0.500198005187241, 0.5162910598656131, 0.1898642100059591, 0.5150609452362329, 0.18659129044877498, 0.5608202820680207, 0.5235985775822869, 0.49330005414458034, 0.2065819128259252, 9.999999999998899e-05, 0.015117387834089113, 9.999999999998899e-05, 0.026544045447831177, 0.019920453279300254, 9.999999999998899e-05, 0.22780274318205584, 0.03360400739456859, 0.10292864681383962, 0.09728112469041861, 0.09680072325798961, 0.10371341578070747, 0.12912558319085365, 0.10629427876117081, 0.10129584900627653, 0.11221493614231082, 0.10114733900100581, 0.08571501287894157, 0.09655568113784463, 0.07614073708001579, 0.08734998325925192, 0.09907242117417625, 0.0733624418105866, 0.10965784716494231, 0.10539474394210535, 0.10384259437568288, 0.9913456897800499, 0.9905520945327104, 0.9920942124156868, 0.9916062505041795, 0.9925360858445851, 0.9892978762140662, 0.9924739409030001, 0.9803834923611422, 0.992474820857122, 0.28400846342094754, 0.05729290450082902, 0.28465718181728605, 0.22535772885890615, 0.1342360712898535, 0.15370496832188418, 0.11484616150071503, 0.08635882933988392, 0.08402419488997526, 0.16963950041487075, 0.1928545971731993, 0.2522080016905881, 0.22434167876199618, 0.18117681553346943, 0.1806079258960066, 0.16035187635243697, 0.12447183121576977, 0.1989227627304283, 0.06412678700218588, 0.11889863765130759, 0.10932658769450132, 0.07532259964889831, 0.1059834094878579, 0.07338579274879198, 0.12259202625258425, 0.10561943311945232, 0.09758822076910578, 0.13748651072778661, 0.021320249551356918, 0.12995303646906808, 0.08378816895586783, 0.06567712686692362, 0.11692913998684962, 0.10068844333863347, 9.999999999998899e-05, 0.17350319757580457, 0.007715258728869578, 9.999999999998899e-05, 0.02896204245290357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018576093666521798, 9.999999999998899e-05, 0.02699783489761487, 0.05995153061163527, 0.02753502586660017, 0.012187074948697751, 0.032229259552854495, 9.999999999998899e-05, 0.0003337860114431823, 0.09960771662254642, 0.025667217525340846, 0.017132620952929556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994449815350731, 0.03132748393868423, 9.999999999998899e-05, 0.031217758814262364, 0.027916637047150084, 0.02898809151015791, 0.029599651429384366, 9.999999999998899e-05, 0.04631298890228319, 9.999999999998899e-05, 0.0036183933626594555, 0.10711482887716373, 0.05568749327322298, 0.034111437470858985, 0.05893184520638295, 0.38671618683876363, 0.34926714054948405, 0.3961265558842362, 0.3582777124907315, 0.3937714576306849, 0.20653026125007068, 0.40975699366347285, 0.3939641416994333, 0.3650725823352765, 0.08585805227032028, 0.06289957874658247, 0.0499491857767711, 0.07446828064168909, 0.0825164025646915, 0.10200869526893641, 0.10642381392054545, 0.06094146105420528, 0.06241811143121467, 0.1623112887597714, 0.21695552751085567, 0.14846662069445105, 0.15189346823770333, 0.17503832704253586, 0.13577572902827684, 0.15855601003181874, 0.14238817786281888, 0.2113850090198418, 0.23245269966211002, 0.20589413404297274, 0.24742816316482763, 0.26931975692521426, 0.1842706318263886, 0.26536060238516634, 0.2451432729277968, 0.2905438184066865, 0.2914769923167, 0.1454893943063882, 0.16708571163890595, 0.12363939882772812, 0.20631353683082065, 0.16427386974382718, 0.19682893971066295, 0.1430555835463596, 0.2571027076208552, 0.19414497398566022, 0.17887200385266533, 0.1334420829456462, 0.17976336605839682, 0.1832229862825394, 0.1590924077117184, 0.16544471582966147, 0.24025748436686944, 0.15340580773746681, 0.16928788884048862, 0.1766768932927787, 0.18980961167380606, 0.17721640729439736, 0.18904227523671935, 0.27947124684177815, 0.18065078192982964, 0.18850283462332484, 0.18609797623828928, 0.18524074877523922, 0.16123298029744415, 0.16437831062810382, 0.12399330843562151, 0.5732836547127385, 0.19549647316974028, 0.16146959067648403, 0.09941431566316328, 0.45710768300836513, 0.14184853498342076, 0.11859363262150491, 0.1550712770538767, 0.1491205099525087, 0.10165390081138648, 0.21660088837906977, 0.1841413188748876, 0.1859429587653031, 0.19441804568198517, 0.18363307125501538, 0.1753801581699388, 0.17206808139519159, 0.1700642549986816, 0.19464357659519227, 0.1780745764168976, 0.19150224894224765, 0.18144219191662825, 0.187925892585175, 0.1779664155916003, 0.09833946930640836, 0.06521085834453266, 0.07532787996700241, 0.06525820688752315, 0.05988005923169226, 0.08725283952258289, 0.06375174028219521, 0.07220526205409228, 0.07296744170717806]}, "mutation_prompt": null}
{"id": "89db7bb1-23ab-457e-9f40-494d813abe72", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 63, "fitness": 0.25739974285775047, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "0d73ad0f-600e-4f49-816a-fc626b8a8181", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "dd5a2228-d1c8-4821-b3f0-5ea8c9d81812", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DynamicPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def evaluate_fitness(self, func, swarm):\n        return np.array([func(individual) for individual in swarm])\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = self.evaluate_fitness(func, swarm)\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            with ThreadPoolExecutor() as executor:\n                fitness_values = list(executor.map(func, swarm))\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = fitness_values[i]\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSOImproved", "description": "Implementing a multi-threaded evaluation approach to parallelize fitness evaluations and accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": 0.10030562163270364, "feedback": "The algorithm DynamicPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.15.", "error": "", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.16473044589316865, 0.1042397462714254, 0.2261230925674248, 0.14830346508926973, 0.1469003956235463, 0.15038573738680883, 0.12951303607479026, 0.15131193651390495, 0.14319484946743177, 9.999999999998899e-05, 0.0010000000000000009, 0.00039999999999995595, 0.00039999999999995595, 0.00029999999999996696, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011999999999999789, 0.02096563692908915, 0.03702780138449102, 0.023787525415929323, 0.036502282089633464, 0.0285016318033966, 0.030756797322228357, 0.05680764934114835, 0.04771527580544277, 0.024116823628783646, 0.04246330060355685, 0.02343235610120753, 0.009836717379455018, 0.02736471098833304, 0.014346978094700535, 0.026063714204632604, 0.029281571246494775, 0.02762802224945482, 0.015211239510036334, 0.7885992929578896, 0.8868353173576863, 0.8421318172669618, 0.5952172690850834, 0.307940699323788, 0.6890427514353481, 0.9590150185706826, 0.16819726322563255, 0.9067232999325205, 0.0353453849328913, 0.028905000456180052, 0.04632317385526097, 0.07466579489909653, 0.032677504406987135, 0.05687805449924599, 0.059557456238393924, 0.058260496262807604, 0.10346007287898007, 0.1552933968933463, 0.07937836479910909, 0.07859410397371391, 0.09496176749600604, 0.11425661240000806, 0.08494924115376756, 0.08217865290268977, 0.09196565917898081, 0.06291827643964665, 0.00019999999999997797, 0.006194839274782704, 9.999999999998899e-05, 0.0010999999999999899, 9.999999999998899e-05, 0.0006000000000000449, 0.006783112904924393, 0.00019999999999997797, 0.0010000000000000009, 0.0009000000000000119, 0.0010133431450339847, 0.003144485429645516, 0.00019999999999997797, 0.0006000000000000449, 9.999999999998899e-05, 0.006983883765407928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011999999999999789, 0.00029999999999996696, 0.00019999999999997797, 0.0009000000000000119, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004999999999999449, 0.0013999999999999568, 0.024659010744448095, 0.02223661600035043, 0.07546469772198583, 0.016705065891251758, 0.0124083685503249, 0.00033393408753634723, 0.021591382911135604, 0.02139372904588821, 0.010017548989802671, 0.0007000000000000339, 9.999999999998899e-05, 0.00029999999999996696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029999999999996696, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008000000000000229, 9.999999999998899e-05, 0.0004999999999999449, 9.999999999998899e-05, 0.00019999999999997797, 9.999999999998899e-05, 0.0010157798601899692, 9.999999999998899e-05, 0.00039999999999995595, 0.17503312420678918, 0.18476061041469982, 0.21553242201422418, 0.16308828526090147, 0.1657722127170249, 0.18244429317511746, 0.18944218125126844, 0.15940683700599878, 0.163516366321367, 0.03590864380641068, 0.018650087697646867, 0.022915358913804806, 0.0412474407368123, 0.05802512811700655, 0.046716860148000916, 0.03607853269680561, 0.039752230130029265, 0.036682102268436934, 0.12110113295278602, 0.13679500938824263, 0.1206037969847581, 0.13893038403443347, 0.15780264727818072, 0.13375661576337117, 0.1405254196904956, 0.11572238038995308, 0.14984141884615532, 0.14222968073165443, 0.14005139822886015, 0.13672896438736082, 0.13925262641288771, 0.13262919022171105, 0.15357653991140996, 0.14843778857015588, 0.19878087398546884, 0.14779489439196025, 0.08170829232712218, 0.10677643826582339, 0.09544571210474428, 0.07672202931954075, 0.08346490352724723, 0.08580548228179286, 0.11107234787618614, 0.13498022970839652, 0.07983703417018317, 0.14734176922433673, 0.14978751225653542, 0.16800789436349495, 0.12893986148824332, 0.13978836114555393, 0.1342866359487792, 0.13822439714304058, 0.10988866546393983, 0.1528270793932841, 0.0012999999999999678, 0.10327784495986925, 0.13645061289033877, 0.16065064287431718, 0.15202768181470128, 0.14668045430091314, 0.16668420862369326, 0.13121044812970883, 0.14545674205054349, 0.15863320918268142, 0.12846303176252694, 0.13185438172612918, 0.1370801289889365, 0.1842980177988739, 0.12769390649308354, 0.1317237451035933, 0.12042717820905524, 0.1182561618057345, 0.08805412235469834, 0.1079850894267873, 0.09610671940471038, 0.09963722464137592, 0.07568351141823804, 0.09857759192486537, 0.1599447526088914, 0.15607338972629603, 0.12656086100868957, 0.17426509409755486, 0.18294487008270244, 0.17440396222137677, 0.18249922430458887, 0.17362694630591236, 0.182861545433197, 0.18169324877070192, 0.19772688188778986, 0.18495304197466245, 0.035473556590231436, 0.041990152924734736, 0.043874532385465126, 0.04547285367416609, 0.0331543306067561, 0.04838701611989904, 0.05526392657363577, 0.07173536719816198, 0.031427657091564254]}, "mutation_prompt": null}
{"id": "24f9bfd0-2ff5-4686-a5f5-01de171d00fa", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "0b625c44-2387-4e01-9e23-cc3ddd550aa1", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "429a859b-3bc7-4eb6-b25f-79695053ed6b", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "58c92702-538a-43f1-bbf4-27e0ae354fad", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "b2dc3e9b-3cfd-4f40-8bf4-4b8683ec2498", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "fc71cfc8-0386-4f3f-ad9d-4b2f63fc4a91", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "9a7886bd-78cc-4cf4-a6a8-3dbb6d0c36f9", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                    if fitness < func(global_best):\n                        global_best = swarm[i].copy()\n                        global_best_idx = i\n                        \n            if global_best_idx < self.population_size // 2:\n                self.population_size += 1\n                swarm = np.append(swarm, np.random.uniform(self.lower_bound, self.upper_bound, (1, self.dim)), axis=0)\n                velocities = np.append(velocities, np.zeros((1, self.dim)), axis=0)\n                personal_best = np.append(personal_best, swarm[-1:].copy(), axis=0)\n                personal_best_fitness = np.append(personal_best_fitness, func(swarm[-1:]))\n                \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing dynamic population size adjustment based on the fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 71, "fitness": 0.254986123353265, "feedback": "The algorithm DynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8516365762469691, 0.6728195694934717, 0.7888941086898467, 0.7665176573278154, 0.8023482589854934, 0.780289495998171, 0.9028863502314162, 0.7850877522792522, 0.715677639124098, 0.4318141076057541, 0.03720128249906973, 0.3780826077009618, 0.3562377381414278, 0.04773323599607704, 0.4383530243366258, 0.3580386860770264, 0.38482012108621877, 0.054802976416587046, 0.12059159451822765, 0.16846284203438866, 0.17400607377210486, 0.1229464953097591, 0.14425262386667925, 0.16124235440008738, 0.12179254547982366, 0.11772168227316215, 0.17338817358199743, 0.153733588208796, 0.12539297063816013, 0.12352013319582034, 0.1278614736816429, 0.10123650767408576, 0.10335793206730981, 0.12064452849162044, 0.12272003047964042, 0.14154884313682647, 0.9915279739128781, 0.9902138053857502, 0.9920873991655759, 0.990973360587852, 0.991074105023895, 0.99223260499046, 0.9923842769592349, 0.9796929110087534, 0.9881575578069165, 0.3969713938332615, 0.2769723167341569, 0.3616408966261385, 0.4053380696255975, 0.34102452237495284, 0.31049773402579806, 0.4583531571994538, 0.24293388981603714, 0.2429550057862616, 0.30968854228237463, 0.21223022206757658, 0.25064413005850283, 0.19408349349672605, 0.19627925242080602, 0.20516668917029068, 0.1239533518330147, 0.2910718308496302, 0.1549751503915533, 0.18450524745174035, 0.18588324037876436, 0.3293700012949373, 0.129513622039929, 0.17643704760299372, 0.1337946886170639, 0.2662757575579522, 0.18968681630868567, 0.19785780580175794, 0.13738959527234962, 0.047123965848757, 0.19127327275508355, 0.17600103852463234, 0.15026528649030602, 0.17510947569909108, 0.20654938837235803, 9.999999999998899e-05, 0.2289131435681956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1320275547064963, 0.08678714663806009, 0.09108342787150414, 0.05861279771239969, 0.036623802593297894, 0.04201707480848049, 0.0666766108155703, 0.09763497517073916, 0.06109766275346662, 0.048842440066430015, 9.999999999998899e-05, 0.12688807873956087, 0.07697163731201329, 0.2718219809169976, 0.0743935066923519, 0.1259682980016944, 0.07488428612726472, 0.07101423978209498, 0.0906820273800788, 0.03424931915965812, 0.06478505411705904, 0.006552316096876343, 0.10278993322684493, 0.006692327144293242, 0.08473069403071132, 0.05687169655760338, 0.08526785440746898, 0.4981027812607126, 0.4868584044176193, 0.4860462206396027, 0.49687091789016224, 0.4988086047332505, 0.35494936101774455, 0.5202306913983934, 0.5287275316680582, 0.5118803069649049, 0.06480156997710851, 0.06350366408609076, 0.10138576197686255, 0.10956824150678546, 0.10114431688802017, 0.13890881521067278, 0.1453796095593589, 0.0654513545639267, 0.12777063559445323, 0.2262465167223101, 0.271971809198864, 0.34520239312959333, 0.38740128984734135, 0.196834021696477, 0.17297383950547318, 0.388169752234545, 0.1323161388687022, 0.36488948362968254, 0.23939142533748814, 0.1759927089379706, 0.20890540761480536, 0.274815100629232, 0.22360481894237794, 0.3273382737348539, 0.24598485739860465, 0.4197178919786473, 0.38706327332487567, 0.17415975571978437, 0.1361349682144064, 0.22390451304983827, 0.341178796230893, 0.18141320608817824, 0.2515677456943435, 0.1873819634578665, 0.16924197524679752, 0.21840456017474186, 0.2099042252257921, 0.1783129253571829, 0.19169273902220552, 0.20250202597130573, 0.2650586896461916, 0.2023652463957214, 0.19127630180696475, 0.21880624145227734, 0.22818143999860818, 0.21415341891615458, 0.22067771401762204, 0.19366999538727458, 0.2191500691972944, 0.22686611830133374, 0.19609459421015296, 0.21979599292970753, 0.22565444777177135, 0.4201296786171138, 0.5464243712708621, 0.16683496151742272, 0.15469913931034784, 0.16579609814236318, 0.2003362678931797, 0.8910673424798703, 0.12647364048349974, 0.1703531177831712, 0.15808618280951836, 0.35674223300702257, 0.16928893270656442, 0.12595155288105686, 0.3734683223664367, 0.6363125101940272, 0.2063832086071561, 0.10474639980864109, 0.16747972462424077, 0.544292165230265, 0.1901695771989177, 0.19393719656352582, 0.20951510090274572, 0.19032955871509571, 0.21542814745562777, 0.211352857982405, 0.18244899468529252, 0.20082907181644427, 0.228933070792549, 0.08656391521989426, 0.08423545512112285, 0.08333816487238654, 0.07938256988856485, 0.09382131764332535, 0.06982609874073664, 0.08176587512354838, 0.0874869217524763, 0.08221407763435584]}, "mutation_prompt": null}
{"id": "68735e71-9b52-4868-9e41-d9fe514e2778", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 18 if dim <= 10 else 17  # Adjust population size dynamically (35.6% reduction)\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0", "name": "DynamicPSO", "description": "Adjust the population size dynamically based on the current evaluation count to potentially improve search exploration and convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'DynamicPSO' object is not callable\").", "error": "TypeError(\"'DynamicPSO' object is not callable\")", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {}, "mutation_prompt": null}
{"id": "6db75cbe-33c1-43eb-b80c-4e8fb1179815", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "b8c36a5d-d67e-4593-8931-2bcb7e1a786c", "solution": "class DynamicAdjustPSO(DynamicPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        self.population_size = 23 if dim <= 10 else 22  # Dynamic population size adjustment during optimization\n        return super().__call__(func)", "name": "DynamicAdjustPSO", "description": "Introducing a dynamic adjustment of population size during optimization to improve convergence speed.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'dim' is not defined\").", "error": "NameError(\"name 'dim' is not defined\")", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {}, "mutation_prompt": null}
{"id": "260c8aab-b6e2-4d95-9a81-65f951ea2a97", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "9319762e-b255-4c53-a411-952915b7a069", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "738190db-6ceb-48a9-9e9f-4d5539ee5c87", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "a59bd2d9-cfa6-451d-a2c2-4af49fbf1312", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "6e7e2f84-4b08-48da-912a-f1bd693ff1b9", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
{"id": "1904bd85-dc8a-4967-b5bf-4263bf926b93", "solution": "class DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 21 if dim <= 10 else 20  # Adjust population size dynamically\n        self.inertia_weight = 0.9\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = swarm.copy()\n        personal_best_fitness = np.array([func(individual) for individual in swarm])\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best = swarm[global_best_idx].copy()\n        \n        while self.current_evals < self.budget:\n            inertia_weight = 0.9 - (0.9 - 0.4) * np.exp(-5 * self.current_evals / self.budget)  # Adaptive inertia weight update\n            cognitive_weight = self.cognitive_weight - (self.cognitive_weight - 0.5) * self.current_evals / self.budget\n            social_weight = self.social_weight - (self.social_weight - 0.5) * self.current_evals / self.budget\n            \n            for i in range(self.population_size):\n                cognitive_component = cognitive_weight * np.random.rand(self.dim) * (personal_best[i] - swarm[i])\n                social_component = social_weight * np.random.rand(self.dim) * (global_best - swarm[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                fitness = func(swarm[i])\n                self.current_evals += 1\n                \n                if fitness < personal_best_fitness[i]:\n                    personal_best[i] = swarm[i].copy()\n                    personal_best_fitness[i] = fitness\n                    \n                if fitness < func(global_best):\n                    global_best = swarm[i].copy()\n                    \n            global_best_idx = np.argmin(personal_best_fitness)\n            global_best = personal_best[global_best_idx].copy()\n        \n        return global_best", "name": "DynamicPSO", "description": "Introducing an adaptive inertia weight update strategy based on the evolution of the global best solution to accelerate convergence speed.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89db7bb1-23ab-457e-9f40-494d813abe72", "metadata": {"aucs": [0.8548693406543286, 0.8522073220219633, 0.8805527401995414, 0.81860872429512, 0.8819941190449753, 0.8870257053100523, 0.8511973323838585, 0.869519111642806, 0.8936590436702733, 0.6085059859072867, 9.999999999998899e-05, 0.6281101211487876, 9.999999999998899e-05, 0.6016858671900509, 0.44411459298422373, 0.5876027593711968, 0.6387520163621747, 0.6705561431978561, 0.16080522989541168, 0.16802173410549348, 0.13773634959975878, 0.12412166333807217, 0.14909650532644225, 0.1457764163862163, 0.13653888433918004, 0.13427012243839576, 0.33129471171457836, 0.12455677015984312, 0.048151630212721286, 0.10923260549983538, 0.2904262130702272, 0.12264342655421856, 0.12488140606931009, 0.14330873383347575, 0.11168847611835686, 0.10244943128902229, 0.991340465798288, 0.9901174071710157, 0.9920873991655759, 0.990973360587852, 0.9909787836946398, 0.9919462717013081, 0.9909952913775449, 0.9787914592373151, 0.9878712903662727, 0.46031325129127565, 0.42891089163998153, 0.44817125599265883, 0.37366386982032174, 0.15206907217831955, 0.15374765743876817, 0.525011074648789, 0.08940308166816302, 0.08866829296400247, 0.2410690641763602, 0.19693258384965806, 0.17077715282166095, 0.19327452918668642, 0.1946192438579123, 0.206023733358061, 0.20881800795462901, 0.19479679319477172, 0.2084476418523018, 0.3068255951615675, 0.2382557930477568, 0.21337798735119773, 0.2688867250624918, 0.17697363841042657, 0.09596951802201059, 0.17355097233599825, 0.1840724647924239, 0.18061083307844727, 0.2029583182799335, 0.053335031598993, 0.2117569457290287, 0.2018178549722799, 0.10956203505116047, 0.23954879303384546, 0.24027545925079496, 9.999999999998899e-05, 0.21006709952920566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019247738742811382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11296872845262806, 0.033228996389215504, 0.08515422693487507, 0.04845247302021671, 0.02198556554536224, 0.01310104623988595, 0.05276237391429894, 0.09947907047862259, 0.030777039249988425, 0.047217934427475794, 0.06150863604434087, 0.03263899981572027, 0.09127675040317795, 0.24736710053068411, 9.999999999998899e-05, 0.15149931221170554, 0.07094259904131339, 0.07805973602539473, 0.04268956924205192, 9.999999999998899e-05, 0.1585905176438882, 0.006501770824838049, 0.03773062013669459, 0.006655828727365587, 0.08310313156468851, 0.04613672940632363, 0.08375630918882726, 0.539982150966421, 0.482635628550556, 0.5253348570423225, 0.5508301545061696, 0.5025766595898584, 0.4991401951897987, 0.5256706669649709, 0.535181048507091, 0.532864151673425, 0.07603186077680169, 0.07572384917542963, 0.08130085506549845, 0.09901628174073207, 0.10126460988972397, 0.10600731646315631, 0.1420606851524877, 0.06514723298531466, 0.09905442132637332, 0.4131833831831755, 0.18698422701427908, 0.2480058912680383, 0.20050494899947058, 0.24704379355482597, 0.2321307013869771, 0.4264840570380104, 0.17723993244635916, 0.158308122585487, 0.22254898065820783, 0.17027574145542856, 0.34390955129119705, 0.32884304684849774, 0.22991118014758327, 0.3306124517793567, 0.24639367693135306, 0.29942273843962386, 0.3960901867642532, 0.17205654503405732, 0.11773067739626497, 0.21229396584358629, 0.22536107531862992, 0.2045794006693954, 0.297304846671951, 0.2195845669871117, 0.3477635479888843, 0.20461350163402492, 0.19611445589251209, 0.13327091847470762, 0.18486099702125158, 0.19871456170930568, 0.19975067015810666, 0.21184600571589263, 0.1788292371108844, 0.1994624423484035, 0.18547029523144698, 0.20869669181662565, 0.1787056736156677, 0.19201539997543582, 0.2402984219943659, 0.18329363709216273, 0.24685670661634918, 0.23612926631206266, 0.21629093417431855, 0.23056737893529988, 0.8065396525412777, 0.1495928322975164, 0.15439214866722872, 0.16496124851738891, 0.1998448088304815, 0.16933138743866694, 0.1263145046129417, 0.17005376229248126, 0.16504023062562734, 0.1212543863441835, 0.16888722515943322, 0.12431827651758687, 0.4464335021029865, 0.16869511853457864, 0.18890026943763982, 0.10347319554672907, 0.09393077969568553, 0.5042135139997361, 0.17204504392579545, 0.1862518528427417, 0.18208154759790218, 0.1738103570216839, 0.16897784491637813, 0.21295858193751138, 0.18634003859358417, 0.199838949713257, 0.21593331982562003, 0.0959648730915742, 0.05541513650875263, 0.07604281358535314, 0.07502122437363845, 0.08817781802912794, 0.09285805360872468, 0.08217462209391901, 0.0809861353347382, 0.08040957213091282]}, "mutation_prompt": null}
